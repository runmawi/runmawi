<?php

namespace App\Http\Controllers;
use DB;
use URL;
use Auth;
use File;
use Hash;
use Mail;
use View;
use Image;
use Nexmo;
use CPANEL;
use Session;
use App\Menu;
use Paystack;
use Validator;
use App\Deploy;
use App\Channel;
use App\AdsEvent;
use App\AdsVideo;
use App\TimeZone;
use App\UGCVideo;
use App\Currency ;
use App\Document ;
use App\MobileApp;
use App\SiteTheme;
use Stripe\Stripe;
use App\BlockAudio;
use App\BlockVideo;
use App\Geofencing;
use App\MyPlaylist;
use App\Tag as Tag;
use App\WebComment;
use App\HomeSetting;
use App\SeriesGenre;
use App\TVLoginCode;
use App\Videoartist;
use App\Adsvariables;
use App\Cast as Cast;
use App\CategoryLive;
use App\City as City;
use App\LiveLanguage;
use App\LoggedDevice;
use App\Multiprofile;
use App\Page as Page;
use App\Plan as Plan;
use App\Seriesartist;
use App\Test as Test;
use Razorpay\Api\Api;
use \App\User as User;
use App\AdminVideoAds;
use App\Advertisement;
use App\CategoryAudio;
use App\CategoryVideo;
use App\EmailTemplate;
use App\InappPurchase;
use App\LanguageVideo;
use App\M3UFileParser;
use App\SeriesNetwork;
use App\SystemSetting;
use App\TvSearchData ;
use App\VideoPlaylist;
use App\WelcomeScreen;
use App\Audio as Audio;
use App\DocumentGenre ;
use App\MobileSideMenu;
use App\ModeratorsUser;
use App\PlayerAnalytic;
use App\SeriesCategory;
use App\SeriesLanguage;
use App\State as State;
use App\StorageSetting;
use App\TVSplashScreen;
use App\Video as Video;
use App\CurrencySetting;
use App\VideoCommission;
use App\Artist as Artist;
use App\Coupon as Coupon;
use App\OrderHomeSetting;
use App\Series as Series;
use App\Slider as Slider;
use App\SubscriptionPlan;
use App\ThumbnailSetting;
use \Redirect as Redirect;
use App\AdvertisementView;
use App\AudioUserPlaylist;
use App\MobileHomeSetting;
use App\AdminVideoPlaylist;
use App\Comment as Comment;
use App\Country as Country;
use App\Episode as Episode;
use App\Setting as Setting;
use Illuminate\Support\Str;
use Carbon\Carbon as Carbon;
use Illuminate\Http\Request;
use App\AdminOTPCredentials ;
use App\Favorite as Favorite;
use App\Language as Language;
use App\Playerui as Playerui;
use App\PpvVideo as PpvVideo;
use App\Subtitle as Subtitle;
use App\Wishlist as Wishlist;
use FFMpeg\Format\Video\X264;
use App\Users_Interest_Genres;
use App\TVSetting as TVSetting;
use FFMpeg\Coordinate\TimeCode;
use App\Paystack_Andriod_UserId;
use App\UserChannelSubscription;
use FFMpeg\Coordinate\Dimension;
use App\LiveStream as LiveStream;
use App\PaypalPlan as PaypalPlan;
use App\RecentView as RecentView;
use App\ReSchedule as ReSchedule;
use App\Watchlater as Watchlater;
use App\AudioAlbums as AudioAlbums;
use App\Audioartist as Audioartist;
use App\LikeDislike as Likedislike;
use App\PartnerMonetizationSetting;
use App\PpvCategory as PpvCategory;
use App\PpvPurchase as PpvPurchase;
use Illuminate\Support\Facades\Http;
use App\LiveCategory as LiveCategory;
use App\LivePurchase as LivePurchase;
use App\MobileSlider as MobileSlider;
use App\MusicStation as MusicStation;
use App\SeriesSeason as SeriesSeason;
use App\Subscription as Subscription;
use App\VerifyNumber as VerifyNumber;
use Illuminate\Support\Facades\Cache;
use App\Jobs\ConvertVideoForStreaming;
use FFMpeg\Filters\Video\VideoFilters;
use App\AudioCategory as AudioCategory;
use App\VideoCategory as VideoCategory;
use App\Http\Requests\StoreVideoRequest;
use App\CouponPurchase as CouponPurchase;
use App\PaymentSetting as PaymentSetting;
use App\ScheduleVideos as ScheduleVideos;
use App\VideoSchedules as VideoSchedules;
use App\VideosSubtitle as VideosSubtitle;
use App\AdminEPGChannel as AdminEPGChannel;
use App\MoviesSubtitles as MoviesSubtitles;
use App\UserTranslation as UserTranslation;
use App\VideoResolution as VideoResolution;
use Victorybiz\GeoIPLocation\GeoIPLocation;
use App\ContinueWatching as ContinueWatching;
use App\UserMusicStation as UserMusicStation;
use Illuminate\Contracts\Filesystem\Filesystem;
use Illuminate\Pagination\LengthAwarePaginator;
use App\TranslationLanguage as TranslationLanguage;
use App\ChannelVideoScheduler as ChannelVideoScheduler;
use Unicodeveloper\Paystack\Exceptions\IsNullException;
use ProtoneMedia\LaravelFFMpeg\Support\FFMpeg as FFMpeg;
use AmrShawky\LaravelCurrency\Currency as LaravelCurrency;
use ProtoneMedia\LaravelFFMpeg\Support\FFProbe as FFProbe;
use Unicodeveloper\Paystack\Exceptions\PaymentVerificationFailedException;
use App\RokuHomeSetting;
use App\OTPLog;

class ApiAuthController extends Controller
{

  public function __construct()
  {
      $PaymentSetting = PaymentSetting::where('payment_type','Razorpay')->first();

      if($PaymentSetting != null){
          if($PaymentSetting->live_mode == 0){
              $this->razorpaykeyId = $PaymentSetting->test_publishable_key;
              $this->razorpaykeysecret = $PaymentSetting->test_secret_key;
          }else{
              $this->razorpaykeyId = $PaymentSetting->live_publishable_key;
              $this->razorpaykeysecret = $PaymentSetting->live_secret_key;
          }
      }

          // Paystack

        $this->customer_create_api_url = "https://api.paystack.co/customer";
        $this->Subscription_create_api_url = "https://api.paystack.co/transaction/initialize";
        $this->Subscription_cancel_api_url = "https://api.paystack.co/subscription/disable";


        $PaymentSetting = PaymentSetting::where('payment_type','Paystack')->first();

        if( $PaymentSetting != null ){

            if( $PaymentSetting->paystack_live_mode == 0 ){

                $this->paystack_keyId = getenv('PAYSTACK_PUBLIC_KEY');
                $this->paystack_keysecret =   getenv('PAYSTACK_SECRET_KEY') ;

            }else{

                $this->paystack_keyId = getenv('PAYSTACK_PUBLIC_KEY');
                $this->paystack_keysecret =   getenv('PAYSTACK_SECRET_KEY') ;
            }

            $this->SecretKey_array =  array(
                "Authorization: Bearer $this->paystack_keysecret",
                "Cache-Control: no-cache",
            );
        }else{
            $response = array(
              "status"  => 'false' ,
              "message" => "Paystack Key Missing",
            );
        }

      //Adveristment plays 24hrs 
        $this->adveristment_plays_24hrs = Setting::pluck('ads_play_unlimited_period')->first();

      // pagination
        $this->settings = Setting::first();
        $this->settings->videos_per_page;

      // Gobal PPV Price   
        $PPV_settings = Setting::where('ppv_status', '=', 1)->first();
        $this->ppv_gobal_price = !empty($PPV_settings) ? $PPV_settings->ppv_price : null;
        
        $this->getfeching = Geofencing::first();
        $this->videos_expiry_date_status = videos_expiry_date_status();

        $this->Theme = HomeSetting::pluck('theme_choosen')->first();

        $this->BunnyCDNEnable = StorageSetting::pluck('bunny_cdn_storage')->first();

        $this->BaseURL = $this->BunnyCDNEnable == 1 ? StorageSetting::pluck('bunny_cdn_base_url')->first() : URL::to('public/uploads') ;

        $this->default_vertical_image_url = default_vertical_image_url();
        $this->default_horizontal_image_url = default_horizontal_image_url();

        $this->current_timezone = Setting::pluck('default_time_zone')->first();


  }

  public function signup(Request $request)
  {    
    try { 
          // Validation 
          
        $validator = Validator::make($request->all(), [
          'email' => 'required|email|unique:users,email',  
        ], [
            'email.required'    => 'Please enter your email address.',
            'email.email'       => 'The email must be a valid email address.',
        ]);
        
        if ($validator->fails()) {

          return response()->json([
              'status' => 'false',
              'message'=> $validator->errors()->first(),
            ], 400);
        }
        
        $input = $request->all();
        
        $user_data = array( 'username' => $request->get('username'),
                            'email' => $request->get('email'),
                            'password' => $request->get('password'),
                            'ccode' => $request->get('ccode'),
                            'mobile' => $request->get('mobile') 
                          );

        $stripe_plan = SubscriptionPlan();

        $settings = Setting::first();

        $user_data['ccode'] = isset($input['ccode']) && !empty($input['ccode']) ?  $input['ccode'] : " ";
        $user_data['mobile'] = isset($input['mobile']) && !empty($input['mobile']) ? $input['mobile'] : " " ;
        $skip = isset($input['skip']) ? $input['skip'] : 0 ;
        
            // Reference code

        if (!empty($input['referrer_code'])){
          $referrer_code = $input['referrer_code'];
        }

        if ( isset($referrer_code) && !empty($referrer_code) ) {
              $referred_user = User::where('referral_token','=',$referrer_code)->first();
              $referred_user_id = $referred_user->id;
        } else {
              $referred_user_id =null;
        }

            // Token Generate

        $length = 10;
        $pool = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $ref_token = substr(str_shuffle(str_repeat($pool, 5)), 0, $length);
        $token = substr(str_shuffle(str_repeat($pool, 5)), 0, $length);

        $user_data['token'] =  !empty($request->token) ? $request->token : null ;

            // Avatar Upload

        $path = URL::to('public/uploads/avatars');
        $logo = $request->file('avatar');
        $avatar = 'default.png';

        if(!is_null($logo)){

          $file_old = $path.$logo;

          if (file_exists($file_old)){
            unlink($file_old);
          }
          
          $avatar  = $logo->getClientOriginalName();
          $file->move(public_path()."/uploads/avatars/", $logo->getClientOriginalName());
        }

        // Activation code

        $user_data['role'] = 'registered';
        $user_data['active'] = 1;
        $user_data['activation_code'] = null;
        
        if (!$settings->free_registration && $skip == 0) {
          // 
        } 

        if ($settings->activation_email) {
            $user_data['activation_code'] = Str::padLeft(mt_rand(0, 999999), 6, '0');
            $user_data['active'] = 0;
        }

        // Stripe plan
        if (isset($input['subscrip_plan'])) {
            $plan = $input['subscrip_plan'];
        }

        $user = User::where('email', $request->get('email'))->first();
        $username = User::where('username', $request->get('username'))->where('username', '!=', null)->first();

        $user = new User($user_data);
        $user->ccode = $user_data['ccode'];
        $user->mobile = $user_data['mobile'];
        $user->avatar = $avatar;
        $user->password = Hash::make($request->get('password'));
        $user->referrer_id = $referred_user_id;
        $user->token = $user_data['token'];
        $user->activation_code = $user_data['activation_code'];
        $user->referral_token = $ref_token;
        $user->country = $request->country;
        $user->state = $request->state;
        $user->city = $request->city;
        $user->DOB = $request->dob;
        $user->support_username = $request->support_username;
        $user->active = $user_data['active'];
        $user->save();

        $userdata = User::where('email', $request->get('email'))->first();
        $userid = $userdata->id;

        // welcome Email
                                  
               try {

                $data = array(
                    'email_subject' =>  EmailTemplate::where('id',1)->pluck('heading')->first() ,
                );

                Mail::send('emails.welcome', array(
                    'username' => $userdata->username,
                    'website_name' => GetWebsiteName(),
                    'useremail' => $userdata->email,
                    'password' => $request->password,
                    'url' => URL::to('/'),
                  ), 
                function($message) use ($data,$request,$userdata) {
                    $message->from(AdminMail(),GetWebsiteName());
                    $message->to($userdata->email, $userdata->username)->subject($data['email_subject']);
                });

                $email_log      = 'Mail Sent Successfully from Welcome E-Mail';
                $email_template = "1";
                $user_id = $userid;

                Email_sent_log($user_id,$email_log,$email_template);

              }catch (\Exception $e) {

                $email_log      = $e->getMessage();
                $email_template = "1";
                $user_id = $userid;

                Email_notsent_log($user_id,$email_log,$email_template);

            }
            
            send_password_notification('Notification From '.GetWebsiteName() ,'Your Account  has been Created Successfully','Your Account  has been Created Successfully','',$userid);


        $userid = !empty($userdata) ?  $user->id : " ";

    try {
      
      // if($settings->free_registration == 0 && $settings->activation_email == 1){

      if($settings->activation_email == 1){

                // verify email
                
        $Mail_activation_code = $this->Mail_activation_code($userdata,$user_data['activation_code']);

        return response()->json([
          'status' => $Mail_activation_code['status'],
          'message' => $Mail_activation_code['status_code'] == 200 ? "User Register & Activation Mail sent Successfully" : $Mail_activation_code['message'],
          'user_data' => $user ,
        ], $Mail_activation_code['status_code']);
        
      }
      else {
        if(!$settings->free_registration  && $skip == 0){

            $paymentMode = $request->payment_mode;

                        // Razorpay Payment  

            if($paymentMode == "Razorpay"){                               

              try{
                $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
                $countryName = $geoip->getCountry();
                $regionName = $geoip->getregion();
                $cityName = $geoip->getcity();

                                                                                  // Store the Razorpay subscription detials
                $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);
                $subscription = $api->subscription->fetch($request->razorpay_subscription_id);
                $plan_id      = $api->plan->fetch($subscription['plan_id']);
                  
                $Sub_Startday  = Carbon::createFromTimestamp($subscription['current_start'])->toDateTimeString(); 
                $Sub_Endday    = Carbon::createFromTimestamp($subscription['current_end'])->toDateTimeString(); 
                $trial_ends_at = Carbon::createFromTimestamp($subscription['current_end'])->toDateTimeString(); 

                  Subscription::create([
                    'user_id'        =>  $userid,
                    'name'           =>  $plan_id['item']->name,
                    'price'          =>  $plan_id['item']->amount / 100,   // Amount Paise to Rupees
                    'stripe_id'      =>  $subscription['id'],
                    'stripe_status'  =>  $subscription['status'],
                    'stripe_plan'    =>  $subscription['plan_id'],
                    'quantity'       =>  $subscription['quantity'],
                    'countryname'    =>  Country_name(),
                    'regionname'     =>  Region_name(),
                    'cityname'       =>  city_name(),
                    'PaymentGateway' =>  'Razorpay',
                    'trial_ends_at'  =>  $trial_ends_at,
                    'ends_at'        =>  $trial_ends_at,
                  ]);

                User::where('id',$userid)->update([
                    'role'                  =>  'subscriber',
                    'stripe_id'             =>  $subscription['id'] ,
                    'subscription_start'    =>  $Sub_Startday,
                    'subscription_ends_at'  =>  $Sub_Endday,
                    'payment_gateway'       =>  'Razorpay',
                    'payment_status'       => !empty($request->device_type) && $request->device_type == 'android' ? 'Razorpay' : 'Inapp',
                ]);

                  return $response = array('status'=>'true',
                  'message' => 'Registered Successfully.');
              }
              catch (\Exception $e){
                return response()->json([
                  'status'  => 'false',
                  'Message' => 'Error,While Storing the data on Serve Error'], 200);
                }

            }
                        // Paystack Payment

            elseif( $paymentMode == "Paystack" ){                       

              try {
                  
                $paystack_subscription_id = $request->paystack_subscription_id ;

                    // Verify Subscription API

                $curl = curl_init();
          
                curl_setopt_array($curl, array(
                    CURLOPT_URL => "https://api.paystack.co/subscription/".$paystack_subscription_id,
                    CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => "",  CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 30, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                    CURLOPT_CUSTOMREQUEST => "GET", CURLOPT_HTTPHEADER => $this->SecretKey_array,
                ));

                $subscription_respond = curl_exec($curl);
                $subscription_error = curl_error($curl);
                curl_close($curl);

                $verify_subscription = $subscription_error ?  json_decode($subscription_respond, true) : json_decode($subscription_respond, true) ;

                    // Verify Payments Status (false)

                if( $verify_subscription['status'] == false ){

                    $response = array(
                        'status'=>'false',
                        'message'=> $verify_subscription['message'] ,
                    );  

                    return response()->json($response, 200);
                }

                    // Subscription Details

                $subcription_details = Paystack::fetchSubscription($paystack_subscription_id) ;

                $Sub_Startday  = Carbon::parse($subcription_details['data']['createdAt'])->setTimezone('UTC')->format('d/m/Y H:i:s'); 
                $Sub_Endday    = Carbon::parse($subcription_details['data']['next_payment_date'] )->setTimezone('UTC')->format('d/m/Y H:i:s'); 
                $trial_ends_at = Carbon::parse($subcription_details['data']['next_payment_date'] )->setTimezone('UTC')->toDateTimeString(); 

                    // Subscription Details - Storing

                Subscription::create([
                    'user_id'        =>  $userid,
                    'name'           =>  $subcription_details['data']['plan']['name'],
                    'price'          =>  $subcription_details['data']['amount'] ,   // Amount Paise to Rupees
                    'stripe_id'      =>  $subcription_details['data']['subscription_code'] ,
                    'stripe_status'  =>  $subcription_details['data']['status'] ,
                    'stripe_plan'    =>  $subcription_details['data']['plan']['plan_code'],
                    'quantity'       =>  null,
                    'countryname'    =>  Country_name(),
                    'regionname'     =>  Region_name(),
                    'cityname'       =>  city_name(),
                    'PaymentGateway' =>  'Paystack',
                    'trial_ends_at'  =>  $trial_ends_at,
                    'ends_at'        =>  $trial_ends_at,
                ]);

                User::where('id',$userid)->update([
                    'role'            =>  'subscriber',
                    'stripe_id'       =>  $subcription_details['data']['subscription_code'] ,
                    'subscription_start'    =>  $Sub_Startday,
                    'subscription_ends_at'  =>  $Sub_Endday,
                    'payment_gateway'       =>  'Paystack',
                    'payment_status'       => !empty($request->device_type) && $request->device_type == 'android' ? 'Paystack' : 'Inapp',
                ]);

                return $response = array('status'=>'true', 'message' => 'Registered Successfully.');
                
              } catch (\Throwable $th) {

                $response = array(
                  'status'=>'false',
                  'message'=> $th->getMessage() ,
                );  

                return response()->json($response, 200);

              }

            }
                        // CinetPay Payment

            elseif( $paymentMode == "CinetPay" ){                       
              
              try {
                           
                $email = User::where('email',$request->email)->pluck('email')->first();
                $user_id = User::where('email',$request->email)->pluck('id')->first();

                $plandetail = SubscriptionPlan::where('plan_id',$request->plan_id)->first();
                $current_date = date('Y-m-d h:i:s');    
                $next_date = $plandetail->days;
                $ends_at = Carbon::now()->addDays($plandetail->days);

                    Subscription::create([
                      'user_id'        =>  $user_id,
                      'name'           =>  $request->username,
                      'price'          =>  $plandetail->price ,   // Amount Paise to Rupees
                      'stripe_id'      =>  $request->plan_id ,
                      'stripe_status'  =>  'active' ,
                      'stripe_plan'    =>  $request->plan_id,
                      'quantity'       =>  null,
                      'countryname'    =>  $request->country,
                      'regionname'     =>  $request->state,
                      'cityname'       =>  $request->city,
                      'PaymentGateway' =>  'CinetPay',
                      'trial_ends_at'  =>  $ends_at,
                      'ends_at'        =>  $ends_at,
                  ]);

                  User::where('id',$request->user_id)->update([
                      'role'                 =>  'subscriber',
                      'stripe_id'            =>  $request->plan_id ,
                      'subscription_start'   =>  Carbon::now(),
                      'subscription_ends_at' =>  $ends_at,
                      'payment_gateway'      =>  'CinetPay',
                      'payment_status'       => !empty($request->device_type) && $request->device_type == 'android' ? 'CinetPay' : 'Inapp',
                    ]);

                return $response = array('status'=>'true', 'message' => 'Registered Successfully.');
                
              } catch (\Throwable $th) {

                $response = array(
                  'status'=>'false',
                  'message'=> $th->getMessage() ,
                );  

                return response()->json($response, 200);

              }

            }
                        // PayPal Payment

            elseif( $paymentMode == "PayPal" ){                         
              
              try {
                           
                $email = User::where('email',$request->email)->pluck('email')->first();
                $user_id = User::where('email',$request->email)->pluck('id')->first();

                $plandetail = SubscriptionPlan::where('plan_id',$request->plan_id)->first();
                $current_date = date('Y-m-d h:i:s');    
                $next_date = $plandetail->days;
                $ends_at = Carbon::now()->addDays($plandetail->days);

                    Subscription::create([
                      'user_id'        =>  $user_id,
                      'name'           =>  $request->username,
                      'price'          =>  $plandetail->price ,   // Amount Paise to Rupees
                      'stripe_id'      =>  $request->plan_id ,
                      'stripe_status'  =>  'active' ,
                      'stripe_plan'    =>  $request->plan_id,
                      'quantity'       =>  null,
                      'countryname'    =>  $request->country,
                      'regionname'     =>  $request->state,
                      'cityname'       =>  $request->city,
                      'PaymentGateway' =>  'PayPal',
                      'trial_ends_at'  =>  $ends_at,
                      'ends_at'        =>  $ends_at,
                  ]);

                  User::where('id',$request->user_id)->update([
                      'role'                 =>  'subscriber',
                      'stripe_id'            =>  $request->plan_id ,
                      'subscription_start'   =>  Carbon::now(),
                      'subscription_ends_at' =>  $ends_at,
                      'payment_gateway'      =>  'PayPal',
                      'payment_status'       => !empty($request->device_type) && $request->device_type == 'android' ? 'PayPal' : 'Inapp',
                  ]);

                return $response = array('status'=>'true', 'message' => 'Registered Successfully.');
                
              } catch (\Throwable $th) {

                $response = array(
                  'status'=>'false',
                  'message'=> $th->getMessage() ,
                );  

                return response()->json($response, 200);

              }

            }
                      
          // Stripe Payment
            elseif( $paymentMode == "stripe"  ){

              try {

                  $stripe = new \Stripe\StripeClient(
                    env('STRIPE_SECRET')
                  );

                  $paymentMethod = $request->get('py_id');
                  $plan          = $request->get('plan');
                  $apply_coupon  = $request->get('coupon_code') ?  $request->get('coupon_code') : null ;
      
                  $user_id      = $userid;
                  $user         = User::where('id',$user_id)->first();
      
                  $product_id =  $stripe->plans->retrieve($plan)->product;

                  if( subscription_trails_status() == 1 ){
                    
                      $subscription_details = $user->newSubscription( $product_id, $plan )->trialUntil( subscription_trails_day() )->withCoupon($apply_coupon)->create( $paymentMethod );
      
                  }else{
      
                      $subscription_details = $user->newSubscription( $product_id, $plan )->withCoupon($apply_coupon)->create( $paymentMethod );
                  }

                    // Retrieve Subscriptions
                  $subscription = $stripe->subscriptions->retrieve( $subscription_details->stripe_id );
                  
                  if( subscription_trails_status() == 1 ){
      
                    $subscription_days_count = $subscription['plan']['interval_count'];
            
                    switch ($subscription['plan']['interval']) {
          
                      case 'day':
                        break;
      
                      case 'week':
                        $subscription_days_count *= 7;
                      break;
      
                      case 'month':
                        $subscription_days_count *= 30;
                      break;
      
                      case 'year':
                        $subscription_days_count *= 365;
                      break;
                    }
          
                    $Sub_Startday  = Carbon::createFromTimestamp($subscription['current_period_start'])->toDateTimeString(); 
                    $Sub_Endday    = Carbon::createFromTimestamp($subscription['current_period_end'])->addDays($subscription_days_count)->toDateTimeString(); 
                    $trial_ends_at = Carbon::createFromTimestamp($subscription['current_period_end'])->addDays($subscription_days_count)->toDateTimeString(); 
      
                  }else{
      
                    $Sub_Startday  = Carbon::createFromTimestamp($subscription['current_period_start'])->toDateTimeString(); 
                    $Sub_Endday    = Carbon::createFromTimestamp($subscription['current_period_end'])->toDateTimeString(); 
                    $trial_ends_at = Carbon::createFromTimestamp($subscription['current_period_end'])->toDateTimeString(); 
      
                  }
          
                  $Subscription = Subscription::create([
                      'user_id'        =>  $user->id,
                      'name'           =>  $subscription->plan['product'],
                      'price'          =>  $subscription->plan['amount_decimal'] / 100,   // Amount Paise to Rupees
                      'stripe_id'      =>  $subscription['id'],
                      'stripe_status'  =>  $subscription['status'],
                      'stripe_plan'    =>  $subscription->plan['id'],
                      'quantity'       =>  $subscription['quantity'],
                      'countryname'    =>  Country_name(),
                      'regionname'     =>  Region_name(),
                      'cityname'       =>  city_name(),
                      'PaymentGateway' =>  'Stripe',
                      'trial_ends_at'  =>  $trial_ends_at,
                      'ends_at'        =>  $trial_ends_at,
                  ]);
          
                  $user_data = array(
                      'role'                  =>  'subscriber',
                      'stripe_id'             =>  $subscription['customer'],
                      'subscription_start'    =>  $Sub_Startday,
                      'subscription_ends_at'  =>  $Sub_Endday,
                      'payment_type'          => 'recurring',
                      'payment_status'        => $subscription['status'],
                      'coupon_used'           =>  !is_null($subscription['discount']) ?  $subscription['discount']->promotion_code : null ,
                      'payment_status'       => !empty($request->device_type) && $request->device_type == 'android' ? 'Stripe' : 'Inapp',
                  );
      
                  if( subscription_trails_status()  == 1 ){
                      $user_data +=  ['Subscription_trail_status' => 1 ];
                      $user_data +=  ['Subscription_trail_tilldate' => subscription_trails_day() ];
                  }
      
                  User::where('id',$user_id)->update( $user_data );
                  
                  try {
      
                    $email_subject = EmailTemplate::where('id',23)->pluck('heading')->first() ;
                    $plandetail = SubscriptionPlan::where('plan_id','=',$plan)->first();
      
                    $nextPaymentAttemptDate =  Carbon::createFromTimeStamp( $subscription['current_period_end'] )->format('F jS, Y')  ;
      
                    \Mail::send('emails.subscriptionmail', array(
      
                        'name'          => ucwords($user->username),
                        'paymentMethod' => $paymentMethod,
                        'plan'          => ucfirst($plandetail->plans_name),
                        'price'         => $subscription->plan['amount_decimal'] / 100 ,
                        'plan_id'       => $subscription['plan']['id'] ,
                        'billing_interval'  => $subscription['plan']['interval'] ,
                        'next_billing'      => $nextPaymentAttemptDate,
                        'subscription_type' => 'recurring',
                      ), 
      
                      function($message) use ($request,$user,$email_subject){
                        $message->from(AdminMail(),GetWebsiteName());
                        $message->to($user->email, $user->username)->subject($email_subject);
                      });
      
                    $email_log      = 'Mail Sent Successfully from Become Subscription';
                    $email_template = "23";
                    $user_id = $user->id;
        
                    Email_sent_log($user_id,$email_log,$email_template);
      
                } catch (\Throwable $th) {
      
                    $email_log      = $th->getMessage();
                    $email_template = "23";
                    $user_id = $user->id;
        
                    Email_notsent_log($user_id,$email_log,$email_template);
                }
      
                $response = array(
                  'status'        => "true",
                  'message'       => "Registered Successfully & Your Payment done Successfully!",
                  'next_billing'  => $nextPaymentAttemptDate ,
                  'Subscription'  => $Subscription ,
                  'users_role'    => User::where('id',$user_id)->pluck('role')->first() ,
                  'user_id'       => $user->id,
                );
    
              } catch (\Throwable $th) {
        
                  $data = array(
                    'status'    => "false",
                    'message'   => $th->getMessage(),
                  );

                  return response()->json($data, 200);
              }

            }
            else{
                     $payment_type = $input['payment_type'];
                     $paymentMethod = $input['py_id'];

                    if ( $payment_type == "recurring") {
                             $plan = $input['plan'];

                           try {
                              $stripe_payment = $user->newSubscription($stripe_plan, $plan)->create($paymentMethod);

                              $user = User::find($user->id);
                              $user->role = 'subscriber';
                              $user->payment_type = 'recurring';
                              $user->card_type = 'stripe';
                              $user->payment_status = !empty($request->device_type) && $request->device_type == 'android' ? 'Stripe' : 'Inapp';
                              $user->save();
                              $email = $input['email'];
                              $uname = $input['username'];

                              $response = array(
                                'status' => 'true',
                                'message' => 'Subscription Done & user Registered Successfully.',
                                'user_id' =>  $userid
                            );

                           } catch (\Throwable $th) {

                              $response = array(
                                'status' => 'false',
                                'message' => 'Subscription Not done',
                                'error_message' =>   $th,
                                'user_id' =>  $userid
                            );

                           }
                         
                            // try {
                            //     Mail::send('emails.verify', array('activation_code' => $user->activation_code, 'website_name' => $settings->website_name), function($message) use ($email,$uname) {
                            //       $message->to($email,$uname)->subject('Verify your email address');
                            //   });
                            // } catch (\Throwable $th) {
                            //   //throw $th;
                            // }



                    } else  {
                            $price = $input['amount'];
                            $plan = $input['plan'];
                            $plan_details = SubscriptionPlan::where("plan_id","=",$plan)->first();
                            $next_date = $plan_details->days;
                            $current_date = date('Y-m-d h:i:s');
                            $date = Carbon::parse($current_date)->addDays($next_date);
                            $sub_price = $plan_details->price;
                            $sub_total =  $sub_price - DiscountPercentage();
                            $user = User::find($user->id);
                            if ( NewSubscriptionCoupon() == 1 ) {
                                     $charge = $user->charge( $sub_total * 100, $input['py_id']);
                                    if($charge->id != ''){
                                           $user->role = 'subscriber';
                                            $user->payment_type = 'one_time';
                                            $user->card_type = 'stripe';
                                            $user->save();
                                             DB::table('subscriptions')->insert([
                                                    ['user_id' => $user->id,'name' =>$input['username'],
                                                      'days' => $plan_details->days, 'price' => $plan_details->price,'stripe_id'=>$user->card_type,
                                                     'stripe_status' => 'active',
                                                     'stripe_plan' => $plan,
                                                    'ends_at' => $date,'created_at' => $current_date]
                                                ]);
                                        $email = $input['email'];
                                        $uname = $input['username'];

                                        try {
                                            Mail::send('emails.verify', array('activation_code' => $user->activation_code, 'website_name' => $settings->website_name), 
                                            function($message) use ($email,$uname) {
                                              $message->from(AdminMail(),GetWebsiteName());
                                              $message->to($email,$uname)->subject('Verify your email address');
                                            });

                                        } catch (\Throwable $th) {
                                          //throw $th;
                                        }

                                          $response = array(
                                                'status' => 'true',
                                                'message' => 'Registered Successfully.'
                                        );
                                     } else {
                                          $response = array(
                                                'status' => 'false'
                                            );
                                    }
                                 } else {
                                        $charge = $user->charge( $sub_price * 100, $input['py_id']);
                                        if($charge->id != ''){
                                               $user->role = 'subscriber';
                                                $user->payment_type = 'one_time';
                                                $user->card_type = 'stripe';
                                                $user->save();
                                                DB::table('subscriptions')->insert([
                                                    ['user_id' => $user->id,'name' =>$input['username'],
                                                       'days' => $plan_details->days, 'price' => $plan_details->price,'stripe_id'=>$user_details->stripe_id,
                                                     'stripe_status' => 'active',
                                                     'stripe_plan' => $plan,
                                                    'ends_at' => $date,'created_at' => $current_date,'updated_at' => $current_date]
                                                ]);

                                            $email = $input['email'];
                                            $uname = $input['username'];

                                            try {
                                              Mail::send('emails.verify', array('activation_code' => $user->activation_code, 'website_name' => $settings->website_name), function($message) use ($email,$uname) {
                                                $message->from(AdminMail(),GetWebsiteName());
                                                $message->to($email,$uname)->subject('Verify your email address');
                                              });
                                            } catch (\Throwable $th) {
                                              //throw $th;
                                            }

                                              $response = array(
                                                    'status' => 'true',
                                          'message' => 'Registered Successfully.'
                                            );
                                         } else {
                                              $response = array(
                                                    'status' => 'false'
                                                );
                                        }
                                     }
                       }
        }
      }
      else{
          $response = array(
            'status'=>'true',
            'status_code'=> 200,
            'message' => 'Registered Successfully.',
            'user_data' => $user ,
          );
        }
      }

    } catch(Exception $e){

      $user->delete();

      $response = array(
        'status'=>'false',
        'status_code'=> 400,
        'message' => $e->getMessage(),
      );
    }

    } catch (\Throwable $th) {

      $response = array(
        'status'=>'false',
        'status_code'=> 400,
        'message' => $e->getMessage(),
      );
    }   

    return response()->json($response, $response['status_code']);
}

  public function verify_activation_code(Request $request)
  {
    try {
        // Validation 
          
        $validator = Validator::make($request->all(), [
          'activation_code' => 'required',
          'email_id' => 'required',
        ], [
            'activation_code.required'    => 'Please enter your activation code.',
            'email_id.required'    => 'Please enter your email_id.',
        ]);
        
        if ($validator->fails()) {

          return response()->json([
              'status' => 'false',
              'message'=> $validator->errors()->first(),
            ], 422);
        }
    
        $user = User::where('email',$request->email_id)->where('active',0)->first();

        if( is_null($user)){

          return response()->json([
            'status' => 'false',
            'message'=> 'Invalid E-Mail ,Please Check',
          ], 400);

        }

        $status = $user->activation_code == $request->activation_code;

        if($status){
          $user->update(['activation_code' => null , 'active' => 1 ]);
        }

        $message = $status ? "Verification has been done" : "Invalid verification code";

        return response()->json([
            'status' => $status ? 'true' : 'false',
            'status_code' => $status ? 200 : 400,
            'message' => $message,
        ], $status ? 200 : 400);

    } catch (\Throwable $th) {

      return response()->json([
          'status' => 'false',
          'status_code' => 400,
          'message' => $th->getMessage(),
      ], 400);
    }
  }

  public function resend_activation_code(Request $request)
  {
    try {
        // Validation 
        
      $validator = Validator::make($request->all(), [
        'email_id' => 'required',
      ], [
          'email_id.required'    => 'Please enter your email_id.',
      ]);

      if ($validator->fails()) {

        return response()->json([
            'status' => 'false',
            'message'=> $validator->errors()->first(),
          ], 400);
      }

      // User data 

      $userdata = User::where('email',$request->email_id)->first();

      if( $userdata->active == 1){

        return response()->json([
          'status' => 'false',
          'message'=> 'This user already in active status'
        ], 400);

      }

      $activation_code = Str::padLeft(mt_rand(0, 999999), 6, '0');

      $Mail_activation_code = $this->Mail_activation_code($userdata,$activation_code);

      return response()->json([
        'status' => $Mail_activation_code['status'],
        'message' => $Mail_activation_code['message'],
      ], $Mail_activation_code['status_code']);

    } catch (\Throwable $th) {
      
      return response()->json([
        'status' => 'false',
        'status_code' => 400,
        'message' => $th->getMessage(),
      ], 400);

    }
  }

  private function Mail_activation_code($userdata,$activation_code)
  {
    // Note: This Function common for resend_activation_code & Signup

    try {

      \Mail::send('emails.Mobile-signup-verify', array(
          'activation_code' => $activation_code,
          'website_name' => GetWebsiteName()
      ) , function ($message) use ($userdata)
      {
          $message->to($userdata->email, $userdata->name)
              ->subject('Verify your email address');
      });
      
      $email_log      = 'Mail Sent Successfully from Verify';
      $email_template = "verify";
      $user_id = $userdata->id;

      Email_sent_log($user_id,$email_log,$email_template);

      // user update

      $userdata->update(['activation_code' => $activation_code ]);

      $respond = array(
        'status' => 'true',
        'status_code' => 200,
        'message' => 'Activation Mail sent Successfully!!',
      );
       
      return $respond;


    } catch (\Throwable $th) {

        $email_log      = $th->getMessage();
        $email_template = "verify";
        $user_id = $userdata->id;

        Email_notsent_log($user_id,$email_log,$email_template);

        $respond = array(
          'status' => 'false',
          'status_code' => 400,
          'message' => $th->getMessage(),
        );

        return $respond;
    }
  }

  /**
  * Login user and create token
  *
  * @param  [string] email
  * @param  [string] password
  * @param  [boolean] remember_me
  * @return [string] access_token
  * @return [string] token_type
  * @return [string] expires_at
  */
  public function login(Request $request)
  {

    $settings = Setting::first();
    $userIp = $request->user_ip;
    $device_name = $request->device_name;
    $email = $request->email;
    $token = $request->token;

    $users = User::where('email',$email)->first();
    $users_mobile = User::where('mobile',$request->mobile_number)->first();

    $email_login = array(
      'email' => $request->get('email'),
      'password' => $request->get('password')
    );

    $username_login = array(
      'username' => $request->get('username'),
      'password' => $request->get('password')
    );

    $mobile_login = array(
      'mobile' => $request->get('mobile'),
      'otp' => $request->get('otp'),
      'password' => $request->get('password')
    );

    if ( (!empty($users) && Auth::attempt($email_login)) || (!empty($users) && Auth::attempt($username_login)) || !empty($users_mobile) && Auth::attempt($mobile_login)  ){
      $user = Auth::user();
      // if ($user->active == 0) {
      //     Auth::logout();
      //     return response()->json([
      //         'message' => 'Your account is deactivated.',
      //         'note_type' => 'error',
      //         'status' => 'verifyemail',
      //     ], 200);
      // }

      LoggedDevice::where('user_id', '=', Auth::user()->id)->delete();
      $user_id = Auth::user()->id;
      $adddevice = new LoggedDevice;
      $adddevice->user_id = $user_id;
      $adddevice->user_ip = $userIp;
      $adddevice->device_name = $device_name;
      $adddevice->save();

      // Only for Play Store Testing 
      if(( Auth::user()->free_otp_status == 1 )|| (Auth::user()->role == "admin" )){

        user::find(Auth::user()->id)->update([ "otp" => "1234", "password" => Hash::make("1234"),]);

      }else{
        user::find(Auth::user()->id)->update(['otp' => null ,'otp_request_id' => null ,'otp_through' => null ]);
      }

      Paystack_Andriod_UserId::truncate();
      Paystack_Andriod_UserId::create([ 'user_id' => Auth::user()->id ]);

      if($settings->free_registration && !Auth::user()->stripe_active){

        if(Auth::user()->role == 'registered'){
          $user = User::find(Auth::user()->id);
          $user->role = 'registered';
          $user->token = $token;
          $user->save();

        }else if(Auth::user()->role == 'admin'){

          $user = User::find(Auth::user()->id);
          $user->role = 'admin';
          $user->token = $token;
          $user->save();

        }else if(Auth::user()->role == 'subscriber'){
          $user = User::find(Auth::user()->id);
          $user->role = 'subscriber';
          $user->token = $token;
          $user->save();
        }
      }

      if(Auth::user()->role == 'subscriber' || (Auth::user()->role == 'admin' || Auth::user()->role == 'demo') || (Auth::user()->role == 'registered') ):

        $id   = Auth::user()->id;
        $role = Auth::user()->role;
        $username = Auth::user()->username;
        $password = Auth::user()->password;
        $email  = Auth::user()->email;
        $mobile = Auth::user()->mobile;
        $avatar = Auth::user()->avatar;

        if(Auth::user()->role == 'subscriber'){

          $Subscription = Subscription::where('user_id',Auth::user()->id)->orderBy('created_at', 'DESC')->first();
          $Subscription = Subscription::Join('subscription_plans','subscription_plans.plan_id','=','subscriptions.stripe_plan')
          ->where('subscriptions.user_id',Auth::user()->id)
          ->orderBy('subscriptions.created_at', 'desc')->first();

          $plans_name   = !is_null($Subscription) ? $Subscription->plans_name :null ;
          $plan_ends_at = !is_null($Subscription) ? $Subscription->ends_at : null ;

        }else{
          $plans_name = '';
          $plan_ends_at = '';
        }
        $user_details = array([
          'user_id'=>$id,
          'role'=>$role,
          'username'=>$username,
          'email'=>$email,
          'mobile'=>$mobile,
          'plans_name'=>$plans_name,
          'plan_ends_at'=>$plan_ends_at,
          'avatar'=>URL::to('/').'/public/uploads/avatars/'.$avatar
        ] );

      $redirect = ($request->get('redirect', 'false')) ? $request->get('redirect') : '/';
      if(Auth::user()->role == 'demo' && Setting::first()->demo_mode != 1){
        Auth::logout();

        $response = array('message' => 'Sorry, demo mode has been disabled', 'note_type' => 'error');
        return response()->json($response, 200);
      } elseif($settings->free_registration && $settings->activation_email && Auth::user()->active == 0) {
        Auth::logout();

        $response = array('message' => 'Please make sure to activate your account in your email before logging in.', 'note_type' => 'error','status'=>'verifyemail');
        return response()->json($response, 200);
      } else {

        $response = array('message' => 'You have been successfully logged in.', 'note_type' => 'success','status'=>'true','user_details'=> $user_details);
        return response()->json($response, 200);
      }
    else:
      $username = Auth::user()->username;

      $response = array('message' => 'Uh oh, looks like you don\'t have an active subscription, please renew to gain access to all content', 'note_type' => 'error');
      return response()->json($response, 200);
    endif;

  } else {

    if( $request->get('email') ){
      
      $count = User::where('email', $request->get('email'))->count();
      
      $response = $count > 0 ? array('status_code' => 200 ,'message' => 'Password Mismatch.', 'note_type' => 'error','status'=>'mismatch') : array('message' => 'Invalid Email, please try again.', 'note_type' => 'error','status'=>'false');    

      return response()->json($response, 200);

    }

    if( $request->get('mobile')){
      
      $count = User::where('mobile', $request->get('mobile'))->count();
      
      $response = $count > 0 ? array('message' => 'Incorrect Otp.', 'note_type' => 'error','status'=>'mismatch') : array('message' => 'Invalid Mobile Number, please try again.', 'note_type' => 'error','status'=>'false');    

      return response()->json($response, 200);

    }

  }
  }

  public function resetpassword(Request $request)
  {
    try {
      
      $this->validate($request, [
        'email'  => 'required' ,
      ]);

      $user_email = $request->email;
      $user = User::where('email', $user_email)->where('active',1)->first();

      if(is_null($user)){

        return response()->json(['status'=>'false', 
                                  'message'=> 'Unauthorized User'
                                ], 400);
      }

      $verification_code = mt_rand(1000, 9999);

      try {

        Mail::send('emails.resetpassword', array('verification_code' => $verification_code), function($message) use ($user_email) {
          $message->to($user_email)->subject('Verify your email address');
        });

      } catch (\Throwable $th) {

        $response = array(
          'status_code' => 400 ,
          'status'    =>'false',
          'message'   => $th->getMessage(),
          'email'     => $user_email,
        );

        return response()->json($response, $response['status_code']);
      }

      $data = DB::table('password_resets')->where('email', $user_email)->first();

      $input_array = array(
        'email' =>  $user_email, 
        'verification_code' => $verification_code,
      );

      if(empty($data)){
          DB::table('password_resets')->insert( $input_array );

      }else{
          DB::table('password_resets')->where('email', $user_email)->update($input_array);
      }

      $response = array(
        'status_code' => 200 ,
        'status'    =>'true',
        'message'   => 'verification email sent successfully',
        'email'     => $user_email,
        'verification_code'=> !empty($verification_code) ?? $verification_code,
      );


    } catch (\Throwable $th) {

      $response = array(
        'status_code' => 400 ,
        'status'      =>'false',
        'message'=> $th->getMessage(),
      );
    }

    return response()->json($response, $response['status_code']);
  }

     public function ViewStripe(Request $request){

            $user_id = $request->user_id;
            /*$user_details = Subscription::where("user_id","=",$user_id)->orderby("created_at","desc")->first();*/
             $subscriptions = Subscription::where('user_id',$user_id)->get();
            $stripe_id =  $user_details->stripe_id;
            $stripe_status =  $user_details->stripe_status;
            $stripe_Plan =  $user_details->stripe_plan;

            $stripe = new \Stripe\StripeClient(env('STRIPE_SECRET'));

            $stirpe_subscription = $stripe->subscriptions->retrieve(
                  $stripe_id,
                  []
                );
             $response = array(
                        'stirpe_details' => $stirpe_subscription,
                        //'stripe_status' => $user_details->stripe_status,
                        'stripe_Plan' => $stripe_Plan,
                        'stripe_status' => $stripe_status
                );

            return response()->json($response, 200);
    }

    // 12th Sep 2024 - Reset Password (verify_reset_password & upadate_reset_password)

    public function verify_token_reset_password(Request $request)
    {
      try {

        $validator = Validator::make($request->all(), [
          'email'    => 'required|email',
          'verify_code' => 'required',
        ], [
            'email.required'    => 'Please enter your email address.',
            'email.email'       => 'The email must be a valid email address.',
            'verify_code.required' => 'Please enter your password.',
        ]);

        if ($validator->fails()) {

          return response()->json([
              'status' => 'false',
              'message'=> $validator->errors()->first(),
            ], 400);
        }

              // Checking Users Exits

        $user_check_exits = User::where('email',$request->email)->where('active',1)->first();

        if( is_null( $user_check_exits) ){

          return response()->json(['status'=>'false', 'message'=> 'Unauthorized User'], 400);
        }

            // Checking Verify code

        $password_resets_check = DB::table('password_resets')->where('email', $request->email)->where('verification_code',$request->verify_code)->first();

        if( is_null( $password_resets_check) ){

          return response()->json(['status'=>'false', 'message'=> 'Invalid Token, Pls check Once'], 400);
        }

        $password_resets_check = DB::table('password_resets')->where('email', $request->email)
                                                            ->where('verification_code',$request->verify_code)
                                                            ->update(['verification_code' => null ]);

        return response()->json([ 'status'=>'true',
                                  'status_code'=> 200 ,
                                  'message'=>'verification done successfully'
                                ],200);

      } catch (\Throwable $th) {

        return response()->json([
          'status'=>'false',
          'status_code'=> 400 ,
          'message'=>$th->getMessage(),
        ],400);
      }
    }

    public function update_reset_password(Request $request)
    {
      try {
        
        $validator = Validator::make($request->all(), [
          'email'    => 'required|email',
          'password' => 'required',
        ], [
            'email.required'    => 'Please enter your email address.',
            'email.email'       => 'The email must be a valid email address.',
            'password.required' => 'Please enter your password.',
        ]);
    
        if ($validator->fails()) {

            return response()->json([
                'status' => 'false',
                'message'=> $validator->errors()->first(),
            ], 400);
        }

              // Checking Users Exits

        $user_check_exits = User::where('email',$request->email)->where('active',1)->first();

        if( is_null( $user_check_exits) ){

            return response()->json(['status'=>'false', 
                                      'message'=> 'Unauthorized User'
                                    ], 400);
        }

              // Update Password

        User::where('email',$request->email)->where('active',1)->first()->update(['password' => Hash::make($request->password) ]);

        send_password_notification('Notification From '. GetWebsiteName(),'Password has been Updated Successfully','Password Update Done','',$user_check_exits->id);

        $response = array(
          'status'=>'false',
          'status_code'=> 200 ,
          'message'=>'Password Updated successfully'
        );

      } catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'status_code'=> 400 ,
          'message'=>$th->getMessage(),
        );

      }

      return response()->json($response, $response['status_code']);
    }

      public function verify_code_updatepassword(Request $request)
      {
          $user_email = $request->email;
          $verification_code = $request->verification_code;

          $exists = DB::table('password_resets')->where('email', '=', $user_email)->where('verification_code', '=', $verification_code)->exists();

          if ($exists) {
              return response()->json([
                  'status' => 'true',
                  'message' => 'Verification code is valid.'
              ], 200);
          } else {
              return response()->json([
                  'status' => 'false',
                  'message' => 'Invalid verification code.'
              ], 200);
          }
      }


    public function updatepassword(Request $request)
    {
      $user_email = $request->email;
      // $verification_code = $request->verification_code;
      if (DB::table('password_resets')->where('email', '=', $user_email)->exists()) {

        $user_id = User::where('email', '=', $user_email)->first();
        $user = User::find($user_id->id);
        $user->password = Hash::make($request->password);
        $user->save();
            send_password_notification('Notification From '. GetWebsiteName(),'Password has been Updated Successfully','Password Update Done','',$user_id->id);
        $response = array(
          'status'=>'true',
          'message'=>'Password changed successfully.'
        );
      }else{
        $response = array(
          'status'=>'false',
          'message'=>'Email not found in password reset records.'
        );
      }
        return response()->json($response, 200);
    }


  public function categoryvideos(Request $request)
  {

    $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
    $countryName =  $geoip->getCountry();
    $getfeching = Geofencing::first();

    $block_videos=BlockVideo::where('country_id',$countryName)->get();

        if(!$block_videos->isEmpty()){
          foreach($block_videos as $block_video){
              $blockvideos[]=$block_video->video_id;
          }
      }
      $blockvideos[]='';

    //$channelid = $request->channelid;

    $videocategories = VideoCategory::select('id','image')->get()->toArray();
    $myData = array();
    foreach ($videocategories as $key => $videocategory) {
      $videocategoryid = $videocategory['id'];
      $genre_image = $videocategory['image'];

      // $videos= Video::where('video_category_id',$videocategoryid)->where('active','=',1)->orderBy('created_at', 'desc');
      //     if($getfeching !=null && $getfeching->geofencing == 'ON'){
      //         $videos = $videos->whereNotIn('id',$blockvideos);
      //       }
      $videos= Video::Join('categoryvideos','categoryvideos.video_id','=','videos.id')->where('categoryvideos.category_id',$videocategoryid)
      ->where('active','=',1)->where('status','=',1)->where('draft','=',1)->orderBy('videos.created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        $item['category_name'] = VideoCategory::where('id',$item->category_id)->pluck('slug')->first();

        return $item;
      });
      // $videos = $videos->get()->map(function ($item) {
      //     $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
      //     $item['video_url'] = URL::to('/').'/storage/app/public/'.$item->video_url;
      //     return $item;
      //   });

      // $categorydetails = VideoCategory::where('id','=',$videocategoryid)->first();

      // if(count($videos) > 0){
      //   $msg = 'success';
      // }else{
      //   $msg = 'nodata';
      $main_genre = CategoryVideo::Join('video_categories','video_categories.id','=','categoryvideos.category_id')
      ->get('name');
      foreach($main_genre as $value){
        $category[] = $value['name'];
      }
      if(!empty($category)){
      $main_genre = implode(",",$category);
      }else{
        $main_genre = "";
      }
      if(count($videos) > 0){
        $msg = 'success';
      }else{
        $msg = 'nodata';
      }
      $myData[] = array(
        // "genre_name"   => $categorydetails->name,
        // "genre_id"   => $videocategoryid,
        // "genre_image"   => URL::to('/').'/public/uploads/videocategory/'.$genre_image,
        "message" => $msg,
        'gener_name' =>  VideoCategory::where('id',$videocategoryid)->pluck('name')->first(),
        'home_genre' =>  VideoCategory::where('id',$videocategoryid)->pluck('home_genre')->first(),
        'gener_id' =>  VideoCategory::where('id',$videocategoryid)->pluck('id')->first(),
        "videos" => $videos
      );
    }

      // $videos = Video::select('videos.*','video_categories.name as categories_name')
      // ->Join('categoryvideos','categoryvideos.video_id','=','videos.id')
      // ->Join('video_categories','video_categories.id','=','categoryvideos.category_id')
      // // ->where('categoryvideos.category_id',$videocategoryid)
      // ->where('active','=',1)->where('status','=',1)->where('draft','=',1)->orderBy('videos.created_at', 'desc')->get()->map(function ($item) {
      //   $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
      //   $item['video_url'] = URL::to('/').'/storage/app/public/';
      //   return $item;
      // });
      // if(count($videos) > 0){
      //   $msg = 'success';
      // }else{
      //   $msg = 'nodata';
      // }

    $response = array(
      'status' => 'true',
      'genre_movies' => $myData,
      'main_genre' => $msg,
      'main_genre' => $main_genre,

    );
    return response()->json($response, 200);
  }

  public function categoryvideosIOS(Request $request)
  {

    $videocategories = VideoCategory::select('id','image')->get()->toArray();

    $myData = array();

    foreach ($videocategories as $key => $videocategory) {

        $videocategoryid = $videocategory['id'];
        $genre_image = $videocategory['image'];

        $videos= Video::Join('categoryvideos','categoryvideos.video_id','=','videos.id')
          ->where('categoryvideos.category_id',$videocategoryid)
          ->where('active','=',1)->where('status','=',1)
          ->where('draft','=',1)->latest('videos.created_at')->limit(12);

          if(Geofencing() !=null && Geofencing()->geofencing == 'ON')
          {
            $videos = $videos->whereNotIn('videos.id',Block_videos());
          }

          $videos = $videos->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['video_url'] = URL::to('/').'/storage/app/public/';
            $item['category_name'] = VideoCategory::where('id',$item->category_id)->pluck('slug')->first();
            return $item;
        });
     
        $main_genre = CategoryVideo::Join('video_categories','video_categories.id','=','categoryvideos.category_id')->get('name');

        foreach($main_genre as $value){
          $category[] = $value['name'];
        }

        $main_genre =  !empty($category) ? implode(",",$category) : " ";

        $msg = count($videos) > 0 ?  'success' : "";

        $myData[] = array(
          "message" => $msg,
          'gener_name' =>  VideoCategory::where('id',$videocategoryid)->pluck('name')->first(),
          'home_genre' =>  VideoCategory::where('id',$videocategoryid)->pluck('home_genre')->first(),
          'gener_id' =>  VideoCategory::where('id',$videocategoryid)->pluck('id')->first(),
          "videos" => $videos
        );
    }

    $response = array(
      'status' => 'true',
      'genre_movies' => $myData,
      'main_genre' => $msg,
      'main_genre' => $main_genre,

    );

    return response()->json($response, 200);

  }

  public function changepassword(Request $request)
  {
    $user_email = $request->email;
    $user_id = $request->user_id;

    $user = User::where('email', $user_email)->where('id', $user_id)->count();

    if($user > 0){

      $verification_code = mt_rand(100000, 999999);

      try {
        Mail::send('resetpassword', array('verification_code' => $verification_code), function($message) use ($request)  {
          $message->to($request->get('email'))->subject('Verify your email address');
        });
      } catch (\Throwable $th) {
        //throw $th;
      }

      $data = DB::table('password_resets')->where('email', $user_email)->first();
      if(empty($data)){
        DB::table('password_resets')->insert(['email' => $user_email, 'verification_code' => $verification_code]);
      }else{
        DB::table('password_resets')->where('email', $user_email)->update(['verification_code' => $verification_code]);
      }
      $response = array(
        'status'=>'true',
        'email' => $user_email,
        'verification_code'=>$verification_code
      );
    }else{
      $response = array(
        'status'=>'false',
        'message'=>'Invalid email'
      );
    }
    return response()->json($response, 200);
  }


public function verifyandupdatepassword(Request $request)
  {
    $user_email = $request->email;
    $old_password = $request->old_password;

    $user = User::where('email', $user_email)->count();

    if($user > 0){
      $userdata = User::where('email', $user_email)->first();
      $userhashpassword = $userdata->password;
      if ( Hash::check($old_password, $userhashpassword) ) {

        $userdetail = User::where('email', '=',$user_email)->first();
        $user_id = $userdetail->id;
        $user = User::find($user_id);

        // $user->password = $request->password;
        $user->password = Hash::make($request->password);
        $user->save();

        $response = array(
          'status'=>'true',
          'message'=>'Password changed successfully.'
        );
                  send_password_notification('Notification From '. GetWebsiteName(),'Password has been Updated Successfully','Password Update Done','',$user_id);

      } else {
        $response = array(
          'status'=>'false',
          'message'=>'Check your old password.'
        );
      }
    }
    else {
      $response = array(
        'status'=>'false',
        'message'=>'User Email Not exists.'
      );
    }
    return response()->json($response, 200);
  }

  public function latestvideos()
  {
    try {

        $check_Kidmode = 0 ;

        $data = Video::where('active',1)->where('status', 1)->where('draft',1);

              if( Geofencing() !=null && Geofencing()->geofencing == 'ON')
              {
                $data = $data->whereNotIn('videos.id',Block_videos());
              }

              if( $check_Kidmode == 1 )
              {
                $data = $data->whereBetween('age_restrict', [ 0, 12 ]);
              }

          $data = $data->latest()->limit(30)->get()->map(function ($item) {
            $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
            $item['player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
            $item['source']    = "Videos";
            return $item;
          });

        $response = array(
          'status'  => 'true',
          'Message' => 'Latest videos Retrieved successfully',
          'latestvideos' => $data
        );

    } catch (\Throwable $th) {

      $response = array(
        'status'  => 'false',
        'Message' => $th->getMessage(),
      );
      
    }

    
        
        return response()->json($response, 200);
  }


  public function categorylist()
  {
    $channellist = VideoCategory::orderBy('order')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/videocategory/'.$item->image;
        return $item;
      });
    if(count($channellist) > 0){
      $response = array(
        'status'=>'true',
        'categorylist' => $channellist
      );
      return response()->json($response, 200);
    }else{
      $response = array(
        'status'=>'true',
        'categorylist' => []
      );
      return response()->json($response, 200);
    }
  }

  public function channelvideos(Request $request)
  {
    
    $channelid = $request->channelid;

    $videocategories = VideoCategory::select('id','image')->where('id','=',$channelid)->get()->toArray();
    $myData = array();

    $videos_category= Video::Join('categoryvideos','categoryvideos.video_id','=','videos.id')
        ->where('categoryvideos.category_id',$channelid)
        ->where('active','=',1)->where('status','=',1)->orderBy('videos.created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['video_url'] = URL::to('/').'/storage/app/public/';
          return $item;
    });

    foreach ($videocategories as $key => $videocategory) {

        $videocategoryid = $videocategory['id'];
        $genre_image = $videocategory['image'];

        $videos= Video::Join('categoryvideos','categoryvideos.video_id','=','videos.id')
                ->where('categoryvideos.category_id',$videocategoryid)
                ->where('active','=',1)->where('status','=',1)
                ->orderBy('videos.created_at', 'desc')->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                $item['video_url'] = URL::to('/').'/storage/app/public/';
                return $item;
        });

      $categorydetails = VideoCategory::where('id','=',$videocategoryid)->first();

      if(count($videos_category) > 0){
        $msg = 'success';
        $status = 'True';
      }else{
        $msg = 'nodata';
        $status = 'False';
      }

      if(count($videos) > 0){
        $msg = 'success';
        $status = 'True';
      }else{
        $msg = 'nodata';
        $status = 'False';
      }

      $myData[] = array(
        "genre_name"   => $categorydetails->name,
        "genre_id"     => $videocategoryid,
        "genre_image"  => URL::to('/').'/public/uploads/videocategory/'.$genre_image,
        "message" => $msg,
        "videos"  => $videos,
        "videos_category" => $videos_category,
      );

    }

    $videos_cat = VideoCategory::where('id','=',$channelid)->get();

    $response = array(
      'status'     => $status ,
      'main_genre' => $videos_cat[0]->name,
      'categoryVideos' => $videos
    );

    return response()->json($response, 200);
  }

  public function channelvideosIOS(Request $request)
  {
    try {
      $channelid       = $request->channelid ;
      $current_page_no = $request->current_page_no ;
      $per_page_no     = $request->per_page_no ;

      $videos= Video::Join('categoryvideos','categoryvideos.video_id','=','videos.id')
              ->where('categoryvideos.category_id',$channelid )
              ->where('active','=',1)->where('status','=',1)->where('draft',1) ;
  
              if(Geofencing() !=null && Geofencing()->geofencing == 'ON')
              {
                $videos = $videos  ->whereNotIn('videos.id',Block_videos());
              }
  
      $videos = $videos->latest('videos.created_at')->paginate( $per_page_no , ['*'], 'page', $current_page_no );
     
      $videos->getCollection()->transform(function ($value) {
          $value['player_image']   = $value['player_image'] == null ? 'null' : $value['player_image'];
          $value['video_tv_image'] = $value['video_tv_image'] == null ? 'null' : $value['video_tv_image'];
          $value['duration'] = $value['duration'] == null ? 0 : $value['duration'];
          $value['views']    = $value['views'] == null ? 0 : $value['views'];
          return $value;
      }); 

      $VideoCategory_name = VideoCategory::where('id','=',$channelid)->pluck('name')->first();
  
      $response = array(
        'status'     => 'True' ,
        "message"    => 'Successfully Retrieved Videos' ,
        'main_genre' => $VideoCategory_name,
        'categoryVideos' => $videos
      );
  
    } catch (\Throwable $th) {
      
      $response = array(
        'status'     => 'False' ,
        "message"    => $th->getMessage() ,
      );
    }
    
    return response()->json($response, 200);
  }

  private static function plans_ads_enable($user_id){

      $user_role = User::where('id',$user_id)->pluck('role')->first();

      if( $user_role == " " ){
        return 0 ;
      }

      if( $user_role == "registered" ){
          return 1 ;
      }

      if( $user_role == "admin" ){
          return 0 ;
      }

      $Subscription_ads_status = Subscription::Join('subscription_plans','subscription_plans.plan_id','=','subscriptions.stripe_plan')
                      ->where('subscriptions.user_id',$user_id)
                      ->latest('subscriptions.created_at')
                      ->pluck('ads_status')
                      ->first();

      if( $Subscription_ads_status != null && $Subscription_ads_status == 1 ){
          return $Subscription_ads_status ;
      }
      elseif(  $Subscription_ads_status == null ){
          return 1 ;
      }else{
          return 1 ;
      }
  }

  public function VideoCipher_Videodetail($data)
  {
    try {

      $ppv_purchase = PpvPurchase::where('video_id', $data['videoid'])->orderBy('created_at', 'desc')
                      ->where('user_id', $data['user_id'])
                      ->where('status','captured')
                      ->first();

      if (!empty($ppv_purchase) && !empty($ppv_purchase->to_time)) {
          try {
              $new_date = Carbon::parse($ppv_purchase->to_time); 
              $currentdate = Carbon::now(); 
              
              $ppv_exists_check_query = $new_date->greaterThan($currentdate) ? 1 : 0; 
          } catch (\Exception $e) {
              $ppv_exists_check_query = 0;
          }
      } else {
          $ppv_exists_check_query = 0;
      }

      // if(!empty($ppv_purchase) && !empty($ppv_purchase->to_time)){
      //     $new_date = Carbon::parse($ppv_purchase->to_time)->format('M d , y H:i:s');
      //     $currentdate = date("M d , y H:i:s");
      //     $ppv_exists_check_query = $new_date > $currentdate ?  1 : 0;
      // }
      // else{
      //     $ppv_exists_check_query = 0;
      // }

      $userrole = User::where('id',$data['user_id'])->pluck('role')->first();
      $ios_plans_id = InappPurchase::get();
      // return $ios_plans_id;


        $videodetail = Video::where('id',$data['videoid'])->where('active', 1)->where('status', 1)->where('draft', 1 )->latest()
        ->get()->map(function ($item) use ( $data ,$ppv_exists_check_query, $ios_plans_id)  {
          $item['ppv_480p_price_ios']  = $ios_plans_id->firstWhere('product_id', $item->ios_ppv_price_480p)['plan_price'] ?? null;
          $item['ppv_720p_price_ios']  = $ios_plans_id->firstWhere('product_id', $item->ios_ppv_price_720p)['plan_price'] ?? null;
          $item['ppv_1080p_price_ios'] = $ios_plans_id->firstWhere('product_id', $item->ios_ppv_price_1080p)['plan_price'] ?? null;
          $item['details']             = strip_tags(html_entity_decode($item->details));
          $item['description']         = strip_tags(html_entity_decode($item->description));
  
          $userrole = User::where('id',$data['user_id'])->pluck('role')->first();
          if( $userrole == "admin"){
                  $item['videos_url'] =  $item->video_id_1080p ;
            }elseif(!empty($data['play_videoid']) && $data['play_videoid'] != '' && $item['access'] == 'guest'){

              if($data['play_videoid'] == '480p'){ $item['videos_url'] =  $item->video_id_480p ; }elseif($data['play_videoid'] == '720p' ){$item['videos_url'] =  $item->video_id_720p ; }elseif($data['play_videoid'] == '1080p'){ $item['videos_url'] =  $item->video_id_1080p ; }else{ $item['videos_url'] =  '' ;}

            }elseif(!empty($data['play_videoid']) && $data['play_videoid'] != '' && $item['access'] == 'registered' && $userrole == 'registered'){

              if($data['play_videoid'] == '480p'){ $item['videos_url'] =  $item->video_id_480p ; }elseif($data['play_videoid'] == '720p' ){$item['videos_url'] =  $item->video_id_720p ; }elseif($data['play_videoid'] == '1080p'){ $item['videos_url'] =  $item->video_id_1080p ; }else{ $item['videos_url'] =  '' ;}

            }elseif($userrole == "registered" &&  $item['access'] == 'ppv'){

                  $item['PPV_Plan']   = PpvPurchase::where('video_id', $item['id'])->where('user_id', $data['user_id'])->orderBy('created_at', 'desc')->pluck('ppv_plan')->first(); 
                  if($item['PPV_Plan'] > 0){
                      if($item['PPV_Plan'] == '480p'){ $item['videos_url'] =  $item->video_id_480p ; }elseif($item['PPV_Plan'] == '720p' ){$item['videos_url'] =  $item->video_id_720p ; }elseif($item['PPV_Plan'] == '1080p'){ $item['videos_url'] =  $item->video_id_1080p ; }else{ $item['videos_url'] =  '' ;}
                  }else{
                    $item['PPV_Plan']   = '';
                  }
            }
            elseif( $item['access'] == 'ppv' && $userrole == "subscriber"){
                  $item['PPV_Plan']   = PpvPurchase::where('video_id', $item['id'])->where('user_id', $data['user_id'])->orderBy('created_at', 'desc')->pluck('ppv_plan')->first(); 
                  if($item['PPV_Plan'] > 0){
                          if($item['PPV_Plan'] == '480p'){ $item['videos_url'] =  $item->video_id_480p ; }elseif($item['PPV_Plan'] == '720p' ){$item['videos_url'] =  $item->video_id_720p ; }elseif($item['PPV_Plan'] == '1080p'){ $item['videos_url'] =  $item->video_id_1080p ; }else{ $item['videos_url'] =  '' ;}
                      }else{
                          $item['PPV_Plan']   = '';
                      }
            }else{
                $item['PPV_Plan']   = '';
            }

      if($ppv_exists_check_query == 1 || $userrole == "admin" || !empty($item['videos_url'])){

              $videoId = $item['videos_url']; 
              $apiKey = videocipher_Key();
              $curl = curl_init();
              $watermarkText = User::where('id',$data['user_id'])->pluck('mobile')->first(); 
              $annotateJson = json_encode([
                  [
                      "type" => "rtext",
                      "text" => $watermarkText,
                      "alpha" => "0.60",
                      "color" => "0xFF0000", 
                      "size" => "15",
                      "interval" => "5000",
                  ]
              ]);

              curl_setopt_array($curl, array(
                  CURLOPT_URL => "https://dev.vdocipher.com/api/videos/$videoId/otp",
                  CURLOPT_RETURNTRANSFER => true,
                  CURLOPT_ENCODING => "",
                  CURLOPT_MAXREDIRS => 10,
                  CURLOPT_TIMEOUT => 30,
                  CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                  CURLOPT_CUSTOMREQUEST => "POST",
                  CURLOPT_POSTFIELDS => json_encode([
                      "ttl" => 30000, 
                      "annotate" => $annotateJson
                  ]),
                  CURLOPT_HTTPHEADER => array(
                      "Accept: application/json",
                      "Authorization: Apisecret $apiKey",
                      "Content-Type: application/json"
                  ),

                  curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0),
                  curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0),
              ));

              $response = curl_exec($curl);
              $err = curl_error($curl);

              curl_close($curl);

              if ($err) {
                  // echo "cURL Error #:" . $err;
                  $item['otp'] = null;
                  $item['playbackInfo'] = null;
                  print_r($err);exit;
                
              } else {

                  $responseObj = json_decode($response, true);
                  if(!empty($responseObj['message']) && $responseObj['message'] == "No new update parameters"){
                      $item['otp'] = null;
                      $item['playbackInfo'] = null;
                  }else{
                      $item['otp'] = $responseObj['otp'];
                      $item['playbackInfo'] = $responseObj['playbackInfo'];
                  }
                }
              }else{
                $item['otp'] = null;
                $item['playbackInfo'] = null;
              }
          return $item;
        });

      $videoid = $data['videoid'];

      if ( isset($data['user_id']) && $data['user_id'] != '' ) {
        $user_id = $data['user_id'];
        $videoid = $data['videoid'];
  
            //Wishlilst
          $cnt = Wishlist::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$videoid)->count();
          $wishliststatus =  ($cnt == 1) ? "true" : "false";

          //Watchlater
        $cnt1 = Watchlater::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$videoid)->count();
        $watchlaterstatus =  ($cnt1 == 1) ? "true" : "false";

        //Favorite
        $cnt2 = Favorite::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$videoid)->count();
        $favoritestatus =  ($cnt2 == 1) ? "true" : "false";

      $userrole = User::where('id','=',$user_id)->first()->role;
      $status = 'true';

      $like_data = LikeDisLike::where("video_id","=",$videoid)->where("user_id","=",$user_id)->where("liked","=",1)->count();
      $dislike_data = LikeDisLike::where("video_id","=",$videoid)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
      $favoritestatus = Favorite::where("video_id","=",$videoid)->where("user_id","=",$user_id)->count();
      $like = ($like_data == 1) ? "true" : "false";
      $dislike = ($dislike_data == 1) ? "true" : "false";
      $favorite = ($favoritestatus > 0) ? "true" : "false";
    } else{
      $wishliststatus = 'false';
      $watchlaterstatus = 'false';
      $favorite = 'false';
      $userrole = '';
      $status = 'true';
      $like = "false";
      $dislike = "false";
    }


    
            // andriodId Wishlist , Watchlater , Favorite

            if(!empty($data['andriodId'])){
                            
                 //Wishlilst
            $Wishlist_cnt = Wishlist::select('video_id')->where('andriodId','=',$data['andriodId'])->where('video_id','=',$videoid)->count();
            $andriod_wishliststatus =  ($Wishlist_cnt == 1) ? "true" : "false";

            // Watchlater
              $cnt1 = Watchlater::select('video_id')->where('andriodId','=',$data['andriodId'])->where('video_id','=',$videoid)->count();
              $andriod_watchlaterstatus =  ($cnt1 == 1) ? "true" : "false";
      
            // Favorite
            $cnt2 = Favorite::select('video_id')->where('andriodId','=',$data['andriodId'])->where('video_id','=',$videoid)->count();
            $favoritestatus =  ($cnt2 == 1) ? "true" : "false";
              
              $like_data = LikeDisLike::where("video_id","=",$videoid)->where("andriodId","=",$data['andriodId'])->where("liked","=",1)->count();
              $dislike_data = LikeDisLike::where("video_id","=",$videoid)->where("andriodId","=",$data['andriodId'])->where("disliked","=",1)->count();
              $favoritestatus = Favorite::where("video_id","=",$videoid)->where("andriodId","=",$data['andriodId'])->count();
              $andriod_like = ($like_data == 1) ? "true" : "false";
              $andriod_dislike = ($dislike_data == 1) ? "true" : "false";
              $andriod_favorite = ($favoritestatus > 0) ? "true" : "false";

          }else{
            $andriod_wishliststatus = 'false';
            $andriod_watchlaterstatus = 'false';
            $andriod_favorite = 'false';
            $andriod_like = "false";
            $andriod_dislike = "false";
          }

          
            // IOS  , Wishlist , Watchlater , Favorite


            if(!empty($data['IOSId'])){
                            
                 //Wishlilst
            $Wishlist_cnt = Wishlist::select('video_id')->where('IOSId','=',$data['IOSId'])->where('video_id','=',$videoid)->count();
            $IOS_wishliststatus =  ($Wishlist_cnt == 1) ? "true" : "false";

            // Watchlater
              $cnt1 = Watchlater::select('video_id')->where('IOSId','=',$data['IOSId'])->where('video_id','=',$videoid)->count();
              $IOS_watchlaterstatus =  ($cnt1 == 1) ? "true" : "false";
      
            // Favorite
            $cnt2 = Favorite::select('video_id')->where('IOSId','=',$data['IOSId'])->where('video_id','=',$videoid)->count();
            $favoritestatus =  ($cnt2 == 1) ? "true" : "false";
              
              $like_data = LikeDisLike::where("video_id","=",$videoid)->where("IOSId","=",$data['IOSId'])->where("liked","=",1)->count();
              $dislike_data = LikeDisLike::where("video_id","=",$videoid)->where("IOSId","=",$data['IOSId'])->where("disliked","=",1)->count();
              $favoritestatus = Favorite::where("video_id","=",$videoid)->where("IOSId","=",$data['IOSId'])->count();
              $IOS_like = ($like_data == 1) ? "true" : "false";
              $IOS_dislike = ($dislike_data == 1) ? "true" : "false";
              $IOS_favorite = ($favoritestatus > 0) ? "true" : "false";


          }else{
            $IOS_wishliststatus = 'false';
            $IOS_watchlaterstatus = 'false';
            $IOS_favorite = 'false';
            $IOS_like = "false";
            $IOS_dislike = "false";
          }
         
          

            // TVID Wishlist 


            if(!empty($data['tv_id'])){
              
              
                 //Wishlilst
            $Wishlist_cnt = Wishlist::select('video_id')->where('tv_id','=',$data['tv_id'])->where('video_id','=',$videoid)->count();
            $tv_wishliststatus =  ($Wishlist_cnt == 1) ? "true" : "false";

          }else{
            $tv_wishliststatus = 'false';
          }


           $videos_cat_id = Video::where('id','=',$videoid)->pluck('video_category_id');
           $moviesubtitles = MoviesSubtitles::where('movie_id',$videoid)->get();
          $main_genre = CategoryVideo::Join('video_categories','video_categories.id','=','categoryvideos.category_id')
            ->where('video_id',$videoid)->get('name');
            foreach($main_genre as $value){
              $category[] = $value['name'];
            }
            if(!empty($category)){
            $main_genre = implode(",",$category);
            }else{
              $main_genre = "";
            }
          // $main_genre = CategoryVideo::Join('video_categories','video_categories.id','=','categoryvideos.category_id')
            $languages = LanguageVideo::Join('languages','languages.id','=','languagevideos.language_id')
            ->where('languagevideos.video_id',$videoid)->get('name');
  
            foreach($languages as $value){
              $language[] = $value['name'];
            }
            if(!empty($language)){
            $languages = implode(",",$language);
            }else{
              $languages = "";
            }
            
      $response = array(
        'status' => $status,
        'wishlist' => $wishliststatus,
        'andriod_wishliststatus' => $andriod_wishliststatus ,
        'andriod_like' => $andriod_like ,
        'andriod_dislike' => $andriod_dislike ,
        'andriod_watchlaterstatus' => $andriod_watchlaterstatus ,
        'andriod_favorite' => $andriod_favorite ,
        'tv_wishliststatus' => $tv_wishliststatus ,
        'watchlater' => $watchlaterstatus,
        'favorite' => $favorite                                 ,
        'ppv_exist' => $ppv_exists_check_query,
        'userrole' => $userrole,
        'like' => $like,
        'dislike' => $dislike,
        'shareurl' => URL::to('category/videos').'/'.@$videodetail[0]->slug,
        'videodetail' => $videodetail,
        'videossubtitles' => $moviesubtitles,
        'main_genre' => $main_genre,
        'languages' => $languages,
        'IOS_wishliststatus' => $IOS_wishliststatus ,
        'IOS_watchlaterstatus' => $IOS_watchlaterstatus ,
        'IOS_favorite' => $IOS_favorite ,
        'IOS_like' => $IOS_like ,
        'IOS_dislike' => $IOS_dislike ,
        'ppv_exist' => $ppv_exists_check_query,
        'ppv_video_status' => $ppv_exists_check_query,

      );

    } catch (\Throwable $th) {
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }
   
    return response()->json($response, 200);
  }

  public function videodetail(Request $request)
  {

    $data = $request->all();

    $videoid = $request->videoid;

    $videodetailType = Video::where('id',$videoid)->pluck('type')->first();
    
    if(Enable_videoCipher_Upload() == 1 && Enable_PPV_Plans() == 1 && $videodetailType == 'VideoCipher'){
      return $this->VideoCipher_Videodetail($data);
    }
        
    try {

      $current_date = date('Y-m-d h:i:s a', time());

      $setting = Setting::first();

      $choose_player = SiteTheme::pluck('choose_player')->first();

      $ios_plans_id = InappPurchase::get();
  
      $videodetail = Video::where('id',$videoid)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($request, $choose_player , $setting, $ios_plans_id){

          $item['details']        = strip_tags($item->details);
          $item['description']    = strip_tags($item->description);
          $item['image_url']      = URL::to('public/uploads/images/'.$item->image );
          $item['player_image']   = URL::to('public/uploads/images/'.$item->player_image );
          $item['video_url']      = URL::to('/').'/storage/app/public/';
          $item['reelvideo_url']  = URL::to('public/uploads/reelsVideos/'.$item->reelvideo) ;
          $item['pdf_files_url']  = URL::to('public/uploads/videoPdf/'.$item->pdf_files) ;
          $item['mobile_image_url'] = URL::to('public/uploads/images/'.$item->mobile_image) ;
          $item['tablet_image_url'] = URL::to('public/uploads/images/'.$item->tablet_image) ;
          $item['video_tv_image']   = URL::to('public/uploads/images/'.$item->video_tv_image) ;
          $item['transcoded_url']   = URL::to('/storage/app/public/').'/'.$item->path . '.m3u8';
          $item['description']      = strip_tags(html_entity_decode($item->description));
          $item['movie_duration']   = gmdate('H:i:s', $item->duration);
          $ios_plan                 = $ios_plans_id->firstwhere('product_id',$item->ios_ppv_price);
          $item['ios_price']        = $ios_plan ? $ios_plan->plan_price : null;

          $ads_videos = AdsVideo::where('ads_videos.video_id',$item->id)
              ->join('advertisements', 'ads_videos.ads_id', '=', 'advertisements.id')
              ->first();
  
          $ads_mid_time   =  gmdate("H:i:s", $item->duration/2) ;
          $ads_Post_time  = "00:00:00" ;
          $ads_pre_time   =  gmdate("H:i:s", $item->duration - 1) ;
  
          $item['ads_url']  = $ads_videos ? URL::to('/').'/public/uploads/AdsVideos/'.$ads_videos->ads_video :  " " ;
          $item['ads_position'] = $ads_videos ? $ads_videos->ads_position : " ";
  
          $item['pre_position_time']  = $ads_videos != null && $ads_videos->ads_position == 'pre' ? $ads_pre_time  : "0";
          $item['mid_position_time']  = $ads_videos != null  && $ads_videos->ads_position == 'mid'  ? $ads_mid_time  : "0";
          $item['post_position_time'] = $ads_videos != null  && $ads_videos->ads_position == 'post' ? $ads_Post_time  : "0";
          $item['ads_seen_status']    = $item->ads_status;
          $item['ios_publish_time']   = Carbon::parse($item->publish_time)->format('Y-m-d H:i:s');

          if($item->access == 'ppv' && $request->user_id != '' || $item->access == 'subscriber' && $request->user_id != ''){
            $item['rent_url']   = URL::to('category/videos').'/'.$item->slug;
          }

          // Videos URL 

          switch (true) {

            case $item['type'] == "mp4_url":

              $item['videos_url'] =  $item->mp4_url ;
              $item['video_player_type'] =  'video/mp4' ;
              $item['qualities']  = [] ;
              break;

            case $item['type'] == "m3u8_url":

              $item['videos_url'] =  $item->m3u8_url ;
              $item['video_player_type'] =  'application/x-mpegURL' ;
              $item['qualities']  = [] ;

              break;

            case $item['type'] == "embed":

              $item['videos_url'] =  $item->embed_code ;
              $item['video_player_type'] =  'embed' ;
              $item['qualities']  = [] ;
              break;
            
            case $item['type'] == null &&  pathinfo($item['mp4_url'], PATHINFO_EXTENSION) == "mp4" :

              $item['videos_url']   = URL::to('/storage/app/public/'.$item->path.'.m3u8');
              $item['video_player_type'] =  'application/x-mpegURL' ;
              $item['qualities']  = [] ;
              break;
              
            case $item['type'] == null &&  pathinfo($item['mp4_url'], PATHINFO_EXTENSION) == "mov" :

              $item['videos_url']   = $item->mp4_url ;
              $item['video_player_type'] =  'video/mp4' ;
              $item['qualities']  = [] ;
              break;

            case $item['type'] == null :

              $item['videos_url']   = URL::to('/storage/app/public/'.$item->path.'.m3u8' ) ;
              $item['video_player_type'] =  'application/x-mpegURL' ;
              $item['qualities']  = [] ;
              break;

            case $item['type'] == " " && !is_null($item->transcoded_url) :

              $item['videos_url']   = $item->transcoded_url ;
              $item['video_player_type'] =  'application/x-mpegURL' ;
              $item['qualities']  = [] ;
              break;
                
            case $item['type'] == "bunny_cdn"  :

              $item['videos_url']   = $item->mp4_url ;
              $item['video_player_type'] =  'application/x-mpegURL' ;

              $response = Http::withoutVerifying()->get( $item->m3u8_url);
              $qualities = [];

              if ($response->successful()) {
                  $contents = $response->body();
                  preg_match_all('/#EXT-X-STREAM-INF:.*RESOLUTION=(\d+x\d+)\s*(\d+p)\/video\.m3u8/', $contents, $matches);

                  foreach ($matches[2] as $quality) {
                      $qualities[] = str_replace('p', '', $quality);
                  }
                  $qualities = $qualities ;
              } 

              $item['qualities']   = $qualities ;
              
              break;
              
            default:

              $item['videos_url']    = null ;
              $item['video_player_type'] =  null;
              $item['qualities']  = [] ;
              break;
          }
         
          // video js Player Ads

          $current_time = Carbon::now()->format('H:i:s');
          $advertisement_plays_24hrs = Setting::pluck('ads_play_unlimited_period')->first();

          $video_js_mid_advertisement_sequence_time = $item->video_js_mid_advertisement_sequence_time != null ? Carbon::parse( $item->video_js_mid_advertisement_sequence_time )->secondsSinceMidnight()  : '0';

          $item['video_js_pre_position_ads_url']  = null ;
          $item['video_js_mid_position_ads_urls']  = array() ;
          $item['video_js_post_position_ads_url'] = null ;
          $item['video_js_mid_advertisement_sequence_time_second'] = null ;

          $plans_ads_enable_status = $this->plans_ads_enable($request->user_id) ;

          if( $plans_ads_enable_status  == 1  && $choose_player == 1 ){

                $admin_video_ads = AdminVideoAds::where('video_id',$item->id)->whereJsonContains('ads_devices',['android'])->first();

                if( isset($request->ads_devices)){

                  switch ($request->ads_devices) {

                    case 'android':
                      $ads_devices = 'andriod';
                      $ads_devices_vj_pre_position_ads  = !is_null($admin_video_ads) ? $admin_video_ads->andriod_vj_pre_postion_ads   : null  ;
                      $ads_devices_vj_post_position_ads = !is_null($admin_video_ads) ? $admin_video_ads->andriod_vj_post_position_ads  : null ;
                      $ads_devices_vj_mid_ads_category  = !is_null($admin_video_ads) ? $admin_video_ads->andriod_vj_mid_ads_category  : null ;
                      $ads_devices_vj_mid_sequence      = !is_null($admin_video_ads) && $admin_video_ads->andriod_mid_sequence_time  != null ? Carbon::parse( $admin_video_ads->andriod_mid_sequence_time  )->secondsSinceMidnight()  : '300';
                      break;
  
                    case 'IOS':
                      $ads_devices = 'IOS';
                      $ads_devices_vj_pre_position_ads  = !is_null($admin_video_ads) ? $admin_video_ads->ios_vj_pre_postion_ads   : null  ;
                      $ads_devices_vj_post_position_ads = !is_null($admin_video_ads) ? $admin_video_ads->ios_vj_post_position_ads  : null ;
                      $ads_devices_vj_mid_ads_category  = !is_null($admin_video_ads) ? $admin_video_ads->ios_vj_mid_ads_category  : null ;
                      $ads_devices_vj_mid_sequence      = !is_null($admin_video_ads) && $admin_video_ads->ios_mid_sequence_time  != null ? Carbon::parse( $admin_video_ads->ios_mid_sequence_time  )->secondsSinceMidnight()  : '300';
                      break;
                      
                    case 'roku':
                      $ads_devices = 'roku';
                      $ads_devices_vj_pre_position_ads  = !is_null($admin_video_ads) ? $admin_video_ads->roku_vj_pre_postion_ads   : null  ;
                      $ads_devices_vj_post_position_ads = !is_null($admin_video_ads) ? $admin_video_ads->roku_vj_post_position_ads  : null ;
                      $ads_devices_vj_mid_ads_category  = !is_null($admin_video_ads) ? $admin_video_ads->roku_vj_mid_ads_category  : null ;
                      $ads_devices_vj_mid_sequence      = !is_null($admin_video_ads) && $admin_video_ads->roku_mid_sequence_time  != null ? Carbon::parse( $admin_video_ads->roku_mid_sequence_time  )->secondsSinceMidnight()  : '300';
                      break;
  
                    case 'lg':
                      $ads_devices = 'lg';
                      $ads_devices_vj_pre_position_ads  = !is_null($admin_video_ads) ? $admin_video_ads->lg_vj_pre_postion_ads   : null  ;
                      $ads_devices_vj_post_position_ads = !is_null($admin_video_ads) ? $admin_video_ads->lg_vj_post_position_ads  : null ;
                      $ads_devices_vj_mid_ads_category  = !is_null($admin_video_ads) ? $admin_video_ads->lg_vj_mid_ads_category  : null ;
                      $ads_devices_vj_mid_sequence      = !is_null($admin_video_ads) && $admin_video_ads->lg_mid_sequence_time  != null ? Carbon::parse( $admin_video_ads->lg_mid_sequence_time  )->secondsSinceMidnight()  : '300';
                      break;
  
                    case 'samsung':
                      $ads_devices = 'samsung';
                      $ads_devices_vj_pre_position_ads  = !is_null($admin_video_ads) ? $admin_video_ads->samsung_vj_pre_postion_ads   : null  ;
                      $ads_devices_vj_post_position_ads = !is_null($admin_video_ads) ? $admin_video_ads->samsung_vj_post_position_ads  : null ;
                      $ads_devices_vj_mid_ads_category  = !is_null($admin_video_ads) ? $admin_video_ads->samsung_vj_mid_ads_category  : null ;
                      $ads_devices_vj_mid_sequence      = !is_null($admin_video_ads) && $admin_video_ads->samsung_mid_sequence_time  != null ? Carbon::parse( $admin_video_ads->samsung_mid_sequence_time  )->secondsSinceMidnight()  : '300';
                      break;
  
                    case 'tv':
                      $ads_devices = 'tv';
                      $ads_devices_vj_pre_position_ads  = !is_null($admin_video_ads) ? $admin_video_ads->tv_vj_pre_postion_ads   : null  ;
                      $ads_devices_vj_post_position_ads = !is_null($admin_video_ads) ? $admin_video_ads->tv_vj_post_position_ads  : null ;
                      $ads_devices_vj_mid_ads_category  = !is_null($admin_video_ads) ? $admin_video_ads->tv_vj_mid_ads_category  : null ;
                      $ads_devices_vj_mid_sequence      = !is_null($admin_video_ads) && $admin_video_ads->tv_mid_sequence_time  != null ? Carbon::parse( $admin_video_ads->tv_mid_sequence_time  )->secondsSinceMidnight()  : '300';
                      break;
  
                    default:
                      $ads_devices_vj_pre_position_ads  = null ;
                      $ads_devices_vj_post_position_ads = null ;
                      $ads_devices_vj_mid_ads_category  = null ;
                      $ads_devices_vj_mid_sequence      = '0';
                      break;
                  }

                }else{
                    $ads_devices_vj_pre_position_ads  = $item->video_js_pre_position_ads  ;
                    $ads_devices_vj_post_position_ads = $item->video_js_post_position_ads ;
                    $ads_devices_vj_mid_ads_category  = $item->video_js_mid_position_ads_category ;
                    $ads_devices_vj_mid_sequence      = $video_js_mid_advertisement_sequence_time ;
                }
               

                  // Pre-advertisement 

                $item['video_js_pre_position_ads_url']  = Advertisement::select('advertisements.*','ads_events.ads_id','ads_events.status','ads_events.end','ads_events.start')
                                              ->join('ads_events', 'ads_events.ads_id', '=', 'advertisements.id')
                                              ->where('advertisements.status', 1)

                                              ->when( isset($request->ads_devices) , function ($query) use ($request) {

                                                return $query->whereJsonContains('advertisements.ads_devices',[ $request->ads_devices ]);
                                              })

                                              ->when( $ads_devices_vj_pre_position_ads == 'Random', function ($query) {

                                                  return $query->inRandomOrder();

                                              }, function ($query) use ($item , $ads_devices_vj_pre_position_ads ) {

                                                  return $query->where('advertisements.id', $ads_devices_vj_pre_position_ads  );

                                              })

                                              ->when( $advertisement_plays_24hrs == 0, function ($query) use ($current_time) {

                                                  return $query->where('ads_events.status', 1)
                                                      ->whereTime('ads_events.start', '<=', $current_time)
                                                      ->whereTime('ads_events.end', '>=', $current_time);
                                              })

                                              ->groupBy('advertisements.id')
                                              ->pluck('ads_path')
                                              ->first();

                  // Mid-advertisement 

                $item['video_js_mid_position_ads_urls'] = Advertisement::select('advertisements.*', 'ads_events.ads_id', 'ads_events.status', 'ads_events.end', 'ads_events.start')
                                          ->join('ads_events', 'ads_events.ads_id', '=', 'advertisements.id')
                                          ->where('advertisements.status', 1)
                                          ->groupBy('advertisements.id')
                                          
                                          ->when( isset($request->ads_devices) , function ($query) use ($request) {

                                            return $query->whereJsonContains('advertisements.ads_devices',[ $request->ads_devices ]);
                                          })

                                          ->when( $ads_devices_vj_mid_ads_category == 'random_category', function ($query) {

                                                  return $query ;

                                              }, function ($query) use ($item , $ads_devices_vj_mid_ads_category) {

                                                  return $query->where('advertisements.ads_category', $ads_devices_vj_mid_ads_category );

                                              })

                                              ->when( $advertisement_plays_24hrs == 0 , function ($query) use ($current_time) {

                                                  return $query->where('ads_events.status', 1)
                                                      ->whereTime('ads_events.start', '<=', $current_time)
                                                      ->whereTime('ads_events.end', '>=', $current_time);
                                                  })
                                          
                                          ->pluck('ads_path')->map(function ($item) {
                                            return (object) ['ads_path' => $item];
                                        });
                                                                                                                                        
                  // Post-advertisement 

                $item['video_js_post_position_ads_url'] = Advertisement::select('advertisements.*','ads_events.ads_id','ads_events.status','ads_events.end','ads_events.start')
                                              ->join('ads_events','ads_events.ads_id','=','advertisements.id')
                                              ->where('advertisements.status', 1 )

                                              ->when( isset($request->ads_devices) , function ($query) use ($request) {

                                                return $query->whereJsonContains('advertisements.ads_devices',[ $request->ads_devices ]);
                                              })

                                              ->when( $ads_devices_vj_post_position_ads == 'Random', function ($query) {

                                                  return $query->inRandomOrder();

                                                  }, function ($query) use ($item , $ads_devices_vj_post_position_ads) {

                                                  return $query->where('advertisements.id', $ads_devices_vj_post_position_ads );

                                                  })

                                              ->when( $advertisement_plays_24hrs == 0, function ($query) use ($current_time) {

                                                  return $query->where('ads_events.status', 1)
                                                      ->whereTime('ads_events.start', '<=', $current_time)
                                                      ->whereTime('ads_events.end', '>=', $current_time);
                                                  })

                                              ->groupBy('advertisements.id')
                                              ->pluck('ads_path')
                                              ->first();

              $item['video_js_mid_advertisement_sequence_time_second'] = $ads_devices_vj_mid_sequence ; 

          }
          
            // Check Channel Purchase 

          $UserChannelSubscription = true ;

          if ( $setting->user_channel_plans_page_status == 1) {

              $UserChannelSubscription = false ;

              $channel_id = Video::where('id',$item->id)->where('uploaded_by','channel')->pluck('user_id')->first();

              if (is_null($channel_id)) {
                  $UserChannelSubscription = true ;
              }

              if (!Auth::guest() && !is_null($channel_id) ) {
  
                  $UserChannelSubscription = UserChannelSubscription::where('user_id',auth()->user()->id)
                                                  ->where('channel_id',$channel_id)->where('status','active')
                                                  ->where('subscription_start', '<=', Carbon::now())
                                                  ->where('subscription_ends_at', '>=', Carbon::now())
                                                  ->latest()->exists();

                  if (Auth::user()->role == "admin") {
                      $UserChannelSubscription = true ;
                  }
              }
          }

          $item['UserChannelSubscription'] = $UserChannelSubscription ;

          return $item;
        });


        $skip_time = ContinueWatching::orderBy('created_at', 'DESC')->where('user_id',$request->user_id)->where('videoid','=',$videoid)->first();
        
        if(!empty($skip_time)){
          $skip_time = $skip_time->skip_time;
  
        }else{
          $skip_time = 0;
        }
  
        $curr_time = '00';

        if ( isset($request->user_id) && $request->user_id != '' ) {
              $user_id = $request->user_id;
              $ppv_exist = PpvPurchase::where('video_id',$videoid)->where('user_id',$user_id)->where('to_time','>',$current_date)->where('status','captured')->count();
        
              //Wishlilst
            $cnt = Wishlist::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$videoid)->count();
            $wishliststatus =  ($cnt == 1) ? "true" : "false";

            //Watchlater
          $cnt1 = Watchlater::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$videoid)->count();
          $watchlaterstatus =  ($cnt1 == 1) ? "true" : "false";
  
         //Favorite
        $cnt2 = Favorite::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$videoid)->count();
        $favoritestatus =  ($cnt2 == 1) ? "true" : "false";
  

        //Continue Watchings

        $cnt4 = ContinueWatching::select('currentTime')->where('user_id','=',$user_id)->where('videoid','=',$videoid)->count();
        
        if($cnt4 == 1){
          $get_time = ContinueWatching::select('currentTime')->where('user_id','=',$user_id)->where('videoid','=',$videoid)->get();
          $curr_time = $get_time[0]->currentTime;
        }
        else{
          $curr_time = '00';
        }
  

        $userrole = User::where('id','=',$user_id)->first()->role;
        $status = 'true';
  
        $like_data = LikeDisLike::where("video_id","=",$videoid)->where("user_id","=",$user_id)->where("liked","=",1)->count();
        $dislike_data = LikeDisLike::where("video_id","=",$videoid)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
        $favoritestatus = Favorite::where("video_id","=",$videoid)->where("user_id","=",$user_id)->count();
        $like = ($like_data == 1) ? "true" : "false";
        $dislike = ($dislike_data == 1) ? "true" : "false";
        $favorite = ($favoritestatus > 0) ? "true" : "false";
      } else{
        $wishliststatus = 'false';
        $watchlaterstatus = 'false';
        $favorite = 'false';
        $ppv_exist = 0;
        $curr_time = '00';
        $userrole = '';
        $status = 'true';
        $like = "false";
        $dislike = "false";
      }


            // andriodId Continue Watchings , Wishlist , Watchlater , Favorite


            if(!empty($request->andriodId)){
              
              $andriod_cnt4 = ContinueWatching::select('currentTime')->where('andriodId','=',$request->andriodId)->where('videoid','=',$videoid)->count();
              
                 //Wishlilst
            $Wishlist_cnt = Wishlist::select('video_id')->where('andriodId','=',$request->andriodId)->where('video_id','=',$videoid)->count();
            $andriod_wishliststatus =  ($Wishlist_cnt == 1) ? "true" : "false";

            // Watchlater
              $cnt1 = Watchlater::select('video_id')->where('andriodId','=',$request->andriodId)->where('video_id','=',$videoid)->count();
              $andriod_watchlaterstatus =  ($cnt1 == 1) ? "true" : "false";
      
            // Favorite
            $cnt2 = Favorite::select('video_id')->where('andriodId','=',$request->andriodId)->where('video_id','=',$videoid)->count();
            $favoritestatus =  ($cnt2 == 1) ? "true" : "false";
              
              $like_data = LikeDisLike::where("video_id","=",$videoid)->where("andriodId","=",$request->andriodId)->where("liked","=",1)->count();
              $dislike_data = LikeDisLike::where("video_id","=",$videoid)->where("andriodId","=",$request->andriodId)->where("disliked","=",1)->count();
              $favoritestatus = Favorite::where("video_id","=",$videoid)->where("andriodId","=",$request->andriodId)->count();
              $andriod_like = ($like_data == 1) ? "true" : "false";
              $andriod_dislike = ($dislike_data == 1) ? "true" : "false";
              $andriod_favorite = ($favoritestatus > 0) ? "true" : "false";


            if($andriod_cnt4 == 1){
                $andriod_get_time = ContinueWatching::select('currentTime')->where('andriodId','=',$request->andriodId)->where('videoid','=',$videoid)->get();
                $andriod_curr_time = $andriod_get_time[0]->currentTime;
            }else{
                  $andriod_curr_time = '00';
            }

          }else{
            $andriod_curr_time = '00';
            $andriod_wishliststatus = 'false';
            $andriod_watchlaterstatus = 'false';
            $andriod_favorite = 'false';
            $andriod_like = "false";
            $andriod_dislike = "false";
          }

          
            // IOS Continue Watchings , Wishlist , Watchlater , Favorite


            if(!empty($request->IOSId)){
              
              $IOS_cnt4 = ContinueWatching::select('currentTime')->where('IOSId','=',$request->IOSId)->where('videoid','=',$videoid)->count();
              
                 //Wishlilst
            $Wishlist_cnt = Wishlist::select('video_id')->where('IOSId','=',$request->IOSId)->where('video_id','=',$videoid)->count();
            $IOS_wishliststatus =  ($Wishlist_cnt == 1) ? "true" : "false";

            // Watchlater
              $cnt1 = Watchlater::select('video_id')->where('IOSId','=',$request->IOSId)->where('video_id','=',$videoid)->count();
              $IOS_watchlaterstatus =  ($cnt1 == 1) ? "true" : "false";
      
            // Favorite
            $cnt2 = Favorite::select('video_id')->where('IOSId','=',$request->IOSId)->where('video_id','=',$videoid)->count();
            $favoritestatus =  ($cnt2 == 1) ? "true" : "false";
              
              $like_data = LikeDisLike::where("video_id","=",$videoid)->where("IOSId","=",$request->IOSId)->where("liked","=",1)->count();
              $dislike_data = LikeDisLike::where("video_id","=",$videoid)->where("IOSId","=",$request->IOSId)->where("disliked","=",1)->count();
              $favoritestatus = Favorite::where("video_id","=",$videoid)->where("IOSId","=",$request->IOSId)->count();
              $IOS_like = ($like_data == 1) ? "true" : "false";
              $IOS_dislike = ($dislike_data == 1) ? "true" : "false";
              $IOS_favorite = ($favoritestatus > 0) ? "true" : "false";


            if($IOS_cnt4 == 1){
                $IOS_get_time = ContinueWatching::select('currentTime')->where('IOSId','=',$request->IOSId)->where('videoid','=',$videoid)->get();
                $IOS_curr_time = $IOS_get_time[0]->currentTime;
            }else{
                  $IOS_curr_time = '00';
            }

          }else{
            $IOS_curr_time = '00';
            $IOS_wishliststatus = 'false';
            $IOS_watchlaterstatus = 'false';
            $IOS_favorite = 'false';
            $IOS_like = "false";
            $IOS_dislike = "false";
          }
         
          

            // TVID Continue Watchings , Wishlist 


            if(!empty($request->tv_id)){
              
              $tv_cnt4 = ContinueWatching::select('currentTime')->where('tv_id','=',$request->tv_id)->where('videoid','=',$videoid)->count();
              
                 //Wishlilst
            $Wishlist_cnt = Wishlist::select('video_id')->where('tv_id','=',$request->tv_id)->where('video_id','=',$videoid)->count();
            $tv_wishliststatus =  ($Wishlist_cnt == 1) ? "true" : "false";

            if($tv_cnt4 == 1){
                $tv_get_time = ContinueWatching::select('currentTime')->where('tv_id','=',$request->tv_id)->where('videoid','=',$videoid)->get();
                $tv_curr_time = $tv_get_time[0]->currentTime;
            }else{
                  $tv_curr_time = '00';
            }

          }else{
            $tv_curr_time = '00';
            $tv_wishliststatus = 'false';
          }


          $videodetailaccess = Video::where('id',$videoid)->pluck('access')->first();
      if ($ppv_exist > 0) {
  
            $ppv_time_expire = PpvPurchase::where('user_id','=',$user_id)->where('video_id','=',$videoid)->pluck('to_time');
  
            if ( $ppv_time_expire > $current_date ) {
  
                $ppv_video_status = "can_view";
  
            } else {
                  $ppv_video_status = "expired";
            }
  
      } else if($videodetailaccess == "ppv" && $ppv_exist == 0){
        
        $ppv_video_status = "pay_now";
        
      }else {
            $ppv_video_status = "can_view";
      }
  
  
           $videos_cat_id = Video::where('id','=',$videoid)->pluck('video_category_id');
           $moviesubtitles = MoviesSubtitles::where('movie_id',$videoid)->get();
          $main_genre = CategoryVideo::Join('video_categories','video_categories.id','=','categoryvideos.category_id')
            ->where('video_id',$videoid)->get('name');
            foreach($main_genre as $value){
              $category[] = $value['name'];
            }
            if(!empty($category)){
            $main_genre = implode(",",$category);
            }else{
              $main_genre = "";
            }
          // $main_genre = CategoryVideo::Join('video_categories','video_categories.id','=','categoryvideos.category_id')
            $languages = LanguageVideo::Join('languages','languages.id','=','languagevideos.language_id')
            ->where('languagevideos.video_id',$videoid)->get('name');
  
            foreach($languages as $value){
              $language[] = $value['name'];
            }
            if(!empty($language)){
            $languages = implode(",",$language);
            }else{
              $languages = "";
            }
  
      $video = Video::find( $request->videoid);
      
      $AdsVideosPre = AdsEvent::Join('advertisements','advertisements.id','=','ads_events.ads_id')
              ->Join('videos','advertisements.ads_category','=','videos.pre_ads_category')
              ->where('ads_events.status',1)
              ->where('advertisements.status',1)
              ->where('advertisements.ads_category',@$video->pre_ads_category)
              ->where('ads_position','pre')
              ->where('advertisements.id',@$video->pre_ads)
              ->groupBy('advertisements.id')
              ->get()->map->only('ads_path','ads_video')->map(function ($item) {
                  $item['ads_type'] = $item['ads_video'] == null ? "Google_tag" : "upload_ads";
                  $item['ads_videos_url'] = URL::to('public/uploads/AdsVideos/'.$item['ads_video']);
                  return $item;
              });
  
  
      $AdsVideosMid = AdsEvent::Join('advertisements','advertisements.id','=','ads_events.ads_id')
              ->Join('videos','advertisements.ads_category','=','videos.mid_ads_category')
              ->where('ads_events.status',1)
              ->where('advertisements.status',1)
              ->where('advertisements.ads_category',@$video->mid_ads_category)
              ->where('videos.id',@$video->id)
              ->where('ads_position','mid')
              ->where('advertisements.id',@$video->mid_ads)
              ->groupBy('advertisements.id')
              ->get()->map->only('ads_path','ads_video')->map(function ($item) {
                  $item['ads_type'] = $item['ads_video'] == null ? "Google_tag" : "upload_ads";
                  $item['ads_videos_url'] = URL::to('public/uploads/AdsVideos/'.$item['ads_video']);
                  return $item;
              });
  
  
      $AdsVideosPost = AdsEvent::Join('advertisements','advertisements.id','=','ads_events.ads_id')
              ->Join('videos','advertisements.ads_category','=','videos.post_ads_category')
              ->where('ads_events.status',1)->where('advertisements.status',1)
              ->where('advertisements.ads_category',@$video->post_ads_category)
              ->where('videos.id',@$video->id)
              ->where('ads_position','post')
              ->where('advertisements.id',@$video->post_ads)
              ->groupBy('advertisements.id')
              ->get()->map->only('ads_path','ads_video')->map(function ($item) {
                  $item['ads_type'] = $item['ads_video'] == null ? "Google_tag" : "upload_ads";
                  $item['ads_videos_url'] = URL::to('public/uploads/AdsVideos/'.$item['ads_video']);
                  return $item;
              });

        $plans_ads_enable = $this->plans_ads_enable($request->user_id);
       
        if($plans_ads_enable == 1 && $choose_player == 0 && $video ){

          $current_time = Carbon::now()->format('H:i:s');

          $video_ads_tag_url = AdsEvent::select('videos.ads_tag_url_id','videos.id as video_id','advertisements.*','ads_events.ads_id','ads_events.status','ads_events.end','ads_events.start')
              ->Join('advertisements','advertisements.id','=','ads_events.ads_id')
              ->Join('videos', 'advertisements.id', '=', 'videos.ads_tag_url_id');
              // ->whereDate('start', '=', Carbon\Carbon::now()->format('Y-m-d'))

              if($this->adveristment_plays_24hrs == 0){
                  $video_ads_tag_url =  $video_ads_tag_url->whereTime('ads_events.start', '<=', $current_time)->whereTime('ads_events.end', '>=', $current_time);
              }

              $video_ads_tag_url =  $video_ads_tag_url->where('ads_events.status',1)
                    ->where('advertisements.status',1)
                    ->where('advertisements.ads_upload_type','tag_url')
                    ->where('advertisements.id',$video->ads_tag_url_id)
                    ->where('videos.id', $video->id)
                    ->groupBy('advertisements.id')
                    ->pluck('ads_path')
                    ->first();

        }else{
            $video_ads_tag_url = null ;
        }


        $response = array(
        'status' => $status,
        'wishlist' => $wishliststatus,
        'andriod_wishliststatus' => $andriod_wishliststatus ,
        'andriod_like' => $andriod_like ,
        'andriod_dislike' => $andriod_dislike ,
        'andriod_watchlaterstatus' => $andriod_watchlaterstatus ,
        'andriod_favorite' => $andriod_favorite ,
        'tv_curr_time' => $tv_curr_time ,
        'tv_wishliststatus' => $tv_wishliststatus ,
        'curr_time' => $curr_time,
        'andriod_curr_time' => $andriod_curr_time,
        'ppv_video_status' => $ppv_video_status,
        'watchlater' => $watchlaterstatus,
        'favorite' => $favorite                                 ,
        'ppv_exist' => $ppv_exist,
        'userrole' => $userrole,
        'like' => $like,
        'dislike' => $dislike,
        'skiptime' => $skip_time,
        'shareurl' => URL::to('category/videos').'/'.$videodetail[0]->slug,
        'videodetail' => $videodetail,
        'videossubtitles' => $moviesubtitles,
        'main_genre' => $main_genre,
        'languages' => $languages,
        'Ads_videos_Pre' => $AdsVideosPre,
        'Ads_videos_Mid' => $AdsVideosMid,
        'Ads_videos_post' => $AdsVideosPost,
        'video_ads_tag_url' => $video_ads_tag_url ,
        'IOS_curr_time' => $IOS_curr_time ,
        'IOS_wishliststatus' => $IOS_wishliststatus ,
        'IOS_watchlaterstatus' => $IOS_watchlaterstatus ,
        'IOS_favorite' => $IOS_favorite ,
        'IOS_like' => $IOS_like ,
        'IOS_dislike' => $IOS_dislike ,
      );
    } catch (\Throwable $th) {
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }
   
    return response()->json($response, 200);
  }

  public function livestreams()
  {
    try {
      
      $myData = array();

      $current_timezone = current_timezone();

      $default_vertical_image_url = default_vertical_image_url();
      $default_horizontal_image_url = default_horizontal_image_url();

      $livestreams = LiveStream::select('id', 'title', 'slug', 'year', 'rating', 'access', 'publish_type', 'publish_time', 'publish_status', 'ppv_price',
                                          'duration', 'rating', 'image', 'featured', 'Tv_live_image', 'player_image', 'details', 'description', 'free_duration',
                                          'recurring_program', 'program_start_time', 'program_end_time', 'custom_start_program_time', 'custom_end_program_time',
                                          'recurring_timezone', 'recurring_program_week_day', 'recurring_program_month_day')
                                      ->where('active', '1')
                                      ->where('status', 1)
                                      ->get()->map(function ($item) use ($default_vertical_image_url,$default_horizontal_image_url) {
                                        $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $default_vertical_image_url ;
                                        $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $default_horizontal_image_url ;
                                        $item['tv_image_url'] = !is_null($item->Tv_live_image) ? URL::to('/public/uploads/images/'.$item->Tv_live_image) : $default_horizontal_image_url  ;
                                        $item['description'] = $item->description ;
                                        $item['source']    = "Livestream";
                                        return $item;
                                    });
  
      $livestreams_filter = $livestreams->filter(function ($livestream) use ($current_timezone) {

          $livestream->live_animation = 'true' ;

          if ($livestream->publish_type === 'recurring_program') {
      
              $Current_time = Carbon::now($current_timezone);
              $recurring_timezone = TimeZone::where('id', $livestream->recurring_timezone)->value('time_zone');
              $convert_time = $Current_time->copy()->timezone($recurring_timezone);
              $midnight = $convert_time->copy()->startOfDay();
      
              switch ($livestream->recurring_program) {
                  case 'custom':
                      $recurring_program_Status = $convert_time->greaterThanOrEqualTo($midnight) && $livestream->custom_end_program_time >=  Carbon::parse($convert_time)->format('Y-m-d\TH:i') ;
                      $recurring_program_live_animation = $livestream->custom_start_program_time <= $convert_time && $livestream->custom_end_program_time >= $convert_time;
                      break;
                  case 'daily':
                      $recurring_program_Status = $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                      $recurring_program_live_animation = $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                      break;
                  case 'weekly':
                      $recurring_program_Status =  ( $livestream->recurring_program_week_day == $convert_time->format('N') ) && $convert_time->greaterThanOrEqualTo($midnight)  && ( $livestream->program_end_time >= $convert_time->format('H:i') );
                      $recurring_program_live_animation = $livestream->recurring_program_week_day == $convert_time->format('N') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                      break;
                  case 'monthly':
                      $recurring_program_Status = $livestream->recurring_program_month_day == $convert_time->format('d') && $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                      $recurring_program_live_animation = $livestream->recurring_program_month_day == $convert_time->format('d') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                      break;
                  default:
                      $recurring_program_Status = false;
                      $recurring_program_live_animation = false;
                      break;
              }

              $livestream->recurring_program_live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;

              $livestream->live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;
      
              return $recurring_program_Status;
          }
      
          if ($livestream->publish_type === 'publish_later') {

              $Current_time = Carbon::now($current_timezone);
              
              $publish_later_Status = Carbon::parse($livestream->publish_time)->startOfDay()->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;
              $publish_later_live_animation = Carbon::parse($livestream->publish_time)->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;

              $livestream->publish_later_live_animation = $publish_later_live_animation  == true ? 'true' : 'false' ;

              $livestream->live_animation = $publish_later_live_animation  == true ? 'true' : 'false' ;

              return $publish_later_Status;
          }
      
          return $livestream->publish_type === 'publish_now' || $livestream->publish_type === 'publish_later' && $livestream->publish_later_Status || ($livestream->publish_type === 'recurring_program' && $recurring_program_Status);
      });

      $livestreams_sort = $livestreams_filter->sortBy(function ($livestream) {
      
          if ($livestream->publish_type === 'publish_now') {

              return $livestream->created_at;

          } elseif ($livestream->publish_type === 'publish_later' ) {

              return $livestream->publish_time;

          } elseif ($livestream->publish_type === 'recurring_program') {

              return $livestream->custom_start_program_time ?? $livestream->program_start_time;
          }

          return $livestream->publish_type;
      })->values();  

      $myData[] = array(
        "message" => count($livestreams) > 0 ? 'success' : 'nodata' ,
        "videos" => $livestreams
      );

      $response = array(
        'status' => 'true',
        'status_code' => 200,
        'live_streams' => $myData,
      );

    } catch (\Throwable $th) {

        $response = array(
          'status' => 'false',
          'status_code' => 400,
          'message' => $th->getMessage(),
        );
    }

    return response()->json($response, $response['status_code']);
  }

  public function livestreamdetail(Request $request)
  {
    try {

      $validator = Validator::make($request->all(), [
                    'liveid' => 'required', 
                    // 'user_id' => 'required'
                  ],
                    [
                      'liveid.required'  => 'Please enter your liveid',
                      // 'user_id.required' => 'Please enter your user_id',
                    ]);

      if ($validator->fails()) {

        return response()->json([
            'status' => 'false',
            'message'=> $validator->errors()->first(),
          ], 400);
      }

      $liveid = $request->liveid;
      $user_id = $request->user_id;

      $settings = Setting::first();

      // Live Language

        $languages = LiveLanguage::Join('languages','languages.id','=','live_languages.language_id')->where('live_languages.live_id',$liveid)->get('name');

        foreach($languages as $value){
          $language[] = $value['name'];
        }

        $languages = !empty($language) ? implode(",",$language) : " ";
        
      // Category Live

        $categorys = CategoryLive::join('live_categories','live_categories.id','=','livecategories.category_id')->where('live_id',$liveid)->get('name');

        foreach($categorys as $value){
          $category[] = $value['name'];
        }

        $categories = !empty($category) ? implode(",",$category) : ' ' ;

      // PPV 

      $current_date = new \DateTime(); 

      
        $ppv_exist =!empty($user_id) ? LivePurchase::where('video_id',$liveid)->where('user_id',$user_id)->where('payment_status','captured')->count() : 0;

        if ($ppv_exist > 0) {

              $ppv_time_expire = LivePurchase::where('user_id','=',$user_id)->where('video_id','=',$liveid)->orderBy('created_at', 'desc')->pluck('to_time')->first();
              if ($ppv_time_expire) {
                $ppv_time_expire = new \DateTime($ppv_time_expire);
            
                $expiry_duration = $current_date->diff($ppv_time_expire);
            
                $days = $expiry_duration->days;
                $hours = $expiry_duration->h;
            
                $ppv_video_status = $ppv_time_expire > $current_date ? "can_view" :  "expired" ;
                $expiry_duration = $ppv_time_expire > $current_date ? "Expires in: {$days} days, {$hours} hours" : null;
            } else {
                echo "No expiry time found.";
            }

              

        } else {
              $ppv_video_status = "pay_now";
              $expiry_duration = null;
        }

        //  Like & Dislike

        if($request->user_id != ''){

          $like_data = LikeDisLike::where("live_id","=",$liveid)->where("user_id","=",$user_id)->where("liked","=",1)->count();
          $dislike_data = LikeDisLike::where("live_id","=",$liveid)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
          $like = ($like_data == 1) ? "true" : "false";
          $dislike = ($dislike_data == 1) ? "true" : "false";
        }
        else{

          $like = 'false';
          $dislike = 'false';
        }

        $ios_plans_id = InappPurchase::get();

        $livestream_details = LiveStream::findorfail($request->liveid)->where('id',$request->liveid)->where('active',1)
                      ->where('status',1)->get()->map(function ($item) use ($user_id , $settings, $ios_plans_id) {
                          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                          $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
                          $item['live_description'] = $item->description ? $item->description : "" ;
                          $item['trailer'] = null ;
                          $item['livestream_format'] =  $item->url_type ;
                          $ios_plan = $ios_plans_id->firstwhere('product_id',$item->ios_ppv_price);

                          $item['ios_price'] = $ios_plan ? $ios_plan->plan_price : null;

                          $item['Share_URL'] = URL::to('live/'.$item->slug);

                          $item['recurring_timezone_details'] = TimeZone::where('id', $item->recurring_timezone)->get();

                          if( $item['livestream_format'] == "mp4"){
                            $item['livestream_url'] =  $item->mp4_url ;
                          }

                          elseif( $item['livestream_format'] == "embed"){
                            $item['livestream_url'] =  $item->embed_url ;
                          }

                          elseif( $item['livestream_format'] == "live_stream_video"){
                            $item['livestream_url'] =  $item->live_stream_video ;
                          }

                          elseif( $item['livestream_format'] == "acc_audio_url"){
                            $item['livestream_url'] =  $item->acc_audio_url ;
                          }

                          elseif( $item['livestream_format'] == "acc_audio_file"){
                            $item['livestream_url'] =  $item->acc_audio_file ;
                          }

                          elseif( $item['livestream_format'] == "Encode_video"){
                            $item['livestream_url'] =  $item->hls_url ;
                          }

                          else{
                            $item['livestream_url'] =  null ;
                          }

                        // M3U_channels
                        $parser       = new M3UFileParser( $item->m3u_url);
                        $item['M3U_channel'] =   $parser->getGroup()  ;

          $plans_ads_enable = $this->plans_ads_enable($user_id);

          if( $plans_ads_enable == 1){

            $item['live_ads_url'] =  AdsEvent::Join('advertisements','advertisements.id','=','ads_events.ads_id')
                                      // ->whereDate('start', '=', Carbon\Carbon::now()->format('Y-m-d'))
                                      // ->whereTime('start', '<=', $current_time)
                                      // ->whereTime('end', '>=', $current_time)
                                      ->where('ads_events.status',1)
                                      ->where('advertisements.status',1)
                                      ->where('advertisements.id',$item->live_ads)
                                      ->pluck('ads_path')->first();
                            
          }else{
            $item['live_ads_url'] = null;
          }

          
       // Check Channel Purchase 
       
       $UserChannelSubscription = true ;

       if ( $settings->user_channel_plans_page_status == 1 ) {

            $UserChannelSubscription = false ;

            $channel_id = LiveStream::where('id',$item->id)->where('uploaded_by','channel')->pluck('user_id')->first();
            
            if (is_null($channel_id)) {
                $UserChannelSubscription = true ;
            }

            if (!Auth::guest() && !is_null($channel_id) ) {

                $UserChannelSubscription = UserChannelSubscription::where('user_id',auth()->user()->id)
                                                ->where('channel_id',$channel_id)->where('status','active')
                                                ->where('subscription_start', '<=', Carbon::now())
                                                ->where('subscription_ends_at', '>=', Carbon::now())
                                                ->latest()->exists();

                if (Auth::user()->role == "admin") {
                    $UserChannelSubscription = true ;
                }
            }
        }

        $item['UserChannelSubscription'] = $UserChannelSubscription;
         
          return $item;
        });

      $livestreamSlug = LiveStream::where('user_id','=',$liveid)->pluck('slug')->first();
      $livestreamAccess = LiveStream::where('user_id','=',$liveid)->pluck('access')->first();

      // Reccuring Program 

      $current_timezone = current_timezone();

      $default_vertical_image_url = default_vertical_image_url();
      $default_horizontal_image_url = default_horizontal_image_url();

      $livestreams = LiveStream::query()->where('active', 1)->where('status', 1)
                                      ->where('id', $request->liveid)
                                      ->get()->map(function ($item) use ($default_vertical_image_url,$default_horizontal_image_url,$user_id) {
                                        
                                        $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $default_vertical_image_url ;
                                        $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $default_horizontal_image_url ;
                                        $item['tv_image_url'] = !is_null($item->Tv_live_image) ? URL::to('/public/uploads/images/'.$item->Tv_live_image) : $default_horizontal_image_url  ;
                                        $item['description'] = $item->description ;
                                        $item['source']    = "Livestream";

                                        $item['live_description'] = $item->description ? $item->description : "" ;
                                        $item['trailer'] = null ;
                                        $item['livestream_format'] =  $item->url_type ;
                                        $item['recurring_timezone_details'] = TimeZone::where('id', $item->recurring_timezone)->get();
              
                                        $item['Share_URL'] = URL::to('live/'.$item->slug);

                                          //  Livestream URL

                                        switch (true) {

                                          case $item['url_type'] == "mp4" &&  pathinfo($item['mp4_url'], PATHINFO_EXTENSION) == "mp4" :
                                              $item['livestream_URL'] =  $item->mp4_url ;
                                              $item['livestream_player_type'] =  'video/mp4' ;
                                          break;

                                          case $item['url_type'] == "mp4" &&  pathinfo($item['mp4_url'], PATHINFO_EXTENSION) == "m3u8" :
                                            $item['livestream_URL'] =  $item->mp4_url; ;
                                            $item['livestream_player_type'] =  'application/x-mpegURL' ;
                                          break;

                                          case $item['url_type'] == "embed":
                                              $item['livestream_URL'] =  $item->embed_url ;
                                              $item['livestream_player_type'] =  'video/mp4' ;
                                          break;

                                          case $item['url_type'] == "live_stream_video":
                                              $item['livestream_URL'] = $item->live_stream_video; ;
                                              $item['livestream_player_type'] =  'application/x-mpegURL' ;
                                          break;

                                          case $item['url_type'] == "m3u_url":
                                              $item['livestream_URL'] =  $item->m3u_url ;
                                              $item['livestream_player_type'] =  'application/x-mpegURL' ;
                                          break;

                                          case $item['url_type'] == "Encode_video":
                                              $item['livestream_URL'] =  $item->hls_url; ;
                                              $item['livestream_player_type'] =  'application/x-mpegURL'  ;
                                          break;

                                          case $item['url_type'] == "acc_audio_url":
                                            $item['livestream_URL'] =  $item->acc_audio_url ;
                                            $item['livestream_player_type'] =  'audio/aac' ;
                                          break;

                                          case $item['url_type'] == "acc_audio_file":
                                              $item['livestream_URL'] =  $item->acc_audio_file ;
                                              $item['livestream_player_type'] =  'audio/aac' ;
                                          break;

                                          case $item['url_type'] == "aws_m3u8":
                                            $item['livestream_URL'] =  $item->hls_url ;
                                            $item['livestream_player_type'] =  'application/x-mpegURL' ;
                                          break;

                                          default:
                                              $item['livestream_URL'] =  null ;
                                              $item['livestream_player_type'] =  null ;
                                          break;
                                      }
              
                                        // M3U Channels

                                        $parser  = new M3UFileParser( $item->m3u_url);
                                        $item['M3U_channel'] =   $parser->getGroup()  ;
                
                                        // Live Ads
                                        $item['live_ads_url'] = null;

                                        $plans_ads_enable = $this->plans_ads_enable($user_id);

                                        if( $plans_ads_enable == 1){
                              
                                          $item['live_ads_url'] =  AdsEvent::Join('advertisements','advertisements.id','=','ads_events.ads_id')
                                                                    // ->whereDate('start', '=', Carbon\Carbon::now()->format('Y-m-d'))
                                                                    // ->whereTime('start', '<=', $current_time)
                                                                    // ->whereTime('end', '>=', $current_time)
                                                                    ->where('ads_events.status',1)
                                                                    ->where('advertisements.status',1)
                                                                    ->where('advertisements.id',$item->live_ads)
                                                                    ->pluck('ads_path')->first();
                                        }

                                      return $item;
                                    });
  
      $livestreams = $livestreams->filter(function ($livestream) use ($current_timezone) {

          $livestream->live_animation = 'true' ;

          if ($livestream->publish_type === 'recurring_program') {
      
              $Current_time = Carbon::now($current_timezone);
              $recurring_timezone = TimeZone::where('id', $livestream->recurring_timezone)->value('time_zone');
              $convert_time = $Current_time->copy()->timezone($recurring_timezone);
              $midnight = $convert_time->copy()->startOfDay();
      
              switch ($livestream->recurring_program) {
                  case 'custom':
                      $recurring_program_Status = $convert_time->greaterThanOrEqualTo($midnight) && $livestream->custom_end_program_time >=  Carbon::parse($convert_time)->format('Y-m-d\TH:i') ;
                      $recurring_program_live_animation = $livestream->custom_start_program_time <= $convert_time && $livestream->custom_end_program_time >= $convert_time;
                      break;
                  case 'daily':
                      $recurring_program_Status = $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                      $recurring_program_live_animation = $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                      break;
                  case 'weekly':
                      $recurring_program_Status =  ( $livestream->recurring_program_week_day == $convert_time->format('N') ) && $convert_time->greaterThanOrEqualTo($midnight)  && ( $livestream->program_end_time >= $convert_time->format('H:i') );
                      $recurring_program_live_animation = $livestream->recurring_program_week_day == $convert_time->format('N') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                      break;
                  case 'monthly':
                      $recurring_program_Status = $livestream->recurring_program_month_day == $convert_time->format('d') && $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                      $recurring_program_live_animation = $livestream->recurring_program_month_day == $convert_time->format('d') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                      break;
                  default:
                      $recurring_program_Status = false;
                      $recurring_program_live_animation = false;
                      break;
              }

              $livestream->recurring_program_live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;

              $livestream->live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;
      
              return $recurring_program_Status;
          }
      
          if ($livestream->publish_type === 'publish_later') {

              $Current_time = Carbon::now($current_timezone);
              
              $publish_later_Status = Carbon::parse($livestream->publish_time)->startOfDay()->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;
              $publish_later_live_animation = Carbon::parse($livestream->publish_time)->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;

              $livestream->publish_later_live_animation = $publish_later_live_animation  == true ? 'true' : 'false' ;

              $livestream->live_animation = $publish_later_live_animation  == true ? 'true' : 'false' ;

              return $publish_later_Status;
          }
      
          return $livestream->publish_type === 'publish_now' || $livestream->publish_type === 'publish_later' && $livestream->publish_later_Status || ($livestream->publish_type === 'recurring_program' && $recurring_program_Status);
      });

      $response = array(
        'status' => 'true',
        'shareurl' => URL::to('live').'/'.$liveid,
        'livedetail' => $livestream_details,
        'like' => $like,
        'dislike' => $dislike,
        'ppv_video_status' => $ppv_video_status,
        'expiry_duration' => $expiry_duration,
        'video_access' => $livestreamAccess,
        'languages' => $languages,
        'categories' => $categories,
        'current_timezone' => current_timezone(),
        'RentURL' => URL::to('live').'/'.$livestreamSlug,
        'livestreams' => $livestreams,
      );

      
    } catch (\Throwable $th) {

        $response = array(
          'status' => 'false',
          'message' => $th->getMessage() ,
        );
    }
    return response()->json($response, 200);
  }

  public function M3u_channel_videos(Request $request)
  {
    try {
      
        $M3u_category = $request->m3u_url_category;
        $m3u_url = $request->m3u_url;

        $parser = new M3UFileParser($m3u_url);
        $parser_list = $parser->list();


        $M3u_url_array = collect($parser_list[$M3u_category])->map(function ($item) {

            $mp3 = preg_match_all('/(?P<tag>#EXTINF:-1)|(?:(?P<prop_key>[-a-z]+)=\"(?P<prop_val>[^"]+)")|(?<something>,[^\r\n]+)|(?<url>http[^\s]+)/', $item, $match );
            $count = count( $match[0] );
            $tag_name = '1' ;
            $url      = '4' ;

            for( $i =0; $i < $count; $i++ ){
                $M3u_videos = array(
                    'M3u_Networl_url' => $match[0][1],
                    'M3u_video_image' => $match[0][2],
                    'M3u_video_title' => $match[0][3],
                    'M3u_video_Network' => $match[0][4],
                    'M3u_video_url' => $match[0][5],
                  );
            } 

            return $M3u_videos;
        });

        $respond = array(
          'status' => 'true' ,
          'message' => 'M3 urls Retrieved Successfully !' ,
          'M3u_category' => $M3u_category ,
          'M3u_url_array' => $M3u_url_array ,
        );

    } catch (\Throwable $th) {
      
      $respond = array(
        'status' => 'false' ,
        'message' => $th->getMessage() ,
      );
    }
  
    return response()->json($respond, 200);

  }

  public function cmspages()
     {
      try {
          $pages = Page::where('active', '=', 1)->get()->map(function ($item) {
            $item['page_url'] = URL::to('page/'.$item->slug);
            return $item;
          });

          $response=array(
            'status' => 'true',
            'pages' => $pages
          );

      } catch (\Throwable $th) {

          $response=array(
            'status' => 'false',
            'pages' => $th->getMessage()
          );
      }
     
      return response()->json($response, 200);
     }

     public function sliders()
     {

        $sliders = Slider::where('active', '=', 1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                  $item['slider'] = URL::to('public/uploads/videocategory/'.$item->slider );
                  $item['player_image'] = URL::to('public/uploads/videocategory/'.$item->player_image );
                  $item['slider_source'] = "slider";
                  return $item;
        });

        $video_banners = Video::where('active','=',1)->where('status','=',1)
                  ->where('banner', '=', 1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                  $item['image_url'] = URL::to('public/uploads/images/'.$item->image );
                  $item['video_url'] = URL::to('/').'/storage/app/public/';
                  $item['player_image'] = URL::to('public/uploads/images/'.$item->player_image );
                  $item['slider_source'] = "videos";
                  return $item;
        });

        $live_banner = LiveStream::where('active','=',1)
                  ->where('banner', '=', 1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                  $item['image_url'] = URL::to('public/uploads/images/'.$item->image );
                  $item['player_image'] = URL::to('public/uploads/images/'.$item->player_image );
                  $item['slider_source'] = "livestream";
                  return $item;
        });

        $series_banner = Series::where('active','=',1)->where('banner', '=', 1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
              $item['image_url'] = URL::to('public/uploads/images/'.$item->image );
              $item['player_image'] = URL::to('public/uploads/images/'.$item->player_image );
              $item['slider_source'] = "series";
              return $item;
        });

        $audio_banner = Audio::where('active','=',1)->where('banner',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
          $item['source'] = "audio_slider";
          return $item;
        });

        $slider_array  =  array ( 'sliders'       => $sliders);
        $videos_array  =  array ( 'video_banners' => $video_banners);
        $live_array    =  array ( 'live_banner'   => $live_banner);
        $series_array  =  array ( 'series_banner' => $series_banner);
        $audio_array   =  array ( 'audio_banner' => $audio_banner );

        $combine_sliders[] =  array_merge($slider_array,$videos_array,$live_array,$series_array,$audio_array);

        $response = array(
          'status' => 'true',
          'banners' => $combine_sliders,
        );

        return response()->json($response, 200);
     }

     public function coupons(Request $request)
      {
            $user_id = $request->user_id;
           // $myrefferals = User::find($user_id)->referrals;
            $coupons = Coupon::first();
            // $myrefferals = User::with('referrals')->where("id",$user_id)->where("coupon_used",$user_id)->get();
            $myrefferals = User::where("referrer_id","=",$user_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                $item['coupon_code'] = Coupon::first()->coupon_code;
                return $item;
            });
            $response = array(
                'status' => 'true',
                'myrefferals' => $myrefferals
            );
            return response()->json($response, 200);
      }
//
//    public function coupons(Request $request)
//     {
//            $user_id = $request->user_id;
//            $myrefferals = User::find($user_id)->referrals;
//            $coupons = Coupon::first();
//
//          // $myrefferals = User::with('referrals')->where("id",$user_id)->where("coupon_used",$user_id)->get();
//
//            $myrefferals = User::with('referrals')->where("id","=",$user_id)->get()->map(function ($item) {
//                $item['coupon_code'] = Coupon::first()->coupon_code;
//                return $item;
//            });
//            $response = array(
//                'status' => 'true',
//                'myrefferals' => $myrefferals
//            );
//            return response()->json($response, 200);
//      }

    public function MobileSliders()
     {
      $sliders = MobileSlider::where('active', '=', 1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['slider'] = URL::to('/').'/public/uploads/videocategory/'.$item->slider;
        return $item;
      });
      $response = array(
        'status' => 'true',
        'sliders' => $sliders
      );
      return response()->json($response, 200);
     }

     public function ppvvideos()
  {
    $ppvcategories = PpvCategory::select('id','image')->get()->toArray();
    $myData = array();
    foreach ($ppvcategories as $key => $ppvcategory) {
      $ppvcategoryid = $ppvcategory['id'];
      $genre_image = $ppvcategory['image'];
      $videos= PpvVideo::where('video_category_id',$ppvcategoryid)->where('active','=',1)->where('status','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });
      $categorydetails = PpvCategory::where('id','=',$ppvcategoryid)->first();

      if(count($videos) > 0){
        $msg = 'success';
      }else{
        $msg = 'nodata';
      }
      $myData[] = array(
        "genre_name"   => $categorydetails->name,
        "genre_id"   => $ppvcategoryid,
        "genre_image"   => URL::to('/').'/public/uploads/ppvcategory/'.$genre_image,
        "message" => $msg,
        "videos" => $videos
      );

    }

    $response = array(
      'status' => 'true',
      'genre_movies' => $myData
    );
    return response()->json($response, 200);
  }

  public function ppvvideodetail(Request $request)
  {
    $ppvvideoid = $request->ppvvideoid;
    $user_id = $request->user_id;
    $ppvvideodetail = PpvVideo::where('id',$ppvvideoid)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });
      $ppv_status = PpvPurchase::join('ppv_videos', 'ppv_videos.id', '=', 'ppv_purchases.video_id')
      ->where('ppv_purchases.user_id', '=', $user_id)
      ->where('ppv_purchases.video_id', '=', $ppvvideoid)->orderBy('ppv_purchases.created_at', 'desc')->get()->map(function ($item) {
        $item['ppv_videos_status'] = ($item->to_time > Carbon::now() )?"Can View":"Expired";
        return $item;
      });
      if(!$ppv_status->isEmpty()){
        $ppvstatus = $ppv_status[0]->ppv_videos_status;
      }else{
        $ppvstatus = 'Purchase';
      }

      if ( $request->user_id != '' ) {
      $user_id = $request->user_id;
      //Wishlilst
      $cnt = Wishlist::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$ppvvideoid)->count();
      $wishliststatus =  ($cnt == 1) ? "true" : "false";
      //Watchlater
      $cnt1 = Watchlater::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$ppvvideoid)->count();
      $watchlaterstatus =  ($cnt1 == 1) ? "true" : "false";
      $userrole = User::where('id','=',$user_id)->first()->role;
      $status = 'true';
    } else{
      $wishliststatus = 'false';
      $watchlaterstatus = 'false';
      $userrole = '';
      $status = 'false';
    }
    $response = array(
      'status' => $status,
      'wishlist' => $wishliststatus,
      'watchlater' => $watchlaterstatus,
      'ppvstatus' => $ppvstatus,
      'userrole' => $userrole,
      'shareurl' => URL::to('ppvVideos/play_videos').'/'.$ppvvideoid,
      'ppvvideodetail' => $ppvvideodetail
    );
    return response()->json($response, 200);
  }

  public function directVerify(Request $request){
    if (!empty($request->post('activation_code')) && !empty($request->post('mobile'))) {
      $activation_code = $request->post('activation_code');
      $ccode = $request->post('ccode');
      $mobile = $request->post('mobile');
      $user = User::where('mobile',"=", $mobile)
                      ->update(['otp' => "1234"]);
      $fetch_user = User::where('mobile',"=", $mobile)->first();
        // $user = User::where('activation_code', '=', $activation_code)->first();
        // $fetch_user = User::where('activation_code', '=', $activation_code)->first();
      if (!empty($user)) {
        if($activation_code == $fetch_user->otp){
            $mobile = $fetch_user->mobile;
            $email = $fetch_user->email;
            $password = $fetch_user->password;
              if (Auth::attempt(['email' => $email, 'otp' => $activation_code])) {
                $response = array(
                    'status' =>'true',
                    'message' =>'Your account is verified and login successfully'
                  );
                 return response()->json($response, 200);
              }
          } else {
              $response = array(
                    'status' =>'false',
                    'message' =>'Invalid OTP number'
                  );
                 return response()->json($response, 400);
        }
      } else {
        $response = array(
                    'status' =>'false',
                    'message' =>'Invalid mobile number'
                  );
                 return response()->json($response, 400);
      }
    } else {
      if (empty($request->post('activation_code')) && !empty($request->post('mobile'))) {
        $msg = "Please enter the OTP";
      } else if(!empty($request->post('activation_code')) && empty($request->post('mobile'))) {
        $msg = "Please enter the mobile number";
      } else {
        $msg = "Please enter the OTP and Mobile number";
      }
        $response = array(
                    'status' =>'false',
                    'message' => $msg
                  );
        return response()->json($response, 400);
    }

    }

  public function updateProfile(Request $request) {

      try {

          $user = User::find($request->user_id);

          $input = array(
            'email'    => $request->user_email,
            'username' => $request->user_username,
            'name'     => $request->user_name,
            'ccode'    => $request->user_ccode,
            'mobile'   => $request->user_mobile,
            'gender'   => $request->gender,
            'DOB'      => $request->DOB,
            'country'      => $request->country,
            'ugc_about'      => $request->ugc_about,
            'ugc_facebook'      => $request->ugc_facebook,
            'ugc_instagram'      => $request->ugc_instagram,
            'ugc_twitter'      => $request->ugc_twitter,
          );

          if($request->hasFile('avatar')){

            $file = $request->avatar;

            if (File::exists(base_path('public/uploads/avatars/'.$user->avatar))) {
                File::delete(base_path('public/uploads/avatars/'.$user->avatar));
            }

            $filename   = 'user-avatar-'.time().'.'.$file->getClientOriginalExtension();
            Image::make($file)->save(base_path().'/public/uploads/avatars/'.$filename );

            $input+= [ 'avatar' => $filename ] ;

          }
        
          if($request->hasFile('ugc_banner')){

            $file = $request->ugc_banner;
            
            if (File::exists(base_path('public/uploads/ugc-banner/'.$user->ugc_banner))) {
                File::delete(base_path('public/uploads/ugc-banner/'.$user->ugc_banner));
            }

            $filename   = 'user-banner-'.time().'.'.$file->getClientOriginalExtension();
            Image::make($file)->save(base_path().'/public/uploads/ugc-banner/'.$filename );

            $input+= [ 'ugc_banner' => $filename ] ;

          }
          if(!empty($request->user_password)){
            $input+= [ 'password' => Hash::make($request->user_password) ] ;
          }

          if(!empty($request->ios_avatar)){
            $input+= [ 'ios_avatar' => $request->ios_avatar ] ;
          }
          $user->update($input);
          
          $response = array(
            'status'=>'true',
            'message'=>'Your Profile detail has been updated'
          );

      } catch (\Throwable $th) {
        
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];

      }

      return response()->json($response, 200);
   }

   public function addwishlist(Request $request) {

    $user_id = $request->user_id;
    $video_id = $request->video_id;

    if (!empty($video_id)) {
        $count = Wishlist::where('user_id', $user_id)->where('video_id', $video_id)->count();

        if ($count > 0) {
            Wishlist::where('user_id', $user_id)->where('video_id', $video_id)->delete();

            $response = [
                'status' => 'false',
                'message' => 'Removed From Your Wishlist'
            ];
        } else {
            $data = ['user_id' => $user_id, 'video_id' => $video_id];
            Wishlist::insert($data);

            $response = [
                'status' => 'true',
                'message' => 'Added to Your Wishlist'
            ];
        }
    }
    return response()->json($response, 200);

  }

  public function addfavorite(Request $request) {

    try {
      
      $user_id = $request->user_id;
      $video_id = $request->video_id;

      if (!empty($video_id)) {
          $count = Favorite::where('user_id', $user_id)->where('video_id', $video_id)->count();

          if ($count > 0) {
              Favorite::where('user_id', $user_id)->where('video_id', $video_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Favorite'
              ];
          } else {
              $data = ['user_id' => $user_id, 'video_id' => $video_id];
              Favorite::insert($data);

              $response = [
                    'status' => 'true',
                    'message' => 'Added to Your Favorite'
                ];
            }
      }
    } catch (\Throwable $th) {
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];
    }

    return response()->json($response, 200);

  }
  public function addwishlistaudio(Request $request) {

    $user_id = $request->user_id;
    //$type = $request->type;//channel,ppv
    $audio_id = $request->audio_id;
    if($request->audio_id != ''){
      $count = Wishlist::where('user_id', '=', $user_id)->where('audio_id', '=', $audio_id)->count();
      if ( $count > 0 ) {
        Wishlist::where('user_id', '=', $user_id)->where('audio_id', '=', $audio_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Wishlist'
        );
      } else {
        $data = array('user_id' => $user_id, 'audio_id' => $audio_id );
        Wishlist::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added to Your Wishlist'
        );

      }
    }

    return response()->json($response, 200);

  }

  public function addfavoriteaudio(Request $request) {

    $user_id = $request->user_id;
    //$type = $request->type;//channel,ppv
    $audio_id = $request->audios_id;
    if($request->audios_id != ''){
      $count = Favorite::where('user_id', '=', $user_id)->where('audio_id', '=', $audio_id)->count();
      if ( $count > 0 ) {
        Favorite::where('user_id', '=', $user_id)->where('audio_id', '=', $audio_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Favorite'
        );
      } else {
        $data = array('user_id' => $user_id, 'audio_id' => $audio_id );
        Favorite::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added  to  Your Favorite'
        );

      }
    }

    return response()->json($response, 200);

  }


  public function addwatchlater(Request $request) {

    $user_id = $request->user_id;
    $video_id = $request->video_id;
    if($request->video_id != ''){
      $count = Watchlater::where('user_id', '=', $user_id)->where('video_id', '=', $video_id)->count();
      if ( $count > 0 ) {
        Watchlater::where('user_id', '=', $user_id)->where('video_id', '=', $video_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Watch Later'
        );
      } else {
        $data = array('user_id' => $user_id, 'video_id' => $video_id );
        Watchlater::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added to Your Watch Later'
        );

      }
    }

    return response()->json($response, 200);

  }

  public function addwatchlateraudio(Request $request) {

    $user_id = $request->user_id;
    $audio_id = $request->audios_id;
    if($request->audios_id != ''){
      $count = Watchlater::where('user_id', '=', $user_id)->where('audio_id', '=', $audio_id)->count();
      if ( $count > 0 ) {
        Watchlater::where('user_id', '=', $user_id)->where('audio_id', '=', $audio_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Watch Later'
        );
      } else {
        $data = array('user_id' => $user_id, 'audio_id' => $audio_id );
        Watchlater::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added  to  Your Watch Later'
        );

      }
    }

    return response()->json($response, 200);

  }

  public function myWishlists(Request $request) {

    $user_id = $request->user_id;

    /*channel videos*/
    $wishlist_videos = Wishlist::where('user_id', $user_id)
                                  ->whereNotNull('video_id')
                                  ->orderBy('id', 'desc')
                                  ->get();

                              if ($wishlist_videos->isNotEmpty()) {
                                  $video_ids = $wishlist_videos->pluck('video_id')->toArray();

                                  // Fetch all video details while preserving order
                                  $videos = Video::whereIn('id', $video_ids)->get()->keyBy('id');

                                  // Map wishlist order to videos
                                  $channel_videos = $wishlist_videos->map(function ($wishlist) use ($videos) {
                                      if (isset($videos[$wishlist->video_id])) {
                                          $item = $videos[$wishlist->video_id];
                                          $item['image_url'] = URL::to('/') . '/public/uploads/images/' . $item->image;
                                          $item['video_url'] = URL::to('/') . '/storage/app/public/';
                                          $item['source'] = 'video';
                                          return $item;
                                      }
                                  })->filter(); // Remove null values if any
// Remove null values if any

                                  $status = $channel_videos->isNotEmpty() ? "true" : "false";
                              } else {
                                  $status = "false";
                                  $channel_videos = [];
                              }

    //UGC Videos
    $ugc_video_ids = Wishlist::select('ugc_video_id')->where('user_id','=',$user_id)->get();
    $ugc_video_ids_count = Wishlist::where('user_id','=',$user_id)->whereNotNull('ugc_video_id')->pluck('ugc_video_id')->count();
    // return $ugc_video_ids_count;

    if ( $ugc_video_ids_count  > 0) {

      foreach ($ugc_video_ids as $key => $value1) {
        $k2[] = $value1->ugc_video_id;
      }

      $ugc_videos = UGCVideo::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        $item['source'] = 'ugc_videos';
        return $item;
      });
      if(count($ugc_videos) > 0){
        $status = "true";
      }else{
        $status = "false";
      }
    }else{
      $status = "false";
      $ugc_videos = [];
    }
 
    // Episode

    $episode_id = Wishlist::where('user_id','=',$user_id)->whereNotNull('episode_id')->latest()->pluck('episode_id');
    

    if(count($episode_id) > 0 ){

        $episode = Episode::whereIn('id',$episode_id)->orderBy('episode_order')->get()->map(function ($item) {
          $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
          $item['source'] = 'episode';
          return $item;
        });

    }else{
      $episode = [];
    }

    // Audios

    $audio_id = Wishlist::where('user_id','=',$user_id)->whereNotNull('audio_id')->pluck('audio_id');

    if(count($audio_id) > 0 ){

        $audios = Audio::whereIn('id',$audio_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['source'] = 'audio';
          return $item;
        });

    }else{
      $audios = [];
    }

    if(count($wishlist_videos)  > 0 || $ugc_video_ids_count  > 0 || count($episode_id) > 0 || count($audio_id) > 0){
      $status = "true";
    }else{
      $status = "false";
    }

    $response = array(
        'status'=>$status,
        'channel_videos' => $channel_videos,
        'episode_videos' => $episode,
        'ugc_videos' => $ugc_videos,
        'audios' => $audios
       );

    return response()->json($response, 200);

  }


  public function Wishlists_list(Request $request) {
    $user_id = $request->user_id;

    $wishlists = Wishlist::where('user_id', $user_id)
        ->orderBy('created_at', 'desc')
        ->get();
    $wishlist_items = [];
    foreach ($wishlists as $wishlist) {
        if ($wishlist->video_id) {
            $video = Video::find($wishlist->video_id);
            if ($video) {
                $video_data = [
                    'id' => $video->id,
                    'title' => $video->title,
                    'type' => $video->type,
                    'mp4_url' => $video->mp4_url,
                    'm3u8_url' => $video->m3u8_url,
                    'access' => $video->access,
                    'image' => $video->image,
                    'trailer' => $video->trailer,
                    'url' => $video->url,
                    'path' => $video->path,
                    'image_url' => URL::to('/') . '/public/uploads/images/' . $video->image,
                    'source' => 'video',
                    'videos_url' => null,
                    'video_player_type' => null,
                    'qualities' => [] 
                ];
    
                switch (true) {
                    case $video->type == "mp4_url":
                        $video_data['video_url'] = URL::to('/') . '/storage/app/public/';
                        $video_data['videos_url'] = $video->mp4_url;
                        $video_data['video_player_type'] = 'video/mp4';
                        break;

                    case $video->type == "m3u8_url":
                      $video_data['video_url'] = URL::to('/') . '/storage/app/public/';
                        $video_data['videos_url'] = $video->m3u8_url;
                        $video_data['video_player_type'] = 'application/x-mpegURL';
                        break;

                    case $video->type == "embed":
                      $video_data['video_url'] = URL::to('/') . '/storage/app/public/';
                        $video_data['videos_url'] = $video->embed_code;
                        $video_data['video_player_type'] = 'embed';
                        break;

                    case $video->type == null && pathinfo($video->mp4_url, PATHINFO_EXTENSION) == "mp4":
                      $video_data['video_url'] = URL::to('/') . '/storage/app/public/';
                        $video_data['videos_url'] = URL::to('/storage/app/public/' . $video->path . '.m3u8');
                        $video_data['video_player_type'] = 'application/x-mpegURL';
                        break;

                    case $video->type == null && pathinfo($video->mp4_url, PATHINFO_EXTENSION) == "mov":
                      $video_data['video_url'] = URL::to('/') . '/storage/app/public/';
                        $video_data['videos_url'] = $video->mp4_url;
                        $video_data['video_player_type'] = 'video/mp4';
                        break;

                    case $video->type == null:
                        $video_data['videos_url'] = URL::to('/storage/app/public/' . $video->path . '.m3u8');
                        $video_data['video_url'] = URL::to('/') . '/storage/app/public/';
                        $video_data['video_player_type'] = 'application/x-mpegURL';
                        break;

                    case $video->type == " " && !is_null($video->transcoded_url):
                      $video_data['video_url'] = URL::to('/') . '/storage/app/public/';
                        $video_data['videos_url'] = $video->transcoded_url;
                        $video_data['video_player_type'] = 'application/x-mpegURL';
                        break;

                    case $video->type == "bunny_cdn":
                      $video_data['video_url'] = URL::to('/') . '/storage/app/public/';
                        $video_data['videos_url'] = $video->mp4_url;
                        $video_data['video_player_type'] = 'application/x-mpegURL';

                        $response = Http::withoutVerifying()->get($video->m3u8_url);
                        $qualities = [];

                        if ($response->successful()) {
                            $contents = $response->body();
                            preg_match_all('/#EXT-X-STREAM-INF:.*RESOLUTION=(\d+x\d+)\s*(\d+p)\/video\.m3u8/', $contents, $matches);

                            foreach ($matches[2] as $quality) {
                                $qualities[] = str_replace('p', '', $quality);
                            }
                        }

                        $video_data['qualities'] = $qualities;
                        break;

                    default:
                        $video_data['videos_url'] = null;
                        $video_data['video_player_type'] = null;
                        $video_data['qualities'] = [];
                        break;
                }

                 array_unshift($wishlist_items, $video_data);
            }
        } elseif ($wishlist->ugc_video_id) {
            $ugc_video = UGCVideo::find($wishlist->ugc_video_id);
            if ($ugc_video) {
               $video_data = [
                    'id' => $ugc_video->id,
                    'title' => $ugc_video->title,
                    'type' => $ugc_video->type,
                    'mp4_url' => $ugc_video->mp4_url,
                    'm3u8_url' => $ugc_video->m3u8_url,
                    'image' => $ugc_video->image,
                    'url' => $ugc_video->url,
                    'path' => $ugc_video->path,
                    'image_url' => URL::to('/') . '/public/uploads/images/' . $ugc_video->image,
                    'source' => 'ugc_videos',
                    'videos_url' => null,
                    'video_player_type' => null,
                    'qualities' => [] 
                ];
                switch (true) {
                  case $ugc_video->type == "mp4_url":
                      $video_data['videos_url'] = $ugc_video->mp4_url;
                      $video_data['video_player_type'] = 'video/mp4';
                      break;

                  case $ugc_video->type == "m3u8_url":
                      $video_data['videos_url'] = $ugc_video->m3u8_url;
                      $video_data['video_player_type'] = 'application/x-mpegURL';
                      break;

                  case $ugc_video->type == "embed":
                      $video_data['videos_url'] = $ugc_video->embed_code;
                      $video_data['video_player_type'] = 'embed';
                      break;

                  case $ugc_video->type == null && pathinfo($ugc_video->mp4_url, PATHINFO_EXTENSION) == "mp4":
                      $video_data['videos_url'] = URL::to('/storage/app/public/' . $ugc_video->path . '.m3u8');
                      $video_data['video_player_type'] = 'application/x-mpegURL';
                      break;

                  case $ugc_video->type == null && pathinfo($ugc_video->mp4_url, PATHINFO_EXTENSION) == "mov":
                      $video_data['videos_url'] = $ugc_video->mp4_url;
                      $video_data['video_player_type'] = 'video/mp4';
                      break;

                  case $ugc_video->type == null:
                      $video_data['videos_url'] = URL::to('/storage/app/public/' . $ugc_video->path . '.m3u8');
                      $video_data['video_player_type'] = 'application/x-mpegURL';
                      break;

                  case $ugc_video->type == " " && !is_null($ugc_video->transcoded_url):
                      $video_data['videos_url'] = $ugc_video->transcoded_url;
                      $video_data['video_player_type'] = 'application/x-mpegURL';
                      break;

                  case $ugc_video->type == "bunny_cdn":
                      $video_data['videos_url'] = $ugc_video->mp4_url;
                      $video_data['video_player_type'] = 'application/x-mpegURL';

                      $response = Http::withoutVerifying()->get($ugc_video->m3u8_url);
                      $qualities = [];

                      if ($response->successful()) {
                          $contents = $response->body();
                          preg_match_all('/#EXT-X-STREAM-INF:.*RESOLUTION=(\d+x\d+)\s*(\d+p)\/video\.m3u8/', $contents, $matches);

                          foreach ($matches[2] as $quality) {
                              $qualities[] = str_replace('p', '', $quality);
                          }
                      }

                      $video_data['qualities'] = $qualities;
                      break;

                  default:
                      $video_data['videos_url'] = null;
                      $video_data['video_player_type'] = null;
                      $video_data['qualities'] = [];
                      break;
              }
               array_unshift($wishlist_items, $video_data);
            }
        } elseif ($wishlist->episode_id) {
            $episode = Episode::find($wishlist->episode_id);
            if ($episode) {
                $video_data = [
                  'id' => $episode->id,
                  'title' => $episode->title,
                  'type' => $episode->type,
                  'mp4_url' => $episode->mp4_url,
                  'm3u8_url' => $episode->m3u8_url,
                  'image' => $episode->image,
                  'url' => $episode->url,
                  'path' => $episode->path,
                  'image_url' => URL::to('/') . '/public/uploads/images/' . $episode->image,
                  'series_name' => Series::where('id', $episode->series_id)->pluck('title')->first(),
                  'source' => 'episode',
                  'videos_url' => null,
                  'video_player_type' => null,
                  'qualities' => [] 
              ];
              switch (true) {
                case $episode->type == "mp4_url":
                    $video_data['videos_url'] = $episode->mp4_url;
                    $video_data['video_player_type'] = 'video/mp4';
                    break;
                case $episode->type == "m3u8_url":
                    $video_data['videos_url'] = $episode->m3u8_url;
                    $video_data['video_player_type'] = 'application/x-mpegURL';
                    break;
                case $episode->type == "embed":
                    $video_data['videos_url'] = $episode->embed_code;
                    $video_data['video_player_type'] = 'embed';
                    break;
                case $episode->type == null && pathinfo($episode->mp4_url, PATHINFO_EXTENSION) == "mp4":
                    $video_data['videos_url'] = URL::to('/storage/app/public/' . $episode->path . '.m3u8');
                    $video_data['video_player_type'] = 'application/x-mpegURL';
                    break;
                case $episode->type == null && pathinfo($episode->mp4_url, PATHINFO_EXTENSION) == "mov":
                    $video_data['videos_url'] = $episode->mp4_url;
                    $video_data['video_player_type'] = 'video/mp4';
                    break;

                case $episode->type == null:
                    $video_data['videos_url'] = URL::to('/storage/app/public/' . $episode->path . '.m3u8');
                    $video_data['video_player_type'] = 'application/x-mpegURL';
                    break;

                case $episode->type == " " && !is_null($episode->transcoded_url):
                    $video_data['videos_url'] = $episode->transcoded_url;
                    $video_data['video_player_type'] = 'application/x-mpegURL';
                    break;

                case $episode->type == "bunny_cdn":
                    $video_data['videos_url'] = $episode->mp4_url;
                    $video_data['video_player_type'] = 'application/x-mpegURL';

                    $response = Http::withoutVerifying()->get($episode->m3u8_url);
                    $qualities = [];

                    if ($response->successful()) {
                        $contents = $response->body();
                        preg_match_all('/#EXT-X-STREAM-INF:.*RESOLUTION=(\d+x\d+)\s*(\d+p)\/video\.m3u8/', $contents, $matches);

                        foreach ($matches[2] as $quality) {
                            $qualities[] = str_replace('p', '', $quality);
                        }
                    }

                    $video_data['qualities'] = $qualities;
                    break;

                default:
                    $video_data['videos_url'] = null;
                    $video_data['video_player_type'] = null;
                    $video_data['qualities'] = [];
                    break;
            }
             array_unshift($wishlist_items, $video_data);
            }
        } elseif ($wishlist->audio_id) {
            $audio = Audio::find($wishlist->audio_id);
            if ($audio) {
                  $audio_data = [
                    'id' => $audio->id,
                    'title' => $episode->title,
                    'type' => $episode->type,
                    'mp3_url' => $episode->mp3_url,
                    'image' => $episode->image,
                    'image_url' => URL::to('/') . '/public/uploads/images/' . $audio->image,
                    'source' => 'audio',
                ];
                $wishlist_items[] = $audio_data;
            }
        }
    }

    // Determine status
    $status = count($wishlist_items) > 0 ? "true" : "false";

    // Response
    $response = [
        'status' => $status,
        'wishlists' => $wishlist_items
    ];

    return response()->json($response, 200);
  }


  public function Favourites_list(Request $request) {
    $user_id = $request->user_id;
    $favorites = Favorite::where('user_id', $user_id)
        ->orderBy('created_at', 'desc')
        ->get();

    $favorite_items = [];

    foreach ($favorites as $favorite) {
        if ($favorite->video_id) {
            $video = Video::find($favorite->video_id);
            if ($video) {
                $video_data = [
                    'id' => $video->id,
                    'title' => $video->title,
                    'type' => $video->type,
                    'mp4_url' => $video->mp4_url,
                    'm3u8_url' => $video->m3u8_url,
                    'access' => $video->access,
                    'image' => $video->image,
                    'trailer' => $video->trailer,
                    'url' => $video->url,
                    'path' => $video->path,
                    'image_url' => URL::to('/') . '/public/uploads/images/' . $video->image,
                    'source' => 'video',
                    'videos_url' => null,
                    'video_player_type' => null,
                    'qualities' => [],
                ];

                switch (true) {
                    case $video->type == "mp4_url":
                        $video_data['videos_url'] = $video->mp4_url;
                        $video_data['video_player_type'] = 'video/mp4';
                        break;

                    case $video->type == "m3u8_url":
                        $video_data['videos_url'] = $video->m3u8_url;
                        $video_data['video_player_type'] = 'application/x-mpegURL';
                        break;

                    case $video->type == "embed":
                        $video_data['videos_url'] = $video->embed_code;
                        $video_data['video_player_type'] = 'embed';
                        break;

                    case $video->type == "bunny_cdn":
                        $video_data['videos_url'] = $video->mp4_url;
                        $video_data['video_player_type'] = 'application/x-mpegURL';

                        // Fetch video qualities
                        $response = Http::withoutVerifying()->get($video->m3u8_url);
                        $qualities = [];
                        if ($response->successful()) {
                            $contents = $response->body();
                            preg_match_all('/#EXT-X-STREAM-INF:.*RESOLUTION=(\d+x\d+)\s*(\d+p)\/video\.m3u8/', $contents, $matches);
                            foreach ($matches[2] as $quality) {
                                $qualities[] = str_replace('p', '', $quality);
                            }
                        }

                        $video_data['qualities'] = $qualities;
                        break;

                    default:
                        $video_data['videos_url'] = null;
                        $video_data['video_player_type'] = null;
                        $video_data['qualities'] = [];
                        break;
                }

                array_unshift($favorite_items, $video_data);
            }
        } elseif ($favorite->ugc_video_id) {
            $ugc_video = UGCVideo::find($favorite->ugc_video_id);
            if ($ugc_video) {
                $ugc_data = [
                    'id' => $ugc_video->id,
                    'title' => $ugc_video->title,
                    'type' => $ugc_video->type,
                    'mp4_url' => $ugc_video->mp4_url,
                    'm3u8_url' => $ugc_video->m3u8_url,
                    'image' => $ugc_video->image,
                    'image_url' => URL::to('/') . '/public/uploads/images/' . $ugc_video->image,
                    'source' => 'ugc_videos',
                    'videos_url' => null,
                    'video_player_type' => null,
                    'qualities' => [],
                ];

                switch (true) {
                    case $ugc_video->type == "mp4_url":
                        $ugc_data['videos_url'] = $ugc_video->mp4_url;
                        $ugc_data['video_player_type'] = 'video/mp4';
                        break;

                    case $ugc_video->type == "m3u8_url":
                        $ugc_data['videos_url'] = $ugc_video->m3u8_url;
                        $ugc_data['video_player_type'] = 'application/x-mpegURL';
                        break;

                    case $ugc_video->type == "embed":
                        $ugc_data['videos_url'] = $ugc_video->embed_code;
                        $ugc_data['video_player_type'] = 'embed';
                        break;

                    default:
                        $ugc_data['videos_url'] = null;
                        $ugc_data['video_player_type'] = null;
                        break;
                }

                array_unshift($favorite_items, $ugc_data);
                
            }
        } elseif ($favorite->episode_id) {
            $episode = Episode::find($favorite->episode_id);
            if ($episode) {
                $favorite_items[] = [
                    'id' => $episode->id,
                    'title' => $episode->title,
                    'type' => $episode->type,
                    'mp4_url' => $episode->mp4_url,
                    'm3u8_url' => $episode->m3u8_url,
                    'image' => $episode->image,
                    'image_url' => URL::to('/') . '/public/uploads/images/' . $episode->image,
                    'series_name' => Series::where('id', $episode->series_id)->pluck('title')->first(),
                    'source' => 'episode',
                    'videos_url' => null,
                    'video_player_type' => null,
                ];
            }
        } elseif ($favorite->audio_id) {
            $audio = Audio::find($favorite->audio_id);
            if ($audio) {
                $favorite_items[] = [
                    'id' => $audio->id,
                    'title' => $audio->title,
                    'type' => $audio->type,
                    'mp3_url' => $audio->mp3_url,
                    'image' => $audio->image,
                    'image_url' => URL::to('/') . '/public/uploads/images/' . $audio->image,
                    'source' => 'audio',
                ];
            }
        } elseif ($favorite->live_id) {
            $live = LiveStream::find($favorite->live_id);
            if ($live) {
                $favorite_items[] = [
                    'id' => $live->id,
                    'title' => $live->title,
                    'url_type' => $live->url_type,
                    'mp4_url' => $live->mp4_url,
                    'embed_url' => $live->embed_url,
                    'm3u_url' => $live->m3u_url,
                    'acc_audio_file' => $live->acc_audio_file,
                    'acc_audio_url' => $live->acc_audio_url,
                    'image' => $live->image,
                    'image_url' => URL::to('/') . '/public/uploads/images/' . $live->image,
                    'source' => 'livestream',
                ];
            }
        }
    }
    $status = count($favorite_items) > 0 ? "true" : "false";
    $response = [
        'status' => $status,
        'favorites' => $favorite_items,
    ];

    return response()->json($response, 200);
}

  public function myfavorites(Request $request) {

    $user_id = $request->user_id;

    /*channel videos*/
    // $video_ids = Favorite::select('video_id')->where('user_id',$user_id)->whereNotNull('video_id')->orderBy('created_at', 'desc')->get();
    // $video_ids_count = Favorite::select('video_id')->where('user_id',$user_id)->whereNotNull('video_id')->count();

    // if ( $video_ids_count  > 0) {

    //   foreach ($video_ids as $key => $value) {
    //     $k2[] = $value->video_id;
    //   }
    //   $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
    //     $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
    //     $item['video_url'] = URL::to('/').'/storage/app/public/';
    //     $item['source'] = 'videos';
    //     return $item;
    //   });

    //   if(count($channel_videos) > 0){
    //     $status = "true";
    //   }else{
    //     $status = "false";
    //   }
    // }else{
    //         $status = "false";
    //   $channel_videos = [];
    // }

    $watchlater_videos = Favorite::where('user_id', $user_id)
                                  ->whereNotNull('video_id')
                                  ->orderBy('id', 'desc')
                                  ->get();

                              if ($watchlater_videos->isNotEmpty()) {
                                  $video_ids = $watchlater_videos->pluck('video_id')->toArray();

                                  // Fetch all video details while preserving order
                                  $videos = Video::whereIn('id', $video_ids)->get()->keyBy('id');

                                  // Map wishlist order to videos
                                  $channel_videos = $watchlater_videos->map(function ($watchlaterlist) use ($videos) {
                                      if (isset($videos[$watchlaterlist->video_id])) {
                                          $item = $videos[$watchlaterlist->video_id];
                                          $item['image_url'] = URL::to('/') . '/public/uploads/images/' . $item->image;
                                          $item['video_url'] = URL::to('/') . '/storage/app/public/';
                                          $item['source'] = 'video';
                                          return $item;
                                      }
                                  })->filter(); // Remove null values if any
                              // Remove null values if any

                                    $status = $channel_videos->isNotEmpty() ? "true" : "false";
                                } else {
                                    $status = "false";
                                    $channel_videos = [];
                                }

    // Episode

    $episode_id = Favorite::where('user_id','=',$user_id)->whereNotNull('episode_id')->latest()->pluck('episode_id');

    if(count($episode_id) > 0 ){

        $episode = Episode::whereIn('id',$episode_id)->orderBy('episode_order')->get()->map(function ($item) {
          $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
          $item['source'] = 'episode';
          return $item;
        });

    }else{
      $episode = [];
    }

    // Audios

    $audio_id = Favorite::where('user_id','=',$user_id)->whereNotNull('audio_id')->pluck('audio_id');

    if(count($audio_id) > 0 ){

        $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
          $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['source'] = 'audio';
          return $item;
        });

    }else{
      $audios = [];
    }


    /*UGC videos*/
    $ugc_video_ids = Favorite::select('ugc_video_id')->where('user_id',$user_id)->orderBy('created_at', 'desc')->get();
    $ugc_video_ids_count = Favorite::select('ugc_video_id')->where('user_id',$user_id)->count();

    if ( $ugc_video_ids_count  > 0) {

      foreach ($ugc_video_ids as $key => $value) {
        $k2[] = $value->ugc_video_id;
      }
      $ugc_videos = UGCVideo::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        $item['source'] = 'ugc_videos';
        return $item;
      });

      if(count($ugc_videos) > 0){
        $status = "true";
      }else{
        $status = "false";
      }
    }else{
            $status = "false";
      $ugc_videos = [];
    }

  if(count($channel_videos) > 0 || count($ugc_videos) > 0 || count($episode) > 0 || count($audios) > 0){
    $status = "true";
  }else{
    $status = "false";
  }
    $response = array(
        'status'          =>$status,
        'channel_videos'  => $channel_videos,
        'ugc_videos'      => $ugc_videos,
        'episode_videos'  => $episode,
        'audios'          => $audios,
      );
    return response()->json($response, 200);

  }


  public function mywatchlaters(Request $request) {

    $user_id = $request->user_id;

    /* videos*/
    $video_ids = Watchlater::select('video_id')->where('user_id','=',$user_id)->get();
    $video_ids_count = Watchlater::select('video_id')->where('user_id','=',$user_id)->count();

    if ( $video_ids_count  > 0) {

      foreach ($video_ids as $key => $value1) {
        $k2[] = $value1->video_id;
      }
      $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        $item['source'] = 'videos';
        return $item;
      });
      if(count($channel_videos) > 0){
        $status = "true";
      }else{
        $status = "false";
      }
    }else{
             $status = "false";
              $channel_videos = [];
    }

    // live videos

    $live_videos_id = Watchlater::where('user_id','=',$user_id)->whereNotNull('live_id')->pluck('live_id');

    if(count($live_videos_id) > 0){

        $livestream_videos = LiveStream::whereIn('id',$live_videos_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
            $item['live_description'] = $item->description ? $item->description : "" ;
            $item['source'] = 'live_stream';
            return $item;
        });

    }else{
      $livestream_videos = [];
    }

    // Episode

    $episode_id = Watchlater::where('user_id','=',$user_id)->whereNotNull('episode_id')->pluck('episode_id');


    if(count($episode_id) > 0 ){

        $episode = Episode::whereIn('id',$episode_id)->orderBy('episode_order')->get()->map(function ($item) {
          $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
          $item['source'] = 'episode';
          return $item;
        });

    }else{
      $episode = [];
    }

    $audio_id = Watchlater::where('user_id','=',$user_id)->whereNotNull('audio_id')->pluck('audio_id');

    if(count($audio_id) > 0 ){

        $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
          $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['source'] = 'audio';
          return $item;
        });

    }else{
      $audios = [];
    }

    $response = array(
        'status'         => $status,
        'channel_videos' => $channel_videos,
        'livestream_videos'=> $livestream_videos,
        'episode' => $episode,
        'audios'  => $audios,
    );

    return response()->json($response, 200);

  }


  public function showWishlist(Request $request) {

    $user_id = $request->user_id;
    $type = $request->type;
    $video_id = $request->video_id;
      if($video_id != ''){
          $wish_video_count = Wishlist::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$video_id)->where('type','=',$type)->count();
      }

      $response = array(
        'status'=>'true',
        'wish_count'=>$wish_video_count,
      );

    return response()->json($response, 200);

  }

  public function showfavorites(Request $request) {

    $user_id = $request->user_id;
    $type = $request->type;
    $video_id = $request->video_id;
      if($video_id != ''){
          $fav_video_count = Favorite::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$video_id)->where('type','=',$type)->count();
      }

      $response = array(
        'status'=>'true',
        'fav_count'=>$fav_video_count,
      );

    return response()->json($response, 200);

  }

  public function showWatchlater(Request $request) {

    $user_id = $request->user_id;
    $type = $request->type;
    $video_id = $request->video_id;
      if($video_id != ''){
          $watchlater_count = Watchlater::select('video_id')->where('user_id','=',$user_id)->where('video_id','=',$video_id)->where('type','=',$type)->count();
      }

      $response = array(
        'status'=>'true',
        'watch_count'=>$watchlater_count,
      );

    return response()->json($response, 200);

  }

  public function getPPV(Request $request)
  {

    $user_id = $request->user_id;

    $daten = date('Y-m-d h:i:s a', time());

    $payperview_video = PpvPurchase::join('videos', 'videos.id', '=', 'ppv_purchases.video_id')
    ->where('ppv_purchases.user_id', '=', $user_id)->where('ppv_purchases.video_id', '!=', 0)
    ->whereIn('ppv_purchases.status', ['captured', 'succeeded',1])
    ->orderBy('ppv_purchases.created_at', 'desc')->get()->map(function ($item) {
        $item['ppv_videos_status'] = ($item->to_time > Carbon::now() )?"Can View":"Expired";
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

    $payperview_episodes = PpvPurchase::join('episodes', 'episodes.id', '=', 'ppv_purchases.episode_id')
      ->where('ppv_purchases.user_id', '=', $user_id)->where('ppv_purchases.episode_id', '!=', 0)
      ->whereIn('ppv_purchases.status', ['captured', 'succeeded',1])
      ->orderBy('ppv_purchases.created_at', 'desc')->get()->map(function ($item) {
          $item['ppv_episodes_status'] = ($item->to_time > Carbon::now() )?"Can View":"Expired";
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          return $item;
        });

    $payperview_series_season = PpvPurchase::select('series_id','season_id')
      ->where('ppv_purchases.series_id', '!=', 0)
      ->where('ppv_purchases.season_id', '!=', 0)
      ->whereIn('ppv_purchases.status', ['captured', 'succeeded',1])
      ->where('user_id', $user_id)->get();

    if ($payperview_series_season->count() > 0) {
      $series_ids = $payperview_series_season->pluck('series_id')->toArray();
      $season_ids = $payperview_series_season->pluck('season_id')->toArray();
  
      $payperview_episodes = Episode::whereIn('series_id', $series_ids)
          ->whereIn('season_id', $season_ids)
          ->get()->map(function ($item) {
            $item['ppv_episodes_status'] = ($item->to_time > Carbon::now() )?"Can View":"Expired";
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            return $item;
          });
    } else {
        $payperview_episodes = [];
    }
      $response = array(
      'status' => 'true',
      'payperview_video' => $payperview_video,
      'payperview_episodes' => $payperview_episodes
    );

    return response()->json($response, 200);

  }

    public function payment_settings() {

      $payment_settings = PaymentSetting::get();
      $active_payment_settings = PaymentSetting::where('status',1)->get();
      $stripe_payment_settings = PaymentSetting::where('payment_type','=','Stripe')->get();
      $paypal_payment_settings = PaymentSetting::where('payment_type','=','PayPal')->get();

      $response = array(
        'status'=>'true',
        'payment_settings'=> $payment_settings,
        'active_payment_settings' => $active_payment_settings,
        'stripe_payment_settings'=> $stripe_payment_settings,
        'paypal_payment_settings'=> $paypal_payment_settings,
      );

    return response()->json($response, 200);
    }

  public function getLivepurchased(Request $request)
  {

    $user_id = $request->user_id;

    $daten = date('Y-m-d h:i:s a', time());

    $payperview_video = LivePurchase::join('live_streams', 'live_streams.id', '=', 'live_purchases.video_id')
    ->where('live_purchases.user_id', '=', $user_id)->where('live_purchases.video_id', '!=', 0)
    ->orderBy('live_purchases.created_at', 'desc')->get()->map(function ($item) {
        $item['live_streams_status'] = ($item->to_time > Carbon::now() )?"Can View":"Expired";
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

    $response = array(
      'status' => 'true',
      'livevideos' => $payperview_video
    );

    return response()->json($response, 200);

  }

  public function settings()
  {
    $settings = Setting::all()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/settings/'.$item->logo;
        $item['video_viewcount_limit'] = PartnerMonetizationSetting::pluck('video_viewcount_limit')->first();
        return $item;
      });
    $response = array(
      'settings' => $settings,
  
    );
    return response()->json($response, 200);
  }

  public function upgradesubscription(Request $request)
     {
         $user_id = $request->user_id;
         $user = User::find($user_id);
         $upgrade_plan = $request->get('plan_name');
         $coupon_code = $request->get('coupon_code');
         $ref_id = $request->get('ref_id');
         $stripe_plan = SubscriptionPlan();
         $subscription = $user->subscription($stripe_plan);
         if (isset($coupon_code) && !empty($coupon_code))
            {
              $user->subscription($stripe_plan)->swapAndInvoice($upgrade_plan, ['coupon' => $coupon_code]);
              $coupon = new CouponPurchase;
              $coupon->coupon_id = $coupon_code;
              $coupon->user_id = $user_id;
              $coupon->ref_id = $ref_id;
              $coupon->save();
              $update_user = User::find($ref_id);
              $update_user->coupon_used = 1;
              $update_user->save();
            } else {
              $user->subscription($stripe_plan)->swapAndInvoice($upgrade_plan);
            }
              $plan = $request->get('plan_name');
              $plandetail = SubscriptionPlan::where('plan_id',$upgrade_plan)->first();

              try {
                \Mail::send('emails.changeplansubscriptionmail', array(
                  'name' => $user->username,
                  'plan' => ucfirst($plandetail->plans_name),
                    ), function($message) use ($request,$user){
                  $message->from(AdminMail(),GetWebsiteName());
                  $message->to($user->email, $user->username)->subject('Subscription Plan Changed');
                });
              } catch (\Throwable $th) {
                //throw $th;
              }

                return response()->json(['success'=>'Your plan has been changed.']);
        }

  public function cancelsubscriptionOld(Request $request)
  {
    $user_id = $request->user_id;
    $user = User::find($user_id);
    $stripe_plan = SubscriptionPlan();
    $user->subscription($stripe_plan)->cancel();
    $plan_name =  CurrentSubPlanName($user_id);
    $start_date =  SubStartDate($user_id);
    $ends_at =  SubEndDate($user_id);

    try {
      \Mail::send('emails.cancel', array(
        'name' => $user->username,
        'plan_name' => $plan_name,
        'start_date' => $start_date,
        'ends_at' => $ends_at,
      ), function($message) use ($user){
        $message->from(AdminMail(),GetWebsiteName());
        $message->to($user->email, $user->username)->subject('Subscription Renewal');
      });
    } catch (\Throwable $th) {
      //throw $th;
    }


    if ($user->subscription($stripe_plan)->cancel()){
      $response = array(
        'status' => 'true',
        'message' => 'Cancelled Successfuly '
      );
    } else {
      $response = array(
        'status' => 'false',
        'message' => 'Failed Cancellation '
      );
    }
    return response()->json($response, 200);

  }

  public function renewsubscription(Request $request)
  {

    $user_id = $request->user_id;
    $user = User::find($user_id);
        $stripe_plan = SubscriptionPlan();
           if ($user->subscription($stripe_plan)->resume()) {
            $planvalue = $user->subscriptions;
            $plan = $planvalue[0]->stripe_plan;
            $plandetail = SubscriptionPlan::where('plan_id',$plan)->first();

            try {
                  \Mail::send('emails.renewsubscriptionemail', array(
                    'name' => $user->username,
                    'plan' => ucfirst($plandetail->plans_name),
                  // 'price' => $plandetail->price,
                ), function($message) use ($user){
                    $message->from(AdminMail(),GetWebsiteName());
                    $message->to($user->email, $user->username)->subject('Subscription Renewal');
                });
            } catch (\Throwable $th) {
              //throw $th;
            }

      $response = array(
        'status' => 'true',
        'msg' => 'Renewed successfully'
      );
    }else{
      $response = array(
        'status' => 'false',
        'msg' => 'Check Again'
      );
    }
    return response()->json($response, 200);
  }


  public function add_payperview(Request $request)
  {
    try {
  
    $payment_type = $request->payment_type;
    $video_id = $request->video_id;
    $live_id = $request->live_id;
    $episode_id = $request->episode_id;
    $season_id = $request->season_id;
    $series_id = $request->series_id;
    $audio_id = $request->audio_id;
    $user_id = $request->user_id;
    $ppv_plan = $request->ppv_plan;
    $daten = date('Y-m-d h:i:s a', time());
    $setting = Setting::first();
    $ppv_hours = $setting->ppv_hours;
    $date = Carbon::parse($daten)->addHour($ppv_hours);
    $amount = $request->amount;
    $platform = $request->platform;
    $payment_id = $request->py_id;
    $status = $request->py_status;
    $payment_failure_reason = $request->py_failure_reason;

    $ppv_expirytime_started = Setting::pluck('ppv_hours')->first();
    $date = $ppv_expirytime_started != null  ? Carbon::now()->addHours($ppv_expirytime_started)->format('Y-m-d h:i:s a') : Carbon::now()->addHours(3)->format('Y-m-d h:i:s a');

    $user = User::find($user_id);
    $amount_ppv = Video::where('id',$video_id)->pluck('ppv_price')->first();

    if($payment_type == 'stripe'){

    $paymentMethod = $request->get('py_id');
    $payment_settings = PaymentSetting::first();
    
    $pay_amount = PvvPrice();
    $pay_amount = $request->amount*100;
    $charge = $user->charge($pay_amount, $paymentMethod);
    if($charge != ''){
      $ppv_count = DB::table('ppv_purchases')->where('video_id', '=', $video_id)->where('user_id', '=', $user_id)->count();
      $live_ppv_count = DB::table('live_purchases')->where('video_id', '=', $live_id)->where('user_id', '=', $user_id)->count();
      $audio_ppv_count = DB::table('ppv_purchases')->where('audio_id', '=', $audio_id)->where('user_id', '=', $user_id)->count();
      $season_ppv_count = DB::table('ppv_purchases')->where('series_id', '=', $series_id)->where('season_id', '=', $season_id)->where('user_id', '=', $user_id)->count();
      
        if(!empty($video_id) && $video_id != ''){
          DB::table('ppv_purchases')->insert(
            ['user_id' => $user_id ,'video_id' => $video_id,'to_time' => $date,'ppv_plan'=> $ppv_plan,'created_at'=>now(),'updated_at'=>now(),'total_amount'=> $amount,'payment_gateway'=>$payment_type,'payment_id' => $payment_id, 'status' => $status, 'payment_failure_reason' => $payment_failure_reason,'ppv_plan'=> $ppv_plan]
          );
          send_password_notification('Notification From '. GetWebsiteName(),'You have rented a video','You have rented a video','',$user_id);
  
        }else if(!empty($live_id) && $live_id != ''){
          $payment_type == 'Stripe';
          $status = 1;
          DB::table('live_purchases')->insert(
            ['user_id' => $user_id ,'video_id' => $live_id,'to_time' => $date,'platform' => $platform,'created_at'=>now(),'updated_at'=>now(),'total_amount'=> $amount,'payment_status' => $status, 'payment_gateway'=>$payment_type,'payment_id' => $payment_id, 'payment_failure_reason' => $payment_failure_reason,'ppv_plan'=> $ppv_plan ]
          );
          DB::table('ppv_purchases')->insert(
            ['user_id' => $user_id ,'live_id' => $live_id,'to_time' => $date,'platform' => $platform,'created_at'=>now(),'updated_at'=>now(),'total_amount'=> $amount,'payment_gateway'=>$payment_type,'payment_id' => $payment_id, 'status' => $status, 'payment_failure_reason' => $payment_failure_reason ]
          );
          send_password_notification('Notification From '. GetWebsiteName(),'You have rented a video','You have rented a video','',$user_id);
  
        }else if(!empty($audio_id) && $audio_id != ''){
          DB::table('ppv_purchases')->insert(
            ['user_id' => $user_id ,'audio_id' => $audio_id,'to_time' => $date, ]
          );
          send_password_notification('Notification From '. GetWebsiteName(),'You have rented a Audio','You have rented a Audio','',$user_id);
  
        }else if(!empty($series_id) && $series_id != '' && !empty($season_id) && $season_id != ''){

          DB::table('ppv_purchases')->insert(
            ['user_id' => $user_id ,'series_id' => $series_id,'season_id' => $season_id,'to_time' => $date ,'ppv_plan'=> $ppv_plan,'total_amount'=> $amount,'created_at'=>now(),'updated_at'=>now(), 'payment_gateway'=>$payment_type,'platform' => $platform,'payment_id' => $payment_id, 'status' => $status,  'payment_failure_reason' => $payment_failure_reason ]
          );
        }

      $response = array(
        'status' => 'true',
        'message' => "video has been added"
      );
    }else{
      $response = array(
        'status' => 'false',
        'message' => "Payment Failed"
      );
    }
    }elseif ($payment_type == 'razorpay' || $payment_type == 'paypal'|| $payment_type == 'CinetPay' ||  $payment_type == 'Applepay'|| $payment_type == 'recurring') {

      $ppv_count = DB::table('ppv_purchases')->where('video_id', '=', $video_id)->where('user_id', '=', $user_id)->count();
      $serie_ppv_count = DB::table('ppv_purchases')->where('series_id', '=', $series_id)->where('user_id', '=', $user_id)->count();
      $season_ppv_count = DB::table('ppv_purchases')->where('series_id', '=', $series_id)->where('season_id', '=', $season_id)->where('user_id', '=', $user_id)->count();
      $live_ppv_count = DB::table('live_purchases')->where('video_id', '=', $live_id)->where('user_id', '=', $user_id)->count();
      $audio_ppv_count = DB::table('ppv_purchases')->where('audio_id', '=', $audio_id)->where('user_id', '=', $user_id)->count();
      
      $video_moderators_id = Video::where('id',$video_id)->pluck('user_id')->first();
      $commission_percentage_value = Video::where('id',$video_id)->pluck('CPP_commission_percentage')->first();
      $CppUser_details = ModeratorsUser::where('id',$video_moderators_id)->first();
      $video_commission_percentage = VideoCommission::where('type','Cpp')->pluck('percentage')->first();
      $commission_btn = Setting::pluck('CPP_Commission_Status')->first();
      $series_moderators_id = Series::where('id',$series_id)->pluck('user_id')->first();
      $series_commission_percentage_value = Series::where('id',$series_id)->pluck('CPP_commission_percentage')->first();


      if($commission_btn === 0){
        $commission_percentage_value = !empty($CppUser_details->commission_percentage) ? $CppUser_details->commission_percentage : $video_commission_percentage;
      }

      if(!empty($video_moderators_id)){
        $ppv_price           =  $request->amount;
        $moderator_commssion =  ($ppv_price * $commission_percentage_value) / 100;
        $admin_commssion     =  $ppv_price - $moderator_commssion;
        $moderator_id        =  $video_moderators_id;
      }

      if (!empty($video_id) && $video_id != '') {
        if(Enable_videoCipher_Upload() == 1 && Enable_PPV_Plans() == 1){
          DB::table('ppv_purchases')->insert(
            [
              'user_id' => $user_id,
              'video_id' => $video_id,
              'to_time' => $date,
              'total_amount'=> $amount,
              'ppv_plan'=> $ppv_plan,
              'moderator_commssion'=>$moderator_commssion,
              'admin_commssion'=>$admin_commssion,
              'payment_gateway'=>$payment_type,
              'moderator_id'=>$moderator_id,
              'platform' => $platform,
              'payment_id' => $payment_id,
              'status' => $status,
              'payment_failure_reason' => $payment_failure_reason,
              'created_at'=>now(),
              'updated_at'=>now()
              ]
          );
        }else{
            DB::table('ppv_purchases')->insert(
            ['user_id' => $user_id ,'video_id' => $video_id,'to_time' => $date,'total_amount'=> $amount, 'moderator_id'=>$moderator_id, 'payment_gateway'=>$payment_type,'platform' => $platform,'updated_at'=>now(),'created_at'=>now(),'payment_id' => $payment_id, 'status' => $status,  'payment_failure_reason' => $payment_failure_reason   ]
          );
        }
      }

      if ( $serie_ppv_count == 0 && !empty($series_id) && $series_id != '' && empty($season_id) && $season_id == '') {
        DB::table('ppv_purchases')->insert(
          ['user_id' => $user_id ,'series_id' => $series_id,'to_time' => $date ]
        );
      } else {
        DB::table('ppv_purchases')
        ->where('series_id', $series_id)
        ->where('user_id', $user_id)
        ->update(['to_time' => $date]);
      }

      if ( !empty($series_id) && $series_id != '' && !empty($season_id) && $season_id != '') {
        $CppUser_details = ModeratorsUser::where('id',$series_moderators_id)->first();
        $commission_percentage_value = Series::where('id',$series_id)->pluck('CPP_commission_percentage')->first();

        if($commission_btn === 0){
          $commission_percentage_value = !empty($CppUser_details->commission_percentage) ? $CppUser_details->commission_percentage : $video_commission_percentage;
        }

        if(!empty($series_moderators_id)){ 
          $ppv_price           =  $request->amount;
          $moderator_commssion =  ($ppv_price * $commission_percentage_value) / 100;
          $admin_commssion     =  $ppv_price - $moderator_commssion;
          $moderator_id        =  $series_moderators_id;
      }

        if(Enable_videoCipher_Upload() == 1 && Enable_PPV_Plans() == 1){
          DB::table('ppv_purchases')->insert(
            [
              'user_id' => $user_id,
              'series_id' => $series_id,
              'season_id' => $season_id,
              'to_time' => $date,
              'total_amount'=> $amount,
              'ppv_plan'=> $ppv_plan,
              'moderator_commssion'=>$moderator_commssion,
              'admin_commssion'=>$admin_commssion,
              'payment_gateway'=>$payment_type,
              'moderator_id'=>$series_moderators_id,
              'platform' => $platform,
              'payment_id' => $payment_id,
              'payment_failure_reason' => $payment_failure_reason,
              'status' => $status,
              'created_at'=>now(),
              'updated_at'=>now()
              ]
          );
        }else{
          DB::table('ppv_purchases')->insert(
            ['user_id' => $user_id ,'moderator_id'=>$series_moderators_id,'series_id' => $series_id,'season_id' => $season_id,'to_time' => $date ,'ppv_plan'=> $ppv_plan,'total_amount'=> $amount,'created_at'=>now(),'updated_at'=>now(), 'payment_gateway'=>$payment_type,'platform' => $platform,'payment_id' => $payment_id, 'status' => $status,  'payment_failure_reason' => $payment_failure_reason ]
          );
        }
      } 
    
      if (  !empty($live_id) && $live_id != '') {
        DB::table('live_purchases')->insert(
          ['user_id' => $user_id ,'video_id' => $live_id,'to_time' => $date,'platform' => $platform,'created_at'=>now(),'updated_at'=>now(),'amount'=> $amount,'payment_gateway'=>$payment_type,'status'=> 1, 'payment_id' => $payment_id, 'payment_status' => $status, 'payment_failure_reason' => $payment_failure_reason ]
        );
        DB::table('ppv_purchases')->insert(
          
          ['user_id' => $user_id ,'live_id' => $live_id,'to_time' => $date,'platform' => $platform,'created_at'=>now(),'updated_at'=>now(),'total_amount'=> $amount,'payment_gateway'=>$payment_type,'payment_id' => $payment_id, 'status' => $status, 'payment_failure_reason' => $payment_failure_reason ]
        );
      } 
  
      if ( $audio_ppv_count == 0 && !empty($audio_id) && $audio_id != '' ) {
        DB::table('ppv_purchases')->insert(
          ['user_id' => $user_id ,'audio_id' => $audio_id,'to_time' => $date,'total_amount'=> $amount_ppv, ]
        );
      } else {
        DB::table('ppv_purchases')->where('audio_id', $audio_id)->where('user_id', $user_id)->update(['to_time' => $date]);
      }
      
      $response = array(
        'status' => 'true',
        'message' => "video has been added"
      );
    }

    return response()->json($response, 200);

    } catch (\Throwable $th) {

       $response = array(
        'status' => 'false',
        'message' => "video has been added"
      );

      return response()->json($response, 500);
    }
  }

    public function AddPpvPaypal(Request $request)
  {

    $daten = date('Y-m-d h:i:s a', time());
    $setting = Setting::first();
    $ppv_hours = $setting->ppv_hours;
    $date = Carbon::parse($daten)->addHour($ppv_hours);
    $video_id = $request->video_id;
    $user_id = $request->user_id;
    $paymentStatus = $request->get('status');
    $payment_settings = PaymentSetting::first();
    $user = User::find($user_id);

    if($paymentStatus == 'true'){
      $ppv_count = DB::table('ppv_purchases')->where('video_id', '=', $video_id)->where('user_id', '=', $user_id)->count();
      if ( $ppv_count == 0 ) {
        DB::table('ppv_purchases')->insert(
          ['user_id' => $user_id ,'video_id' => $video_id,'to_time' => $date ]
        );
      } else {
        DB::table('ppv_purchases')->where('video_id', $video_id)->where('user_id', $user_id)->update(['to_time' => $date]);
      }

      $response = array(
        'status' => 'true',
        'message' => "video has been added"
      );
    } else {
      $response = array(
        'status' => 'false',
        'message' => "Payment Failed"
      );
    }
    return response()->json($response, 200);

  }

  public function splash(){

        $mobile_settings = MobileApp::get()->map(function ($item) {
          $item['splash_url'] = URL::to('/').'/public/uploads/settings/'.$item->splash_image;
          return $item;
      });

      $Splash_Screen_first = MobileApp::pluck('andriod_splash_image')->first();

      $first_Splash_Screen[] =[
        'Splash_Screen'=> $Splash_Screen_first,
        'splash_url'  => URL::to('/').'/public/uploads/settings/'.$Splash_Screen_first,
      ];


    $response = array(
      'status'=>'true',
      'message'=>'success',
      'Splash_Screen'=> $mobile_settings,
      'first_Splash_Screen' => $first_Splash_Screen,
    );
    return response()->json($response, 200);
  }


  public function ViewProfile(Request $request) {

    $user_id = $request->user_id;

      if($user_id == 1){

        $user_details = User::where('id', '=', $user_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
              $item['profile_url'] = URL::to('/').'/public/uploads/avatars/'.$item->avatar;
                return $item;
          });
          
          $response = array(
              'status'=>'true',
              'message'=>'success',
              'curren_stripe_plan'=> '',
              'user_details' => $user_details,
              'next_billing' => '',
              'ends_at' => '',
          );

      }else{

            $stripe_plan = SubscriptionPlan();

            $user_details = DB::table('users')->select('*')->where('id', $user_id)->latest()->get()->map(function ($item) {
                $item->profile_url = URL::to('/') . '/public/uploads/avatars/' . $item->avatar;
                return $item;
            });

            $userdata = User::where('id', '=', $user_id)->first();
            $paymode_type =  Subscription::where('user_id',$user_id)->latest()->pluck('PaymentGateway')->first();

          if($paymode_type != null && $paymode_type == "Razorpay" &&  !empty($userdata) && $userdata->role == "subscriber"){

            $subscription_id = User::where('id', '=', $user_id)->pluck('stripe_id')->first();
            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

              if($subscription_id != null){
                $subscription = $api->subscription->fetch($subscription_id);
                $nextPaymentAttemptDate = Carbon::createFromTimeStamp($subscription->current_end)->toFormattedDateString();
              }else{
                $nextPaymentAttemptDate = '';
              }

          }
          else{
            if ($userdata && $userdata->subscription($stripe_plan)) {
                  $timestamp = $userdata->asStripeCustomer()["subscriptions"]->data[0]["current_period_end"];
                  $nextPaymentAttemptDate = Carbon::createFromTimeStamp($timestamp)->toFormattedDateString();
              }else{
                   $nextPaymentAttemptDate = '';
              }
          }

          $user = User::find($user_id);

          $stripe_plan = SubscriptionPlan();

            if ( !empty($userdata) && $userdata->role == "subscriber" || !empty($userdata) && ($userdata->subscribed($stripe_plan) && $userdata->role == "subscriber"))
            {

                $paymode_type =  Subscription::where('user_id',$user_id)->latest()->pluck('PaymentGateway')->first();

                if( $paymode_type != null && $paymode_type == "Razorpay"){
                  $curren_stripe_plan = CurrentSubPlanName($user_id);
                  $ends_ats = Subscription::where('user_id',$user_id)->latest()->pluck('ends_at');
                    if(!empty($ends_ats[0])){
                        $ends_at = $ends_ats[0];
                    }else{
                      $ends_at = "";
                    }

                }
                else{
                  $curren_stripe_plan = CurrentSubPlanName($user_id);
                  $ends_ats = Subscription::where('user_id',$user_id)->pluck('ends_at');
                    if(!empty($ends_ats[0])){
                        $ends_at = $ends_ats[0];
                    }else{
                      $ends_at = "";
                    }
                }
            }
            else{
                $curren_stripe_plan = "No Plan Found";
                $ends_at = "";
            }

            $response = array(
                'status'=>'true',
                'message'=>'success',
                'curren_stripe_plan'=>$curren_stripe_plan,
                'user_details' => $user_details,
                'next_billing' => $nextPaymentAttemptDate,
                'ends_at' => $ends_at,
            );
          }
            return response()->json($response, 200);
        }

   //For fetching Countries
    public function getCountries()
    {
        $country = Country::get()->map(function ($item) {
        $item['country_id'] = $item->id;
        return $item;
      });
        $response = array(
      'status'=>'true',
      'country' => $country
    );
    return response()->json($response, 200);
    }

   //For fetching states
    public function getStates(Request $request)
    {
      $id = $request->country_id;
        $states = State::where("country_id",$id)
        ->get()->map(function ($item) {
        $item['state_id'] = $item->id;
        return $item;
      });
        $response = array(
      'status'=>'true',
      'states' => $states
    );
    return response()->json($response, 200);
    }

    //For fetching cities
    public function getCities(Request $request)
    {
      $id = $request->state_id;
        $cities= City::where("state_id",$id)
        ->get()->map(function ($item) {
        $item['city_id'] = $item->id;
        return $item;
      });
        $response = array(
      'status'=>'true',
      'cities' => $cities
    );
    return response()->json($response, 200);
    }


    public function StripeOnlyTimePlan() {
        $plans = SubscriptionPlan::where("payment_type","=","one_time")->get();
      $response = array(
        'status'=>'true',
        'plans' => $plans
      );
      return response()->json($response, 200);
    }

    public function StripeRecurringPlan() {

        // $plans = Plan::where("payment_type","=","recurring")->get();
        // $plans = SubscriptionPlan::where("payment_type","=","recurring")->where('type','=','Stripe')->get();

      $plans = SubscriptionPlan::where("payment_type","=","recurring")->groupby('plans_name')->orderBy('id', 'asc')->get()->map(function ($item) {
        return $item;
      });
      
      $response = array(
        'status'=>'true',
        'Currency_Symbol'=> CurrencySetting::pluck('symbol')->first() ,
        'plans' => $plans ,
        'Currency_Setting' => CurrencySetting::all() ,
      );
      return response()->json($response, 200);
    }

    public function PaypalOnlyTimePlan() {

      // $plans = Plan::where("payment_type","=","one_time")->where('type','=','PayPal')->get()->map(function ($item) {
        $plans = SubscriptionPlan::where("payment_type","=","one_time")->where('type','=','PayPal')->get()->map(function ($item) {
        $item['billing_interval'] = $item->name;
        $item['plans_name'] = $item->name;
        return $item;
      });
      $response = array(
        'status'=>'true',
        'plans' => $plans
      );
      return response()->json($response, 200);
    }

    public function PaypalRecurringPlan() {

      $plans = SubscriptionPlan::where("payment_type","=","recurring")->get()->map(function ($item) {
        // $plans = SubscriptionPlan::where("payment_type","=","recurring")->where('type','=','PayPal')->get()->map(function ($item) {
        $item['billing_interval'] = $item->name;
            $item['plans_name'] = $item->name;
        return $item;
      });

      $response = array(
        'status'=>'true',
        'plans' => $plans
      );
      return response()->json($response, 200);
    }


    public function relatedchannelvideos(Request $request) {
      $videoid = $request->videoid;
      $myData = array();
  
      $category_id = CategoryVideo::where('video_id', $videoid)->pluck('category_id');
  
      $recomendeds = CategoryVideo::select('categoryvideos.video_id', 'categoryvideos.category_id', 'videos.*', 'video_categories.name as categories_name')
          ->join('videos', 'videos.id', '=', 'categoryvideos.video_id')
          ->join('video_categories', 'categoryvideos.category_id', '=', 'video_categories.id')
          ->whereIn('categoryvideos.category_id', $category_id)
          ->where('videos.id', '!=', $videoid) 
          ->where('videos.active',1)->where('videos.status', 1)->where('videos.draft',1)
          ->groupBy('videos.id')  
          ->latest()
          ->limit(30)
          ->get()
          ->map(function($item) {
              $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
              $item['video_publish_status'] = ($item->publish_type == "publish_now" || ($item->publish_type == "publish_later" && Carbon::today()->now()->greaterThanOrEqualTo($item->publish_time)))
                  ? "Published"
                  : ($item->publish_type == "publish_later" ? Carbon::parse($item->publish_time)->isoFormat('Do MMMM YYYY') : null);  
              return $item;
          });
  
      $myData[] = array(
          "recomendeds" => $recomendeds->all() // Convert the collection to an array
      );
  
      $response = array(
          'status'=>'true',
          'channelrecomended' => $myData
      );
      return response()->json($response, 200);
  }

    public function relatedppvvideos(Request $request) {
      $ppvvideoid = $request->ppvvideoid;
      $recomended = PpvVideo::where('id','!=',$ppvvideoid)->where('status',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });
        $response = array(
        'status'=>'true',
        'ppvrecomended' => $recomended
      );
      return response()->json($response, 200);
    }


  public function search(Request $request)
  {

      $search_value =  $request['search'];
      $video_category_id =  $request['category_id'];
      $video_artist_id =  $request['artist_id'];
      $audio_artist_id =  $request['audio_artist_id'];

      $artistlist_count = Artist::get()->count();
      if($artistlist_count > 0){
      $artist_categories = Artist::orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/artists/'.$item->image;
        return $item;
    });

    }else{
      $artist_categories = 'false';
    }

      $audio_artist_count = Artist::where('id',$audio_artist_id)->count();
      if($audio_artist_count > 0){
      $Audioartist = Audioartist::select('audio_id','artist_id')->where('artist_id',$audio_artist_id)->get()->toArray();
      if(count($Audioartist) > 0){
        $audio_artist = Artist::where('id',$audio_artist_id)->orderBy('created_at', 'desc')
        ->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/artists/'.$item->image;
          return $item;
        });


      foreach ($Audioartist as $key => $Audio_artist) {
        $audioartist_idid = $Audio_artist['artist_id'];

        $audio = Audio::where('title', 'LIKE', '%'.$search_value.'%')
        ->orderBy('audio.created_at', 'desc')
        ->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          return $item;
        });

        if(count($audio) > 0){
          $msg = 'success';
        }else{
          $msg = 'nodata';
        }
        $Audio_artist_detail= array(
          "message" => $msg,
          "audio" => $audio,
          "audio_artist" => $audio_artist,
        );
      }
      }else{
        $Audio_artist_detail= array(
          "message" => 'No Audio',
          "audio" => '',
          "audio_artist" => '',
        );
      }
        }else{
          $Audio_artist_detail= array(
            "message" => 'No Artist',
            "audio" => '',
          "audio_artist" => '',
          );
        }
      // print_r();exit;

      $videos_count = Video::where('title', 'LIKE', '%'.$search_value.'%')->count();
      $ugcvideos_count = UGCVideo::where('title', 'LIKE', '%'.$search_value.'%')->count();
      $ppv_videos_count = PpvVideo::where('title', 'LIKE', '%'.$search_value.'%')->count();
      $video_category_count = VideoCategory::where('name', 'LIKE', '%'.$search_value.'%')->count();
      $ppv_category_count = PpvCategory::where('name', 'LIKE', '%'.$search_value.'%')->count();
      $albums_count = AudioAlbums::where('albumname', 'LIKE', '%'.$search_value.'%')->count();
      $audio_categories_count = AudioCategory::where('name', 'LIKE', '%'.$search_value.'%')->count();
      $audios_count = Audio::where('title', 'LIKE', '%'.$search_value.'%')->count();
      $artist_count = Artist::where('artist_name', 'LIKE', '%'.$search_value.'%')->count();
      $series_count = Series::where('title', 'LIKE', '%'.$search_value.'%')->count();
      $video_categories_count =  DB::table('video_categories')
      ->join('videos', 'videos.video_category_id', '=', 'video_categories.id')
      ->select('videos.*')
      ->where('title', 'LIKE', '%'.$search_value.'%')
      ->where('video_category_id', '=', $video_category_id )
      ->count();
      $video_artist_count =  DB::table('video_artists')
      ->join('videos', 'videos.id', '=', 'video_artists.video_id')
      ->select('videos.*')
      ->where('title', 'LIKE', '%'.$search_value.'%')
      ->where('video_artists.artist_id', '=', $video_artist_id )
      ->count();

      if ($audios_count > 0) {
        $audios = Audio::where('title', 'LIKE', '%'.$search_value.'%')->where('status','=',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['source'] = 'audio';
          return $item;
        });

        } else {
          $audios = [];
        }
        if ($audio_categories_count > 0) {
          $audio_categories = AudioCategory::where('name', 'LIKE', '%'.$search_value.'%')->orderBy('created_at', 'desc')->get()->map(function ($item) {
      $item['image_url'] = URL::to('/').'/public/uploads/audios/'.$item->image;
      return $item;
      });

      } else {
      $audio_categories = [];
      }
      if ($albums_count > 0) {
        $albums = AudioAlbums::where('albumname', 'LIKE', '%'.$search_value.'%')->orderBy('created_at', 'desc')->get()->map(function ($item) {
      $item['image_url'] = URL::to('/').'/public/uploads/albums/'.$item->album;
      $item['source'] = 'album';
      return $item;
      });

      } else {
      $albums = [];
      }

      if ($videos_count > 0) {
            $videos = Video::where('title', 'LIKE', '%'.$search_value.'%')->where('status','=',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'video';
        return $item;
      });

      } else {
        $videos = [];
      }

      if ($ugcvideos_count > 0) {
        $ugcvideos = UGCVideo::where('title', 'LIKE', '%'.$search_value.'%')->where('status','=',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'ugcvideo';
        return $item;
      });

      } else {
        $ugcvideos = [];
      }

      if ($ppv_videos_count > 0) {
        $ppv_videos = PpvVideo::where('title', 'LIKE', '%'.$search_value.'%')->where('status','=',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      } else {
        $ppv_videos = [];
      }

      if ($video_category_count > 0) {

        $video_category = VideoCategory::where('name', 'LIKE', '%'.$search_value.'%')->orderBy('created_at', 'desc')->get();

      } else {
        $video_category = [];
      }

      if ($ppv_category_count > 0) {

        $ppv_category = PpvCategory::where('name', 'LIKE', '%'.$search_value.'%')->orderBy('created_at', 'desc')->get();

      } else {
        $ppv_category = [];
      }

      if ($artist_count > 0) {

        $artist =  DB::table('artists')
        ->join('video_artists', 'artists.id', '=', 'video_artists.artist_id')
        ->join('videos', 'video_artists.video_id', '=', 'videos.id')
        ->select('videos.*')
        ->where('artist_name', 'LIKE', '%'.$search_value.'%')
        ->get();

        // $artist = Artist::where('artist_name', 'LIKE', '%'.$search_value.'%')->orderBy('created_at', 'desc')->get();

      } else {
        $artist = [];
      }
      if ($video_categories_count > 0) {

        $video_categories =  DB::table('video_categories')
        ->join('videos', 'videos.video_category_id', '=', 'video_categories.id')
        ->select('videos.*')
        ->where('title', 'LIKE', '%'.$search_value.'%')
        ->where('video_category_id', '=', $video_category_id )
        ->get();
      } else {
        $video_categories = [];
      }
      $url_image = URL::to('/').'/public/uploads/images/' ;

      if ($video_artist_count > 0) {

        $video_artist =  DB::table('video_artists')
        ->join('videos', 'videos.id', '=', 'video_artists.video_id')
        ->select('videos.*')
        ->where('title', 'LIKE', '%'.$search_value.'%')
        ->where('video_artists.artist_id', '=', $video_artist_id )
        ->get();
      } else {
        $video_artist = [];
      }

      if ($series_count > 0) {
        $series = Series::where('title', 'LIKE', '%'.$search_value.'%')->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'series';
        return $item;
      });

      } else {
        $series = [];
      }

      $response = array(
        'channelvideos' => $videos,
        'ugcvideos' => $ugcvideos,
        'channel_category' => $video_category,
        'search_value' => $search_value,
        'audios' => $audios,
        'albums' => $albums,
        'cast ' => $artist,
        'audio_categories' => $audio_categories,
        'video_categories' => $video_categories,
        'url_image' => $url_image,
        'video_artist' => $video_artist,
        'artist_categories' => $artist_categories,
        'Audio_artist_detail' => $Audio_artist_detail,
        'series' => $series,
      );

      return response()->json($response, 200);
    }

    public function search_andriod(Request $request)
    {
      try {
              
          $validator = Validator::make($request->all(), [
            'search_value' => 'required',
          ]);
      
          if ($validator->fails()) {

            $response = [
                'status'    => 'false',
                'message'    => $validator->errors()->first(),
            ];
    
            return response()->json($response, 422); 
          }

          $settings = Setting::first();

          $default_vertical_image_url = default_vertical_image_url();
          $default_horizontal_image_url = default_horizontal_image_url();
          
          $videos = Video::select('videos.*', 'categoryvideos.category_id', 'categoryvideos.video_id', 'video_categories.id', 'video_categories.name as category_name','videos.id as id')
                          ->leftJoin('categoryvideos', 'categoryvideos.video_id', '=', 'videos.id')
                          ->leftJoin('video_categories', 'video_categories.id', '=', 'categoryvideos.category_id')

                              ->when($settings->search_tags_status, function ($query) use ($request) {
                                  return $query->orWhere('videos.search_tags', 'LIKE', '%' . $request->search_value . '%');
                              })

                              ->when($settings->search_title_status, function ($query) use ($request) {
                                  return $query->orWhere('videos.title', 'LIKE', '%' . $request->search_value . '%');
                              })

                              ->when($settings->search_category_status, function ($query) use ($request) {
                                  return $query->orWhere('video_categories.name', 'LIKE', '%' . $request->search_value . '%');
                              })

                              ->when($settings->search_description_status, function ($query) use ($request) {
                                  return $query->orWhere('videos.description', 'LIKE', '%' . $request->search_value . '%');
                              })

                              ->when($settings->search_details_status, function ($query) use ($request) {
                                  return $query->orWhere('videos.details', 'LIKE', '%' . $request->search_value . '%');
                              })

                          ->orderBy('created_at', 'desc')->groupBy('videos.id')
                          ->limit(10)

                          ->when(Geofencing() != null && Geofencing()->geofencing == 'ON', function ($query) {
                              return $query->whereNotIn('videos.id', Block_videos());
                          })

                          ->get()->filter(function ($item) {
                            return $item['draft'] == 1 && $item['status'] == 1 && $item['active'] == 1;
                          })
                          ->map(function ($item) use ( $default_vertical_image_url , $default_horizontal_image_url) {
                            $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $default_vertical_image_url;
                            $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $default_horizontal_image_url ;
                            $item['tv_image_url'] = !is_null($item->video_tv_image) ? URL::to('/public/uploads/images/'.$item->video_tv_image) : $default_horizontal_image_url;  
                            $item['source'] = "Videos";
                            if( $item['draft'] == 1 &&  $item['status'] == 1  &&  $item['active'] == 1 ){
                              return $item;
                            }
                          });


          $livestreams = LiveStream::Select('live_streams.*','live_streams.id as livestream_id','livecategories.live_id','live_categories.name','livecategories.category_id','live_categories.id')
                          ->leftJoin('livecategories','livecategories.live_id','=','live_streams.id')
                          ->leftJoin('live_categories','live_categories.id','=','livecategories.category_id')

                          ->when($settings->search_tags_status, function ($query) use ($request) {
                              return $query->orwhere('live_streams.search_tags', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_title_status, function ($query) use ($request) {
                              return $query ->orwhere('live_streams.title', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_description_status, function ($query) use ($request) {
                              return $query->orwhere('live_streams.description', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_details_status, function ($query) use ($request) {
                              return $query->orwhere('live_streams.details', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_category_status, function ($query) use ($request) {
                              return $query->orwhere('live_categories.name', 'LIKE', '%' . $request->search_value . '%');
                          })
                          ->limit('10')
                          ->groupBy('live_streams.id')
                          ->get()
                          ->filter(function ($item) {
                            return $item['active'] == 1;
                          })
                          ->map(function ($item) use ( $default_vertical_image_url , $default_horizontal_image_url) {
                              $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $default_vertical_image_url;
                              $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $default_horizontal_image_url ;
                              $item['tv_image_url'] = !is_null($item->Tv_live_image) ? URL::to('/public/uploads/images/'.$item->Tv_live_image) : $default_horizontal_image_url;    
                              $item['id'] = $item->livestream_id;               
                              $item['source'] = "Livestream";
                              return $item;
                          }); 

          $audio = Audio::Select('audio.*','category_audios.audio_id','audio_categories.name','category_audios.category_id','audio_categories.id','audio.id as id')
                          ->leftJoin('category_audios','category_audios.audio_id','=','audio.id')
                          ->leftJoin('audio_categories','audio_categories.id','=','category_audios.category_id')

                          ->when($settings->search_tags_status, function ($query) use ($request) {
                              return $query->orwhere('search_tags', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_title_status, function ($query) use ($request) {
                              return $query ->orwhere('title', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_description_status, function ($query) use ($request) {
                              return $query->orwhere('description', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_details_status, function ($query) use ($request) {
                              return $query->orwhere('details', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_category_status, function ($query) use ($request) {
                              return $query->orwhere('audio_categories.name', 'LIKE', '%' . $request->search_value . '%');
                          })

                          
                      ->limit('10')
                      ->groupBy('audio.id')
                      ->get()
                      ->filter(function ($item) {
                        return $item['active'] == 1  && $item['status'] == 1  ;
                      })
                      ->map(function ($item) use ( $default_vertical_image_url , $default_horizontal_image_url) {
                        $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $default_vertical_image_url;
                        $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $default_horizontal_image_url ;
                        $item['tv_image_url'] = !is_null($item->player_image) ? URL::to('/public/uploads/images/'.$item->player_image) : $default_horizontal_image_url;               
                        $item['source']    = "Audios";
                        return $item;
                      }); 


          $episodes = Episode::Select('episodes.*','series.id','series_categories.category_id','episodes.id as id')
                          ->leftJoin('series','series.id','=','episodes.series_id')
                          ->leftJoin('series_categories','series_categories.series_id','=','series.id')
                          ->leftJoin('series_genre','series_genre.id','=','series_categories.category_id')

                          ->when($settings->search_tags_status, function ($query) use ($request) {
                              return $query->orwhere('episodes.search_tags', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_title_status, function ($query) use ($request) {
                              return $query ->orwhere('episodes.title', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_description_status, function ($query) use ($request) {
                              return $query->orwhere('episodes.episode_description', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_category_status, function ($query) use ($request) {
                              return $query->orwhere('series_genre.name', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->groupBy('episodes.id')
                          ->limit('10')
                          ->get() 
                          ->filter(function ($item) {
                            return $item['active'] == 1  && $item['status'] == 1  ;
                          })
                          ->map(function ($item) use ( $default_vertical_image_url , $default_horizontal_image_url) {
                              $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $default_vertical_image_url;
                              $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $default_horizontal_image_url ;
                              $item['tv_image_url'] = !is_null($item->tv_image) ? URL::to('/public/uploads/images/'.$item->tv_image) : $default_horizontal_image_url;                             $item['season_count'] = SeriesSeason::where('series_id',$item->id)->count();
                              $item['episode_count'] = Episode::where('series_id',$item->id)->count();
                              $item['source']    = "Episode";
                              return $item;
                          }); 
                          
          $series = Series::Select('series.*','series_categories.category_id','series.id as id')
                          ->leftJoin('series_categories','series_categories.series_id','=','series.id')
                          ->leftJoin('series_genre','series_genre.id','=','series_categories.category_id')
                          
                          ->when($settings->search_tags_status, function ($query) use ($request) {
                              return $query->orwhere('series.search_tag', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_title_status, function ($query) use ($request) {
                              return $query ->orwhere('series.title', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_description_status, function ($query) use ($request) {
                              return $query->orwhere('series.description', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_details_status, function ($query) use ($request) {
                              return $query->orwhere('series.details', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->when($settings->search_category_status, function ($query) use ($request) {
                              return $query->orwhere('series_genre.name', 'LIKE', '%' . $request->search_value . '%');
                          })

                          ->groupBy('series.id')
                          ->limit('10')
                          ->get()
                          ->filter(function ($item) {
                            return $item['active'] == 1  ;
                          })
                          ->map(function ($item) use ( $default_vertical_image_url , $default_horizontal_image_url) {
                              $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $default_vertical_image_url;
                              $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $default_horizontal_image_url ;
                              $item['tv_image_url'] = !is_null($item->tv_image) ? URL::to('/public/uploads/images/'.$item->player_image) : $default_horizontal_image_url;                             $item['season_count'] = SeriesSeason::where('series_id',$item->id)->count();
                              $item['episode_count'] = Episode::where('series_id',$item->id)->count();
                              $item['source']    = "Series";
                              return $item;
                          });   

            $mergedData = $videos->merge($livestreams)->merge($audio)->merge($episodes)->merge($series);

          return response()->json([
            'status'  => 'true',
            'Message' => 'Search Videos,Livestreams,audio,episodes,series Retrieved Successfully',
            'data'    => $mergedData,
          ], 200);

      } catch (\Throwable $th) {
          return response()->json([
            'status'  => 'false',
            'Message' => $th->getMessage(),
        ], 200);
      }
    }
    
    public function isPaymentEnable()
  {
    $settings = Setting::first();
    $response = array(
      'status' => 'true',
      'is_payment' => $settings->free_registration
    );
    return response()->json($response, 200);
  }

  public function searchapi(Request $request)
    {

      $search_value =  $request['search'];
      $type =  $request['type'];

      if($type == 'channelvideo'){
        $videos_count = Video::where('title', 'LIKE', '%'.$search_value.'%')->count();
        if ($videos_count > 0) {

          $videos = Video::where('title', 'LIKE', '%'.$search_value.'%')->where('status','=',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            return $item;
          });

        } else {
          $videos = [];
        }

        $response = array(
        'channelvideos' => $videos,
        'search_value' => $search_value
        );
      }

      if($type == 'ppvvideo'){
        $ppv_videos_count = PpvVideo::where('title', 'LIKE', '%'.$search_value.'%')->count();
        if ($ppv_videos_count > 0) {

          $ppv_videos = PpvVideo::where('title', 'LIKE', '%'.$search_value.'%')->where('status','=',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            return $item;
          });

        } else {
          $ppv_videos = [];
        }
        $response = array(
        'ppv_videos' => $ppv_videos,
        'search_value' => $search_value
        );
      }

      if($type == 'channelcategory'){
        $video_category_count = VideoCategory::where('name', 'LIKE', '%'.$search_value.'%')->where('parent_id','=',0)->count();
        if ($video_category_count > 0) {

          $video_category = VideoCategory::where('name', 'LIKE', '%'.$search_value.'%')->where('parent_id','=',0)->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/videocategory/'.$item->image;
            return $item;
          });

        } else {
          $video_category = [];
        }
        $response = array(
        'channel_category' => $video_category,
        'search_value' => $search_value
        );
      }


      if($type == 'ppvcategory'){
        $ppv_category_count = PpvCategory::where('name', 'LIKE', '%'.$search_value.'%')->where('parent_id','=',0)->count();
        if ($ppv_category_count > 0) {

          $ppv_category = PpvCategory::where('name', 'LIKE', '%'.$search_value.'%')->where('parent_id','=',0)->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/videocategory/'.$item->image;
            return $item;
          });

        } else {
          $ppv_category = [];
        }
        $response = array(
        'ppv_category' => $ppv_category,
        'search_value' => $search_value
        );
      }

      return response()->json($response, 200);
    }


    public function refferal(Request $request){

        $user_id = $request->user_id;
        $user_details = User::find($user_id);
        $referrer_count = ReferrerCount($user_id);
        $used_coupon = GetCouponPurchase($user_id);
        $available_coupon = ReferrerCount($user_id)  - GetCouponPurchase($user_id)  ?? '0';

        $user_detail =   User::where("id","=",$user_id)->first();

        $referrer_details = User::where("id","=",$user_detail->referrer_id)->first();
        $referrer_name = $referrer_details->username  ?? 'Not Specified';

        $response = array(
            'referral_token' => $user_details->referral_token,
            'referrer_count' => $referrer_count,
            'earned_coupon' => $referrer_count,
            'referrer_name' => $referrer_name,
            'used_coupon' => $used_coupon,
            'available_coupon' => $available_coupon
        );

    return response()->json($response, 200);
    }

    public function retrieve_stripe_coupon(Request $request)
    {
      try {
        
        $this->validate($request, [
          'coupon_code'  => 'required' ,
          'plan_price'  => 'required'
        ]);
          
        $stripe = new \Stripe\StripeClient(
          env('STRIPE_SECRET')
        );

        $coupon = $stripe->coupons->retrieve( $request->coupon_code , []);
      
        if($coupon->amount_off != null){
  
          $plan_price = preg_replace('/[^0-9. ]/', ' ', $request->plan_price);
  
          $promo_code_amt = $coupon->amount_off / 100 ;
  
          $discount_amt = $plan_price - $promo_code_amt ;
    
        }
        elseif( $coupon->percent_off != null ){
  
            $percentage = $coupon->percent_off;
  
            $plan_price = preg_replace('/[^0-9. ]/', ' ', $request->plan_price);

            $promo_code_amt = (($percentage / 100) * $plan_price);
  
            $discount_amt = $plan_price -  $promo_code_amt ;
        }

          
        $data = array(
          'status' => 'true' ,
          'message' => 'Retrieve stripe coupon',
          'plan_price'     => $plan_price ,
          'promo_code_amt' => $promo_code_amt ,
          'discount_amt'   => $discount_amt ,
        );

      } catch (\Throwable $th) {
        
        $data = array(
          'status' => 'false' ,
          'message' => $th->getMessage(),
        );
      }

      return response()->json($data, 200);
    }

    public function stripe_auth_subscriber(Request $request)
    {
      try{

        $this->validate($request, [
          'amount'  => 'required' ,
          'currency'  => 'required',
          'pm_id' => 'required'
        ]);

        $stripe = new \Stripe\StripeClient( env('STRIPE_SECRET'));

        $paymentIntent = $stripe->paymentIntents->create([
          'amount'   => $request->amount * 100, 
          'currency' => $request->currency,
          'payment_method' => $request->pm_id,
          'confirmation_method' => 'automatic',
          'confirm' => true,
        ]);

        $data = array(
          'status'        => "true",
          'status_code'   =>  200,
          'message'       => "Your Payment done Successfully!",
          'paymentIntent' =>  $paymentIntent ,
        );

      } catch (\Throwable $th) {

          $data = array(
            'status'    => "false",
            'status_code' => 404,
            'message'   => $th->getMessage(),
          );
      }
      return response()->json($data, $data['status_code']);
    }
    
    public function stripe_become_subscriber(Request $request)
    {

      try {

          $this->validate($request, [
            'plan_id'  => 'required' ,
            'userid'  => 'required'
          ]);

            $stripe = new \Stripe\StripeClient(
              env('STRIPE_SECRET')
            );
        
            $paymentMethod = $request->get('py_id');
            $plan          = $request->get('plan_id');
            $apply_coupon  = $request->get('coupon_code') ?  $request->get('coupon_code') : null ;

            $user_id      = $request->get('userid');
            $user         = User::where('id',$user_id)->first();

            $product_id =  $stripe->plans->retrieve($plan)->product;


            if( subscription_trails_status() == 1 ){
              
                $subscription_details = $user->newSubscription( $product_id, $plan )->trialUntil( subscription_trails_day() )->withCoupon($apply_coupon)->create( $paymentMethod );

            }else{

                $subscription_details = $user->newSubscription( $product_id, $plan )->withCoupon($apply_coupon)->create( $paymentMethod );
            }

              // Retrieve Subscriptions
            $subscription = $stripe->subscriptions->retrieve( $subscription_details->stripe_id );
            
            if( subscription_trails_status() == 1 ){

              $subscription_days_count = $subscription['plan']['interval_count'];
      
              switch ($subscription['plan']['interval']) {
    
                case 'day':
                  break;

                case 'week':
                  $subscription_days_count *= 7;
                break;

                case 'month':
                  $subscription_days_count *= 30;
                break;

                case 'year':
                  $subscription_days_count *= 365;
                break;
              }
    
              $Sub_Startday  = Carbon::createFromTimestamp($subscription['current_period_start'])->toDateTimeString(); 
              $Sub_Endday    = Carbon::createFromTimestamp($subscription['current_period_end'])->addDays($subscription_days_count)->toDateTimeString(); 
              $trial_ends_at = Carbon::createFromTimestamp($subscription['current_period_end'])->addDays($subscription_days_count)->toDateTimeString(); 

            }else{

              $Sub_Startday  = Carbon::createFromTimestamp($subscription['current_period_start'])->toDateTimeString(); 
              $Sub_Endday    = Carbon::createFromTimestamp($subscription['current_period_end'])->toDateTimeString(); 
              $trial_ends_at = Carbon::createFromTimestamp($subscription['current_period_end'])->toDateTimeString(); 

            }
    
            $Subscription = Subscription::create([
                'user_id'        =>  $user->id,
                'name'           =>  $subscription->plan['product'],
                'price'          =>  $subscription->plan['amount_decimal'] / 100,   // Amount Paise to Rupees
                'stripe_id'      =>  $subscription['id'],
                'stripe_status'  =>  $subscription['status'],
                'stripe_plan'    =>  $subscription->plan['id'],
                'quantity'       =>  $subscription['quantity'],
                'countryname'    =>  Country_name(),
                'regionname'     =>  Region_name(),
                'cityname'       =>  city_name(),
                'PaymentGateway' =>  'Stripe',
                'trial_ends_at'  =>  $trial_ends_at,
                'ends_at'        =>  $trial_ends_at,
            ]);
    
            $user_data = array(
                'role'                  =>  'subscriber',
                'stripe_id'             =>  $subscription['id'],
                'subscription_start'    =>  $Sub_Startday,
                'subscription_ends_at'  =>  $Sub_Endday,
                'payment_type'          => 'recurring',
                'payment_gateway'       =>  'Stripe',
                'payment_status'        => $subscription['status'],
            );

            if( subscription_trails_status()  == 1 ){
                $user_data +=  ['Subscription_trail_status' => 1 ];
                $user_data +=  ['Subscription_trail_tilldate' => subscription_trails_day() ];
            }

            User::where('id',$user_id)->update( $user_data );
            
            try {

              $email_subject = EmailTemplate::where('id',23)->pluck('heading')->first() ;
              $plandetail = SubscriptionPlan::where('plan_id','=',$plan)->first();

              $nextPaymentAttemptDate =  Carbon::createFromTimeStamp( $subscription['current_period_end'] )->format('F jS, Y')  ;

              \Mail::send('emails.subscriptionmail', array(

                  'name'          => ucwords($user->username),
                  'paymentMethod' => $paymentMethod,
                  'plan'          => ucfirst($plandetail->plans_name),
                  'price'         => $subscription->plan['amount_decimal'] / 100 ,
                  'plan_id'       => $subscription['plan']['id'] ,
                  'billing_interval'  => $subscription['plan']['interval'] ,
                  'next_billing'      => $nextPaymentAttemptDate,
                  'subscription_type' => 'recurring',
                ), 

                function($message) use ($request,$user,$email_subject){
                  $message->from(AdminMail(),GetWebsiteName());
                  $message->to($user->email, $user->username)->subject($email_subject);
                });

              $email_log      = 'Mail Sent Successfully from Become Subscription';
              $email_template = "23";
              $user_id = $user->id;
  
              Email_sent_log($user_id,$email_log,$email_template);

          } catch (\Throwable $th) {

              $email_log      = $th->getMessage();
              $email_template = "23";
              $user_id = $user->id;
  
              Email_notsent_log($user_id,$email_log,$email_template);
          }

          $user_detail  = User::where('id',$user_id)->first() ;

          $data = array(
            'status'        => "true",
            'message'       => "Your Payment done Successfully!",
            'next_billing'  => $nextPaymentAttemptDate ,
            'Subscription'  => $Subscription ,
            'user'          => $user_detail, 
            'users_role'    => $user_detail->role ,
            'user_id'       => $user_detail->id,
          );

      } catch (\Throwable $th) {

          $data = array(
            'status'    => "false",
            'message'   => $th->getMessage(),
          );
      }

      return response()->json($data, 200);
    }

    public function becomesubscriber(Request $request)
     {

        $stripe_plan = SubscriptionPlan();
        $user_id = $request->get('userid');
        $plan = $request->get('subscrip_plan');
        $user = User::find($user_id);
        $paymentMethod = $request->get('py_id');

        
      $user->newSubscription('test', $plan)->create($paymentMethod);

       if ( $user->subscribed('test') ) {

        $user = User::find($user_id);
        $user->role = 'subscriber';
        $user->active = 1;
        $user->save();

        $users = User::find($user_id);
        $id = $users->id;
        $role = $users->role;
        $username = $users->username;
        $password = $users->password;
        $email = $users->email;
        $avatar = $users->avatar;

        $user_details = array([
          'user_id'=>$id,
          'role'=>$role,
          'username'=>$username,
          'email'=>$email,
          'avatar'=>URL::to('/').'/public/uploads/avatars/'.$avatar
        ] );

        $response = array(
            'status' => 'true',
            'next-billing' => '',
            'user_details'=> $user_details
        );
        }
        else{
            $response = array(
                'status' => 'false'
                );
        }

       return response()->json($response, 200);

    }


public function checkEmailExists(Request $request)
    {
      $email = $request->get('email');
      $username = $request->get('username');

       if ( isset($email) && !isset($username)  )
       {
           if (User::where('email', '=', $email)->exists()) {
          $response = array(
                    'status' =>  'false',
                    'message' =>  'Email Already Exists'
                );
            } else {
                   $response = array(
                        'status' =>  'true',
                        'message' =>  ''
                    );
           }

       } elseif( !isset($email) && isset($username)){

               if (User::where('username', '=', $username)->exists()) {
                    $response = array(
                        'status' =>  'false',
                        'message' =>  'Username Already Exists'
                    );
                   } else {
                           $response = array(
                                'status' =>  'true',
                                'message' =>  ''
                            );
                   }
        }

       elseif( isset($email) && isset($username)){

               if (User::where('username', '=', $username)->exists() && User::where('email', '=', $email)->exists()) {
                     $response = array(
                        'status' =>  'false',
                        'message' =>  'Username or Email Already Exists'
                    );
                 } elseif (User::where('username', '=', $username)->exists()){
                    $response = array(
                        'status' =>  'false',
                        'message' =>  'Username  Already Exists'
                    );
                 }elseif(User::where('email', '=', $email)->exists()){
                    $response = array(
                        'status' =>  'false',
                        'message' =>  'Email  Already Exists'
                    );
                }
                else {
                    $response = array(
                                'status' =>  'true',
                                'message' =>  ''
                            );
                   }
           } else {
                    $response = array(
                                'status' =>  'true',
                                'message' =>  ''
                            );
       }
      return response()->json($response, 200);
    }

    public function subscriptiondetail(Request $request)
    {
      $userid = $request->user_id;
        $stripe_plan = SubscriptionPlan();
      $user = User::where('id', '=', $userid)->first();
      if ( $user->subscribed($stripe_plan) ) {
        if ($user->subscription($stripe_plan)->onGracePeriod()) {
          $status = 'Renew Subscription';
        }
        else {
          $status = 'Cancel Subscription';
        }
      }
      else {
        $status = 'Become Subscriber';
      }
      $response = array(
        'status' => $status

      );
      return response()->json($response, 200);
    }


    public function SendOtp(Request $request) {
       /* $mobile = $request->get('mobile');
        $rcode = $request->get('ccode');
        $ccode = $rcode;
        $mobile_number = $ccode.$mobile;
        $user_count = VerifyNumber::where('number','=',$mobile_number)->count();
        $user_mobile_exist = User::where('mobile','=',$mobile)->count();
        $user_id= VerifyNumber::where('number','=',$mobile_number)->first();
        $basic  = new \Nexmo\Client\Credentials\Basic('8c2c8892', '05D2vuG2VbYw2tQZ');
        $client = new \Nexmo\Client($basic);


        if ($user_mobile_exist > 0 ){
                $response = array(
                    'status' => false,
                    'message' => 'This number already Exist, try with another number'
               );
         return response()->json($response, 200);
        }
        elseif ( $user_count > 0  ) {


            try {
                 $verification = $client->verify()->start([
                                      'number' =>  $ccode.$mobile,
                                      'brand'  => 'Flicknexs ',
                                      'code_length'  => '4']);
                    $verification_id =$verification->getRequestId();
                    $response = array(
                        'status' => true,
                        'message' => 'OTP has been sent to your number',
                        'verify'=>$verification_id,
                        'mobile' => $mobile_number
                    );
                  return response()->json($response, 200);
                }catch(\Vonage\Client\Exception\Request $e){
                    $response = array(
                                    'status' => false,
                                    'message' => 'Invalid number or Try after 5mins'
                                );
                    return response()->json($response, 200);
                }

        } else {
              try {
                     $verification = $client->verify()->start([
                        'number' =>  $ccode.$mobile,
                        'brand'  => 'Flicknexs ',
                        'code_length'  => '4']);

                        $verification_id =$verification->getRequestId();
                        $response = array(
                            'status' => true,
                            'message' => 'OTP has been sent to your number',
                            'verify'=>$verification_id,
                            'mobile' => $mobile_number
                        );
                      return response()->json($response, 200);
                    }catch(\Vonage\Client\Exception\Request $e){
                        $response = array(
                                        'status' => false,
                                        'message' => 'Invalid number or Try after 5mins'
                                    );
                        return response()->json($response, 200);
                    }
        }   */
        $response = array(
          'status' => true
        );
        return response()->json($response, 200);
        }


  public function CheckBlockList(Request $request){
        $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
        $mycountry = $geoip->getCountry();

        $allCountries = Country::all()->pluck('country_name');
        $user_country = Country::where('country_name', '=', $mycountry)->first();
        if ($user_country !== null) {
            $response = array('status' => true,
                              'message' => 'Blocked'
            );
        } else {
            $response = array('status' => false,
                              'message' => 'Can Access'
            );
        }
        return response()->json($response, 200);
    }

    public function SocialUser(Request $request) {
    /*Parameters*/
    $input = $request->all();
    $username = $input['username'];
    $email = $input['email'];
    $user_url = $input['user_url'];
    $login_type = $input['login_type'];//Facebook or Google


    /*Parameters*/
    /*Profile image move to avatar folder*/
    if($user_url != ''){
      $name = $username.".jpg";
      //local site
      //$path = $_SERVER['DOCUMENT_ROOT'].'/flicknexs/public/uploads/avatars'.$name;
      //live site
      $path = $_SERVER['DOCUMENT_ROOT'].'/public/uploads/avatars/'.$name;
          $arrContextOptions=array(
        "ssl"=>array(
          "verify_peer"=>false,
          "verify_peer_name"=>false,
        ),
      );
      $contents = file_get_contents($user_url, false, stream_context_create($arrContextOptions));
         file_put_contents($path, $contents);

    }else{
      $name = '';
    }

    if($login_type == 'facebook'){ //Facebook
      // $check_exists = User::where('email', '=', $email)->where('user_type', '=', $login_type)->count();
      $check_exists = User::where('email', '=', $email)->count();
      if($check_exists > 0){//Login
        $user_details = User::where('email', '=', $email)->get();
        $response = array(
          'status'      =>'true',
          'message'     =>'Login Success',
          'user_details'=>$user_details
        );
      }else{//Signup
        $data = array(
          'username' =>$username,
          'email'    =>$email,
          'user_type'=>$login_type,
          'avatar'   =>$name,
          'active'   => 1 ,
          'role'     =>'registered',
          'password' =>'null'
        );

        $user = new User;
        $user->insert($data);
        $user_details = User::where('username', '=', $username)->get();
        $response = array(
          'status'       =>'true',
          'message'      =>'Account Created ',
          'user_details' => $user_details
        );
      }
    }
    if($login_type == 'google'){ //Google
      // $check_exists = User::where('email', '=', $email)->where('user_type', '=', $login_type)->count();
      $check_exists = User::where('email', '=', $email)->count();
      if($check_exists > 0) {//Login
        $user_details = User::where('email', '=', $email)->get();
        $response = array(
          'status'      =>'true',
          'message'     =>'Login Success',
          'user_details'=>$user_details
        );
      }else{//Signup
        $data = array(
          'username' =>$username,
          'email'    =>$email,
          'user_type'=>$login_type,
          'avatar'   =>$name,
          'active'   => 1 ,
          'role'     =>'registered',
          'password' =>'null'
        );

        $user = new User;
        $user->insert($data);
        $user_details = User::where('username', '=', $username)->get();
        $response = array(
          'status'       =>'true',
          'message'      =>'Account Created ',
          'user_details' => $user_details
        );
      }
    }

    if($username == null || $login_type == null){
      $response = array(
          'status'       =>'false',
          'message'      =>'Empty Request'
        );
    }

    return response()->json($response, 200);
  }

  public function SkipTime(){

    $response = array(
      'skip_time'   =>'5',
      'intro_time' =>'10'
    );
    return response()->json($response, 200);
  }

  public function LikeDisLike(Request $request)
  {
    $video_id = $request->video_id;
    $like = $request->like;
    $user_id = $request->user_id;
    $video = LikeDisLike::where("video_id","=",$video_id)->where("user_id","=",$user_id)->get();
    $video_count = LikeDisLike::where("video_id","=",$video_id)->where("user_id","=",$user_id)->count();
    if ($video_count >0 ) {
      $video_new = LikeDisLike::where("video_id","=",$video_id)->where("user_id","=",$user_id)->first();
      $video_new->status = $like;
      $video_new->video_id = $video_id;
      $video_new->save();
      $response = array(
        'status'   =>true
      );
    } else {
      $video_new = new LikeDisLike;
      $video_new->video_id = $video_id;
      $video_new->user_id = $user_id;
      $video_new->status = $like;
      $video_new->save();
      $response = array(
        'status'   =>true
      );
    }
    return response()->json($response, 200);
  }

    public function serieslist()
    {
      $series = Series::where('active', '=', '1')->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['mp4_url'] = URL::to('/').'/storage/app/public/'.$item->mp4_url;
        $item['Season_count'] = SeriesSeason::where('series_id','=',$item->id)->count();
        $series_genre = SeriesCategory::Select('series_genre.name')
        ->Join('series_genre','series_genre.id','=','series_categories.category_id')
        ->where('series_categories.series_id',$item->id)->get();
        if(count($series_genre) > 0 ){
          $item['series_genre'] = $series_genre;
           }else{
            $item['series_genre'] = [];
           }

        return $item;
      });

      $settings = Setting::first();
      $response = array(
        'series' => $series,
        // "settings"   => $settings,

        );
      return response()->json($response, 200);
    }

    public function PurchaseSeries(Request $request)
    {
      $seriesid = $request->seriesid;
      $user_id = $request->user_id;

      $series = Series::where('id', '=', $seriesid)->where('active', '=', '1')->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['mp4_url'] = URL::to('/').'/storage/app/public/'.$item->mp4_url;
        return $item;
      });
      if (!empty($seriesid)) {
        $ppv_exist = PpvPurchase::where('user_id',$user_id)
        ->where('series_id',$seriesid)
        ->count();
      } else {
        $ppv_exist = 0;
      }
        if ($ppv_exist > 0) {

              $ppv_video_status = "can_view";

          }elseif(!empty($series) && $series[0]->ppv_status == 0 ) {
            $ppv_video_status = "can_view";
          }
          else {
                $ppv_video_status = "pay_now";
          }
      $seasonfirst = SeriesSeason::where('series_id','=',$seriesid)->first();
      $settings = Setting::get();
      $response = array(
        'series' => $series,
        'seasonfirst' => $seasonfirst,
        'ppv_video_status' => $ppv_video_status,
        "settings"   => $settings,

        );
      return response()->json($response, 200);
    }

  public function seasonlist(Request $request){
      $seriesid = $request->seriesid;
      $season = SeriesSeason::where('series_id','=',$seriesid)->orderBy('created_at', 'desc')->get();
      $seasonfirst = SeriesSeason::where('series_id','=',$seriesid)->first();
      $first_season_id = $seasonfirst =! " " ? $seasonfirst->id : null;

      $response = array(
        'status'=>'true',
        'message'=>'success',
        'first_season_id'=> $first_season_id,
        'season' => $season
      );
      return response()->json($response, 200);
    }
    public function seriesepisodes(Request $request){

      $season_id = $request->seasonid;

      $episodes = Episode::where('season_id','=',$season_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
         $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
         return $item;
       });


      $response = array(
        'status'=>'true',
        'message'=>'success',
        'episodes' => $episodes
      );

      return response()->json($response, 200);

    }

    public function episodedetails(Request $request){

      $validator = Validator::make($request->all(), [
        'episodeid'   => 'required',
      ]);
  
      if ($validator->fails()) {

        $response = [
            'status'    => 'false',
            'message'   => $validator->errors()->first(),
        ];

        return response()->json($response, 422); 
      }

      try {
      

      $episodeid = $request->episodeid;
      $user_id   = $request->user_id;
      $andriodId   = $request->andriodId;
      $IOSId      = $request->IOSId;

      $settings = Setting::first();

      // Check Episode exist

      Episode::where('active', 1)->where('status', 1)->where('id',$episodeid)->firstorfail();

      // Episode Details

      $episode = Episode::where('active', 1)->where('status', 1)->where('id',$episodeid)->orderBy('episode_order')->get()->map(function ($item) use ($user_id,$andriodId,$settings){

         $item['image'] = URL::to('public/uploads/images/'.$item->image);

         $item['image_url'] = $item->image;
         $item['player_image_url'] = URL::to('public/uploads/images/'.$item->player_image);
         $item['tv_image_url'] = URL::to('public/uploads/images/'.$item->tv_image);

         $item['series'] = Series::where('id',$item->series_id)->first();

         $item['series_name'] = $item['series']->title;

         $item['Share_url'] = URL::to('episode/'.$item['series']->slug.'/'.$item['slug']);

         $details = html_entity_decode($item->episode_description);
         $description = strip_tags($details);
         $item['episode_description'] = str_replace("\r", '', $description);
        // $item['episode_description'] = nl2br($desc);

          //Continue Watchings

        $item['current_time'] =  '00:00' ;
        $item['watch_percentage'] =   null ;
        $item['skip_time'] =   null ;
        $item['ContinueWatching'] =   null ;

        if( isset($user_id) ){

          $ContinueWatching = ContinueWatching::query()->where('user_id',$user_id)->where('episodeid',$item->id)->latest()->first();
          
          $item['ContinueWatching'] = $ContinueWatching ;

          $item['current_time'] = !is_null($ContinueWatching )? $ContinueWatching->currentTime :  '00:00' ;
          $item['watch_percentage'] = !is_null($ContinueWatching )? $ContinueWatching->watch_percentage :  null ;
          $item['skip_time'] = !is_null($ContinueWatching )? $ContinueWatching->skip_time :  null ;

        }
        
        if( isset($andriodId) ){

          $ContinueWatching = ContinueWatching::query()->where('andriodId',$andriodId)->where('episodeid',$item->id)->latest()->first();
          
          $item['ContinueWatching'] = $ContinueWatching ;

          $item['current_time'] = !is_null($ContinueWatching )? $ContinueWatching->currentTime :  '00:00' ;
          $item['watch_percentage'] = !is_null($ContinueWatching )? $ContinueWatching->watch_percentage :  null ;
          $item['skip_time'] = !is_null($ContinueWatching )? $ContinueWatching->skip_time :  null ;

        }
        

        if( isset($IOSId) ){

          $ContinueWatching = ContinueWatching::query()->where('IOSId',$IOSId)->where('episodeid',$item->id)->latest()->first();
          
          $item['ContinueWatching'] = $ContinueWatching ;

          $item['current_time'] = !is_null($ContinueWatching )? $ContinueWatching->currentTime :  '00:00' ;
          $item['watch_percentage'] = !is_null($ContinueWatching )? $ContinueWatching->watch_percentage :  null ;
          $item['skip_time'] = !is_null($ContinueWatching )? $ContinueWatching->skip_time :  null ;

        }

           
       // Check Channel Purchase 
       
       $UserChannelSubscription = true ;

       if ( $settings->user_channel_plans_page_status == 1) {

            $UserChannelSubscription = false ;

            $channel_id = Episode::where('id',$item->id)->where('uploaded_by','channel')->pluck('user_id')->first();

            if (is_null($channel_id)) {
                $UserChannelSubscription = true ;
            }

            if (!Auth::guest() && !is_null($channel_id) ) {

                $UserChannelSubscription = UserChannelSubscription::where('user_id',auth()->user()->id)
                                                ->where('channel_id',$channel_id)->where('status','active')
                                                ->where('subscription_start', '<=', Carbon::now())
                                                ->where('subscription_ends_at', '>=', Carbon::now())
                                                ->latest()->exists();

                if (Auth::user()->role == "admin") {
                    $UserChannelSubscription = true ;
                }
            }
        }

        $item['UserChannelSubscription'] = $UserChannelSubscription;

         //  Episode URL
         if($this->Theme == 'theme4'){
          switch (true) {

            case $item['type'] == "file"  :
                $item['episode_url'] =  URL::to('/storage/app/public-latest/'. $item->path .'.mp4') ;
                $item['Episode_player_type'] =  'video/mp4' ;
                $item['qualities']  = [] ;
            break;
  
            case $item['type'] == "upload"  :
              $item['episode_url'] =  URL::to('/storage/app/public-latest/'. $item->path .'.mp4') ;
              $item['Episode_player_type'] =   'video/mp4' ;
              $item['qualities']  = [] ;
            break;
  
            case $item['type'] == "m3u8":
                $item['episode_url'] =  URL::to('/storage/app/public-latest/'. $item->path .'.m3u8')   ;
                $item['Episode_player_type'] =  'application/x-mpegURL' ;
                $item['qualities']  = [] ;
            break;
  
            case $item['type'] == "m3u8_url":
                $item['episode_url'] =  $item->url    ;
                $item['Episode_player_type'] =  'application/x-mpegURL' ;
                $item['qualities']  = [] ;
            break;
            
            case $item['type'] == "aws_m3u8":
              $item['episode_url'] =  $item->path ;
              $item['Episode_player_type'] =  'application/x-mpegURL' ;
              $item['qualities']  = [] ;
            break;
  
            case $item['type'] == "embed":
                $item['episode_url'] =  $item->path ;
                $item['Episode_player_type'] =  'application/x-mpegURL' ;
                $item['qualities']  = [] ;
            break;
  
            case $item['type'] == "embed_video_url":
              $item['Episode_url'] =  $item->embed_video_url ;
              $item['Episode_player_type'] =  'application/x-mpegURL' ;
            break;

            case $item['type'] == 'bunny_cdn' :
              $item['episode_url']   = $item->url ;
              $item['Episode_player_type'] =  'application/x-mpegURL' ;
  
              $response = Http::withoutVerifying()->get( $item['episode_url'] );
              $qualities = [];
  
              if ($response->successful()) {
                  $contents = $response->body();
                  preg_match_all('/#EXT-X-STREAM-INF:.*RESOLUTION=(\d+x\d+)\s*(\d+p)\/video\.m3u8/', $contents, $matches);
  
                  foreach ($matches[2] as $quality) {
                      $qualities[] = str_replace('p', '', $quality);
                  }
                  $qualities = $qualities ;
              } 
  
              $item['qualities']   = $qualities ;
              
              break;
  
            default:
                $item['episode_url'] =  null ;
                $item['Episode_player_type'] =  null ;
               $item['qualities']  = [] ;
            break;
          }
         } else {
         
         switch (true) {

          case $item['type'] == "file"  :
              $item['episode_url'] =  $item->mp4_url ;
              $item['Episode_player_type'] =  'video/mp4' ;
              $item['qualities']  = [] ;
          break;

          case $item['type'] == "upload"  :
            $item['episode_url'] =  $item->mp4_url ;
            $item['Episode_player_type'] =   'video/mp4' ;
            $item['qualities']  = [] ;
          break;

          case $item['type'] == "m3u8":
              $item['episode_url'] =  URL::to('/storage/app/public/'. $item->path .'.m3u8')   ;
              $item['Episode_player_type'] =  'application/x-mpegURL' ;
              $item['qualities']  = [] ;
          break;

          case $item['type'] == "m3u8_url":
              $item['episode_url'] =  $item->url    ;
              $item['Episode_player_type'] =  'application/x-mpegURL' ;
              $item['qualities']  = [] ;
          break;
          
          case $item['type'] == "embed_video_url":
            $item['Episode_url'] =  $item->embed_video_url ;
            $item['Episode_player_type'] =  'application/x-mpegURL' ;
          break;

          case $item['type'] == "aws_m3u8":
            $item['episode_url'] =  $item->path ;
            $item['Episode_player_type'] =  'application/x-mpegURL' ;
            $item['qualities']  = [] ;
          break;

          case $item['type'] == "embed":
              $item['episode_url'] =  $item->path ;
              $item['Episode_player_type'] =  'application/x-mpegURL' ;
              $item['qualities']  = [] ;
          break;

          case $item['type'] == 'bunny_cdn' :
            $item['episode_url']   = $item->url ;
            $item['Episode_player_type'] =  'application/x-mpegURL' ;

            $response = Http::withoutVerifying()->get( $item['episode_url'] );
            $qualities = [];

            if ($response->successful()) {
                $contents = $response->body();
                preg_match_all('/#EXT-X-STREAM-INF:.*RESOLUTION=(\d+x\d+)\s*(\d+p)\/video\.m3u8/', $contents, $matches);

                foreach ($matches[2] as $quality) {
                    $qualities[] = str_replace('p', '', $quality);
                }
                $qualities = $qualities ;
            } 

            $item['qualities']   = $qualities ;
            
            break;

          default:
              $item['episode_url'] =  null ;
              $item['Episode_player_type'] =  null ;
             $item['qualities']  = [] ;
          break;
        }
      }

         return $item;
       });

       if(count($episode) > 0){
       $series_id =  $episode[0]->series_id;
       $season_id = $episode[0]->season_id;

       $ios_plans_id = InappPurchase::get();

        $Season = SeriesSeason::where('series_id', $series_id)
                                  ->where('id', $season_id)->get()
                                  ->map(function($item) use ($ios_plans_id) {
                                      $iosPlan = $ios_plans_id->firstWhere('product_id', $item->ios_product_id);
                                      
                                      $item['ios_ppv_price'] = $iosPlan ? $iosPlan->plan_price : null;
                                      
                                      return $item;
                                  });

       $Season_array = SeriesSeason::where('series_id',$series_id)->where('id',$season_id)->get()
                                      ->map(function($item) use ($ios_plans_id){
                                          $ios_plan = $ios_plans_id->firstwhere('product_id',$item->ios_product_id);

                                          $item['ios_ppv_price'] = $ios_plan ? $ios_plan->plan_price: null;

                                          return $item;
                                      });

       $AllSeason = SeriesSeason::where('series_id',$series_id)->get();

                if(count($AllSeason) > 0){


                    foreach($AllSeason as $key => $Season){

                        if($season_id ==  $Season->id){

                          $name = $key+1;
                          $Season_Name = 'Season '. $name;
                        }
                    }

                  }else{
                    $Season_Name = '';

                  }

       }else{
        $Season = '';
       }


      $languages = SeriesLanguage::Join('languages','languages.id','=','series_languages.series_id')
      ->where('series_languages.series_id',$series_id)->get('name');

      foreach($languages as $value){
        $language[] = $value['name'];
      }
      if(!empty($language)){
      $languages = implode(",",$language);
      }else{
        $languages = "";
      }

      
      if($request->user_id != ''){
        $user_id = $request->user_id;
        $cnt = Wishlist::select('episode_id')->where('user_id','=',$user_id)->where('episode_id','=',$request->episodeid)->count();
        $wishliststatus =  ($cnt == 1) ? "true" : "false";
        // $userrole = User::find($user_id)->pluck('role');
      }else{
        $wishliststatus = 'false';
        // $userrole = '';
      }
      if(!empty($request->user_id)){
        $user_id = $request->user_id;
        $cnt = Watchlater::select('episode_id')->where('user_id','=',$user_id)->where('episode_id','=',$request->episodeid)->count();
        $watchlaterstatus =  ($cnt == 1) ? "true" : "false";
        // $userrole = User::find($user_id)->pluck('role');
      }else{
        $watchlaterstatus = 'false';
        // $userrole = '';
      }
      if($request->user_id != ''){
      $like_data = LikeDisLike::where("episode_id","=",$episodeid)->where("user_id","=",$user_id)->where("liked","=",1)->count();
      $dislike_data = LikeDisLike::where("episode_id","=",$episodeid)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
      $favoritestatus = Favorite::where("episode_id","=",$episodeid)->where("user_id","=",$user_id)->count();
      $like = ($like_data == 1) ? "true" : "false";
      $dislike = ($dislike_data == 1) ? "true" : "false";
      $favorite = ($favoritestatus > 0) ? "true" : "false";
      // $userrole = User::find($user_id)->pluck('role');

    }else{
      $like = 'false';
      $dislike = 'false';
      $favorite = 'false';
      // $userrole = '';
    }
    if(!empty($request->user_id)){
      $user_id = $request->user_id;
      $users = User::where('id','=',$user_id)->first();
      $userrole = $users->role;
    }else{
      $userrole = '';
    }

    $series_id = Episode::where('id','=',$episodeid)->pluck('series_id');
    if(!empty($series_id)){
      $series_id = $series_id[0];

    $main_genre = SeriesCategory::Join('genres','genres.id','=','series_categories.category_id')
    ->where('series_categories.series_id',$series_id)->get('name');

    $languages = SeriesLanguage::Join('languages','languages.id','=','series_languages.language_id')
    ->where('series_languages.series_id',$series_id)->get('name');
    }

    if(!empty($series_id) && !empty($main_genre)){
    foreach($main_genre as $value){
      $category[] = $value['name'];
    }
  }else{
    $category = [];
  }
  

    if(!empty($category)){
    $main_genre = implode(",",$category);
    }else{
      $main_genre = "";
    }

    
    if(!empty($series_id) && !empty($languages)){
    foreach($languages as $value){
      $language[] = $value['name'];
    }
  }else{
    $language = "";
  }
    if(!empty($language)){
    $languages = implode(",",$language);
    }else{
      $languages = "";
    }
    if (!empty($episode)) {
    $season = SeriesSeason::where('id',$episode[0]->season_id)->first();
   
    $ppv_exist = PpvPurchase::where('user_id',$user_id)
    // ->where('season_id',$episode[0]->season_id)
    ->where('series_id',$episode[0]->series_id)
    ->count();
  } else {
    $ppv_exist = 0;
  }
    if ($ppv_exist > 0) {

          $ppv_video_status = "can_view";

      } else if (!empty($season) && $season->access != "ppv" || $season->access == "free") {
        $ppv_video_status = "can_view";
      }
      else {
            $ppv_video_status = "pay_now";
      }


              
          if($request->andriodId != ''){
            $andriodId = $request->andriodId;
            $cnt = Wishlist::select('episode_id')->where('andriodId','=',$andriodId)->where('episode_id','=',$request->episodeid)->count();
            $andriod_wishliststatus =  ($cnt == 1) ? "true" : "false";
          }else{
            $andriod_wishliststatus = 'false';
          }
          if(!empty($request->andriodId)){
            $andriodId = $request->andriodId;
            $cnt = Watchlater::select('episode_id')->where('andriodId','=',$andriodId)->where('episode_id','=',$request->episodeid)->count();
            $andriod_watchlaterstatus =  ($cnt == 1) ? "true" : "false";
          }else{
            $andriod_watchlaterstatus = 'false';
          }

          if($request->andriodId != ''){
          $andriod_like_data = LikeDisLike::where("episode_id","=",$episodeid)->where("andriodId","=",$andriodId)->where("liked","=",1)->count();
          $andriod_dislike_data = LikeDisLike::where("episode_id","=",$episodeid)->where("andriodId","=",$andriodId)->where("disliked","=",1)->count();
          $andriod_favoritestatus = Favorite::where("episode_id","=",$episodeid)->where("andriodId","=",$andriodId)->count();
          $andriod_like = ($andriod_like_data == 1) ? "true" : "false";
          $andriod_dislike = ($andriod_dislike_data == 1) ? "true" : "false";
          $andriod_favorite = ($andriod_favoritestatus > 0) ? "true" : "false";

        }else{
          $andriod_like = 'false';
          $andriod_dislike = 'false';
          $andriod_favorite = 'false';
        }

        if($request->IOSId != ''){
          $IOSId = $request->IOSId;
          $cnt = Wishlist::select('episode_id')->where('IOSId','=',$IOSId)->where('episode_id','=',$request->episodeid)->count();
          $IOS_wishliststatus =  ($cnt == 1) ? "true" : "false";
        }else{
          $IOS_wishliststatus = 'false';
        }
        if(!empty($request->IOSId)){
          $IOSId = $request->IOSId;
          $cnt = Watchlater::select('episode_id')->where('IOSId','=',$IOSId)->where('episode_id','=',$request->episodeid)->count();
          $IOS_watchlaterstatus =  ($cnt == 1) ? "true" : "false";
        }else{
          $IOS_watchlaterstatus = 'false';
        }

        if($request->IOSId != ''){
        $IOS_like_data = LikeDisLike::where("episode_id","=",$episodeid)->where("IOSId","=",$IOSId)->where("liked","=",1)->count();
        $IOS_dislike_data = LikeDisLike::where("episode_id","=",$episodeid)->where("IOSId","=",$IOSId)->where("disliked","=",1)->count();
        $IOS_favoritestatus = Favorite::where("episode_id","=",$episodeid)->where("IOSId","=",$IOSId)->count();
        $IOS_like = ($IOS_like_data == 1) ? "true" : "false";
        $IOS_dislike = ($IOS_dislike_data == 1) ? "true" : "false";
        $IOS_favorite = ($IOS_favoritestatus > 0) ? "true" : "false";

      }else{
        $IOS_like = 'false';
        $IOS_dislike = 'false';
        $IOS_favorite = 'false';
      }

      
      $response = array(
        'status'=>'true',
        'message'=>'success',
        'shareurl' => URL::to('episode').'/'.$episode[0]->series_name.'/'.$episode[0]->slug,
        'episode' => $episode,
        'Season_Name' => $Season_Name,
        'season' => array($Season),
        'Season_array' => $Season_array ,
        'ppv_video_status' => $ppv_video_status,
        'wishlist' => $wishliststatus,
        'watchlater' => $watchlaterstatus,
        'userrole' => $userrole,
        'favorite' => $favorite,
        'like' => $like,
        'dislike' => $dislike,
        'main_genre' =>preg_replace( "/\r|\n/", "", $main_genre ),
        'languages' => $languages,
        'andriod_wishliststatus' => $andriod_wishliststatus,
        'andriod_like' => $andriod_like,
        'andriod_dislike' => $andriod_dislike,
        'andriod_favorite' => $andriod_favorite,
        'andriod_watchlaterstatus' => $andriod_watchlaterstatus,
        'IOS_wishliststatus' => $IOS_wishliststatus,
        'IOS_like' => $IOS_like,
        'IOS_dislike' => $IOS_dislike,
        'IOS_favorite' => $IOS_favorite,
        'IOS_watchlaterstatus' => $IOS_watchlaterstatus,
      );
      return response()->json($response, 200);
       
      } catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=> $th->getMessage(),
        );
        return response()->json($response, 500);
      }
    }


    public function relatedepisodes(Request $request){

      $episodeid = $request->episodeid;
      $episode_count = Episode::where('id','=',$episodeid)->count();
      if($episode_count > 0){
      $season_id = Episode::where('id','=',$episodeid)->pluck('season_id');
      $episode = Episode::where('id','!=',$episodeid)
                ->where('season_id','=',$season_id)
                ->where('active',1)
                ->where('status',1)
                ->orderBy('created_at', 'desc')
                ->get()->map(function ($item) {
                  $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
                  return $item;
                });
                  $status = true;
                }else{
                  $episode = [];
                  $status = false;
                }

      $response = array(
        'status'=>$status,
        'message'=>'success',
        'related_episode' => $episode
      );
      return response()->json($response, 200);
    }


    public function LikeVideo(Request $request)
    {
      $user_id = $request->user_id;
      $video_id = $request->video_id;
      $like = $request->like;
      $d_like = Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->count();

      if($d_like > 0){
        $new_vide_like = Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->first();
        if($like == 1){
          $new_vide_like->user_id = $request->user_id;
          $new_vide_like->video_id = $request->video_id;
          $new_vide_like->liked = 1;
          $new_vide_like->disliked = 0;
          $new_vide_like->save();
        }else{
          $new_vide_like->user_id = $request->user_id;
          $new_vide_like->video_id = $request->video_id;
          $new_vide_like->liked = 0;
          $new_vide_like->save();
        }
      }else{
        $new_vide_like = new Likedislike;
        $new_vide_like->user_id = $request->user_id;
        $new_vide_like->video_id = $request->video_id;
        $new_vide_like->liked = 1;
        $new_vide_like->disliked = 0;
        $new_vide_like->save();
      }

       $response = array(
        'status'=>'true',
        'liked' => $new_vide_like->liked,
        'disliked' => $new_vide_like->disliked,
        'message'=>'success'
      );

       return response()->json($response, 200);

    }

    public function LikeAudio(Request $request)
    {
      $user_id = $request->user_id;
      $audio_id = $request->audios_id;
      $like = $request->like;
      $d_like = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->count();

      if($d_like > 0){
        $new_vide_like = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->first();
        if($like == 1){
          $new_vide_like->user_id = $request->user_id;
          $new_vide_like->audio_id = $request->audios_id;
          $new_vide_like->liked = 1;
          $new_vide_like->disliked = 0;
          $new_vide_like->save();
        }else{
          $new_vide_like->user_id = $request->user_id;
          $new_vide_like->audio_id = $request->audios_id;
          $new_vide_like->liked = 0;
          $new_vide_like->save();
        }
      }else{
        $new_vide_like = new Likedislike;
        $new_vide_like->user_id = $request->user_id;
        $new_vide_like->audio_id = $request->audios_id;
        $new_vide_like->liked = 1;
        $new_vide_like->disliked = 0;
        $new_vide_like->save();
      }

       $response = array(
        'status'=>'true',
        'liked' => $new_vide_like->liked,
        'disliked' => $new_vide_like->disliked,
        'message'=>'success'
      );

       return response()->json($response, 200);

    }

    public function DisLikeVideo(Request $request)
    {
      $user_id = $request->user_id;
      $video_id = $request->video_id;
      $dislike = $request->dislike;
      $d_like = Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->count();

      if($d_like > 0){
        $new_vide_dislike = Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->first();
        if($dislike == 1){
          $new_vide_dislike->user_id = $request->user_id;
          $new_vide_dislike->video_id = $request->video_id;
          $new_vide_dislike->liked = 0;
          $new_vide_dislike->disliked = 1;
          $new_vide_dislike->save();
        }else{
          $new_vide_dislike->user_id = $request->user_id;
          $new_vide_dislike->video_id = $request->video_id;
          $new_vide_dislike->disliked = 0;
          $new_vide_dislike->save();
        }
      }else{
        $new_vide_dislike = new Likedislike;
        $new_vide_dislike->user_id = $request->user_id;
        $new_vide_dislike->video_id = $request->video_id;
        $new_vide_dislike->liked = 0;
        $new_vide_dislike->disliked = 1;
        $new_vide_dislike->save();
      }

       $response = array(
        'status'=>'true',
        'liked' => $new_vide_dislike->liked,
        'disliked' => $new_vide_dislike->disliked,
        'message'=>'success'
      );

       return response()->json($response, 200);
    }

    public function DisLikeAudio(Request $request)
    {
      $user_id = $request->user_id;
      $audio_id = $request->audios_id;
      $dislike = $request->dislike;
      $d_like = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->count();

      if($d_like > 0){
        $new_vide_dislike = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->first();
        if($dislike == 1){
          $new_vide_dislike->user_id = $request->user_id;
          $new_vide_dislike->audio_id = $request->audios_id;
          $new_vide_dislike->liked = 0;
          $new_vide_dislike->disliked = 1;
          $new_vide_dislike->save();
        }else{
          $new_vide_dislike->user_id = $request->user_id;
          $new_vide_dislike->audio_id = $request->audios_id;
          $new_vide_dislike->disliked = 0;
          $new_vide_dislike->save();
        }
      }else{
        $new_vide_dislike = new Likedislike;
        $new_vide_dislike->user_id = $request->user_id;
        $new_vide_dislike->audio_id = $request->audios_id;
        $new_vide_dislike->liked = 0;
        $new_vide_dislike->disliked = 1;
        $new_vide_dislike->save();
      }

       $response = array(
        'status'=>'true',
        'liked' => $new_vide_dislike->liked,
        'disliked' => $new_vide_dislike->disliked,
        'message'=>'success'
      );

       return response()->json($response, 200);
    }

    public function MobileSignup(Request $request)
      {
        $username = $request->username;
        $email = $request->email;
        $mobile = $request->mobile;
        $existing_user = User::where("email","=",$email)->count();
        if ( $existing_user > 0 ) {

          $response = array(
            'status'=>'false',
            'message'=>'success'
          );
        } else {
            $user = new User;
            $user->mobile =$mobile;
            $user->email = $email;
            $user->username = $username;
            $user->active = 1;
            $user->user_type = 'firebase';
            $user->save();
            $response = array(
                'status'=>'true',
                'user_details' => array($user),
                'message'=>'success'
            );
        }

         return response()->json($response, 200);
      }

  public function CastList() {

      $casts = Cast::orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['cast_image'] = URL::to('/').'/public/uploads/avatars/casts/'.$item->cast;
        return $item;
      });

      $response = array(
        'status'=>'true',
        'casts' => $casts,
        'message'=>'success'
      );

       return response()->json($response, 200);
  }
  public function SeriesTitle(){
    $mobile_settings = DB::table('mobile_apps')->first();
    $response = array(
      'status'=>'true',
      'message'=>'success',
      'series_status'=> $mobile_settings->series_title
    );
    return response()->json($response, 200);
  }

  public function VideoCast(Request $request) {
      $video_id = $request->video_id;
      $video = Video::where("id","=",$video_id)->first();
      $cast_count = Video::where("id","=",$video_id)->count();
      if ($cast_count > 0 ) {
      $array_cast = explode(", ",$video->cast);
      foreach ($array_cast as $cast_id) {
          $cast_details[] = Cast::where("id","=",$cast_id)->first() ;
      }
      $response = array(
        'status'=>'true',
        'message'=>'success',
        'image_path'=> URL::to('/public/uploads/images/casts/'),
        'cast_details'=> $cast_details
      );
    } else{
      $response = array(
        'status'=>'false'
      );
    }
      return response()->json($response, 200);

    }
    public function UserComments(Request $request){

          $comments =  Comment::where("video_id","=",$request->video_id)
         ->where('user_id',$request->user_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $i = 0;
            while ($i<= $item->count()) {
              $user =  User::where("id","=",$item->user_id)->orderBy('created_at', 'desc')->get()->first();
              if (!empty($user->avatar)) {
                $item['user_profile'] = URL::to('/').'/public/uploads/avatars/'.$user->avatar;
              } else {
                $item['user_profile'] = null;
              }

              if (!empty($user->username)) {
                $item['username'] = $user->username;
              } else {
                $item['username'] = null;
              }
              $i++;
            }
            return $item;
          });

          $video_comments = Comment::join("users","users.id", "=", "comments.user_id")
          ->select('comments.*','users.username','users.avatar')
          ->where("comments.video_id", "=", $request->video_id)
          ->get()
          ->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/artists/'.$item->avatar;
            return $item;
          });
          $response = array(
            'status'=>'true',
            'video_comments'=>$comments,
            'user_comments'=>$video_comments,
          );

          return response()->json($response, 200);
    }

    public function AddComment(Request $request){

      $video_id = $request->video_id;
      $user_id = $request->user_id;
      $body = $request->body;
      $comment = new Comment;
      $comment->user_id = $user_id;
      $comment->video_id = $video_id;
      $comment->body = $body;
      $comment->save();
      $response = array(
        'status'=>'true',
        'message'=> "Comment Has been added"
      );

      return response()->json($response, 200);

    }
    public function NextVideo(Request $request) {

      $currentvideo_id = $request->id;

      $next_videoid = Video::where('id', '>', $currentvideo_id)->where('status','=','1')->where('active','=','1')->min('id');

      if($next_videoid){
        $video= Video::where('id','=',$next_videoid)->where('status','=','1')->where('active','=','1')->get();
        $response = array(
          'status' => true,
          'next_videoid' => $next_videoid,
          'video' => $video
        );
      }else{
        $response = array(
          'status' => false,
          'video' => 'No Data Found'
        );
      }
      return response()->json($response, 200);
  }

  public function PrevVideo(Request $request){

    // $user_id = $request->user_id;
    $currentvideo_id = $request->id;
    $prev_videoid = Video::where('id', '<', $currentvideo_id)->where('status','=','1')->where('active','=','1')->orderBy('created_at', 'desc')->max('id');
    if($prev_videoid){
        $video= Video::where('id','=',$prev_videoid)->where('status','=','1')->where('active','=','1')->get();
        $response = array(
          'status' => true,
          'prev_videoid' => $prev_videoid,
          'video' => $video
        );
      }else{
        $response = array(
          'status' => false,
          'video' => 'No Data Found'
        );
      }
      return response()->json($response, 200);
  }


public function upnextAudio(Request $request){


        $audio_id = $request->audio_id;
        $album_id  = CategoryAudio::where('audio_id',$audio_id)->pluck('category_id')->first();
        $upnext_audios =  Audio::join('category_audios', 'audio.id', '=', 'category_audios.audio_id')
        ->select('audio.*')
        ->where('category_id', $album_id)
        ->count();

        // $album_id = \Audio::where('id','=',$audio_id)->where('active','=','1')->where('status','=','1')->pluck('album_id');

  //$album_id = $request->album_id;
// $album_first = \Audio::where('album_id','=',$album_id)->where('active','=','1')->where('status','=','1')->limit(1)->get();

// $album_all_audios = \Audio::where('album_id','=',$album_id)->where('id','!=',$audio_id)->where('active','=','1')->where('status','=','1')->orderBy('created_at', 'desc')->get();
if($upnext_audios > 0){
  $album_all_audios =  Audio::join('category_audios', 'audio.id', '=', 'category_audios.audio_id')
  ->select('audio.*')
  ->where('category_id', $album_id)
  ->orderBy('audio.created_at', 'desc')
  ->get();
    $response = array(
      'status'=>'true',
      'message'=>'success',
      'audio_albums' =>$album_all_audios
    );
  }else{
    $response = array(
      'status'=>'false',
      'message'=>'success',
      'audio_albums' =>'No Upnext Audios Added'
    );
  }
    return response()->json($response, 200);
  }


  public function similarAudio(Request $request){


    $audio_id = $request->audio_id;
    $album_id  = CategoryAudio::where('audio_id',$audio_id)->pluck('category_id')->first();
    $similarAudio =  Audio::join('category_audios', 'audio.id', '=', 'category_audios.audio_id')
    ->select('audio.*')
    ->where('category_id','!=', $album_id)
    ->orderBy('audio.created_at', 'desc')
    ->count();

if($similarAudio > 0){
$similar_Audio =  Audio::join('category_audios', 'audio.id', '=', 'category_audios.audio_id')
->select('audio.*')
->where('category_id','!=', $album_id)
->orderBy('audio.created_at', 'desc')
->get();
$response = array(
  'status'=>'true',
  'message'=>'success',
  'similar_audio' =>$similar_Audio
);
}else{
$response = array(
  'status'=>'false',
  'message'=>'success',
  'similar_audio' =>'No Similar Audios Added'
);
}
return response()->json($response, 200);
}
  //Login with Mobile number
  public function MobileLogin(Request $request)
  {
    $mobile = $request->mobile;
    $existing_user = User::where("mobile","=",$mobile)->count();
    if ( $existing_user > 0 ) {
      $user_data = User::where("mobile","=",$mobile)->get();
      $response = array(
        'status'=>'true',
        'user_data'=>$user_data,
        'otp' => rand(1000,9999),
        'message'=>'success'
      );
    } else {
      $response = array(
        'status'=>'false',
        'message'=>'Mobile Number not exist. Please Register.'
      );
    }

    //return Response::json($response, 200);
      return response()->json($response, 200);
  }


  /* Season and Episode details*/
  public function SeasonsEpisodes(Request $request)
  {
    try {
   
    $seriesid = $request->seriesid;
    $myData = array();

    $series = Series::where('id',$seriesid)->where('active', '1')->get()->map(function($item){

      $item['categories'] =  SeriesCategory::select('series_categories.*','category_id','series_id','series_genre.name as name','series_genre.slug')
                                                        ->join('series_genre','series_genre.id','=','series_categories.category_id')
                                                        ->where('series_id', $item->id)->orderBy('series_genre.order')->get() ;

      $item['Language']   =  SeriesLanguage::select('series_languages.*','language_id','series_id','name','languages.name')
                                          ->join('languages','languages.id','=','series_languages.language_id')
                                          ->where('series_languages.series_id', $item->id)->get() ;

      $item['image_url'] = !is_null($item->image) && $item->image != "default_image" ? URL::to('public/uploads/images/'.$item->image) : default_vertical_image_url();
      $item['player_image_url'] = !is_null($item->player_image) && $item->player_image != "default_image"? URL::to('public/uploads/images/'.$item->player_image) : default_horizontal_image_url();
      $item['tv_image_url'] = !is_null($item->tv_image) && $item->tv_image != "default_image"? URL::to('public/uploads/images/'.$item->tv_image) : default_horizontal_image_url();
      $description = html_entity_decode($item['description']);
      $description = strip_tags($description);
      $description = str_replace("\r", '', $description);

      $details = html_entity_decode($item['details']);
      $details = strip_tags($details);
      $details = str_replace("\r", '', $details);

      $item['description'] = $description;
      $item['details'] = $details;
                                          
      return $item ;
    })->first();

    if (is_null($series)) {

      return response()->json([
        'status' => 'false',
        'message' => 'No Series Found',
        'SeasonsEpisodes' => []
      ], 400);

    }

    $seasonlist = SeriesSeason::where('series_id',$seriesid)->orderBy('order','desc')->get()->toArray();
  
    $seriesimage = Series::where('id',$seriesid)->pluck('image')->first();
    $series_player_image =  $series->player_image ? $series->player_image :default_vertical_image_url();
    $image = !empty( $seriesimage ) ? URL::to('public/uploads/images/'.$seriesimage) : default_horizontal_image_url();

    $season_ids = SeriesSeason::where('series_id', $series->id)
                        ->orderBy('order', 'desc')
                        ->pluck('id');


    foreach ($seasonlist as $key => $season) {
      
      $seasonid = $season['id'];
      $season_access = $season['access'];
      if ($season_ids->isNotEmpty()) {

          $episodes= Episode::where('series_id',$season['series_id'])->where('season_id',$seasonid)->where('status', 1)->where('active',1) ->orderByRaw("FIELD(season_id, " . implode(',', $season_ids->toArray()) . ")")
          ->orderBy('episode_order', 'desc')->get()->map(function ($item)  {

            $item['image'] = !is_null($item->image) && $item->image != "default_image" ? URL::to('public/uploads/images/'.$item->image) : default_vertical_image_url();
            $item['player_image_url'] = !is_null($item->player_image) && $item->player_image != "default_horizontal_image"? URL::to('public/uploads/images/'.$item->player_image) : default_horizontal_image_url();
            $item['tv_image_url'] = !is_null($item->tv_image) ? URL::to('public/uploads/images/'.$item->player_image) : default_horizontal_image_url();
          
            $item['episode_id'] =$item->id;
            if($this->Theme == 'theme4'){
              unset($item['mp4_url']);
              $item['transcoded_url'] = $item->type == 'm3u8' ? URL::to('/storage/app/public-latest/').'/'.$item->path . '.m3u8' : " ";
              $item['mp4_url'] = URL::to('/storage/app/public-latest/'. $item->path .'.mp4');
            }
            else{
              $item['transcoded_url'] = $item->type == 'm3u8' ? URL::to('/storage/app/public/').'/'.$item->path . '.m3u8' : " ";
            }
            $series_slug = Series::where('id',$item->series_id)->pluck('slug')->first();
            $item['render_site_url'] = URL::to('episode/'.$series_slug.'/'.$item->slug);

            $epi_description = html_entity_decode($item['episode_description']);
            $description = strip_tags($epi_description);
            $item['episode_description'] =  str_replace("\r", '', $description);

            
            return $item;
          });
        }else {
          $episodes = collect(); // Return empty collection if no seasons found
      }
    

      if(count($episodes) > 0){
        $msg = 'success';
        $count_episode = count($episodes);
      }else{
        $msg = 'nodata';
        $count_episode = count($episodes);
      }

      
      $details = html_entity_decode($series->description);
      $description = strip_tags($details);
      $series->description = str_replace("\r", '', $description);


      $season_name = $season['series_seasons_name'];
      $settings = Setting::first();

      $myData[] = array(
        "seriestitle"   => $series->title,
        "series_description"   => $series->description,
        "series_player_image"   => $series_player_image ,
        "series" => $series,
        "season_name"   => $season_name,
        "season_access"   => $season_access,
        "series_image" => $image,
        "season_id"   => $seasonid,
        "message" => $msg,
        "count_episode" => $count_episode,
        "episodes" => $episodes,
      );
    }

    $response = array(
      'status' => 'true',
      'status_code' => 200,
      'message' => 'Retrieved Series Season Successfully',
      'SeasonsEpisodes' => $myData
    );

    } catch (\Throwable $th) {
      
      $response = array(
        'status' => 'false',
        'status_code' => 400,
        'message' => $th->getMessage(),
        'SeasonsEpisodes' => $myData
      );
    }

    return response()->json($response, $response['status_code']);
  }

  public function VideoCipher_Seasondetail($data)
  {
    try {
      $request = $data;

      $season_id = $request['season_id'];
      $episode_id = $request['episode_id'];
      $user_id = $request['user_id'];

      $episode = Episode::where('id','=',$episode_id)->first();
    // $season = SeriesSeason::where('series_id','=',$episode->series_id)->with('episodes')->get();
    $season = SeriesSeason::where('series_id','=',$episode->series_id)->where('id','=',$season_id)
    ->orderBy('created_at', 'desc')->first();
    if(!empty($season)){
      $ppv_price = $season->ppv_price;
      $ppv_interval = $season->ppv_interval;
      $season_id = $season->id;
      $access = $season->access;
    }
    // echo "<pre>";
    // print_r($season);exit;
    // Free Interval Episodes
    $PpvPurchaseCount = PpvPurchase::where('series_id','=',$episode->series_id)->where('season_id','=',$season_id)
    ->where('user_id','=',$user_id)->count();

      $userrole = User::where('id',$data['user_id'])->pluck('role')->first();
        
        $ppv_purchase = PpvPurchase::where('series_id','=',$episode->series_id)->where('season_id','=',$season_id)->orderBy('created_at', 'desc')
        ->where('user_id', $data['user_id'])
        ->first();

        if(!empty($ppv_purchase) && !empty($ppv_purchase->to_time)){
          $new_date = Carbon::parse($ppv_purchase->to_time)->format('M d , y H:i:s');
          $currentdate = date("M d , y H:i:s");
          $ppv_exists_check_query = $new_date > $currentdate ?  1 : 0;
        }
        else{
          $ppv_exists_check_query = 0;
        }     

      if($ppv_exists_check_query > 0 || $userrole == "admin"){

        $free_episode = 'guest';
      }else{
        $free_episode = 'PPV';
      }

        
        $episode_details = Episode::where('id',$episode_id)->get()->map( function ($item) use ($season,$userrole,$data,$ppv_exists_check_query)  {

          $item['Thumbnail']  =   !is_null($item->image)  ? URL::to('public/uploads/images/'.$item->image) : default_vertical_image_url() ;
          $item['Player_thumbnail'] = !is_null($item->player_image)  ? URL::to('public/uploads/images/'.$item->player_image ) : default_horizontal_image_url() ;
          $item['TV_Thumbnail'] = !is_null($item->tv_image)  ? URL::to('public/uploads/images/'.$item->tv_image)  : default_horizontal_image_url() ;


          $item['video_skip_intro_seconds']        = $item->skip_intro  ? Carbon::parse($item->skip_intro)->secondsSinceMidnight() : null ;
          $item['video_intro_start_time_seconds']  = $item->intro_start_time ? Carbon::parse($item->intro_start_time)->secondsSinceMidnight() : null ;
          $item['video_intro_end_time_seconds']    = $item->intro_end_time ? Carbon::parse($item->intro_end_time)->secondsSinceMidnight() : null ;

          $item['video_skip_recap_seconds']        = $item->skip_recap ? Carbon::parse($item->skip_recap)->secondsSinceMidnight() : null ;
          $item['video_recap_start_time_seconds']  = $item->recap_start_time ? Carbon::parse($item->recap_start_time)->secondsSinceMidnight() : null ;
          $item['video_recap_end_time_seconds']    = $item->recap_end_time ? Carbon::parse($item->recap_end_time)->secondsSinceMidnight() : null ;
          

          if( $userrole == "admin"){
              $item['Episode_url'] =  $item->episode_id_1080p ;
         }elseif(!empty($data['play_videoid']) && $data['play_videoid'] != '' && $season->access == 'free'){

                  if($data['play_videoid'] == '480p'){ $item['Episode_url'] =  $item->episode_id_480p ; }elseif($data['play_videoid'] == '720p' ){$item['Episode_url'] =  $item->episode_id_720p ; }elseif($data['play_videoid'] == '1080p'){ $item['Episode_url'] =  $item->episode_id_1080p ; }else{ $item['Episode_url'] =  '' ;}

            }elseif(!empty($data['play_videoid']) && $data['play_videoid'] != '' && $season->access == 'registered' && $userrole == 'registered'){

                  if($data['play_videoid'] == '480p'){ $item['Episode_url'] =  $item->episode_id_480p ; }elseif($data['play_videoid'] == '720p' ){$item['Episode_url'] =  $item->episode_id_720p ; }elseif($data['play_videoid'] == '1080p'){ $item['Episode_url'] =  $item->episode_id_1080p ; }else{ $item['Episode_url'] =  '' ;}

            }elseif($userrole == "registered" && $season->access == 'ppv'){

              $item['PPV_Plan']   = PpvPurchase::where('user_id',$data['user_id'])->where('series_id', '=', $item['series_id'])->where('season_id', '=', $item['season_id'])->orderBy('created_at', 'desc')->pluck('ppv_plan')->first();

              if($item['PPV_Plan'] > 0){
                  if($item['PPV_Plan'] == '480p'){ $item['Episode_url'] =  $item->episode_id_480p ; }elseif($item['PPV_Plan'] == '720p' ){$item['Episode_url'] =  $item->episode_id_720p ; }elseif($item['PPV_Plan'] == '1080p'){ $item['Episode_url'] =  $item->episode_id_1080p ; }else{ $item['Episode_url'] =  '' ;}
              }else{
                  $item['PPV_Plan']  = '';
              }
         }
         elseif( $season->access == 'ppv' && $userrole == "subscriber"){
              $item['PPV_Plan']   = PpvPurchase::where('user_id',$data['user_id'])->where('series_id', '=', $item['series_id'])->where('season_id', '=', $item['season_id'])->orderBy('created_at', 'desc')->pluck('ppv_plan')->first();
              if($item['PPV_Plan'] > 0){
                      if($item['PPV_Plan'] == '480p'){ $item['Episode_url'] =  $item->episode_id_480p ; }elseif($item['PPV_Plan'] == '720p' ){$item['Episode_url'] =  $item->episode_id_720p ; }elseif($item['PPV_Plan'] == '1080p'){ $item['Episode_url'] =  $item->episode_id_1080p ; }else{ $item['Episode_url'] =  '' ;}
                  }else{
                      $item['PPV_Plan']  = '';
                  }
         }elseif($userrole == "registered" && $season->access == 'ppv'){

          $item['PPV_Plan']   = PpvPurchase::where('user_id',$data['user_id'])->where('series_id', '=', $item['series_id'])->where('season_id', '=', $item['season_id'])->orderBy('created_at', 'desc')->pluck('ppv_plan')->first();

          if($item['PPV_Plan'] > 0){
              if($item['PPV_Plan'] == '480p'){ $item['Episode_url'] =  $item->episode_id_480p ; }elseif($item['PPV_Plan'] == '720p' ){$item['Episode_url'] =  $item->episode_id_720p ; }elseif($item['PPV_Plan'] == '1080p'){ $item['Episode_url'] =  $item->episode_id_1080p ; }else{ $item['Episode_url'] =  '' ;}
          }else{
              $item['PPV_Plan']  = '';
          }
       }else{
             $item['PPV_Plan']   = '';
         }

         if($ppv_exists_check_query > 0 || $userrole == "admin"){
         
         $videoId = $item['Episode_url']; 
         $apiKey = videocipher_Key();
         $curl = curl_init();
         $watermarkText = User::where('id',$data['user_id'])->pluck('mobile')->first(); 
          $annotateJson = json_encode([
              [
                  "type" => "rtext",
                  "text" => $watermarkText,
                  "alpha" => "0.60",
                  "color" => "0xFF0000", 
                  "size" => "15",
                  "interval" => "5000",
              ]
          ]);

         curl_setopt_array($curl, array(
             CURLOPT_URL => "https://dev.vdocipher.com/api/videos/$videoId/otp",
             CURLOPT_RETURNTRANSFER => true,
             CURLOPT_ENCODING => "",
             CURLOPT_MAXREDIRS => 10,
             CURLOPT_TIMEOUT => 30,
             CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
             CURLOPT_CUSTOMREQUEST => "POST",
             CURLOPT_POSTFIELDS => json_encode([
                 "ttl" => 30000, 
                 "annotate" => $annotateJson
            ]),
             CURLOPT_HTTPHEADER => array(
                 "Accept: application/json",
                 "Authorization: Apisecret $apiKey",
                 "Content-Type: application/json"
             ),
            curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, 0),
            curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, 0),
         ));

         $response = curl_exec($curl);
         $err = curl_error($curl);

         curl_close($curl);

         if ($err) {
             // echo "cURL Error #:" . $err;
             $item['otp'] = null;
             $item['playbackInfo'] = null;
            
         } else {

             $responseObj = json_decode($response, true);

             if(!empty($responseObj['message']) && $responseObj['message'] == "No new update parameters"){
                 $item['otp'] = null;
                 $item['playbackInfo'] = null;
             }else{
                 $item['otp'] = $responseObj['otp'];
                 $item['playbackInfo'] = $responseObj['playbackInfo'];
             }
        }
         }else{
          $item['otp'] = null;
          $item['playbackInfo'] = null;
        }
            
          return $item;

      });


    $response = array(
      'status' => 'true',
      'access' => $free_episode,
      'episode' => $episode_details,
      'season' => array($season),
    );


    } catch (\Throwable $th) {
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }
   
    return response()->json($response, 200);
  }

  public function SeasonsPPV(Request $request)
  {
    $season_id = $request->season_id;
    $episode_id = $request->episode_id;
    $user_id = $request->user_id;
    $series_seasons_type = SeriesSeason::where('id', $season_id)->pluck('series_seasons_type')->first();
    $Seasons_access = SeriesSeason::where('id', $season_id)->pluck('access')->first();
    $user = User::where('id', $user_id)->first();
    $episode = Episode::where('id','=',$episode_id)->first();

    if($Seasons_access ){
        $data = $request->all();
              
        if(Enable_videoCipher_Upload() == 1 && Enable_PPV_Plans() == 1 && $series_seasons_type == 'VideoCipher'){
            return $this->VideoCipher_Seasondetail($data);
        }
          
        $season = SeriesSeason::where('series_id','=',$episode->series_id)->where('id','=',$season_id)
        ->with('episodes')->orderBy('created_at', 'desc')->get();
        
        $PpvPurchaseCount = PpvPurchase::where('series_id','=',$episode->series_id)->where('season_id','=',$season_id)
        ->where('user_id','=',$user_id)->count();
        if($PpvPurchaseCount > 0){
          $free_episode = 'guest';
        }elseif($Seasons_access == 'free'){
            $free_episode = 'guest';
        }else{
            $free_episode = 'PPV';
        }

        $response = array(
          'status' => 'true',
          'access' => $free_episode,
          'episode' => Episode::where('id','=',$episode_id)->get(),
          'season' => $season,
        );
    }else{
      $response = array(
        'status' => 'false',
        'message' => 'Invalid data',
      );
    }

      

    return response()->json($response, 200);
  }


  public function nextwishlistvideo(Request $request)
  {
    $user_id = $request->user_id;
    $video_id = $request->video_id;
    $next_videoid = Wishlist::where('video_id', '>', $video_id)->where('user_id', '=', $user_id)->min('video_id');

    if($next_videoid){
      $video= Video::where('id','=',$next_videoid)->where('status','=','1')->where('active','=','1')->orderBy('created_at', 'desc')->get();
      $response = array(
        'status' => true,
        'next_videoid' => $next_videoid,
        'video' => $video
      );
    }else{
      $response = array(
        'status' => false,
        'video' => 'No Data Found'
      );
    }
    return response()->json($response, 200);
  }

  public function prevwishlistvideo(Request $request)
  {
    $user_id = $request->user_id;
    $video_id = $request->video_id;

    $prev_videoid = Wishlist::where('video_id', '<', $request->video_id)->where('user_id', '=', $user_id)->max('video_id');
    if($prev_videoid){
      $video= Video::where('id','=',$prev_videoid)->where('status','=','1')->where('active','=','1')->orderBy('created_at', 'desc')->get();
      $response = array(
        'status' => true,
        'prev_videoid' => $prev_videoid,
        'video' => $video
      );
    }else{
      $response = array(
        'status' => false,
        'video' => 'No Data Found'
      );
    }
    return response()->json($response, 200);
  }


  public function nextwatchlatervideo(Request $request)
  {
    $user_id = $request->user_id;
    $video_id = $request->video_id;
    $next_videoid = Watchlater::where('video_id', '>', $video_id)->where('user_id', '=', $user_id)->min('video_id');
    if($next_videoid){
      $video= Video::where('id','=',$next_videoid)->where('status','=','1')->where('active','=','1')->orderBy('created_at', 'desc')->get();
      $response = array(
        'status' => true,
        'next_videoid' => $next_videoid,
        'video' => $video
      );
    }else{
      $response = array(
        'status' => false,
        'video' => 'No Data Found'
      );
    }
    return response()->json($response, 200);
  }

  public function prevwatchlatervideo(Request $request)
  {
    $user_id = $request->user_id;
    $video_id = $request->video_id;

    $prev_videoid = Watchlater::where('video_id', '<', $video_id)->where('user_id', '=', $user_id)->max('video_id');
    if($prev_videoid){
      $video= Video::where('id','=',$prev_videoid)->where('status','=','1')->where('active','=','1')->orderBy('created_at', 'desc')->get();
      $response = array(
        'status' => true,
        'prev_videoid' => $prev_videoid,
        'video' => $video
      );
    }else{
      $response = array(
        'status' => false,
        'video' => 'No Data Found'
      );
    }
    return response()->json($response, 200);
  }

  public function nextfavouritevideo(Request $request)
  {
    $user_id = $request->user_id;
    $video_id = $request->video_id;
    $next_videoid = Favorite::where('video_id', '>', $video_id)->where('user_id', '=', $user_id)->min('video_id');
    if($next_videoid){
      $video= Video::where('id','=',$next_videoid)->where('status','=','1')->where('active','=','1')->orderBy('created_at', 'desc')->get();
      $response = array(
        'status' => true,
        'next_videoid' => $next_videoid,
        'video' => $video
      );
    }else{
      $response = array(
        'status' => false,
        'video' => 'No Data Found'
      );
    }
    return response()->json($response, 200);
  }

  public function prevfavouritevideo(Request $request)
  {
    $user_id = $request->user_id;
    $video_id = $request->video_id;
    $prev_videoid = Favorite::where('video_id', '<', $video_id)->where('user_id', '=', $user_id)->max('video_id');
    if($prev_videoid){
      $video= Video::where('id','=',$prev_videoid)->where('status','=','1')->where('active','=','1')->get();
      $response = array(
        'status' => true,
        'prev_videoid' => $prev_videoid,
        'video' => $video
      );
    }else{
      $response = array(
        'status' => false,
        'video' => 'No Data Found'
      );
    }
    return response()->json($response, 200);
  }


   public function NextEpisode(Request $request) {

      $seasonid = $request->seasonid;
      $episode_id = $request->episode_id;

      $next_episodeid = Episode::where('id','>',$episode_id)->where('season_id','=',$seasonid)
      ->where('active','=','1')->where('status','=','1')->orderBy('episode_order')->min('id');
      
      if($next_episodeid){

        $episode= Episode::where('id','=',$next_episodeid)->where('status','=','1')->where('active','=','1')->get();
        
        $response = array(
          'status' => true,
          'next_episodeid' => $next_episodeid,
          'episode' => $episode
        );

      }else{
        $response = array(
          'status' => false,
          'episode' => 'No Data Found'
        );
      }
      return response()->json($response, 200);
  }

  public function PrevEpisode(Request $request){

    $seasonid = $request->seasonid;
    $episode_id = $request->episode_id;

    $prev_episodeid = Episode::where('episode_order', '<', $episode_id)->where('season_id','=',$seasonid)->where('status','=','1')->where('active','=','1')->pluck('id')->first();

    if($prev_episodeid){

        $episode= Episode::where('id','=',$prev_episodeid)->where('status','=','1')->where('active','=','1')->get();
       
        $response = array(
          'status' => true,
          'prev_episodeid' => $prev_episodeid,
          'episode' => $episode
        );

      }else{
     
        $response = array(
          'status' => false,
          'episode' => 'No Data Found'
        );
        
      }
      return response()->json($response, 200);
  }


  public function nextwatchlaterEpisode(Request $request)
  {
    $user_id = $request->user_id;
    $episode_id = $request->episode_id;
    $next_episodeid = Watchlater::where('episode_id', '>', $episode_id)->where('user_id', '=', $user_id)->min('episode_id');
    if($next_episodeid){
      $episodes= Episode::where('id','=',$next_episodeid)->where('status','=','1')->where('active','=','1')->get();
      $response = array(
        'status' => true,
        'next_episodeid' => $next_episodeid,
        'episodes' => $episodes
      );
    }else{
      $response = array(
        'status' => false,
        'episodes' => 'No Episodes Found'
      );
    }
    return response()->json($response, 200);
  }

  public function prevwatchlaterEpisode(Request $request)
  {
    $user_id = $request->user_id;
    $episode_id = $request->episode_id;

    $prev_episodeid = Watchlater::where('episode_id', '<', $episode_id)->where('user_id', '=', $user_id)->max('episode_id');
    if($prev_episodeid){
      $episodes= Episode::where('id','=',$prev_episodeid)->where('status','=','1')->where('active','=','1')->get();
      $response = array(
        'status' => true,
        'prev_episodeid' => $prev_episodeid,
        'episodes' => $episodes
      );
    }else{
      $response = array(
        'status' => false,
        'episodes' => 'No Episodes Found'
      );
    }
    return response()->json($response, 200);
  }

  public function nextfavouriteEpisode(Request $request)
  {
    $user_id = $request->user_id;
    $episode_id = $request->episode_id;
    $next_episodeid = Favorite::where('episode_id', '>', $episode_id)->where('user_id', '=', $user_id)->min('episode_id');
    if($next_episodeid){
      $episodes= Episode::where('id','=',$next_episodeid)->where('status','=','1')->where('active','=','1')->get();
      $response = array(
        'status' => true,
        'next_episodeid' => $next_episodeid,
        'episodes' => $episodes
      );
    }else{
      $response = array(
        'status' => false,
        'episodes' => 'No Episodes Found'
      );
    }
    return response()->json($response, 200);
  }

  public function prevfavouriteEpisode(Request $request)
  {
    $user_id = $request->user_id;
    $episode_id = $request->episode_id;
    $prev_episodeid = Favorite::where('episode_id', '<', $episode_id)->where('user_id', '=', $user_id)->max('episode_id');
    if($prev_episodeid){
      $episodes= Episode::where('id','=',$prev_episodeid)->where('status','=','1')->where('active','=','1')->get();
      $response = array(
        'status' => true,
        'prev_episodeid' => $prev_episodeid,
        'episodes' => $episodes
      );
    }else{
      $response = array(
        'status' => false,
        'episodes' => 'No Episodes Found'
      );
    }
    return response()->json($response, 200);
  }
  public function nextwishlistEpisode(Request $request)
  {
    $user_id = $request->user_id;
    $episode_id = $request->episode_id;
    $next_episodeid = Wishlist::where('episode_id', '>', $episode_id)->where('user_id', '=', $user_id)->min('episode_id');

    if($next_episodeid){
      $episodes= Episode::where('id','=',$next_episodeid)->where('status','=','1')->where('active','=','1')->get();
      $response = array(
        'status' => true,
        'next_episodeid' => $next_episodeid,
        'episodes' => $episodes
      );
    }else{
      $response = array(
        'status' => false,
        'episodes' => 'No Episodes Found'
      );
    }
    return response()->json($response, 200);
  }

  public function prevwishlistEpisode(Request $request)
  {
    $user_id = $request->user_id;
    $episode_id = $request->episode_id;

    $prev_episodeid = Wishlist::where('episode_id', '<', $request->episode_id)->where('user_id', '=', $episode_id)->max('video_id');
    if($prev_episodeid){
      $episodes= Episode::where('id','=',$prev_episodeid)->where('status','=','1')->where('active','=','1')->get();
      $response = array(
        'status' => true,
        'prev_episodeid' => $prev_episodeid,
        'episodes' => $episodes
      );
    }else{
      $response = array(
        'status' => false,
        'episodes' => 'No Episodes Found'
      );
    }
    return response()->json($response, 200);
  }
  public function Playerui(Request $request){
    $playerui = Playerui::find(1);
    if($playerui){
      $response = array(
        'status' => true,
        'playerui' => $playerui
      );
    }else{
      $response = array(
        'status' => false,
        'playerui' => 'No Data Found'
      );
    }
    // $response = $playerui;
      return response()->json($response, 200);
  }

  public function episode_continuewatching_update(Request $request)
  {
    try {
  
      $validator = Validator::make($request->all(), [
        'current_duration' => 'required',
        'watch_percentage' => 'required',
        'episodeid'        => 'required'
      ]);
  
      if ($validator->fails()) {

        $response = [
            'status'    => 'false',
            'message'   => $validator->errors()->first(),
        ];

        return response()->json($response, 422); 
      }
      
      $current_duration = $request->current_duration;
      $watch_percentage = $request->watch_percentage;
      $skip_time = !empty($request->skip_time) ? $request->skip_time : 0;
      
      $user_id = $request->user_id;
      $episodeid = $request->episodeid;
      $multiuser_id = $request->multiuser_id;
      
      $query = ContinueWatching::where('episodeid', $episodeid);
                    if ($multiuser_id != null) {
                        $query->where('multiuser', $multiuser_id)->where('user_id', $user_id);
                    } else {
                        $query->where('user_id', $user_id)->whereNull('multiuser');
                    }
      $count = $query->count();
      
      if ($count > 0) {
        
          $query->update([
              'currentTime'      => $current_duration,
              'watch_percentage' => $watch_percentage,
              'skip_time'        => $skip_time,
          ]);
      
          $response = ['message' => 'Current Time updated'];
      }
      else {

          $data = array('user_id'     => $user_id, 
                          'multiuser' => $multiuser_id,
                          'episodeid' => $episodeid,
                          'currentTime'      => $current_duration,
                          'watch_percentage' => $watch_percentage,
                          'skip_time'        => $skip_time
                        );

          ContinueWatching::create($data);

          $response = array('message'=>'Added to Continue Watching List');
      }

      $response += array(
        'status'=>'true',
        'status_code' => 200 ,
      );

    } catch (\Throwable $th) {
      
      $response = array(
        'status'=>'false',
        'status_code' => 400 ,
        'message'=>$th->getMessage(),
      );

    }
    return response()->json($response, $response['status_code']);
  }

  public function addtocontinuewatching(Request $request)
  {
    try {
      
      $validator = Validator::make($request->all(), [
        'current_duration' => 'required',
        'watch_percentage' => 'required',
        'video_id'         => 'required'
      ]);
  
      if ($validator->fails()) {

        $response = [
            'status'    => 'false',
            'message'   => $validator->errors()->first(),
        ];

        return response()->json($response, 422); 
      }
      
      $current_duration = $request->current_duration;
      $watch_percentage = $request->watch_percentage;
      $skip_time = !empty($request->skip_time) ? $request->skip_time : 0;
      
      $user_id = $request->user_id;
      $video_id = $request->video_id;
      $multiuser_id = $request->multiuser_id;
      
      $query = ContinueWatching::where('videoid', $video_id);
                    if ($multiuser_id != null) {
                        $query->where('multiuser', $multiuser_id)->where('user_id', $user_id);
                    } else {
                        $query->where('user_id', $user_id)->whereNull('multiuser');
                    }
      $count = $query->count();
      
      if ($count > 0) {
        
          $query->update([
              'currentTime' => $current_duration,
              'watch_percentage' => $watch_percentage,
              'skip_time' => $skip_time,
          ]);
      
          $response = ['message' => 'Current Time updated'];
      }
      else {

          $data = array('user_id'   => $user_id, 
                          'multiuser' => $multiuser_id,
                          'videoid'   => $video_id,
                          'currentTime'      => $current_duration,
                          'watch_percentage' => $watch_percentage,
                          'skip_time'        => $skip_time
                        );

          ContinueWatching::create($data);

          $response = array('message'=>'Added to Continue Watching List');
      }

      $response += array(
        'status'=>'true',
        'status_code' => 200 ,
      );

    } catch (\Throwable $th) {
      
      $response = array(
        'status'=>'false',
        'status_code' => 400 ,
        'message'=>$th->getMessage(),
      );

    }
    return response()->json($response, $response['status_code']);
  }

  public function listcontinuewatchings(Request $request)
  {
    try {

      $HomeSetting = MobileHomeSetting::first();
      $HomeSetting->continue_watching = 1;
      if($HomeSetting->continue_watching == 0){
        $response = array(
            'status' => "false",
            'status_code' => 404,
        );
      }else{
      
      $user_id = $request->user_id;
      $multiuser_id = $request->multiuser_id;
      $video_id = $request->video_id;
      $check_Kidmode = 0 ;

      // Videos 

      $video_id_query = ContinueWatching::query();
                    if ($multiuser_id != null) {
                        $video_id_query->where('multiuser', $multiuser_id)->where('user_id', $user_id);
                    } else {
                        $video_id_query->where('user_id', $user_id)->whereNull('multiuser');
                    }
      $video_id_query = $video_id_query->pluck('videoid');

      $videos = Video::join('continue_watchings', function($join) {
                          $join->on('videos.id', '=', 'continue_watchings.videoid')
                              ->whereRaw('continue_watchings.updated_at = (
                                  SELECT MAX(updated_at) 
                                  FROM continue_watchings 
                                  WHERE continue_watchings.videoid = videos.id
                              )');
                      })
                  ->select('videos.id', 'videos.title', 'videos.slug', 'videos.year', 'videos.rating', 'videos.access', 'videos.publish_type', 
                          'videos.global_ppv', 'videos.publish_time', 'videos.ppv_price', 'videos.duration', 'videos.image', 
                          'videos.featured', 'videos.age_restrict', 'videos.video_tv_image', 'videos.description', 'videos.player_image', 
                          'videos.expiry_date', 'videos.responsive_image', 'videos.responsive_player_image', 'videos.responsive_tv_image', 
                          'videos.user_id', 'videos.uploaded_by', 'continue_watchings.watch_percentage', 'continue_watchings.skip_time',
                          'continue_watchings.currentTime','continue_watchings.updated_at')
                  ->whereIn('videos.id', $video_id_query)
                  ->orderBy('continue_watchings.updated_at', 'desc'); 

                  // Filter videos by expiry date if enabled
                  if ($this->videos_expiry_date_status == 1) {
                  $videos = $videos->where(function($query) {
                  $query->whereNull('videos.expiry_date')
                  ->orWhere('videos.expiry_date', '>=', Carbon::now()->format('Y-m-d\TH:i'));
                  });
                  }

                  // Apply Kid Mode filter
                  if ($check_Kidmode == 1) {
                  $videos = $videos->whereBetween('videos.age_restrict', [0, 12]);
                  }

                  // Fetch and modify results
                  $videos = $videos->get()->map(function ($item) {
                  $item['image_url'] = (!is_null($item->image) && $item->image != 'default_image.jpg') ? URL::to('public/uploads/images/' . $item->image) : default_vertical_image_url();
                  $item['player_image_url'] = (!is_null($item->player_image) && $item->player_image != 'default_image.jpg') ? URL::to('public/uploads/images/' . $item->player_image) : default_horizontal_image_url();
                  return $item;
                  });




      // Episode 

        $episode_id_query = ContinueWatching::query();
                    if ($multiuser_id != null) {
                        $episode_id_query->where('multiuser', $multiuser_id)->where('user_id', $user_id);
                    } else {
                        $episode_id_query->where('user_id', $user_id)->whereNull('multiuser');
                    }
        $episode_id_query = $episode_id_query->pluck('episodeid');

        $episodes = Episode::join('continue_watchings', 'episodes.id', '=', 'continue_watchings.episodeid')
                              ->select('episodes.id', 'episodes.id' ,'title','slug','rating','access','series_id','season_id','ppv_price','responsive_image','responsive_player_image','responsive_tv_image','episode_description',
                                    'duration','rating','image','featured','tv_image','player_image','episodes.uploaded_by','episodes.user_id',
                                    'continue_watchings.watch_percentage', 'continue_watchings.skip_time','continue_watchings.currentTime','continue_watchings.updated_at')
                                ->whereIn('episodes.id', $episode_id_query)
                                ->where('episodes.active', '1')
                                ->where('episodes.status', '1')
                                ->orderBy('continue_watchings.updated_at', 'desc') 
                                ->groupBy('continue_watchings.episodeid')
                                ->get()
                                ->map(function($item){
                                    $item['series'] = Series::where('id',$item->series_id)->first();
                                    $item['image_url'] = (!is_null($item->image) && $item->image != 'default_image.jpg') ? URL::to('public/uploads/images/' . $item->image) : default_vertical_image_url();
                                    $item['player_image_url'] = (!is_null($item->player_image) && $item->player_image != 'default_image.jpg') ? URL::to('public/uploads/images/' . $item->player_image) : default_horizontal_image_url();
                                    return $item ;
                                });
                    
      $response = array(
          'status' => "true",
          'status_code' => 200,
          'message' => 'Retrieved Continue Watching Successfully',
          'videos' => $videos,
          'episodes' => $episodes,
      );
    }
    } catch (\Throwable $th) {

      $response = array(
        'status' => "false",
        'status_code' => 400,
        'message' =>  $th->getMessage(),
      );
    }

    return response()->json($response, $response['status_code']);
  }

  public function remove_continue_watchingvideo(Request $request)
  {
      $user_id = $request->user_id;
      if($request->video_id){
          $video_id = $request->video_id;
          $count = ContinueWatching::where('user_id', '=', $user_id)->where('videoid', '=', $video_id)->count();
          if ( $count > 0 ) {
            ContinueWatching::where('user_id', '=', $user_id)->where('videoid', '=', $video_id)->delete();
            $response = array(
              'status'=>'true',
              'message'=>'Removed From ContinueWatching List'
          );
        }
      }
      return response()->json($response, 200);

  }

  public function remove_continue_watchingepisode(Request $request)
  {
      $user_id = $request->user_id;
      if($request->episode_id){
          $episode_id = $request->episode_id;
          $count = ContinueWatching::where('user_id', '=', $user_id)->where('episodeid', '=', $episode_id)->count();
          if ( $count > 0 ) {
            ContinueWatching::where('user_id', '=', $user_id)->where('episodeid', '=', $episode_id)->delete();
            $response = array(
              'status'=>'true',
              'message'=>'Removed From ContinueWatching List'
          );
        }
      }
      return response()->json($response, 200);

  }

  public function EpisodeContinuewatching(Request $request)
  {
    $user_id = $request->user_id;
      $current_duration = $request->current_duration;
      $watch_percentage = $request->watch_percentage;
      if($request->episode_id){
          $episode_id = $request->episode_id;
          $count = ContinueWatching::where('user_id', '=', $user_id)->where('episodeid', '=', $episode_id)->count();
          if ( $count > 0 ) {
            ContinueWatching::where('user_id', '=', $user_id)->where('episodeid', '=', $episode_id)->update(['currentTime' => $current_duration,'watch_percentage' => $watch_percentage]);
            $response = array(
              'status'=>'true',
              'message'=>'Current Time updated'
          );
        } else {
            $data = array('user_id' => $user_id, 'episodeid' => $episode_id,'currentTime' => $current_duration,'watch_percentage' => $watch_percentage );
            ContinueWatching::insert($data);
            $response = array(
              'status'=>'true',
              'message'=>'Added  to  Continue Watching List'
          );

        }
      }
      return response()->json($response, 200);
  }


  public function listcontinuewatchingsepisode(Request $request)
  {
    $user_id = $request->user_id;

    /* channel videos */
    $episode_ids = ContinueWatching::where('episodeid', '!=', NULL)
        ->where('user_id', '=', $user_id)
        ->get();
    $episode_ids_count = $episode_ids->count();

    if ($episode_ids_count > 0) {
        $episode_ids = $episode_ids->pluck('episodeid');

        $episodes = Episode::join('continue_watchings', 'episodes.id', '=', 'continue_watchings.episodeid')
            ->whereIn('episodes.id', $episode_ids)
            ->where('continue_watchings.user_id', '=', $user_id)
            ->orderBy('continue_watchings.created_at', 'desc')
            ->select('episodes.*', 'continue_watchings.watch_percentage')
            ->get()
            ->map(function ($item) {
                $item['image_url'] = URL::to('/') . '/public/uploads/images/' . $item->image;
                return $item;
            });

        $status = "true";
    } else {
        $status = "false";
        $episodes = [];
    }

    $response = array(
        'status' => $status,
        'episodes' => $episodes
    );
    return response()->json($response, 200);

  }

    /*Create new user account from existing user profile*/
    public function addchilduserprofile(Request $request)
    {
        $parent_id = $request->parent_id;
        $user_name = $request->user_name;
        $user_type = $request->user_type;
        $path = URL::to('/').'/public/uploads/avatars/';
        $logo = $request->file('avatar');
        if($logo != '' && $logo != null) {
            $file_old = $path.$logo;
            if (file_exists($file_old)){
              unlink($file_old);
          }
          $file = $logo;
          $avatar = $file->getClientOriginalName();
          $file->move(public_path()."/uploads/avatars/", $file->getClientOriginalName());

      } else {
          $avatar = 'default.png';
      }
        if(DB::table('sub_users')->insert(['parent_id' => $parent_id, 'user_name' => $user_name, 'user_type' => $user_type, 'avatar' => $avatar])){
            $response = array(
                'status'=>'true',
                'message'=> 'New profile created Successfully'
            );
        }else{
            $response = array(
                'status'=>'false',
                'message'=> 'Error in Saving profile data'
            );
        }

        return response()->json($response, 200);
    }

    public function updatechildprofile(Request $request)
    {
        $child_id = $request->child_id;

        $path = URL::to('/').'/public/uploads/avatars/';
        $logo = $request->file('avatar');
        if($logo != '' && $logo != null) {
            $file_old = $path.$logo;
            if (file_exists($file_old)){
              unlink($file_old);
          }
          $file = $logo;
          $avatar = $file->getClientOriginalName();
          $file->move(public_path()."/uploads/avatars/", $file->getClientOriginalName());

      } else {
          $avatar = 'default.png';
      }
        if(DB::table('sub_users')->where('id',$child_id)->update([ 'avatar' => $avatar])){
            $response = array(
                'status'=>'true',
                'message'=> 'Profile updated Successfully'
            );
        }else{
            $response = array(
                'status'=>'false',
                'message'=> 'Error in Saving profile data'
            );
        }

        return response()->json($response, 200);
    }

    /*View Child profile*/
    public function viewchildprofile(Request $request)
    {
        $parent_id = $request->parent_id;
        $sub_users = DB::table('sub_users')->where('parent_id', $parent_id)->orderBy('created_at', 'desc')->get();
        if(!empty($sub_users)){
            $response = array(
                'status'=>'true',
                'sub_users'=> $sub_users,
                'image_url' => URL::to('/').'/public/uploads/avatars/'
            );
        }else{
            $response = array(
                'status'=>'false',
                'sub_users'=> '',
                'image_url' => '',
            );
        }

        return response()->json($response, 200);
    }

    public function savefavouritecategory(Request $request)
    {
        $user_id = $request->user_id;
        $fav_category = $request->fav_category;

        $user = User::find($user_id);
        $user->fav_category = $fav_category;
        $user->save();

        $response = array(
            'status'=>'true',
            'message'=> 'Favorite Category stored successfully'
        );

        return response()->json($response, 200);
    }

    public function getRecentAudios() {

        $date = date('Y-m-d', strtotime('-10 days'));

        $recent_audios =  DB::table('audio')
        ->join('audio_categories', 'audio.audio_category_id', '=', 'audio_categories.id')
        ->select('audio_categories.name as audio_cat_name ', 'audio.*')
        ->where('audio.created_at', '>=', $date)
        ->orderBy('audio.created_at', 'desc')
        ->get();

        $recent_audios_count = Audio::where('created_at', '>=', $date)->count();

        if ( $recent_audios_count > 0) {

            $response = array(
                'status'=>'true',
                'message'=>'success',
                'recent_audios'=> $recent_audios
            );
        } else {

            $response = array(
                'status'=>'false',
                'message'=>'No recent Audios Found'
            );
        }

        return response()->json($response, 200);

    }

    public function AllAudios() {

      $date = date('Y-m-d', strtotime('-10 days'));


      // $recent_audios_count = Audio::where('created_at', '>=', $date)->count();
      $recent_audios_count = Audio::get()->count();
      // $image_path = public_path().'/uploads/images/';


      if ( $recent_audios_count > 0) {

        // $allaudios =  Audio::get();
        $allaudios = Audio::orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          return $item;
      });
          $response = array(
              'status'=>'true',
              'message'=>'success',
              'allaudios'=> $allaudios
          );
      } else {

          $response = array(
              'status'=>'false',
              'message'=>'No recent Audios Found'
          );
      }

      return response()->json($response, 200);

  }

    public function audiodetail(Request $request)
    {

        $audio_id = $request->audio_id;
        $user_id = $request->user_id;
        $current_date = date('Y-m-d h:i:s a', time());
        $audiodetail = Audio::where('id',$audio_id)->orderBy('created_at', 'desc')->get()->map(function ($item)  use ($user_id)  {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
            $item['audio_duration'] = $item->duration >= "3600" ?  gmdate('H:i:s', $item->duration  ) :  gmdate('i:s', $item->duration  ) ;
            if($item->lyrics_json != null){
              $item['lyrics_json'] = json_decode($item->lyrics_json)  ;
            }else{
              $item['lyrics_json'] = null  ;
            }

            $PpvPurchaseCount = PpvPurchase::where('audio_id','=',$item->id)->where('user_id','=',$user_id)->count();
      
            if($item->access == 'ppv' && ($PpvPurchaseCount > 0)){
              $item->access = 'guest';
            }else if($item->access == 'ppv' && ($PpvPurchaseCount == 0)){
              $item->access = 'ppv';
            }else{
              $item->access = $item->access;
            }
            
            if($item->lyrics_json != null){
              $item['lyrics_json'] = json_decode($item->lyrics_json)  ;
            }else{
              $item['lyrics_json'] = null  ;
            }
            return $item;
        });


        if ( isset($request->user_id) && $request->user_id != '' ) {
            $user_id = $request->user_id;
      //Wishlilst

            $cnt = Wishlist::select('audio_id')->where('user_id','=',$user_id)->where('audio_id','=',$audio_id)->count();
            $wishliststatus =  ($cnt == 1) ? "true" : "false";
      //Watchlater
            $cnt1 = Watchlater::select('audio_id')->where('user_id','=',$user_id)->where('audio_id','=',$audio_id)->count();
            $watchlaterstatus =  ($cnt1 == 1) ? "true" : "false";

       //Favorite
            $cnt2 = Favorite::select('audio_id')->where('user_id','=',$user_id)->where('audio_id','=',$audio_id)->count();
            $favoritestatus =  ($cnt2 == 1) ? "true" : "false";

            $userrole = User::where('id','=',$user_id)->first()->role;
            $status = 'true';

            $like_data = LikeDisLike::where("audio_id","=",$audio_id)->where("user_id","=",$user_id)->where("liked","=",1)->count();
            $dislike_data = LikeDisLike::where("audio_id","=",$audio_id)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
            $like = ($like_data == 1) ? "true" : "false";
            $dislike = ($dislike_data == 1) ? "true" : "false";
        } else{

            $wishliststatus = 'false';
            $watchlaterstatus = 'false';
            $favoritestatus = 'false';
            $ppv_exist = 0;
            $userrole = '';
            $status = 'true';
            $like = "false";
            $dislike = "false";
        }



        $audio_cat_id = Audio::where('id','=',$audio_id)->pluck('audio_category_id')->first();


        $audio_cat = AudioCategory::where('id','=',$audio_cat_id)->get();

        if(count($audio_cat) > 0){
         $main_genre = $audio_cat[0]->name;
        }else{
          $main_genre = '';
        }        

        $response = array(
            'status' => $status,
            'wishlist' => $wishliststatus,
            'main_genre' => $main_genre,
            'watchlater' => $watchlaterstatus,
            'favorite' => $favoritestatus,
            'userrole' => $userrole,
            'like' => $like,
            'dislike' => $dislike,
            'shareurl' => URL::to('channelVideos/play_videos').'/'.$audio_id,
            'audiodetail' => $audiodetail,
        );
        return response()->json($response, 200);

    }

    public function categoryaudios(Request $request)
    {

        $audiocategories = AudioCategory::select('id','image')->get()->toArray();
        $myData = array();
        foreach ($audiocategories as $key => $audiocategory) {
            $audiocategoryid = $audiocategory['id'];
            $genre_image = $audiocategory['image'];
            $audios= Audio::where('audio_category_id',$audiocategoryid)
            ->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['video_url'] = URL::to('/').'/storage/app/public/'.$item->mp4_url;
            return $item;
        });
            $categorydetails = AudioCategory::where('id','=',$audiocategoryid)->first();

            if(count($audios) > 0){
                $msg = 'success';
            }else{
                $msg = 'nodata';
            }
            $myData[] = array(
                "genre_name"   => $categorydetails->name,
                "genre_id"   => $audiocategoryid,
                "genre_image"   => URL::to('/').'/public/uploads/audiocategory/'.$genre_image,
                "message" => $msg,
                "audios" => $audios
            );

        }

        $response = array(
            'status' => 'true',
            'genre_audios' => $myData
        );
        return response()->json($response, 200);
    }

    public function artistlist()
    {
        $artistlist = Artist::orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/artists/'.$item->image;
            return $item;
        });
        if($artistlist){
            $response = array(
                'status' => 'true',
                'artistlist' => $artistlist
            );
        }else{
            $response = array(
                'status' => 'false',
                'message' => 'No data Found'
            );
        }

        return response()->json($response, 200);

    }

    public function artistfavorites(Request $request)
    {
        $user_id = $request->user_id;



        // $favoriteslist =
        // Artist::join('artist_favourites', 'artists.id', '=', 'artist_favourites.artist_id')
        // ->where('artist_favourites.user_id',$user_id)
        // ->where('artist_favourites.favourites',1)
        // ->get(['artists.*']);
        $favoriteslist = Artist::join('artist_favourites', 'artists.id', '=', 'artist_favourites.artist_id')
          ->orderBy('artists.created_at', 'desc')->get()
          ->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/artists/'.$item->image;
          return $item;
        });
        if($favoriteslist){
            $response = array(
                'status' => 'true',
                'favoriteslist' => $favoriteslist
            );
        }else{
            $response = array(
                'status' => 'false',
                'message' => 'No data Found'
            );
        }
        return response()->json($response, 200);
    }

    public function artistfollowings(Request $request)
    {
        $user_id = $request->user_id;
        $followinglist = Artist::join('artist_favourites', 'artists.id', '=', 'artist_favourites.artist_id')
        ->where('artist_favourites.user_id',$user_id)->where('artist_favourites.following',1)
        ->orderBy('artists.created_at', 'desc')->get(['artists.*']);

        if($followinglist){
            $response = array(
                'status' => 'true',
                'followinglist' => $followinglist
            );
        }else{
            $response = array(
                'status' => 'false',
                'message' => 'No data Found'
            );
        }
        return response()->json($response, 200);
    }

    public function artistaddremovefav(Request $request)
    {

        $user_id = $request->user_id;
        $artist_id = $request->artist_id;
        $favourites = $request->favourites;
        $count = DB::table('artist_favourites')->where('user_id', '=',
        $user_id)->where('artist_id', '=', $artist_id)->count();
        if ( $count > 0 ) {

            DB::table('artist_favourites')->where('user_id', '=',
                $user_id)->where('artist_id', '=', $artist_id)->update(['favourites'=>$favourites]);
            if($favourites == 1){
                $response = array(
                    'status'=>'false',
                    'message'=>'Artist Added From Your Favorite List'
                );
            }else{
                $response = array(
                    'status'=>'false',
                    'message'=>'Artist Removed From Your Favorite List'
                );
            }


        } else {
                $data = array('user_id' => $user_id, 'artist_id' => $artist_id );
                DB::table('artist_favourites')->insert($data);
                $response = array(
                    'status'=>'true',
                    'message'=>'Artist Added  to  Your Favorite List'
                );

            }
    return response()->json($response, 200);
    }

    public function artistaddremovefollow(Request $request)
    {
        $user_id = $request->user_id;
        $artist_id = $request->artist_id;
        $following = $request->following;
        $count = DB::table('artist_favourites')->where('user_id', '=',
        $user_id)->where('artist_id', '=', $artist_id)->count();
            if ( $count > 0 ) {
                DB::table('artist_favourites')->where('user_id', '=',
                $user_id)->where('artist_id', '=', $artist_id)->update(['following'=>$following]);
                    if($following == 1){
                        $response = array(
                            'status'=>'false',
                            'message'=>'Artist Added From Your Following List'
                        );
                    }else{
                        $response = array(
                            'status'=>'false',
                            'message'=>'Artist Removed From Your Following List'
                        );
                    }


            } else {
                $data = array('user_id' => $user_id, 'artist_id' => $artist_id );
                DB::table('artist_favourites')->insert($data);
                $response = array(
                    'status'=>'true',
                    'message'=>'Artist Added  to  Your Favorite List'
                );

            }
            return response()->json($response, 200);
    }

    public function artistdetail(Request $request)
    {
        $artist_id = $request->artist_id;
        $user_id = $request->user_id;
        $artist = Artist::where('id',$artist_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/artists/'.$item->image;
            return $item;
        });
        $fav_count = DB::table('artist_favourites')->where('user_id', '=',
        $user_id)->where('artist_id', '=', $artist_id)->where('favourites', '=',1)->count();
        $fav = ($fav_count > 0)?'true':'false';
        $follow_count = DB::table('artist_favourites')->where('user_id', '=',
        $user_id)->where('artist_id', '=', $artist_id)->where('following', '=',1)->count();
        $follow = ($follow_count > 0)?'true':'false';
        $artist_audios = Audioartist::join('audio', 'audio.id', '=', 'audio_artists.audio_id')->where('artist_id',$artist_id)->get();
        $response = array(
            'status'=>'true',
            'artist'=>$artist,
            'favourites'=>$fav,
            'following' => $follow,
            'artist_audios' => $artist_audios
        );
        return response()->json($response, 200);
    }

    public function trendingaudio(Request $request)
    {

      $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
      $countryName =  $geoip->getCountry();
      $getfeching = Geofencing::first();

      $block_audios=BlockAudio::where('country',$countryName)->get();
          if(!$block_audios->isEmpty()){
            foreach($block_audios as $block_audio){
                $blockaudios[]=$block_audio->video_id;
            }
        }
        $blockaudios[]='';

        $trending_audios = Audio::where('active', '=', '1')->where('status', '=', '1')->where('views', '>', '5')->orderBy('created_at', 'DESC');

        if($getfeching !=null && $getfeching->geofencing == 'ON'){
          $trending_audios =   $trending_audios->whereNotIn('id',$blockaudios);
        }
        $trending_audios =$trending_audios->get()->map(function ($item) {
         $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
         $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
          return $item;
        });
        $response = array(
            'status'=>'true',
            'trending_audios'=>$trending_audios
        );
        return response()->json($response, 200);
    }

    public function albumlist(Request $request)
    {
      $audioalbums_count = AudioAlbums::get()->count();

        if($audioalbums_count > 0){
          $audioalbums = AudioAlbums::orderBy('created_at', 'desc')->get();
          $audioalbums = AudioAlbums::orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/albums/'.$item->album;
            return $item;
          });
          foreach($audioalbums as $val){
            // $audio[$val->albumname] = Audio::where('album_id',$val->id)->get();
            // $audioalbums= $val->albumname;

            $audio[$val->albumname] = Audio::where('album_id',$val->id)
            ->orderBy('created_at', 'desc')
            ->get()->map(function ($item) {
              $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
              $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
              return $item;
            });

              $response = array(
            'status'=>'true',
            'audioalbums'=>$audioalbums,
            // 'audio'=>$audio,
        );
      }
      }else{
        $response = array(
          'status'=>'false',
          'audioalbums'=> array(),
          'audio'=>array(),
      );
      }
        return response()->json($response, 200);
    }

    public function album_audios(Request $request)
    {

      $album_id = $request->album_id ;
      $audioalbums_count = AudioAlbums::where('id' , $album_id)->orderBy('created_at', 'desc')->get()->count();
      if($audioalbums_count > 0){

        $audioalbums = AudioAlbums::where('id' , $album_id)->first();
        $genre_name = $audioalbums->albumname;
        // print_r($audioalbums->albumname);exit;
          $audio = Audio::where('album_id',$album_id)
          ->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
            if($item->lyrics_json != null){
              $item['lyrics_json'] = json_decode($item->lyrics_json)  ;
            }else{
              $item['lyrics_json'] = null  ;
            }
            return $item;
          });

            $response = array(
          'genre_name'=>$genre_name,
          'status'=>'true',
          // 'audioalbums'=>$audioalbums,
          'audio'=>$audio,
      );
    }else{
      $response = array(
        'status'=>'false',
        'audioalbums'=> 'No Albums Added',
        'audio'=>'No Audio Albums Added',
    );
    }
    return response()->json($response, 200);

    }


    
    public function albums_audios_genre(Request $request)
    {
        $albums_audios_slug = $request->albums_audios_slug;
        $CategoryAudio = AudioCategory::where('slug', $albums_audios_slug)->first();
        $AudioCategory = $CategoryAudio ? $CategoryAudio->specific_category_audio : [];
        if (count($AudioCategory) > 0) {              
            return response()->json([
                'status' => true,
                'genre_name' => $CategoryAudio->name,
                'audio' => $AudioCategory
            ]);
        } else {
            return response()->json([
                'status' => false,
                'message' => 'No audio added'
            ]);
        }
    }


    public function AudioCategory(Request $request)
    {
        $audiocategories_count = AudioCategory::orderBy('created_at', 'desc')->get()->count();


        $audiocategories = AudioCategory::select('id','image')->orderBy('created_at', 'desc')->get()->toArray();
        $myData = array();
        foreach ($audiocategories as $key => $audiocategory) {
          $audiocategoryid = $audiocategory['id'];
          $genre_image = $audiocategory['image'];
          // $categoryauido =  Audio::join('category_audios', 'audio.id', '=', 'category_audios.audio_id')

          $audio = Audio::Join('category_audios','category_audios.audio_id','=','audio.id')
          ->where('category_audios.category_id',$audiocategoryid)
          ->orderBy('audio.created_at', 'desc')
          ->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            // $item['auido_url'] = URL::to('/').'/storage/app/public/';
            $item['category_name'] = AudioCategory::where('id',$item->category_id)->pluck('slug')->first();

            return $item;
          });

          $main_genre = CategoryAudio::Join('audio_categories','audio_categories.id','=','category_audios.category_id')
          ->get('name');
          foreach($main_genre as $value){
            $category[] = $value['name'];
          }
          if(!empty($category)){
          $main_genre = implode(",",$category);
          }else{
            $main_genre = "";
          }
          if(count($audio) > 0){
            $msg = 'success';
          }else{
            $msg = 'nodata';
          }
          $myData[] = array(
            "message" => $msg,
            'gener_name' =>  AudioCategory::where('id',$audiocategoryid)->pluck('name')->first(),
            'gener_id' =>  AudioCategory::where('id',$audiocategoryid)->pluck('id')->first(),
            "audio" => $audio
          );
        }


        $response = array(
          'status' => 'true',
          'genre_movies' => $myData,
          // 'main_genre' => $msg,
          // 'main_genre' => $main_genre,

        );
        return response()->json($response, 200);


    }

    public function albumaudios(Request $request)
    {
        $album_id = $request->album_id;

        $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
        $countryName =  $geoip->getCountry();
        $getfeching = Geofencing::first();

        $block_audios=BlockAudio::where('country',$countryName)->get();
            if(!$block_audios->isEmpty()){
              foreach($block_audios as $block_audio){
                  $blockaudios[]=$block_audio->video_id;
              }
          }
          $blockaudios[]='';

        $audioalbum = Audio::where('audio_category_id',$album_id)->where('active','=',1)
        ->orderBy('created_at', 'desc');
        if($getfeching !=null && $getfeching->geofencing == 'ON'){
          $audioalbum =   $audioalbum->whereNotIn('id',$blockaudios);
        }
        $audioalbum = $audioalbum->orderBy('created_at', 'desc')
        ->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['video_url'] = URL::to('/').'/storage/app/public/'.$item->mp4_url;
            return $item;
        });
    $categoryauido =  Audio::join('category_audios', 'audio.id', '=', 'category_audios.audio_id')
    ->select('audio.*')
    ->where('category_id', $album_id)
    ->orderBy('audio.created_at', 'desc')
    ->count();

    if($categoryauido > 0){
    $albumcategoryauido =  Audio::join('category_audios', 'audio.id', '=', 'category_audios.audio_id')
    ->select('audio.*')
    ->where('category_id', $album_id)
    ->orderBy('audio.created_at', 'desc')
    ->get();
    }else{
      $albumcategoryauido =  'No Audio Found';
    }
        $response = array(
            'status'=>'true',
            // 'albumname'=>AudioCategory::where('id',$album_id)->first()->name,
            'audioalbum'=>$audioalbum,
            'albumcategoryauido' => $albumcategoryauido ,
        );
        return response()->json($response, 200);
    }

    public function next_audio(Request $request) {

      $currentaudio_id = $request->audio_id;

      $next_audio_id = Audio::where('id', '>', $currentaudio_id)->where('status','=','1')->where('active','=','1')->min('id');

        if( $next_audio_id != null ){

              $audio= Audio::where('id','=',$next_audio_id)->where('status','=','1')->where('active','=','1')->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                if($item->lyrics_json != null){
                  $item['lyrics_json'] = json_decode($item->lyrics_json)  ;
                }else{
                  $item['lyrics_json'] = null  ;
                }
                return $item;
              });

        }else{

            $next_audio_id = Audio::where('status','=','1')->where('active','=','1')->pluck('id')->first();

            $audio= Audio::where('id','=',$next_audio_id)->where('status','=','1')->where('active','=','1')->get()->map(function ($item) {
              $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
              if($item->lyrics_json != null){
                $item['lyrics_json'] = json_decode($item->lyrics_json)  ;
              }else{
                $item['lyrics_json'] = null  ;
              }
              return $item;
            });
        }

        $response = array(
          'status' => true,
          'next_audio_id' => $next_audio_id,
          'audio' => $audio
        );
        return response()->json($response, 200);
    }


    public function prev_audio(Request $request){

        $currentaudio_id = $request->audio_id;

        $prev_audio_id = Audio::where('id', '<', $currentaudio_id)->where('status','=','1')->where('active','=','1')->orderBy('id','desc')->first();

          if($prev_audio_id){

                $prev_audio_id = $prev_audio_id->id;

                $audio= Audio::where('id','=',$prev_audio_id)->where('status','=','1')->where('active','=','1')->get()->map(function ($item) {
                    $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                    if($item->lyrics_json != null){
                      $item['lyrics_json'] = json_decode($item->lyrics_json)  ;
                    }else{
                      $item['lyrics_json'] = null  ;
                    }
                    return $item;
                });

          }else{

              $prev_audio_id = Audio::where('status','=','1')->where('active','=','1')->latest()->pluck('id')->first();

              $audio= Audio::where('id','=',$prev_audio_id)->where('status','=','1')->where('active','=','1')->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                if($item->lyrics_json != null){
                  $item['lyrics_json'] = json_decode($item->lyrics_json)  ;
                }else{
                  $item['lyrics_json'] = null  ;
                }
                return $item;
            });
          }

          $response = array(
            'status' => "true",
            'prev_audio_id' => $prev_audio_id,
            'audio' => $audio
          );

          return response()->json($response, 200);
    }

    public function relatedaudios(Request $request) {
        $audio_id = $request->audio_id;
        $categoryAudios = Audio::where('id',$audio_id)->first();
        $category_id = Audio::where('id',$audio_id)->pluck('audio_category_id');
        $recomended = Audio::where('audio_category_id','=',$category_id)
        ->where('id','!=',$audio_id)->where('status','=',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                $item['mp4_url'] = URL::to('/').'/public/uploads/videos/'.$item->mp4_url;
                if($item->lyrics_json != null){
                  $item['lyrics_json'] = json_decode($item->lyrics_json)  ;
                }else{
                  $item['lyrics_json'] = null  ;
                }
                return $item;
            });
        $response = array(
            'status'=>'true',
            'recomendedaudios' => $recomended
        );
        return response()->json($response, 200);
    }

     public function mywatchlatersaudio(Request $request) {

      $user_id = $request->user_id;

      /*channel videos*/
      $audio_ids = Watchlater::select('audio_id')->where('user_id','=',$user_id)->get();
      $audio_ids_count = Watchlater::select('audio_id')->where('user_id','=',$user_id)->count();

      if ( $audio_ids_count  > 0) {

        foreach ($audio_ids as $key => $value1) {
          $k2[] = $value1->audio_id;
        }
        $channel_videos = Audio::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/uploads/images/'.$item->image;
          $item['mp3_url'] = $item->mp3_url;
          return $item;
        });
        if(count($channel_videos) > 0){
          $status = "true";
        }else{
          $status = "false";
        }
            }else{
               $status = "false";
        $channel_videos = [];
      }

      $response = array(
          'status'=>$status,
          'channel_videos'=> $channel_videos
        );
      return response()->json($response, 200);

    }

    public function myFavoriteaudio(Request $request) {

      $user_id = $request->user_id;

      /*channel videos*/
      $audio_ids = Favorite::select('audio_id')->where('user_id','=',$user_id)->get();
      $audio_ids_count = Favorite::select('audio_id')->where('user_id','=',$user_id)->count();

      if ( $audio_ids_count  > 0) {

        foreach ($audio_ids as $key => $value1) {
          $k2[] = $value1->audio_id;
        }
        $channel_videos = Audio::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['mp3_url'] = $item->mp3_url;
          return $item;
        });
        if(count($channel_videos) > 0){
          $status = "true";
        }else{
          $status = "false";
        }
      }else{
               $status = "false";
        $channel_videos = [];
      }

      $response = array(
          'status'=>$status,
          'channel_videos'=> $channel_videos
        );
      return response()->json($response, 200);

    }

    public function Alllanguage(Request $request) {

      $all_languages = Language::latest('created_at')->get()->map(function ($item) {
        $item['image_url'] = $item->language_image ? URL::to('/').'/public/uploads/Language/'.$item->language_image : null ;
        return $item;
      });

      $count_all_languages = count($all_languages);
      $response = array(
          'status'=>'true',
          'all_languages' => $all_languages,
          'count_all_languages' => $count_all_languages

      );
      return response()->json($response, 200);
  }

  public function VideoLanguage(Request $request) {
    try {
     
      $user_id = $request->user_id;
      $language_id = $request->language_id;

      $LanguageVideo = LanguageVideo::where('language_id',$language_id)->groupBy('video_id')->pluck('video_id');

      $language_videos = Video::join('languagevideos', 'languagevideos.video_id', '=', 'videos.id')
                                ->where('languagevideos.language_id', $language_id)
                                ->where('videos.active', 1)
                                ->where('videos.status', 1)
                                ->select('videos.*')
                                ->latest()
                                ->get();

          if(Geofencing() !=null && Geofencing()->geofencing == 'ON'){
              $categoryVideos = $categoryVideos->whereNotIn('videos.id', Block_videos());
          }

      $response = array(
        'status' => 'true',
        'status_code' => 200,
        'message' => 'Retrieved the Language Videos',
        'language_videos'=> $language_videos,
        'count_language_videos'=> $language_videos->count(),
      );

    } catch (\Throwable $th) {

      $response = array(
        'status' => 'false',
        'status_code' => 500,
        'message' => $th->getMessage(),
      );

    }

    return response()->json($response, $response['status_code']);

  }
  public function FeaturedVideo() {

    $featured_videos = Video::where('active', '=', '1')->where('featured', '=', '1')->orderBy('created_at', 'DESC')->get();
    $count_featured_videos = Video::where('active', '=', '1')->where('featured', '=', '1')->orderBy('created_at', 'DESC')->count();
    $response = array(
        'featured_videos' => $featured_videos,
        'count_featured_videos' => $count_featured_videos

    );
    return response()->json($response, 200);
}
public function RecentViews(Request $request) {

  $user_id = $request->user_id;

  $recent_videos = RecentView::where('user_id', '=',$user_id )->orderBy('id', 'desc')->take(10)->get();

  $count_recent_videos = count($recent_videos);

  $response = array(
      'recent_videos' => $recent_videos,
      'count_recent_videos' => $count_recent_videos

  );
  return response()->json($response, 200);
}

public function RecentlyViewedVideos(){

    $recent_videos = RecentView::orderBy('id', 'desc')->take(10)->get();
    foreach($recent_videos as $key => $value){
    $videos[] = Video::Where('id', '=',$value->video_id)->take(10)->get();
    }
    $videocategory = VideoCategory::all();
    $video = array_unique($videos);
    $response = array(
      'videos' => $video,
      'videocategory' => $videocategory,

  );
  return response()->json($response, 200);
}
public function AddRecentAudio(Request $request){

  $user_id = $request->user_id;
  $audio_id = $request->audio_id;
  if($request->audio_id != ''){
      $view = new RecentView;
            $view->audio_id = $audio_id;
            $view->user_id = $user_id;
            $view->visited_at = date('Y-m-d');
            $view->save();

            $message = "Added  to  Audio to Recent Views";
      $response = array(

        "status" => "true",
        'message'=> $message,
      );

    } else {
      $message = "Not Added  to  Audio to Recent Views Need Audio ID";

      $response = array(
        'status'=>'false',
         'message'=> $message

      );

    }
  return response()->json($response, 200);

  }

  public function SubscriptionEndNotification() {

    $stripe_plan = SubscriptionPlan();

    $users = User::all();
    foreach($users as $user){

    if ($user->subscription($stripe_plan) && $user->subscription($stripe_plan)->onGracePeriod()) {
        $ends_at = $user->subscription($stripe_plan)->ends_at->format('dS M Y');
        $end_date= date('d-m-Y', strtotime($ends_at. ' - ' ."7 days"));
        if(!empty($end_date)){
          send_password_notification('Notification From'. GetWebsiteName(),'Your Subscription Auto Renewal Before 7 days','',$user->id);
        }else{
        }
    }else{
        $ends_at = "";
    }
  }

    $response = array(
        'status'=>'true',
        'message'=>'success',
    );
    return response()->json($response, 200);
}




public function SubscriptionPayment(Request $request){

    $user_id = $request->user_id;
    $name    = $request->name;
    $days    = $request->days;
    $price   = $request->price;
    $stripe_id     = $request->stripe_id;
    $stripe_status = $request->stripe_status;
    $stripe_plan   = $request->stripe_plan;
    $created_at    = $request->created_at;
    $countryname   = $request->countryname;
    $regionname    = $request->regionname;
    $cityname      = $request->cityname;

    if($request->stripe_plan != ''){

        $next_date = $days;
        $current_date = date('Y-m-d h:i:s');
        $date = Carbon::parse($current_date)->addDays($next_date);
        $subscription = new Subscription;
        $subscription->user_id  =  $user_id ;
        $subscription->name  =  $name ;
        $subscription->days  =  $days ;
        $subscription->price  =  $price ;
        $subscription->stripe_id  =  $stripe_id ;
        $subscription->stripe_status   =  $stripe_status ;
        $subscription->stripe_plan =  $stripe_plan;
        $subscription->created_at =  $created_at;
        $subscription->countryname = $countryname;
        $subscription->regionname = $regionname;
        $subscription->cityname = $cityname;
        $subscription->ends_at = $date;
        $subscription->ios_product_id = $request->product_id;
        $subscription->save();

        $user =  User::findOrFail($user_id);
        $user->role = "subscriber";
        $user->save();

        $user_email = $user->email;
        $plan_details = SubscriptionPlan::where('plan_id',$stripe_plan)->first();
        $email_subject = EmailTemplate::where('id',23)->pluck('heading')->first() ;

        try {


          \Mail::send('emails.subscriptionmail', array(
              'name' => ucwords($name),
              'uname' => $name,
              'paymentMethod' => 'Stripe',
              'plan' => ucfirst($plan_details->plans_name),
              'price' => $plan_details->price,
              'plan_id' => $plan_details->plan_id,
              'billing_interval' => $plan_details->billing_interval,
              'next_billing' => $date,
              'subscription_type' => 'recurring',

          ), function($message) use ($request,$user,$email_subject){
            $message->from(AdminMail(),GetWebsiteName());
            $message->to($user->email, $user->username)->subject($email_subject);
          });


          $email_log      = 'Mail Sent Successfully from Register Subscription';
          $email_template = "23";
          $user_id = $user->id;

          Email_sent_log($user_id,$email_log,$email_template);

          $mail_message = 'Mail sent Sucessfully' ;

      } catch (\Throwable $th) {

          $email_log      = $th->getMessage();
          $email_template = "23";
          $user_id = $user->id;

          Email_notsent_log($user_id,$email_log,$email_template);

          $mail_message = 'Mail Not sent' ;

      }

        $response = array(
          "status" => "true",
          'message'=> "Added  to  Subscription",
          'Mail_message' => $mail_message ,
        );

    } else {

      $response = array(
        'status'=> "Not Added  to  Subscription",
         'message'=> $message
      );

    }
    return response()->json($response, 200);

  }



  public function SubscriberedUsers() {

    $stripe_plan = SubscriptionPlan();

    $subscription_count = Subscription::all()->count();
    if ($subscription_count > 0 ) {
      $subscription = Subscription::all();
        }else{
    $subscription = [];
    }
    $response = array(
        'status'=>'true',
        'subscription'=> $subscription,
    );
    return response()->json($response, 200);
}


public function LocationCheck(Request $request){

  $country_name = $request->country_name;

  $blocked_count = Country::where('country_name', '=', $country_name)->count();

        if ($blocked_count > 0) {
          $response = array('status' => true,
                            'message' => 'Blocked'
          );
      } else {
          $response = array('status' => false,
                            'message' => 'Can Access'
          );
      }
      return response()->json($response, 200);

  }

  public function myWishlistsEpisode(Request $request) {

    $user_id = $request->user_id;

    /*channel videos*/
    $episode_id_ids = Wishlist::select('episode_id')->where('user_id','=',$user_id)->orderBy('created_at', 'desc')->get();
    $episode_id_ids_count = Wishlist::select('episode_id')->where('user_id','=',$user_id)->count();

    if ( $episode_id_ids_count  > 0) {

      foreach ($episode_id_ids as $key => $value1) {
        $k2[] = $value1->video_id;
      }
      $channel_videos = Episode::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      if(count($channel_videos) > 0){
        $status = "true";
      }else{
        $status = "false";
      }
     }else{
            $status = "false";
      $channel_videos = [];
    }


    $response = array(
        'status'=>$status,
        'channel_videos'=> $channel_videos
      );
    return response()->json($response, 200);

  }

  public function mywatchlatersEpisode(Request $request) {

    $user_id = $request->user_id;

    /*channel videos*/
    $episode_ids = Watchlater::select('episode_id')->where('user_id','=',$user_id)->orderBy('created_at', 'desc')->get();
    $episode_ids_count = Watchlater::select('episode_id')->where('user_id','=',$user_id)->count();

    if ( $episode_ids_count  > 0) {

      foreach ($episode_ids as $key => $value1) {
        $k2[] = $value1->video_id;
      }
      $channel_videos = Episode::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      if(count($channel_videos) > 0){
        $status = "true";
      }else{
        $status = "false";
      }
        }else{
             $status = "false";
      $channel_videos = [];
    }

    $response = array(
        'status'=>$status,
        'channel_videos'=> $channel_videos
      );
    return response()->json($response, 200);

  }
  public function myFavoritesEpisode(Request $request) {

    $user_id = $request->user_id;
    /*channel videos*/
    $episode_ids = Favorite::select('episode_id')->where('user_id',$user_id)->orderBy('created_at', 'desc')->get();
    $episode_ids_count = Favorite::select('episode_id')->where('user_id',$user_id)->count();

    if ( $episode_ids_count  > 0) {

      foreach ($episode_ids as $key => $value) {
        $k2[] = $value->video_id;
      }
      $channel_videos = Episode::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      if(count($channel_videos) > 0){
        $status = "true";
      }else{
        $status = "false";
      }
        }else{
            $status = "false";
      $channel_videos = [];
    }


    $response = array(
        'status'=>$status,
        'channel_videos'=> $channel_videos
      );
    return response()->json($response, 200);

  }
  public function addwatchlaterEpisode(Request $request) {

    $user_id = $request->user_id;
    $episode_id = $request->episode_id;
    if($request->episode_id != ''){
      $count = Watchlater::where('user_id', '=', $user_id)->where('episode_id', '=', $episode_id)->count();
      if ( $count > 0 ) {
        Watchlater::where('user_id', '=', $user_id)->where('episode_id', '=', $episode_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Watch Later'
        );
      } else {
        $data = array('user_id' => $user_id, 'episode_id' => $episode_id );
        Watchlater::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added  to  Your Watch Later'
        );

      }
    }

    return response()->json($response, 200);

  }

  public function addwishlistEpisode(Request $request) {

    $user_id = $request->user_id;
    //$type = $request->type;//channel,ppv
    $episode_id = $request->episode_id;
    if($request->episode_id != ''){
      $count = Wishlist::where('user_id', '=', $user_id)->where('episode_id', '=', $episode_id)->count();
      if ( $count > 0 ) {
        Wishlist::where('user_id', '=', $user_id)->where('episode_id', '=', $episode_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Wishlist'
        );
      } else {
        $data = array('user_id' => $user_id, 'episode_id' => $episode_id );
        Wishlist::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added  to  Your Wishlist'
        );

      }
    }

    return response()->json($response, 200);

  }


  public function addfavoriteEpisode(Request $request) {

    $user_id = $request->user_id;
    //$type = $request->type;//channel,ppv
    $episode_id = $request->episode_id;
    if($request->episode_id != ''){
      $count = Favorite::where('user_id', '=', $user_id)->where('episode_id', '=', $episode_id)->count();
      if ( $count > 0 ) {
        Favorite::where('user_id', '=', $user_id)->where('episode_id', '=', $episode_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Favorite'
        );
      } else {
        $data = array('user_id' => $user_id, 'episode_id' => $episode_id );
        Favorite::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added  to  Your Favorite'
        );

      }
    }

    return response()->json($response, 200);

  }

  public function Multiprofile( Request $request ){

      try {

        $parent_id =  $request->user_id ;

        $subcriber_user= User::where('id', $parent_id)->get()->map(function ($item, $key)  {
          $item['image_url'] = $item['avatar'] != ' ' ? URL::to('public/uploads/avatars/'.$item->avatar) : URL::to('public/multiprofile/multi-user-default-image-'.('1').'.png') ;
          return $item;
        });

        $muti_users= Multiprofile::where('parent_id', $parent_id)->get()->map(function ($item, $key)  {
          $item['image_url'] = $item['Profile_Image'] != 'chooseimage.jpg' ? URL::to('public/multiprofile/'.$item->Profile_Image) : URL::to('public/multiprofile/multi-user-default-image-'.($key+2).'.png') ;
          return $item;
        });

        $response = array(
          'status'  => 'true',
          'message' => 'Multiprofile Retrieved  successfully' ,
          'user'    => $subcriber_user->first(),
          'sub_users'=> $muti_users,
          'multi_users'=> $muti_users
        );

      } catch (\Throwable $th) {

        $data = array(
          'status' => 'false',
          'message' => $th->getMessage() ,
        );

      }

      return response()->json($response, 200);
  }

  public function Multiprofile_create(Request $request){

      try {

        $input = array(
          'parent_id'       => $request->user_id,
          'user_name'       => $request->input('name'),
          'user_type'       => ucwords($request->user_type),   // Kids or  Normal
        );

        if($request->image != ''){

          $files = $request->image;
          $filename =uniqid(). time(). '.' . $files->getClientOriginalExtension();
          Image::make($files)->resize(300, 300)->save(base_path().'/public/multiprofile/'.$filename );
          $input  += ['Profile_Image'   => $filename, ];
        }

        $Multiprofile = Multiprofile::create( $input );

        $data = array(
          'status' => 'true',
          'message' => 'Multiprofile data Saved successfully' ,
          'Multiprofile' => Multiprofile::findOrFail($Multiprofile->id),
        );

      } catch (\Throwable $th) {

        $data = array(
          'status' => 'false',
          'message' => $th->getMessage() ,
        );

      }
        return response()->json($data, 200);

    }

    public function Multiprofile_edit(Request $request)

    {
      try {

        $Multiprofile = Multiprofile::findOrFail($request->sub_user_id);

        $data = array(
          'status' => 'true',
          'message' => 'Multiprofile data Retrived successfully' ,
          'Multiprofile' => $Multiprofile ,
        );

      } catch (\Throwable $th) {

        $data = array(
          'status' => 'false',
          'message' => $th->getMessage() ,
        );

      }
        return response()->json($data, 200);
    }

    public function Multiprofile_update(Request $request){

      try{

        $input = array(
          'parent_id'       => $request->user_id,
          'user_name'       => $request->input('name'),
          'user_type'       => ucwords($request->user_type),   // Kids or  Normal
        );

        if($request->image != ''){

          $files = $request->image;
          $filename =uniqid(). time(). '.' . $files->getClientOriginalExtension();
          Image::make($files)->resize(300, 300)->save(base_path().'/public/multiprofile/'.$filename );
          $input  += ['Profile_Image'   => $filename, ];
        }

        $Multiprofile = Multiprofile::find( $request->sub_user_id )->update( $input );

        $data = array(
          'status' => 'true',
          'message' => 'Multiprofile data updated successfully' ,
          'Multiprofile' => Multiprofile::findOrFail( $request->sub_user_id),
        );

      } catch (\Throwable $th) {

        $data = array(
          'status' => 'false',
          'message' => $th->getMessage() ,
        );
      }

      return response()->json($data, 200);

    }

    public function Multiprofile_delete( Request $request)
    {
      try {
          Multiprofile::find( $request->sub_user_id )->delete();

            $data = array(
              'status' => 'true',
              'message' => 'Multiprofile deleted Successfully'  ,
            );

      } catch (\Throwable $th) {

          $data = array(
            'status' => 'false',
            'message' => $th->getMessage() ,
          );
      }

      return response()->json($data, 200);

    }

    public function freecontent_episodes(){

      $user_id= Session::get('login_web_59ba36addc2b2f9401580f014c7f58ea4e30989d');
      $user_details = user::where('id',$user_id)->pluck('role')->first();

      $freecontent = Episode::where('status',1)->where('active',1);
      if($user_details == null){
        $freecontent = $freecontent->where('access','guest');
      }
      $freecontent = $freecontent->orderBy('id', 'DESC')->get();

      $response = array(
        'freecontent'=>$freecontent,
      );
      return response()->json($response, 200);

    }


    public function MostwatchedVideos(){

        $Recommendation = HomeSetting::pluck('Recommendation')->first();


        if( $Recommendation == 1 ){

          $check_Kidmode = 0 ;

          $Mostwatchedvideos = RecentView::select('video_id','videos.*',DB::raw('COUNT(video_id) AS count'))
                ->join('videos', 'videos.id', '=', 'recent_views.video_id');
               
                if(Geofencing() !=null && Geofencing()->geofencing == 'ON')
                {
                  $Mostwatchedvideos = $Mostwatchedvideos->whereNotIn('videos.id',Block_videos());
                }
    
                if( $check_Kidmode == 1 )
                {
                  $Mostwatchedvideos = $Mostwatchedvideos->whereBetween('videos.age_restrict', [ 0, 12 ]);
                }
          $Mostwatchedvideos =$Mostwatchedvideos->groupBy('video_id')
                ->orderByRaw('count DESC' )->limit(20)->get()->map(function ($item) {
                  $item['Thumbnail'] = URL::to('/').'/public/uploads/images/'.$item->image ;
                  $item['Player_thumbnail'] = URL::to('/').'/public/uploads/images/'.$item->player_image ;
                  $item['TV_Thumbnail'] = URL::to('/').'/public/uploads/images/'.$item->video_tv_image ;
                  $item['Video_Title_Thumbnail'] = URL::to('/').'/public/uploads/images/'.$item->video_title_image ;
                  return $item;
            });
        }
        

        $response = array(
          'status'  => 'true',
          'message' => 'Most watched videos  Retrieve successfully',
          'Mostwatchedvideos' => !empty($Mostwatchedvideos) ? $Mostwatchedvideos  : [] ,
        );

        return response()->json($response, 200);
    }

    public function MostwatchedVideosUser(Request $request){

      try {
      
        $Sub_user = '';
        $user_id  = $request->user_id ;
        $Recomended = HomeSetting::first();


        if( $Recomended->Recommendation == 1 ){

          $check_Kidmode = 0 ;

          $mostWatchedUserVideos = RecentView::select('video_id','videos.*',DB::raw('COUNT(video_id) AS count'))
                ->join('videos', 'videos.id', '=', 'recent_views.video_id')
                ->groupBy('video_id');

                if(Geofencing() !=null && Geofencing()->geofencing == 'ON')
                {
                  $mostWatchedUserVideos = $mostWatchedUserVideos->whereNotIn('videos.id',Block_videos());
                }
    
                if( $check_Kidmode == 1 )
                {
                  $mostWatchedUserVideos = $mostWatchedUserVideos->whereBetween('videos.age_restrict', [ 0, 12 ]);
                }

                if($Sub_user != null){
                    $mostWatchedUserVideos = $mostWatchedUserVideos->where('recent_views.sub_user',$Sub_user);
                }else{
                    $mostWatchedUserVideos = $mostWatchedUserVideos->where('recent_views.user_id',$user_id);
                }
                $mostWatchedUserVideos = $mostWatchedUserVideos->orderByRaw('count DESC' )->limit(20)->get();
          }
            return response()->json([
              'status'  => 'true',
              'message' => 'Most watched videos by User data Retrieve successfully',
              'mostWatchedUserVideos' => !empty($mostWatchedUserVideos) ? $mostWatchedUserVideos  : [] ], 200);
      
    } catch (\Throwable $th) {
      
        return response()->json([
          'status'  => 'false',
          'Message' => $th->getMessage(),
      ], 200);
    }
  }


    public function Country_MostwatchedVideos(){

      $Recomended = HomeSetting::first();

      if( $Recomended->Recommendation == 1 ){

        $check_Kidmode = 0 ;

        $data = RecentView::select('video_id','videos.*',DB::raw('COUNT(video_id) AS count'))
                  ->join('videos', 'videos.id', '=', 'recent_views.video_id')->groupBy('video_id')->orderByRaw('count DESC' )
                  ->where('country_name', '=',Country_name());
                  
                  if(Geofencing() !=null && Geofencing()->geofencing == 'ON')
                  {
                    $data = $data->whereNotIn('videos.id',Block_videos());
                  }
      
                  if( $check_Kidmode == 1 )
                  {
                    $data = $data->whereBetween('age_restrict', [ 0, 12 ]);
                  }

                  $data = $data->limit(30)->get()->map(function ($item) {
                      $item['image_url'] = URL::to('public/uploads/images/'.$item->image) ;
                  return $item;
        });

      }

      return response()->json([
        'message' => 'Country Most watched videos Retrieve successfully',
        'country_Name' => Country_name(),
        'Mostwatched' => !empty($data) ? $data : [] ], 200);
    }

  public function ComingSoon() {

        $videos = Video::orderBy('created_at', 'DESC')->whereDate('publish_time', '>', \Carbon\Carbon::now()->today())->get();
        if(!empty($videos)){
          $status = 'true';
          $comingsoon = $videos;

        }else{
          $status = 'false';
          $comingsoon = [];
        }
        $response = array(
          'status'=> $status,
          'comingsoon'=> $comingsoon,
        );

    return response()->json($response, 200);

  }


  public function video_cast(Request $request)
  {
    $video_id = $request->video_id;
    $video_cast_count = Videoartist::join("artists","video_artists.artist_id", "=", "artists.id")
    ->select("artists.*")
    ->where("video_artists.video_id", "=", $video_id)
    ->count();

    if ($video_cast_count > 0) {
      $status = "true";

      $video_cast = Videoartist::join("artists","video_artists.artist_id", "=", "artists.id")
      ->select("artists.*")
      ->where("video_artists.video_id", "=", $video_id)
      ->orderBy('created_at', 'desc')
      ->get()
      ->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/artists/'.$item->image;
        return $item;
      });

    } else {
      $video_cast = [];
      $status = "false";
    }
    $response = array(
      'status' => $status,
      'video_cast' => $video_cast
    );
    return response()->json($response, 200);
  }
  public function series_cast(Request $request)
  {
    $seriesid = $request->seriesid;
    $series_cast_count = Seriesartist::join("artists","series_artists.artist_id", "=", "artists.id")
    ->select("artists.*")
    ->where("series_artists.series_id", "=", $seriesid)
    ->count();

    if ($series_cast_count > 0) {
      $status = "true";

      $series_cast = Seriesartist::join("artists","series_artists.artist_id", "=", "artists.id")
      ->select("artists.*")
      ->where("series_artists.series_id", "=", $seriesid)
      ->orderBy('created_at', 'desc')
      ->get()
      ->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/artists/'.$item->image;
        return $item;
      });

    } else {
      $series_cast = [];
      $status = "false";
    }
    $response = array(
      'status' => $status,
      'series_cast' => $series_cast
    );
    return response()->json($response, 200);
  }

  public function Preference_genres()
  {
      $Recomended = HomeSetting::first();
      $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
      $countryName =  $geoip->getCountry();
      $getfeching = Geofencing::first();

      $block_videos=BlockVideo::where('country_id', $countryName)->get();
        if(!$block_videos->isEmpty()){
            foreach($block_videos as $block_video){
                $blockvideos[]=$block_video->video_id;
            }
        }  else{  $blockvideos=[];  }

      if( $Recomended->Recommendation == 1 ){

          $user_id= Session::get('login_web_59ba36addc2b2f9401580f014c7f58ea4e30989d');
          $preference_genres = User::where('id',$user_id)->pluck('preference_genres')->first();

          if($preference_genres !=null ){
              $video_genres = json_decode($preference_genres);
              $preference_gen = Video::whereIn('video_category_id',$video_genres)->whereNotIn('videos.id',$blockvideos)->orderBy('created_at', 'desc')->get();
          }
          else{
              $preference_gen =[];
          }
        }else{
          $preference_gen =[];
        }

          return response()->json([
            'message' => 'preference Genres videos Retrieve successfully',
            'Preference_genres' => $preference_gen], 200);
    }

    public function Preference_Language(){

      $user_id= Session::get('login_web_59ba36addc2b2f9401580f014c7f58ea4e30989d');

      $Recomended = HomeSetting::first();
      $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
      $countryName =  $geoip->getCountry();
      $getfeching = Geofencing::first();

      $block_videos=BlockVideo::where('country_id', $countryName)->get();
        if(!$block_videos->isEmpty()){
            foreach($block_videos as $block_video){
                $blockvideos[]=$block_video->video_id;
            }
        }  else{  $blockvideos=[];  }


      if( $Recomended->Recommendation == 1 ){

      $preference_language = User::where('id',$user_id)->pluck('preference_language')->first();
            if($preference_language !=null ){
              $video_language =json_decode($preference_language);
              $preference_Lan = Video::whereIn('language',$video_language)->whereNotIn('videos.id',$blockvideos)->orderBy('created_at', 'desc')->get();
            }else{
                  $preference_Lan =[];
              }
        }else{
          $preference_Lan =[];
        }
          return response()->json([
            'message' => 'preference language videos Retrieve successfully',
            'Preference_language' => $preference_Lan], 200);

    }

    public function category_Mostwatchedvideos(){

      $Recomended = HomeSetting::first();
      $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
      $countryName =  $geoip->getCountry();
      $getfeching = Geofencing::first();

    if( $getfeching->geofencing == 'ON'){
          $block_videos=BlockVideo::where('country_id', $countryName)->get();
            if(!$block_videos->isEmpty()){
                foreach($block_videos as $block_video){
                    $blockvideos[]=$block_video->video_id;
                } } else{  $blockvideos=[];  } }
      else{  $blockvideos=[];  }

      if( $Recomended->Recommendation == 1 ){

          $parentCategories = VideoCategory::where('in_home','=',1)->orderBy('order','ASC')->get();

          foreach($parentCategories as $category) {

          $videos = Video::Join('video_categories','video_categories.id','=','videos.video_category_id')->where('video_category_id','=',$category->id)->where('active', '=', '1')->get();

          foreach($videos as $key => $category_video){

            $top_category_videos[$category_video->name ] = RecentView::select('video_id','videos.*',DB::raw('COUNT(video_id) AS count'))
                ->join('videos', 'videos.id', '=', 'recent_views.video_id')->groupBy('video_id')->orderByRaw('count DESC' )
                ->where('video_category_id',$category_video->video_category_id)->whereNotIn('videos.id',$blockvideos)->limit(20)->get();
          }
        }
      } else{
      $top_category_videos =[];
    }

      return response()->json([
        'Top_category_videos' => $top_category_videos], 200);
  }

  public function Welcome_Screen()
  {
     $Screen =WelcomeScreen::orderBy('created_at', 'desc')->get()->map(function ($item) {
      $item['welcome_images_link'] = URL::to('/').'/public/uploads/settings/'.$item->welcome_images;
      return $item;
    });

     return response()->json([
      'WelcomeScreen' => $Screen], 200);
  }


  public function Episode_like(Request $request)
  {

    $user_id = $request->user_id;
    $Episode_id = $request->Episode_id;
    $like = $request->like;
    $d_like = Likedislike::where("Episode_id",$Episode_id)->where("user_id",$user_id)->count();

    if($d_like > 0){
      $new_episode_like = Likedislike::where("Episode_id",$Episode_id)->where("user_id",$user_id)->first();
      if($like == 1){
        $new_episode_like->user_id = $request->user_id;
        $new_episode_like->Episode_id = $request->Episode_id;
        $new_episode_like->liked = 1;
        $new_episode_like->disliked = 0;
        $new_episode_like->save();
      }else{
        $new_episode_like->user_id = $request->user_id;
        $new_episode_like->Episode_id = $request->Episode_id;
        $new_episode_like->liked = 0;
        $new_episode_like->save();
      }
    }else{
      $new_episode_like = new Likedislike;
      $new_episode_like->user_id = $request->user_id;
      $new_episode_like->Episode_id = $request->Episode_id;
      $new_episode_like->liked = 1;
      $new_episode_like->disliked = 0;
      $new_episode_like->save();
    }

     $response = array(
      'status'=>'true',
      'liked' => $new_episode_like->liked,
      'disliked' => $new_episode_like->disliked,
      'message'=>'success'
    );

     return response()->json($response, 200);

  }

  public function Episode_dislike(Request $request)
  {

    $user_id = $request->user_id;
    $Episode_id = $request->Episode_id;
    $dislike = $request->dislike;
    $d_like = Likedislike::where("Episode_id",$Episode_id)->where("user_id",$user_id)->count();

    if($d_like > 0){
      $new_Episode_dislike = Likedislike::where("Episode_id",$Episode_id)->where("user_id",$user_id)->first();
      if($dislike == 1){
        $new_Episode_dislike->user_id = $request->user_id;
        $new_Episode_dislike->Episode_id = $request->Episode_id;
        $new_Episode_dislike->liked = 0;
        $new_Episode_dislike->disliked = 1;
        $new_Episode_dislike->save();
      }else{
        $new_Episode_dislike->user_id = $request->user_id;
        $new_Episode_dislike->Episode_id = $request->Episode_id;
        $new_Episode_dislike->disliked = 0;
        $new_Episode_dislike->save();
      }
    }else{
      $new_Episode_dislike = new Likedislike;
      $new_Episode_dislike->user_id = $request->user_id;
      $new_Episode_dislike->Episode_id = $request->Episode_id;
      $new_Episode_dislike->liked = 0;
      $new_Episode_dislike->disliked = 1;
      $new_Episode_dislike->save();
    }

     $response = array(
      'status'=>'true',
      'liked' => $new_Episode_dislike->liked,
      'disliked' => $new_Episode_dislike->disliked,
      'message'=>'success'
    );

     return response()->json($response, 200);
  }

  public function Episode_addfavorite(Request $request){

    try {
      
      $user_id = $request->user_id;
      $episode_id = $request->episode_id;

      if(is_null($episode_id) || is_null($user_id)){

        $response = [
          'status' => 'false',
          'status_code' => 400,
          'message' => 'Validation error - Required episode_id,user_id'
        ];

        return response()->json($response, $response['status_code']);

      }

      $count = Favorite::where('user_id', $user_id)->where('episode_id', $episode_id)->count();

      if ($count > 0) {
          Favorite::where('user_id', $user_id)->where('episode_id', $episode_id)->delete();

          $response = [
              'status' => 'false',
              'status_code' => 200,
              'message' => 'Removed From Your Favorite'
          ];

      } else {
          $data = ['user_id' => $user_id, 'episode_id' => $episode_id];
          Favorite::insert($data);

          $response = [
              'status' => 'true',
              'status_code' => 200,
              'message' => 'Added to Your Favorite'
          ];
      }
    } catch (\Throwable $th) {

      $response = [
        'status' => 'false',
        'status_code' => 400,
        'message' => 'Added to Your Favorite'
      ];
    }

    return response()->json($response, $response['status_code']);
  }

  public function Episode_addwishlist(Request $request)
  {

    $user_id = $request->user_id;
    $episodeid = $request->episodeid;

    if($request->episodeid){
      $count = Wishlist::where('user_id', '=', $user_id)->where('episode_id', '=', $episodeid)->count();
      if ( $count > 0 ) {
        Wishlist::where('user_id', '=', $user_id)->where('episode_id', '=', $episodeid)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Wishlist'
        );
      } else {
        $data = array('user_id' => $user_id, 'episode_id' => $episodeid );
        Wishlist::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added to Your Wishlist'
        );

      }
    }else{

    }

    return response()->json($response, 200);

  }

  public function Episode_addwatchlater(Request $request)
  {

    $user_id = $request->user_id;
    $Episode_id = $request->Episode_id;

    if($request->Episode_id != ''){
      $count = Watchlater::where('user_id', '=', $user_id)->where('Episode_id', '=', $Episode_id)->count();
      if ( $count > 0 ) {
        Watchlater::where('user_id', '=', $user_id)->where('Episode_id', '=', $Episode_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Watch Later'
        );
      } else {
        $data = array('user_id' => $user_id, 'Episode_id' => $Episode_id );
        Watchlater::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added to Your Watch Later'
        );

      }
    }

    return response()->json($response, 200);

  }


  public function PaymentPlan(Request $request)
  {
    $plan_name = $request->plan_name;
    $payment_type = $request->payment_type;

    $plans = SubscriptionPlan::where('plans_name',$plan_name)->where('type',$payment_type)->count();

    if ($plans > 0) {
      $status = "true";
      $plan_id = SubscriptionPlan::where('plans_name',$plan_name)->where('type',$payment_type)->get();
      // $plan_id = SubscriptionPlan::where('plans_name',$plan_name)->where('type',$payment_type)->pluck('plan_id');
    } else {
      $plan_id = [];
      $status = "false";
    }
    $response = array(
      'status' => $status,
      'plan' => $plan_id
    );
    return response()->json($response, 200);
  }

  
  public function Paystack_become_subscriber(Request $request)
  {
    try {
                  
      $paystack_subscription_id = $request->paystack_subscription_id ;
      $userid = $request->user_id ;

          // Verify Subscription API

      $curl = curl_init();

      curl_setopt_array($curl, array(
          CURLOPT_URL => "https://api.paystack.co/subscription/".$paystack_subscription_id,
          CURLOPT_RETURNTRANSFER => true, CURLOPT_ENCODING => "",  CURLOPT_MAXREDIRS => 10, CURLOPT_TIMEOUT => 30, CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
          CURLOPT_CUSTOMREQUEST => "GET", CURLOPT_HTTPHEADER => $this->SecretKey_array,
      ));

      $subscription_respond = curl_exec($curl);
      $subscription_error = curl_error($curl);
      curl_close($curl);

      $verify_subscription = $subscription_error ?  json_decode($subscription_respond, true) : json_decode($subscription_respond, true) ;

          // Verify Payments Status (false)

      if( $verify_subscription['status'] == false ){

          $response = array(
              'status'=>'false',
              'message'=> $verify_subscription['message'] ,
          );  

          return response()->json($response, 200);
      }

          // Subscription Details

      $subcription_details = Paystack::fetchSubscription($paystack_subscription_id) ;

      $Sub_Startday  = Carbon::parse($subcription_details['data']['createdAt'])->setTimezone('UTC')->format('d/m/Y H:i:s'); 
      $Sub_Endday    = Carbon::parse($subcription_details['data']['next_payment_date'] )->setTimezone('UTC')->format('d/m/Y H:i:s'); 
      $trial_ends_at = Carbon::parse($subcription_details['data']['next_payment_date'] )->setTimezone('UTC')->toDateTimeString(); 

          // Subscription Details - Storing

      Subscription::create([
          'user_id'        =>  $userid,
          'name'           =>  $subcription_details['data']['plan']['name'],
          'price'          =>  $subcription_details['data']['amount'] ,   // Amount Paise to Rupees
          'stripe_id'      =>  $subcription_details['data']['subscription_code'] ,
          'stripe_status'  =>  $subcription_details['data']['status'] ,
          'stripe_plan'    =>  $subcription_details['data']['plan']['plan_code'],
          'quantity'       =>  null,
          'countryname'    =>  Country_name(),
          'regionname'     =>  Region_name(),
          'cityname'       =>  city_name(),
          'PaymentGateway' =>  'Paystack',
          'trial_ends_at'  =>  $trial_ends_at,
          'ends_at'        =>  $trial_ends_at,
      ]);

      User::where('id',$userid)->update([
          'role'            =>  'subscriber',
          'stripe_id'       =>  $subcription_details['data']['subscription_code'] ,
          'subscription_start'    =>  $Sub_Startday,
          'subscription_ends_at'  =>  $Sub_Endday,
          'payment_gateway'       =>  'Paystack',
      ]);

      return $response = array('status'=>'true', 'message' => 'Registered Successfully.');
      
    } catch (\Throwable $th) {

      $response = array(
        'status'=>'false',
        'message'=> $th->getMessage() ,
      );  

      return response()->json($response, 200);

    }
  }


  public function RazorpaySubscription(Request $request){

        $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
        $countryName = $geoip->getCountry();
        $regionName = $geoip->getregion();
        $cityName = $geoip->getcity();

        $Plan_Id = $request->plan_id;
        $api    = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

        $planId = $api->plan->fetch($Plan_Id);

        $subscription = $api->subscription->create(array(
        'plan_id' =>  $planId->id,
        'customer_notify' => 1,
        'total_count' => 6,
        ));


        $respond[]=array(
            'razorpaykeyId'  =>  $this->razorpaykeyId,
            'name'           =>  $planId['item']->name,
            'subscriptionId' =>  $subscription->id ,
            'short_url'      =>  $subscription->short_url,
            'currency'       =>  'INR',
            'address'        =>  $cityName,
            'description'    =>  null,
            'countryName'    =>  $countryName,
            'regionName'     =>  $regionName,
            'cityName'       =>  $cityName,
            'PaymentGateway' =>  'razorpay',
        );

        return response()->json([
          'respond' => $respond], 200);
  }

  public function RazorpayStore(Request $request)
  {
          $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
          $countryName = $geoip->getCountry();
          $regionName = $geoip->getregion();
          $cityName = $geoip->getcity();

      try{
            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);
            $subscription = $api->subscription->fetch($request->razorpay_subscription_id);
            $plan_id      = $api->plan->fetch($subscription['plan_id']);
              
            $Sub_Startday  = Carbon::createFromTimestamp($subscription['current_start'])->toDateTimeString(); 
            $Sub_Endday    = Carbon::createFromTimestamp($subscription['current_end'])->toDateTimeString(); 
            $trial_ends_at = Carbon::createFromTimestamp($subscription['current_end'])->toDateTimeString(); 
    

                Subscription::create([
                'user_id'        =>  $request->userId,
                'name'           =>  $plan_id['item']->name,
                'price'          =>  $plan_id['item']->amount / 100,   // Amount Paise to Rupees
                'stripe_id'      =>  $subscription['id'],
                'stripe_status'  =>  $subscription['status'],
                'stripe_plan'    =>  $subscription['plan_id'],
                'quantity'       =>  $subscription['quantity'],
                'countryname'    =>  $countryName,
                'regionname'     =>  $regionName,
                'cityname'       =>  $cityName,
                'PaymentGateway' =>  'Razorpay',
            ]);

            User::where('id',$request->userId)->update([
                'role'                  =>  'subscriber',
                'stripe_id'             =>  $subscription['id'] ,
                'subscription_start'    =>  $Sub_Startday,
                'subscription_ends_at'  =>  $Sub_Endday,
                'payment_gateway'       =>  'Razorpay',
            ]);

              return response()->json([
                'status'  => 'true',
                'Message' => 'Payment Done Successfully'], 200);
          }
        catch (\Exception $e){
          return response()->json([
            'status'  => 'false',
            'Message' => 'While Storing the value on Serve Error'], 200);
      }
  }

  public function RazorpaySubscriptionCancel(Request $request)
  {
    $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

    $subscriptionId = User::where('id',$request->user_id)->pluck('stripe_id')->first();

    $options  = array('cancel_at_cycle_end'  => 0);

    try{
        $api->subscription->fetch($subscriptionId)->cancel($options);

        Subscription::where('stripe_id',$subscriptionId)->update([
            'stripe_status' =>  'Cancelled',
        ]);

        return response()->json([
          'status'  => 'true',
          'Message' => 'Subscription Cancel Successfully'], 200);
      }
      catch (\Exception $e){
        return response()->json([
          'status'  => 'false',
          'Message' => 'Subscription cannot be cancel'], 200);
    }
  }

  public function RazorpaySubscriptionUpdate(Request $request){

    $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
    $countryName = $geoip->getCountry();
    $regionName = $geoip->getregion();
    $cityName = $geoip->getcity();

    $api    = new Api($this->razorpaykeyId, $this->razorpaykeysecret);
    $plan_Id = $api->plan->fetch($request->plan_id);
    $user_id =$request->user_id;

    $subscriptionId  = Subscription::where('user_id',$user_id)->latest()->pluck('stripe_id')->first();

    $subscription = $api->subscription->fetch($subscriptionId);
    $remaining_count  =  $subscription['remaining_count'] ;


    if($subscription->payment_method != "upi"){

      try{
        $options  = array('plan_id'  =>$plan_Id['id'], 'remaining_count' => $remaining_count );
        $api->subscription->fetch($subscriptionId)->update($options);

        $UpdatedSubscription = $api->subscription->fetch($subscriptionId);
        $updatedPlan         = $api->plan->fetch($UpdatedSubscription['plan_id']);

        $Sub_Startday = date('d/m/Y H:i:s', $UpdatedSubscription['current_start']);
        $Sub_Endday = date('d/m/Y H:i:s', $UpdatedSubscription['current_end']);
        $trial_ends_at = Carbon::createFromTimestamp($UpdatedSubscription['current_end'])->toDateTimeString();

        if (is_null($subscriptionId)) {
            return false;
        }
        else{
            Subscription::where('user_id',$user_id)->latest()->update([
                'price'         =>  $updatedPlan['item']->amount,
                'stripe_id'     =>  $UpdatedSubscription['id'],
                'stripe_status' =>  $UpdatedSubscription['status'],
                'stripe_plan'   =>  $UpdatedSubscription['plan_id'],
                'quantity'      =>  $UpdatedSubscription['quantity'],
                'countryname'   =>  $countryName,
                'regionname'    =>  $regionName,
                'cityname'      =>  $cityName,
                'trial_ends_at' => $trial_ends_at,
                'ends_at'       => $trial_ends_at,
        ]);

            User::where('id',$user_id)->update([
                'subscription_start'    =>  $Sub_Startday,
                'subscription_ends_at'  =>  $Sub_Endday,
          ]);
        }
        return response()->json([
          'status'  => 'true',
          'Message' => 'Subscription Updated Successfully'], 200);

        }
          catch (\Exception $e){
            return response()->json([
              'status'  => 'false',
              'Message' => 'upgrade Subscription is fails'], 200);
        }
    }
    else{
      return response()->json([
        'status'  => 'fails',
        'Message' => 'Subscription Updated cannot done for UPI payment'], 200);}
}

public function AdsView(Request $request)
{
    $ads_videos = AdsVideo::where('ads_videos.video_id',$request->videoid)
    ->join('advertisements', 'ads_videos.ads_id', '=', 'advertisements.id')
    ->orderBy('created_at', 'desc')
    ->first();

    AdvertisementView::create([
      'user_id'  => $request->user_id,
      'video_id' => $request->videoid,
      'ads_id' => $ads_videos->ads_id,
    ]);

      if($request->status == "seen"){

        $Video = Video::find($request->videoid);
        $Video->ads_status = '1';
        $Video->update();

        $message = 1;

      }else{
        $message = 0;
      }

    return response()->json([
      'status'  => $message ,
      'Message' => 'Ads video'], 200);

}

public function Adstatus_upate(Request $request)
{
    $Video = Video::find($request->videoid);
    $Video->ads_status = '0';
    $Video->update();

    return response()->json([
      'status'  => 'true',
      'Message' => 'Ads status changed Successfully'], 200);
}

   public function profileimage_default()
{
    $image_default = URL::to('/public/uploads/avatars/defaultprofile.png');

    return response()->json([
      'status'  => 'true',
      'Message' =>  $image_default], 200);
   }

  public function homesetting()
  {
      // $homesetting = HomeSetting::first();
      $homesetting = MobileHomeSetting::first();

      return $homesetting;
  }

  public function PPVVideodetails(Request $request){

    $ppv_videos = PpvPurchase::Join('videos','videos.id','=','ppv_purchases.video_id')
                  ->where('ppv_purchases.user_id',$request->user_id)->orderBy('ppv_purchases.created_at', 'desc')->get()->map(function ($item) {
                        $item['video_image'] = URL::to('/').'/public/uploads/images/'.$item->image;
                        $item['videoExpired_date'] = Carbon::parse($item->to_time)->format('d-m-Y');
                        $item['videoExpired_time'] = Carbon::parse($item->to_time)->format('g:i:s A');
                        $video_exp = Carbon::now()->diffForHumans($item->to_time);
                        $Exp = Str::contains($video_exp, 'after');
                        if($Exp != 'true'){
                          $videoExpired= Carbon::now()->diffForHumans($item->to_time);
                          $item['videoExpired'] = "Expires in " . str_replace('before', '',  $videoExpired);
                        }
                        else{
                          $item['videoExpired'] = 'Expired';
                        }
                      return $item;
                  });


      return response()->json([
        'status'  => 'true',
        'PPVvideo' =>  $ppv_videos], 200);
    }


    public function PPVVideocount(Request $request){

      $videoid =  $request->videoid;
      $userid = $request->userid;
      $purchase =  PpvPurchase::where('video_id',$videoid)->where('user_id',$userid)->first();
      if($purchase->view_count == null || $purchase->view_count < 0){
          // print_r('1');exit;
          $purchase->view_count = 1;
           $purchase->save();
          $response = array(
            'status'=>'false',
            'video'=> 'Added',
        );
      }elseif($purchase->view_count > 0){
          $response = array(
            'status'=>'false',
            'video'=> 'exit already',
        );
      }else{
          $response = array(
            'status'=>'false',
            'video'=> 'exit already',
        );
      }

        return response()->json([
          'status'  => 'true',
          'response' =>  $response], 200);
        return response()->json($response, 200);

      }


      public function PPVVideorent(Request $request){

        $current_date = date('Y-m-d h:i:s a', time());

        $videoid =  $request->videoid;
        $userid = $request->userid;
        $ppvexist = PpvPurchase::where('video_id',$videoid)
        ->orderBy('created_at', 'DESC')
        ->where('user_id',$userid)
        ->count();
        $ppv_video = PpvPurchase::where('video_id',$videoid)
        ->orderBy('created_at', 'DESC')
        ->where('user_id',$userid)
        ->first();
        if($ppvexist > 0 && $ppv_video->view_count > 0 && $ppv_video->view_count != null){
          $ppv_exist = PpvPurchase::where('video_id',$videoid)
          ->where('user_id',$userid)
          ->where('status','active')
          ->where('to_time','>',$current_date)
          ->count();

                if($ppv_exist > 0){
                  $ppv_data = PpvPurchase::where('video_id',$videoid)
                  ->where('user_id',$userid)
                    ->orderBy('created_at', 'DESC')
                  ->first();
                $to_time = $ppv_data->to_time;

                $stop_date = date('Y-m-d', strtotime($to_time));
                $currentdate = date('Y-m-d');
                $days = (strtotime($stop_date) - strtotime($currentdate)) / (60 * 60 * 24);
                if(!empty($days)){
                $remaining_count =  $days.' '.'days remaining';
                }else{
                  $remaining_count = '';
                }
                $response = array(
                  'status'=> true,
                  'ppv_exist_status'=> $ppv_data,
                  'days'=> $days,
                  'remaining_count'=> $remaining_count,
                  'can_view'=> 'can_view',

              );
              }else{
                $response = array(
                  'status'=> true,
                  'ppv_exist_status'=> $ppv_exist,
                  'days'=> $days,
                  'can_view'=> 'can_view',

              );
              }
        }elseif($ppvexist > 0 && $ppv_video->view_count == null){
          $ppv_exist = PpvPurchase::where('video_id',$videoid)
          ->where('user_id',$userid)
            // ->where('status','active')
            // ->where('to_time','>',$current_date)
            ->orderBy('created_at', 'DESC')
          ->first();
          $createdat = $ppv_exist->created_at;
          $date1 = date('Y-m-d',strtotime($createdat));
          $to_time = $ppv_exist->to_time;
          $stop_date = date('Y-m-d', strtotime($date1. ' + 7 day'));
          $currentdate = date('Y-m-d');
          $days = (strtotime($stop_date) - strtotime($currentdate)) / (60 * 60 * 24);
          if(!empty($days)){
            $remaining_count =  $days.' '.'days remaining';
            }else{
              $remaining_count = '';
            }
            $response = array(
            'status'=> true,
            'ppv_exist_status'=> $ppv_exist,
            'days'=> $days,
            'remaining_count'=> $remaining_count,
            'can_view'=> 'can_view',
        );
        }
        else{
          $ppv_exist = 0;
          $response = array(
            'status'=>'false',
            'ppv_exist_status'=> 'Pay Now',
            'pay_now'=> 'pay_now',

        );
        }

         return response()->json($response, 200);

        }


        public function HomepageOrder(Request $request){
          // HomepageOrder

        $homepage_order = OrderHomeSetting::select('id','header_name')->get()->toArray();
        $mobile_homepage = MobileHomeSetting::first();
        $homesetting = HomeSetting::first();
        // dd($homesetting );
        $response = array(
          'status'  => 'true',
          'homesetting'=> $homesetting,
          'mobile_homepage' =>  $mobile_homepage,
          'homepage_order' =>  $homepage_order,
      );
      return $response;


          }

          public function audioscategory(Request $request){

            $audiocategoryid =  $request->audiocategoryid;
            $userid = $request->userid;

    $audiocategories = AudioCategory::select('id','image')->where('id','=',$audiocategoryid)->get()->toArray();
    $myData = array();

    $audio_category= Audio::Join('category_audios','category_audios.audio_id','=','audio.id')
    ->where('category_audios.category_id',$audiocategoryid)
    // ->where('active','=',1)->where('status','=',1)
    ->orderBy('audio.created_at', 'desc')->get()->map(function ($item) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
      return $item;
    });

    foreach ($audiocategories as $key => $audiocategory) {
      $audiocategoryid = $audiocategory['id'];
      $genre_image = $audiocategory['image'];
      $audio = Audio::Join('category_audios','category_audios.audio_id','=','audio.id')
      ->where('category_audios.category_id',$audiocategoryid)
      // ->where('active','=',1)->where('status','=',1)
      ->orderBy('audio.created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });
      $categorydetails = AudioCategory::where('id','=',$audiocategoryid)->first();

      if(count($audio_category) > 0){
        $msg = 'success';
        $status = 'True';
      }else{
        $msg = 'nodata';
        $status = 'False';
      }
      if(count($audio) > 0){
        $msg = 'success';
        $status = 'True';
      }else{
        $msg = 'nodata';
        $status = 'False';
      }
      $myData[] = array(
        "genre_name"   => $categorydetails->name,
        "genre_id"   => $audiocategoryid,
        "genre_image"   => URL::to('/').'/public/uploads/audios/'.$genre_image,
        "message" => $msg,
        "audio" => $audio,
        "audio_category"   => $audio_category,
      );

    }

    $AudioCategory = AudioCategory::where('id','=',$audiocategoryid)->first();

    $response = array(
      'status' => $status ,
      'main_genre' => $AudioCategory->name,
      'categoryaudio' => $audio
    );
    return response()->json($response, 200);

            }


        public function LiveCategorylist(Request $request)
        {
          $LiveCategory_count = LiveCategory::get()->count();

            if($LiveCategory_count > 0){
              $LiveCategory = LiveCategory::all();
              $LiveCategory = LiveCategory::get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/livecategory/'.$item->image;
                return $item;
              });
              foreach($LiveCategory as $val){

                $livestream[$val->name] = LiveStream::Join('livecategories','livecategories.live_id','=','live_streams.id')
                ->where('livecategories.category_id',$val->id)
                // ->where('active','=',1)->where('status','=',1)
                ->orderBy('live_streams.created_at', 'desc')->get()->map(function ($item) {
                  $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                  $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
                  return $item;
                });

                  $response = array(
                'status'=>'true',
                'LiveCategory'=>$LiveCategory,
                'livestream'=>$livestream,
            );
          }
          }else{
            $response = array(
              'status'=>'false',
              'LiveCategory'=> 'No Live Category Added',
              'livestream'=>'No Live Stream Added',
          );
          }
            return response()->json($response, 200);
        }

  public function livecategory(Request $request){

      $live_category_id =  $request->live_category_id;
      $userid = $request->userid;

      $livecategories = LiveCategory::select('id','image')->where('id','=',$live_category_id)->get()->toArray();
      $myData = array();

      $live_category= LiveStream::Join('livecategories','livecategories.live_id','=','live_streams.id')
      ->where('livecategories.category_id',$live_category_id)
      ->where('active','=',1)->where('status','=',1)
      ->orderBy('live_streams.created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      foreach ($livecategories as $key => $livecategory) {
        $livecategoryid = $livecategory['id'];
        $genre_image = $livecategory['image'];
        $livestream = LiveStream::Join('livecategories','livecategories.live_id','=','live_streams.id')
        ->where('livecategories.category_id',$livecategoryid)
        ->where('active','=',1)->where('status','=',1)
        ->orderBy('live_streams.created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          return $item;
        });
        $categorydetails = LiveCategory::where('id','=',$livecategoryid)->first();

        if(count($live_category) > 0){
          $msg = 'success';
          $status = 'True';
        }else{
          $msg = 'nodata';
          $status = 'False';
        }
        if(count($livestream) > 0){
          $msg = 'success';
          $status = 'True';
        }else{
          $msg = 'nodata';
          $status = 'False';
        }
        $myData[] = array(
          "genre_name"   => $categorydetails->name,
          "genre_id"   => $live_category_id,
          "genre_image"   => URL::to('/').'/public/uploads/audios/'.$genre_image,
          "message" => $msg,
          "livestream" => $livestream,
          "live_category"   => $live_category,
        );

      }

      $LiveCategory = LiveCategory::where('id','=',$live_category_id)->first();

      $response = array(
        'status' => $status ,
        'main_genre' => $LiveCategory->name,
        'categorylivestream' => $livestream
      );
      return response()->json($response, 200);

  }

  public function andriod_slider()
  {
    $sliders = Slider::where('active', '=', 1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
      $item['slider'] = URL::to('/').'/public/uploads/videocategory/'.$item->slider;
      $item['player_image'] = URL::to('/').'/public/uploads/videocategory/'.$item->player_image;
      $item['source'] = "Admin_slider";
      return $item;
    });

    $banners = Video::where('active','=',1)->where('status','=',1)->where('banner', '=', 1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
      $item['video_url'] = URL::to('/').'/storage/app/public/';
      $item['source'] = "videos_slider";
      return $item;
    });

    $live_banner = LiveStream::where('active','=',1)->where('banner', '=', 1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
      $item['source'] = "Livestreams_slider";
      return $item;
    });
    
    $series_banner = Series::where('active','=',1)->where('banner',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
      $item['source'] = "series_slider";
      return $item;
    });

    $audio_banner = Audio::where('active','=',1)->where('banner',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
      $item['source'] = "audio_slider";
      return $item;
    });

    $response = array(
      'status' => 'true',
      'sliders' => $sliders,
      'video_banner' => $banners,
      'live_banner'  => $live_banner,
      'series_banner' => $series_banner,
      'audio_banner' => $audio_banner,
    );
    return response()->json($response, 200);
  }

  public function theme_primary_color(Request $request)
  {

    $button_color = SiteTheme::pluck('button_bg_color')->first();

    if($button_color != null){
        $button_bg_color =  $button_color ;
    }else{
        $button_bg_color =  '#006AFF' ;
    }
    $response = array(
      'status' => 'true' ,
      'theme_primary_color' => $button_bg_color,

    );

    return response()->json($response, 200);
  }



  public function PlayerAnalytics(Request $request)
  {

    $user_id = $request->user_id;
    $videoid =  $request->videoid;
    $duration =  $request->duration;
    $currentTime = $request->currentTime;
    $bufferedTime = $request->bufferedTime;
    $seekTime = $request->seekTime;
    $countryName = $request->country_name;
    $state_name = $request->state_name;
    $city_name = $request->city_name;
    $watch_percentage = ($currentTime * 100 / $duration);


    if($currentTime != 0){

      $player = new PlayerAnalytic;
      $player->videoid = $videoid;
      $player->user_id = $user_id;
      $player->duration = $duration;
      $player->currentTime = $currentTime;
      $player->watch_percentage = $watch_percentage;
      $player->seekTime = $seekTime;
      $player->bufferedTime = $bufferedTime;
      $player->country_name = $countryName;
      $player->state_name = $state_name;
      $player->city_name = $city_name;
      $player->save();

    $response = array(
      'status' => 'true' ,
      'message' => 'Added to Analytics',

    );
  }else{

    $response = array(
      'status' => 'false' ,
      'message' => 'not added',

    );
  }


    return response()->json($response, 200);
  }

  public function SocialSetting(Request $request)
  {

    $socialsetting = SystemSetting::first();

    if($socialsetting != null){
        $socialsetting =  SystemSetting::get() ;
    }else{
        $socialsetting =  'No data' ;
    }
    $response = array(
      'status' => 'true' ,
      'socialsetting' => $socialsetting,

    );

    return response()->json($response, 200);
  }


  public function add_livepayperview(Request $request)
  {
    $payment_type = $request->payment_type;
    $video_id = $request->video_id;
    $user_id = $request->user_id;
    $daten = date('Y-m-d h:i:s a', time());
    $setting = Setting::first();
    $ppv_hours = $setting->ppv_hours;
    $date = Carbon::parse($daten)->addHour($ppv_hours);
    $user = User::find($user_id);
    if($payment_type == 'stripe'){

    $paymentMethod = $request->get('py_id');
    $payment_settings = PaymentSetting::first();

    $pay_amount = PvvPrice();
    $pay_amount = $pay_amount*100;
    $charge = $user->charge($pay_amount, $paymentMethod);
    if($charge->id != ''){
      $ppv_count = DB::table('ppv_purchases')->where('video_id', '=', $video_id)->where('user_id', '=', $user_id)->count();
      if ( $ppv_count == 0 ) {
        DB::table('ppv_purchases')->insert(
          ['user_id' => $user_id ,'video_id' => $video_id,'to_time' => $date ]
        );
        send_password_notification('Notification From ' . GetWebsiteName(),'You have rented a video','You have rented a video','',$user_id);
      } else {
        DB::table('ppv_purchases')->where('video_id', $video_id)->where('user_id', $user_id)->update(['to_time' => $date]);
      }

      $response = array(
        'status' => 'true',
        'message' => "video has been added"
      );
    }else{
      $response = array(
        'status' => 'false',
        'message' => "Payment Failed"
      );
    }
    }elseif ($payment_type == 'razorpay' || $payment_type == 'paypal'|| $payment_type == 'Applepay'|| $payment_type == 'recurring') {
      $ppv_count = DB::table('live_purchases')->where('video_id', '=', $video_id)->where('user_id', '=', $user_id)->count();
      if ( $ppv_count == 0 ) {
        DB::table('live_purchases')->insert(
          ['user_id' => $user_id ,'video_id' => $video_id,'to_time' => $date ,'expired_date' => $date]
        );
      } else {
        DB::table('live_purchases')->where('video_id', $video_id)->where('user_id', $user_id)->update(['to_time' => $date,'expired_date' => $date]);
      }

      $response = array(
        'status' => 'true',
        'message' => "video has been added"
      );
    }

    return response()->json($response, 200);

  }

  public function ContinueWatchingExits(Request $request)
  {
    try {
          // Validation 
      
      $validator = Validator::make($request->all(), [
        'user_id' => 'required',  
        'video_id'   => 'required_without:episode_id',  
        'episode_id' => 'required_without:video_id',
      ], [
          'user_id.required'    => 'Please enter your user_id.',
          'video_id.required'   => 'Please enter your video_id.',
          'episode_id.required'   => 'Please enter your episode_id.',
      ]);
      
      if ($validator->fails()) {

        return response()->json([
            'status' => 'false',
            'message'=> $validator->errors()->first(),
          ], 400);
      }

      $user_id = $request->user_id;
      $video_id = $request->video_id;
      $episode_id = $request->episode_id;
  
      $ContinueWatching = array();
  
      if( $episode_id ){
        $ContinueWatching = ContinueWatching::where('episodeid', $episode_id)->where('user_id', $user_id)->get();
      }
  
      if( $video_id ){
        $ContinueWatching = ContinueWatching::where('videoid', $video_id)->where('user_id', $user_id)->get();
      }
  
      if(!empty($ContinueWatching)) {

          $response = [
            'status' => 'true',
            'status_code' => 200,
            'ContinueWatching' => $ContinueWatching,
          ];

      } else {
        
          $response = [
            'status' => 'false',
            'status_code' => 400,
            'ContinueWatching' => $ContinueWatching,
          ];
      }
  
    } catch (\Throwable $th) {

      $response = [
        'status'      => 'false',
        'status_code' => 400,
        'message'     => $th->getMessage(),
      ];

    }
    
    return response()->json($response, $response['status_code']);
  }

  public function audio_like(Request $request)
  {
      $user_id = $request->user_id;
      $audio_id = $request->audio_id;
      $like = $request->like;
      $d_like = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->count();


      if($d_like > 0){
        $new_audio_like = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->first();
        if($like == 1){
          $new_audio_like->user_id = $request->user_id;
          $new_audio_like->audio_id = $request->audio_id;
          $new_audio_like->liked = 1;
          $new_audio_like->disliked = 0;
          $new_audio_like->save();
        }else{
          $new_audio_like->user_id = $request->user_id;
          $new_audio_like->audio_id = $request->audio_id;
          $new_audio_like->liked = 0;
          $new_audio_like->save();
        }
      }else{
        $new_audio_like = new Likedislike;
        $new_audio_like->user_id = $request->user_id;
        $new_audio_like->audio_id = $request->audio_id;
        $new_audio_like->liked = 1;
        $new_audio_like->disliked = 0;
        $new_audio_like->save();
      }

      $response = array(
        'status'=>'true',
        'liked' => $new_audio_like->liked,
        'disliked' => $new_audio_like->disliked,
        'message'=>'success'
      );

      return response()->json($response, 200);
  }

  public function audio_dislike(Request $request)
  {

    $user_id = $request->user_id;
    $audio_id = $request->audio_id;
    $dislike = $request->dislike;
    $d_like = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->count();

    if($d_like > 0){
      $new_audio_dislike = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->first();
      if($dislike == 1){
        $new_audio_dislike->user_id = $request->user_id;
        $new_audio_dislike->audio_id = $request->audio_id;
        $new_audio_dislike->liked = 0;
        $new_audio_dislike->disliked = 1;
        $new_audio_dislike->save();
      }else{
        $new_audio_dislike->user_id = $request->user_id;
        $new_audio_dislike->audio_id = $request->audio_id;
        $new_audio_dislike->disliked = 0;
        $new_audio_dislike->save();
      }
    }else{
      $new_audio_dislike = new Likedislike;
      $new_audio_dislike->user_id = $request->user_id;
      $new_audio_dislike->audio_id = $request->audio_id;
      $new_audio_dislike->liked = 0;
      $new_audio_dislike->disliked = 1;
      $new_audio_dislike->save();
    }

     $response = array(
      'status'=>'true',
      'liked' => $new_audio_dislike->liked,
      'disliked' => $new_audio_dislike->disliked,
      'message'=>'success'
    );

     return response()->json($response, 200);

  }

  public function audio_shufffle(Request $request)
  {

    try {

      $album_id = $request->album_id;

      $audios_count = Audio::where('album_id',$album_id)->get();

      $audio_album_id = Audio::Select('audio_albums.*')
                      ->Join('audio_albums','audio_albums.id','=','audio.album_id')
                      ->groupBy('id')->inRandomOrder()->pluck('id')->first();


        if(count($audios_count) > 0 ){

          // $audios = Audio::where('album_id',$album_id)->inRandomOrder()->get();
          
          $audios = Audio::where('album_id',$audio_album_id)->inRandomOrder()->where('status','=','1')->where('active','=','1')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                        if($item->lyrics_json != null){
          $item['lyrics_json'] = json_decode($item->lyrics_json)  ;
          }else{
            $item['lyrics_json'] = null  ;
          }
              return $item;
          });
          
        }
        else{
          // $audios = Audio::where('album_id',$audio_album_id)->inRandomOrder()->get();

          $audios = Audio::where('album_id',$audio_album_id)->inRandomOrder()->where('status','=','1')->where('active','=','1')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                        if($item->lyrics_json != null){
          $item['lyrics_json'] = json_decode($item->lyrics_json)  ;
          }else{
            $item['lyrics_json'] = null  ;
          }
              return $item;
          });

        }

      $status = true;

    }
    catch (\Throwable $th) {
       $status = false;
    }

    $response = array(
      'status'=> $status,
      'audio_shufffle' => $audios,
    );

     return response()->json($response, 200);
  }

  public function Audiolike_ios(Request $request)
  {
    $user_id = $request->user_id;
    $audio_id = $request->audio_id;

    $like_count = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->count();
    $like_counts = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->where('liked','=' ,'1')->count();
    $unlike_count = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->where('liked', 0)->count();

    if($like_count > 0){

      if($like_counts > 0){
        Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->where('liked','=' ,'1')
        ->update([
                'user_id'  => $user_id ,
                'audio_id' => $audio_id ,
                'liked'    => '0' ,
                'disliked'    => '0',
              ]);

      }elseif( $unlike_count > 0){
          Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->where('liked',0)
          ->update([
                  'user_id'  => $user_id ,
                  'audio_id' => $audio_id ,
                  'liked'    => '1' ,
                  'disliked'    => '0',
                ]);
      }

    }
    else{
        Likedislike::create([
          'user_id'  => $user_id ,
          'audio_id' => $audio_id ,
          'liked'    => '1' ,
          'disliked'    => '0' ,
        ]);
    }

    $response = array(
      'status'=>'true',
      'like'  =>  Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->pluck('liked')->first(),
      'dislike'  =>   Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->pluck('disliked')->first(),
    );

    return response()->json($response, 200);

  }

  public function Audiodislike_ios(Request $request)
  {
      $user_id = $request->user_id;
      $audio_id = $request->audio_id;

      $dislike_count = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->count();
      $dislike_counts = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->where('disliked',1)->count();
      $undislike_count = Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->where('disliked', 0)->count();

      if($dislike_count > 0){

        if($dislike_counts > 0){
          Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->where('disliked','=' ,'1')
          ->update([
                  'user_id'  => $user_id ,
                  'audio_id' => $audio_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $undislike_count > 0){
            Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->where('disliked',0)
            ->update([
                    'user_id'  => $user_id ,
                    'audio_id' => $audio_id ,
                    'liked'    => '0' ,
                    'disliked'    => '1',
                  ]);
        }


      }else{
          Likedislike::create([
            'user_id'  => $user_id ,
            'audio_id' => $audio_id ,
            'liked'    => '0',
            'disliked'    => '1',
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("audio_id",$audio_id)->where("user_id",$user_id)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }

  public function ReelsVideo(){

    $reel_videos = Video::Join('reelsvideo','reelsvideo.video_id','=','videos.id')
    ->get()->map(function ($item) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['video_url'] = URL::to('/').'/storage/app/public/';
      $item['reelvideo_url'] = URL::to('/').'/public/uploads/reelsVideos/shorts/'.$item->reelvideo;
      $item['pdf_files_url'] = URL::to('/').'/public/uploads/videoPdf/'.$item->pdf_files;
      $item['mobile_image_url'] = URL::to('/').'/public/uploads/images/'.$item->mobile_image;
      $item['tablet_image_url'] = URL::to('/').'/public/uploads/images/'.$item->tablet_image;
      $item['reel_videos'] =  URL::to('public/uploads/reelsVideos').'/'.$item->reels_videos;
      return $item;
    });


    $response = array(
      'status'=>'true',
      'Reel_videos'  =>  $reel_videos,
    );

    return response()->json($response, 200);
  }

  public function Videolike_ios(Request $request)
  {
    $user_id = $request->user_id;
    $video_id = $request->video_id;

    $like_count = Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->count();
    $like_counts = Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->where('liked','=' ,'1')->count();
    $unlike_count = Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->where('liked', 0)->count();

    if($like_count > 0){

      if($like_counts > 0){
        Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->where('liked','=' ,'1')
        ->update([
                'user_id'  => $user_id ,
                'video_id' => $video_id ,
                'liked'    => '0' ,
                'disliked'    => '0',
              ]);

      }elseif( $unlike_count > 0){
          Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->where('liked',0)
          ->update([
                  'user_id'  => $user_id ,
                  'video_id' => $video_id ,
                  'liked'    => '1' ,
                  'disliked'    => '0',
                ]);
      }

    }
    else{
        Likedislike::create([
          'user_id'  => $user_id ,
          'video_id' => $video_id ,
          'liked'    => '1' ,
          'disliked'    => '0' ,
        ]);
    }

    $response = array(
      'status'=>'true',
      'like'  =>  Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->pluck('liked')->first(),
      'dislike'  =>   Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->pluck('disliked')->first(),
    );

    return response()->json($response, 200);

  }

  public function Videodislike_ios(Request $request)
  {
      $user_id = $request->user_id;
      $video_id = $request->video_id;

      $dislike_count = Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->count();
      $dislike_counts = Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->where('disliked',1)->count();
      $undislike_count = Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->where('disliked', 0)->count();

      if($dislike_count > 0){

        if($dislike_counts > 0){
          Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->where('disliked','=' ,'1')
          ->update([
                  'user_id'  => $user_id ,
                  'video_id' => $video_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $undislike_count > 0){
            Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->where('disliked',0)
            ->update([
                    'user_id'  => $user_id ,
                    'video_id' => $video_id ,
                    'liked'    => '0' ,
                    'disliked'    => '1',
                  ]);
        }


      }else{
          Likedislike::create([
            'user_id'  => $user_id ,
            'video_id' => $video_id ,
            'liked'    => '0',
            'disliked'    => '1',
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("video_id",$video_id)->where("user_id",$user_id)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }




  public function Episodelike_ios(Request $request)
  {
    $user_id = $request->user_id;
    $episode_id = $request->episode_id;

    $like_count = Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->count();
    $like_counts = Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->where('liked','=' ,'1')->count();
    $unlike_count = Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->where('liked', 0)->count();

    if($like_count > 0){

      if($like_counts > 0){
        Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->where('liked','=' ,'1')
        ->update([
                'user_id'  => $user_id ,
                'episode_id' => $episode_id ,
                'liked'    => '0' ,
                'disliked'    => '0',
              ]);

      }elseif( $unlike_count > 0){
          Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->where('liked',0)
          ->update([
                  'user_id'  => $user_id ,
                  'episode_id' => $episode_id ,
                  'liked'    => '1' ,
                  'disliked'    => '0',
                ]);
      }

    }
    else{
        Likedislike::create([
          'user_id'  => $user_id ,
          'episode_id' => $episode_id ,
          'liked'    => '1' ,
          'disliked'    => '0' ,
        ]);
    }

    $response = array(
      'status'=>'true',
      'like'  =>  Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->pluck('liked')->first(),
      'dislike'  =>   Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->pluck('disliked')->first(),
    );

    return response()->json($response, 200);

  }

  public function Episodedislike_ios(Request $request)
  {
      $user_id = $request->user_id;
      $episode_id = $request->episode_id;

      $dislike_count = Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->count();
      $dislike_counts = Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->where('disliked',1)->count();
      $undislike_count = Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->where('disliked', 0)->count();

      if($dislike_count > 0){

        if($dislike_counts > 0){
          Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->where('disliked','=' ,'1')
          ->update([
                  'user_id'  => $user_id ,
                  'episode_id' => $episode_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $undislike_count > 0){
            Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->where('disliked',0)
            ->update([
                    'user_id'  => $user_id ,
                    'episode_id' => $episode_id ,
                    'liked'    => '0' ,
                    'disliked'    => '1',
                  ]);
        }


      }else{
          Likedislike::create([
            'user_id'  => $user_id ,
            'episode_id' => $episode_id ,
            'liked'    => '0',
            'disliked'    => '1',
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("episode_id",$episode_id)->where("user_id",$user_id)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }

  public function live_like_ios(Request $request)
  {
      $user_id = $request->user_id;
      $live_id = $request->live_id;

      $like_count = Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->count();
      $like_counts = Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->where('liked','=' ,'1')->count();
      $unlike_count = Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->where('liked', 0)->count();

      if($like_count > 0){

        if($like_counts > 0){
          Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->where('liked','=' ,'1')
          ->update([
                  'user_id'  => $user_id ,
                  'live_id' => $live_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $unlike_count > 0){
            Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->where('liked',0)
            ->update([
                    'user_id'  => $user_id ,
                    'live_id' => $live_id ,
                    'liked'    => '1' ,
                    'disliked'    => '0',
                  ]);
        }

      }
      else{
          Likedislike::create([
            'user_id'  => $user_id ,
            'live_id' => $live_id ,
            'liked'    => '1' ,
            'disliked'    => '0' ,
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }

  public function live_dislike_ios(Request $request)

  {
      $user_id = $request->user_id;
      $live_id = $request->live_id;

      $dislike_count = Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->count();
      $dislike_counts = Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->where('disliked',1)->count();
      $undislike_count = Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->where('disliked', 0)->count();

      if($dislike_count > 0){

        if($dislike_counts > 0){
          Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->where('disliked','=' ,'1')
          ->update([
                  'user_id'  => $user_id ,
                  'live_id' => $live_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $undislike_count > 0){
            Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->where('disliked',0)
            ->update([
                    'user_id'  => $user_id ,
                    'live_id' => $live_id ,
                    'liked'    => '0' ,
                    'disliked'    => '1',
                  ]);
        }


      }else{
          Likedislike::create([
            'user_id'  => $user_id ,
            'live_id' => $live_id ,
            'liked'    => '0',
            'disliked'    => '1',
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("live_id",$live_id)->where("user_id",$user_id)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }

  public function live_addwatchalter(Request $request)
    {
        $user_id = $request->user_id;
        $live_id = $request->live_id;

        try {
            if($live_id != ''){
              $count = Watchlater::where('user_id', '=', $user_id)->where('live_id', '=', $live_id)->count();

            if( $count > 0 ) {

                Watchlater::where('user_id', '=', $user_id)->where('live_id', '=', $live_id)->delete();
                $status = "true";
                $message = "Removed live video From Your Watch Later List";
            }
            else {

                $data = array('user_id' => $user_id, 'live_id' => $live_id );
                Watchlater::Create($data);
                $status = "true";
                $message = "Added live video to Your Watch Later List";
            }
          }
        }
        catch (\Throwable $th) {
            $status = "false";
            $message = $th->getMessage();
        }

        $response = array(
          'status' => $status ,
          'message'=> $message,
        );

        return response()->json($response, 200);
    }

  public function home_categorylist(Request $request)
  {

    // $videocategories = VideoCategory::select('id','image')->where('in_home',1)->get()->toArray();
    $videocategories = VideoCategory::join('categoryvideos','video_categories.id', '=' ,'categoryvideos.category_id')->distinct()->select('video_categories.id','video_categories.image','video_categories.order')
    ->where('video_categories.in_home',1)->get()->toArray();

    $myData = array();

    foreach ($videocategories as $key => $videocategory) {
      $videocategoryid = $videocategory['id'];
      $genre_image = $videocategory['image'];

      $videos= Video::Join('categoryvideos','categoryvideos.video_id','=','videos.id')->where('categoryvideos.category_id',$videocategoryid)
                  ->where('active','=',1)->where('status','=',1)->where('draft','=',1);
                  if(Geofencing() !=null && Geofencing()->geofencing == 'ON')
                  {
                    $videos = $videos  ->whereNotIn('videos.id',Block_videos());
                  }
                  $videos =$videos->orderBy('videos.created_at', 'desc')->get()->map(function ($item) {
                    $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                    $item['video_url'] = URL::to('/').'/storage/app/public/';
                    $item['category_name'] = VideoCategory::where('id',$item->category_id)->pluck('slug')->first();
                    return $item;
        });

      $main_genre = CategoryVideo::Join('video_categories','video_categories.id','=','categoryvideos.category_id')->get('name');

      foreach($main_genre as $value){
        $category[] = $value['name'];
      }

        if(!empty($category)){
          $main_genre = implode(",",$category);
        }else{
          $main_genre = "";
        }

        if(count($videos) > 0){
          $msg = 'success';
        }else{
          $msg = 'nodata';
        }

      $myData[] = array(
        "message" => $msg,
        'gener_name' =>  VideoCategory::where('id',$videocategoryid)->pluck('name')->first(),
        'home_genre' =>  VideoCategory::where('id',$videocategoryid)->pluck('home_genre')->first(),
        'gener_id' =>  VideoCategory::where('id',$videocategoryid)->pluck('id')->first(),
        "videos" => $videos
      );
    }

    $response = array(
      'status' => 'true',
      'genre_movies' => $myData,
      'main_genre' => $msg,
      'main_genre' => $main_genre,
    );

    return response()->json($response, 200);
  }

  public function Currency_setting()
  {

    $response = array(
      'status' => 'true',
      'Currency_Setting' => CurrencySetting::all() ,
    );

    return response()->json($response, 200);
  }

  public function MobileSideMenu()
  {

    $response = array(
      'status' => 'true',
      'MobileSideMenu' => MobileSideMenu::orderBy('order')->get() ,
    );

    return response()->json($response, 200);
  }


  public function Series_SeasonsEpisodes(Request $request)
  {


    $series_id = $request->series_id;
    $season_id = $request->season_id;

    $episodes = Episode::where('series_id',$series_id)->where('season_id',$season_id)->where('active','1')
    ->orderBy('episode_order')->get()->map(function ($item) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['episode_order'] = 'Episode '.$item->episode_order;
      return $item;
    });
    $response = array(
      'status' => 'true',
      'episodes' => $episodes,
    );

    return response()->json($response, 200);
  }


  public function relatedseries(Request $request)
  {

    try {
      
          $series_id = $request->series_id;

          $series = Series::where('id','!=', $series_id)->where('active','=',1)->inRandomOrder()->get()->map(function ($item) {
            $item['image'] = URL::to('public/uploads/images/'.$item->image);
            $item['season_count'] = SeriesSeason::where('series_id',$item->id)->count();
            $item['episode_count'] = Episode::where('series_id',$item->id)->count();
            return $item;
          });

          $response = array(
            'status' => 'true',
            'message' => 'Retreive the Related Series Successfully' ,
            'series' => $series,
          );

    } catch (\Throwable $th) {

          $response = array(
            'status' => 'false',
            'message' => $th->getMessage() ,
          );
    }

    

    return response()->json($response, 200);
  }


  public function relatedlive(Request $request)
  {

    $live_id = $request->live_id;

    $livestream = LiveStream::where('id','!=', $live_id)
      ->get()->map(function ($item) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      return $item;
    });
    $response = array(
      'status' => 'true',
      'livestream' => $livestream,
    );

    return response()->json($response, 200);
  }

  public function cpanelstorage(Request $request)
  {


    $Domain_Name = "domain";
    $username    = 'manoj';
    $password    = 't94d24w32F8W';
    $host    = '75.119.145.126';
    $port = '2083';

    $user = "user";
    $domain = "domain.com";
   // Instantiate the CPANEL object.
  //  require_once "/usr/local/cpanel/php/cpanel.php";

   require('cpanel/cpanel/cPanel.php');

    // establish connection to CPanel
    $cpanel = new CPANEL();
    // get email account informations
    $response = $cpanel->uapi(
        'Email',
       'get_disk_usage',
           array (
              //  'user' => $user,
              //  'domain' => $domain,
               'name'       => 'manoj_'.$Domain_Name,
               'password'   => 'CHennai@01',
           )
       );

// Handle the response
if ($response['cpanelresult']['result']['status']) {
    $data = $response['cpanelresult']['result']['data'];
    // Do something with the $data
}
else {
    // Report errors and do things
}
// Disconnect from cPanel - only do this once.
$cpanel->end();

  }


  public function episodedetailsAndriod(Request $request){

    $episodeid = $request->episodeid;


    $episode = Episode::where('id',$episodeid)->orderBy('episode_order')->get()->map(function ($item) use ($request){
       $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
       $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
       $item['shareurl'] = URL::to('/episode/') . '/' . Series::where('id',$item->series_id)->pluck('slug')->first() . '/' . $item->slug;
       $item['m3u8url'] = URL::to('/storage/app/public/') . '/' . $item->path . '.m3u8';
       
       $plans_ads_enable = $this->plans_ads_enable($request->user_id);

       if($plans_ads_enable == 1){

        $item['episode_ads_url'] =  AdsEvent::Join('advertisements','advertisements.id','=','ads_events.ads_id')
                                  // ->whereDate('start', '=', Carbon\Carbon::now()->format('Y-m-d'))
                                  // ->whereTime('start', '<=', $current_time)
                                  // ->whereTime('end', '>=', $current_time)
                                  ->where('ads_events.status',1)
                                  ->where('advertisements.status',1)
                                  ->where('advertisements.id',$item->episode_ads)
                                  ->pluck('ads_path')->first();
                        
      }else{
        $item['episode_ads_url'] = " ";
      }
      return $item;
      
     });

    //  if(count($episode) > 0){
    //  $series_id =  $episode[0]->series_id;
    //  $season_id = $episode[0]->season_id;

    //  $Season = SeriesSeason::where('series_id',$series_id)->where('id',$season_id)->first();

    //  $AllSeason = SeriesSeason::where('series_id',$series_id)->get();
    //           if(count($AllSeason) > 0){


    //               foreach($AllSeason as $key => $Season){

    //                   if($season_id ==  $Season->id){

    //                     $name = $key+1;
    //                     $Season_Name = 'Season '. $name;
    //                   }
    //               }

    //             }else{
    //               $Season_Name = '';

    //             }

    //  }else{
    //   $Season = '';
    //  }
    //  print_r($Season->id);exit;


    if($request->user_id != ''){
      $user_id = $request->user_id;
      $cnt = Wishlist::select('episode_id')->where('user_id','=',$user_id)->where('episode_id','=',$request->episodeid)->count();
      $wishliststatus =  ($cnt == 1) ? "true" : "false";
      // $userrole = User::find($user_id)->pluck('role');
    }else{
      $wishliststatus = 'false';
      // $userrole = '';
    }
    if(!empty($request->user_id) && $request->user_id != '' ){
      $user_id = $request->user_id;
      $cnt = Watchlater::select('episode_id')->where('user_id','=',$user_id)->where('episode_id','=',$request->episodeid)->count();
      $watchlaterstatus =  ($cnt == 1) ? "true" : "false";
      // $userrole = User::find($user_id)->pluck('role');
    }else{
      $watchlaterstatus = 'false';
      // $userrole = '';
    }


    if($request->andriodId != ''){
      $andriodId = $request->andriodId;
      $cnt = Wishlist::select('episode_id')->where('andriodId','=',$andriodId)->where('episode_id','=',$request->episodeid)->count();
      $andriod_wishliststatus =  ($cnt == 1) ? "true" : "false";
      // $userrole = User::find($andriodId)->pluck('role');
    }else{
      $andriod_wishliststatus = 'false';
      // $userrole = '';
    }
    if(!empty($request->andriodId) && $request->andriodId != '' ){
      $andriodId = $request->andriodId;
      $cnt = Watchlater::select('episode_id')->where('andriodId','=',$andriodId)->where('episode_id','=',$request->episodeid)->count();
      $andriod_watchlaterstatus =  ($cnt == 1) ? "true" : "false";
      // $userrole = User::find($andriodId)->pluck('role');
    }else{
      $andriod_watchlaterstatus = 'false';
      // $userrole = '';
    }
    if($request->user_id != ''){
    $like_data = LikeDisLike::where("episode_id","=",$episodeid)->where("user_id","=",$user_id)->where("liked","=",1)->count();
    $dislike_data = LikeDisLike::where("episode_id","=",$episodeid)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
    $favoritestatus = Favorite::where("episode_id","=",$episodeid)->where("user_id","=",$user_id)->count();
    $like = ($like_data == 1) ? "true" : "false";
    $dislike = ($dislike_data == 1) ? "true" : "false";
    $favorite = ($favoritestatus > 0) ? "true" : "false";
    // $userrole = User::find($user_id)->pluck('role');

  }else{
    $like = 'false';
    $dislike = 'false';
    $favorite = 'false';
    // $userrole = '';
  }

  if($request->andriodId != ''){
    $like_data = LikeDisLike::where("episode_id","=",$episodeid)->where("andriodId","=",$andriodId)->where("liked","=",1)->count();
    $dislike_data = LikeDisLike::where("episode_id","=",$episodeid)->where("andriodId","=",$andriodId)->where("disliked","=",1)->count();
    $andriod_favoritestatus = Favorite::where("episode_id","=",$episodeid)->where("andriodId","=",$andriodId)->count();
    $andriod_like = ($like_data == 1) ? "true" : "false";
    $andriod_dislike = ($dislike_data == 1) ? "true" : "false";
    $andriod_favorite = ($andriod_favoritestatus > 0) ? "true" : "false";
    // $userrole = User::find($user_id)->pluck('role');

  }else{
    $andriod_like = 'false';
    $andriod_dislike = 'false';
    $andriod_favorite = 'false';
    // $userrole = '';
  }
  if(!empty($request->user_id)){

  if(!empty($request->user_id)){
    $user_id = $request->user_id;
    $users = User::where('id','=',$user_id)->first();
    $userrole = @$users->role;
  }else{
    $userrole = '';
  }

  $series_id = Episode::where('id','=',$episodeid)->pluck('series_id');

  $season_id = Episode::where('id','=',$episodeid)->pluck('season_id');



  if(!empty($series_id) && count($series_id) > 0){
    $series_id = $series_id[0];

  $main_genre = SeriesCategory::Join('genres','genres.id','=','series_categories.category_id')
  ->where('series_categories.series_id',$series_id)->get('name');

  $languages = SeriesLanguage::Join('languages','languages.id','=','series_languages.language_id')
  ->where('series_languages.series_id',$series_id)->get('name');
  }

  if(!empty($series_id) && !empty($main_genre)){
  foreach($main_genre as $value){
    $category[] = $value['name'];
  }
}else{
  $category = [];
}
  if(!empty($category)){
  $main_genre = implode(",",$category);
  }else{
    $main_genre = "";
  }

  if(!empty($series_id) && !empty($languages)){
  foreach($languages as $value){
    $language[] = $value['name'];
  }
}else{
  $language = "";
}

  if(!empty($language)){
  $languages = implode(",",$language);
  }else{
    $languages = "";
  }
    if (!empty($episode) && count($episode) > 0) {
        $season = SeriesSeason::where('id',$episode[0]->season_id)->first();
        $ppv_exist = PpvPurchase::where('user_id',$user_id)
        ->where('series_id',$episode[0]->series_id)
        ->count();
  } else {
      $ppv_exist = 0;
      $season = null;
  }
  if ($ppv_exist > 0) {

        $ppv_video_status = "can_view";

    } else if (!empty(@$season) && @$season->access != "ppv" || @$season->access == "free") {
      $ppv_video_status = "can_view";
    }
    else {
          $ppv_video_status = "pay_now";
    }

    if(!empty($season_id) ){
      $Season = SeriesSeason::where('series_id',$series_id)->where('id',$season_id)->get();
    }

  }else{
    $series_id = Episode::where('id','=',$episodeid)->pluck('series_id');

    $season_id = Episode::where('id','=',$episodeid)->pluck('season_id');

    $season = SeriesSeason::where('id',$season_id)->first();

    if (!empty(@$season) && @$season->access != "ppv" || @$season->access == "free") {
      $ppv_video_status = "can_view";
    }
    else {
          $ppv_video_status = "pay_now";
    }

    if(!empty($season_id) ){
      $Season = SeriesSeason::where('series_id',$series_id)->where('id',$season_id)->get();
    }
    $userrole = 'guest';

    if(!empty($series_id) && count($series_id) > 0){
      $series_id = $series_id[0];
  
    $main_genre = SeriesCategory::Join('genres','genres.id','=','series_categories.category_id')
    ->where('series_categories.series_id',$series_id)->get('name');
  
    $languages = SeriesLanguage::Join('languages','languages.id','=','series_languages.language_id')
    ->where('series_languages.series_id',$series_id)->get('name');
    }
  
    if(!empty($series_id) && !empty($main_genre)){
    foreach($main_genre as $value){
      $category[] = $value['name'];
    }
  }else{
    $category = [];
  }
    if(!empty($category)){
    $main_genre = implode(",",$category);
    }else{
      $main_genre = "";
    }
  
    if(!empty($series_id) && !empty($languages)){
    foreach($languages as $value){
      $language[] = $value['name'];
    }
  }else{
    $language = "";
  }
  
    if(!empty($language)){
    $languages = implode(",",$language);
    }else{
      $languages = "";
    }
  }

    $response = array(
      'status'=>'true',
      'message'=>'success',
      'episode' => $episode,
      // 'Season_Name' => $Season_Name,
      'season' => $Season,
      'ppv_video_status' => $ppv_video_status,
      'wishlist' => $wishliststatus,
      'watchlater' => $watchlaterstatus,
      'userrole' => $userrole,
      'favorite' => $favorite,
      'like' => $like,
      'dislike' => $dislike,
      'main_genre' =>preg_replace( "/\r|\n/", "", $main_genre ),
      'languages' => $languages,
      'andriod_watchlaterstatus' => $andriod_watchlaterstatus,
      'andriod_wishliststatus' => $andriod_wishliststatus,
      'andriod_favorite' => $andriod_favorite,
      'andriod_dislike' => $andriod_dislike,
      'andriod_like' => $andriod_like,

    );
    return response()->json($response, 200);
  }

  public function albumlist_ios(Request $request)

  {
      $audioalbums_count = AudioAlbums::get()->count();

        if($audioalbums_count > 0){
          $audioalbums = AudioAlbums::orderBy('created_at', 'desc')->get();
          $audioalbums = AudioAlbums::orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/albums/'.$item->album;
            return $item;
          });

          foreach($audioalbums as $val){

            $audio[$val->albumname] = Audio::where('album_id',$val->id)
            ->orderBy('created_at', 'desc')
            ->get()->map(function ($item) {
              $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
              $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
              return $item;
            });

              $response = array(
                'status'=>'true',
                'audioalbums'=>$audioalbums,
              );
      }
      }
      else{
        $response = array(
          'status'=>'false',
          'audioalbums'=> array(),
          'audio'=>array(),
      );
      }
        return response()->json($response, 200);
    }

    public function account_delete(Request $request){

        try {

          ContinueWatching::where('user_id',$request->user_id)->delete();
          Watchlater::where('user_id',$request->user_id)->delete();
          Wishlist::where('user_id',$request->user_id)->delete();
          Multiprofile::where('parent_id',$request->user_id)->delete();
          User::find($request->user_id)->delete();

          $status = "true";
          $message = "Your ". GetWebsiteName() ." user account was successfully deleted" ;

        } catch (\Throwable $th) {
            $status = "false";
            $message =  $th->getMessage();
        }

        $response = array(
          'status'=> $status,
          'message'=> $message,
        );

        return response()->json($response, 200);
    }

    public function remaining_Episode(Request $request)
    {

      $season_id = $request->seasonid;
      $episode_id = $request->episodeid;

      try {
          $episodes = Episode::where('season_id','=',$season_id)->where('id','!=',$episode_id)->orderBy('episode_order')->get()->map(function ($item) {
            $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
            return $item;
          });

        $response = array(
          'status'=>'true',
          'message'=>'success',
          'episodes' => $episodes
        );

      } catch (\Throwable $th) {
          $response = array(
            'status'=>'false',
            'message'=>$th->getMessage(),
            'episodes' => [],
          );
      }

      return response()->json($response, 200);

    }

    public function related_series(Request $request)
    {

      $series_id = $request->series_id ;

      $Series_category = Series::Join('series_categories','series_categories.series_id','=','series.id')
                        ->where('series.id',$series_id)->pluck('category_id');

      $Series_list = Series::Join('series_categories','series_categories.series_id','=','series.id')
          ->whereIn('series_categories.category_id',$Series_category)
          ->where('series.id',"!=",$series_id)
          ->where('active','=',1)->orderBy('series.created_at', 'desc')
          ->groupBy('series.id')
          ->get();

        if(count($Series_list) > 0){
          $Series_list = $Series_list->random();
        }

      $response = array(
        'status'=>'true',
        'message'=>'success',
        'Series_list' =>$Series_list,
      );

      return response()->json($response, 200);
    }

    // Note : Only for Roku TV API (PageHome_Livestream,PageHome)

    public function PageHome_Livestream(Request $request){

      try {
          
        $HomeSetting = MobileHomeSetting::first();

        $livestreams_sort = null;

        if( $HomeSetting->live_videos == 1 ){

          $current_timezone = current_timezone();

            $live_videos = LiveStream::select('id', 'title', 'slug', 'year', 'rating', 'access', 'url_type', 'hls_url', 'live_stream_video', 'publish_type', 'publish_time', 'publish_status', 'ppv_price',
                                          'duration', 'rating', 'image', 'featured', 'Tv_live_image', 'player_image', 'details', 'description', 'free_duration',
                                          'recurring_program', 'program_start_time', 'program_end_time', 'custom_start_program_time', 'custom_end_program_time',
                                          'recurring_timezone', 'recurring_program_week_day', 'recurring_program_month_day')
                                      ->where('active', '=', '1')
                                      ->get()
                                      ->map(function ($item) {
                                        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
                                        $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
                                        $item['Tv_image_url'] = URL::to('/').'/public/uploads/images/'.$item->Tv_live_image;
                                        $details = html_entity_decode($item->description);
                                        $description = strip_tags($details);
                                        $item['description'] = str_replace("\r", '', $description);
                                        $item['type'] = $item->url_type;
                                        $video_url = $item['url_type'];
                                        if($video_url == "live_stream_video"){
                                          $item['url'] = $item->live_stream_video;
                                        }
                                        else{
                                          $item['url'] = $item->hls_url;
                                        }
                                        return $item;
                                      });

            $livestreams_filter = $live_videos->filter(function ($livestream) use ($current_timezone) {

              $livestream->live_animation = 'true' ;

              if ($livestream->publish_type === 'recurring_program') {
          
                  $Current_time = Carbon::now($current_timezone);
                  $recurring_timezone = TimeZone::where('id', $livestream->recurring_timezone)->value('time_zone');
                  $convert_time = $Current_time->copy()->timezone($recurring_timezone);
                  $midnight = $convert_time->copy()->startOfDay();
          
                  switch ($livestream->recurring_program) {
                      case 'custom':
                          $recurring_program_Status = $convert_time->greaterThanOrEqualTo($midnight) && $livestream->custom_end_program_time >=  Carbon::parse($convert_time)->format('Y-m-d\TH:i') ;
                          $recurring_program_live_animation = $livestream->custom_start_program_time <= $convert_time && $livestream->custom_end_program_time >= $convert_time;
                          break;
                      case 'daily':
                          $recurring_program_Status = $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                          $recurring_program_live_animation = $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                          break;
                      case 'weekly':
                          $recurring_program_Status =  ( $livestream->recurring_program_week_day == $convert_time->format('N') ) && $convert_time->greaterThanOrEqualTo($midnight)  && ( $livestream->program_end_time >= $convert_time->format('H:i') );
                          $recurring_program_live_animation = $livestream->recurring_program_week_day == $convert_time->format('N') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                          break;
                      case 'monthly':
                          $recurring_program_Status = $livestream->recurring_program_month_day == $convert_time->format('d') && $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                          $recurring_program_live_animation = $livestream->recurring_program_month_day == $convert_time->format('d') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                          break;
                      default:
                          $recurring_program_Status = false;
                          $recurring_program_live_animation = false;
                          break;
                  }

                  $livestream->recurring_program_live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;

                  $livestream->live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;
          
                  return $recurring_program_Status;
              }
          
              if ($livestream->publish_type === 'publish_later') {

                  $Current_time = Carbon::now($current_timezone);
                  
                  $publish_later_Status = Carbon::parse($livestream->publish_time)->startOfDay()->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;
                  $publish_later_live_animation = Carbon::parse($livestream->publish_time)->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;

                  $livestream->publish_later_live_animation = $publish_later_live_animation  == true ? 'true' : 'false' ;

                  $livestream->live_animation = $publish_later_live_animation  == true ? 'true' : 'false' ;

                  return $publish_later_Status;
              }
          
              return $livestream->publish_type === 'publish_now' || $livestream->publish_type === 'publish_later' && $livestream->publish_later_Status || ($livestream->publish_type === 'recurring_program' && $recurring_program_Status);
          });
    
          $livestreams_sort = $livestreams_filter->sortBy(function ($livestream) {
          
              if ($livestream->publish_type === 'publish_now') {

                  return $livestream->created_at;

              } elseif ($livestream->publish_type === 'publish_later' ) {

                  return $livestream->publish_time;

              } elseif ($livestream->publish_type === 'recurring_program') {

                  return $livestream->custom_start_program_time ?? $livestream->program_start_time;
              }

              return $livestream->publish_type;
          })->values()->take(15);

        }

        $response = array(
          'status' =>'true',
          'status_code' => 200,
          'message'     => "Retreived Livestream Successfully !!",
          'livestreams' => $livestreams_sort,
        );

      } catch (\Throwable $th) {

        $response = array(
          'status' =>'false',
          'status_code' => 400,
          'message'     => $th->getMessage(),
        );
      }

      return response()->json($response, $response['status_code']);
    }

    public function PageHome(Request $request)
    {

      try{

        $user_id = $request->query('user_id');
        // return $roku_tvcode;

        $HomeSetting = RokuHomeSetting::first();
        $OrderHomeSetting = OrderHomeSetting::first();
        $OrderSetting = array();

        $videocategories = VideoCategory::select('id','image','order')->get()->toArray();
        $order_video_categories = VideoCategory::select('id','name','order')->get()->toArray();
        $movies = array();

        foreach ($videocategories as $key => $videocategory) {

            $videocategoryid = $videocategory['id'];
            $genre_image = $videocategory['image'];

            $videos= Video::Join('categoryvideos','categoryvideos.video_id','=','videos.id')
              ->where('categoryvideos.category_id',$videocategoryid) ->where('active','=',1)
              ->where('status','=',1)->where('draft','=',1)->orderBy('videos.created_at', 'desc')
              ->limit(15)
              ->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;

                if($item['type'] == 'mp4_url'){
                  $item['video_url'] = $item['mp4_url'];
                }elseif($item['type'] == 'm3u8_url'){
                  $item['video_url'] = $item['m3u8_url'];
                }elseif($item['type'] == ''){
                  $item['video_url'] = URL::to('/').'/storage/app/public/'.$item['path'].'.m3u8';
                }else{
                  $item['video_url'] = URL::to('/').'/storage/app/public/';
                }

                $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
                $item['Tv_image_url'] = URL::to('/').'/public/uploads/images/'.$item->video_tv_image;

                $item['category_name'] = VideoCategory::where('id',$item->category_id)->pluck('slug')->first();
                $item['category_order'] = VideoCategory::where('id',$item->category_id)->pluck('order')->first();
                return $item;
            });

            $main_genre = CategoryVideo::Join('video_categories','video_categories.id','=','categoryvideos.category_id')->get('name');
            foreach($main_genre as $value){
              $category[] = $value['name'];
            }

            if(!empty($category)){
              $main_genre = implode(",",$category);
            }else{
              $main_genre = "";
            }

            if(count($videos) > 0){
              $msg = 'success';
            }else{
              $msg = 'nodata';
            }

            $movies[] = array(
              "message" => $msg,
              'gener_name' =>  VideoCategory::where('id',$videocategoryid)->pluck('name')->first(),
              'home_genre' =>  VideoCategory::where('id',$videocategoryid)->pluck('home_genre')->first(),
              'gener_id' =>  VideoCategory::where('id',$videocategoryid)->pluck('id')->first(),
              "video" => $videos,
              "order_video_categories" => $order_video_categories,
            );
        }
        

        if($HomeSetting->featured_videos == 1){

          $featured_videos = Video::where('active', '=', '1')->where('featured', '=', '1')->where('status', '=', '1')
              ->where('draft', '=', '1')->orderBy('created_at', 'DESC')
              ->limit(15)->get();

          $featured_videos =  Video::where('active', '=', '1')->where('featured', '=', '1')->where('status', '=', '1')
             ->where('draft', '=', '1')->orderBy('created_at', 'DESC')
             ->limit(15)
             ->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
                $item['Tv_image_url'] = URL::to('/').'/public/uploads/images/'.$item->video_tv_image;

                if($item['type'] == 'mp4_url'){
                  $item['video_url'] = $item['mp4_url'];
                }elseif($item['type'] == 'm3u8_url'){
                  $item['video_url'] = $item['m3u8_url'];
                }elseif($item['type'] == ''){
                  $item['video_url'] = URL::to('/').'/storage/app/public/'.$item['path'].'.m3u8';
                }else{
                  $item['video_url'] = URL::to('/').'/storage/app/public/';
                }

                $details = html_entity_decode($item->description);
                $description = strip_tags($details);
                $item['description'] = str_replace("\r", '', $description);
                return $item;
            });

        }else{

          $featured_videos = null;
        }

        if($HomeSetting->latest_videos == 1){

          $latest_videos =  Video::where('status', '=', '1')->take(10)->where('active', '=', '1')->where('draft', '=', '1')
          ->orderBy('created_at', 'DESC')->limit(15)->get()->map(function ($item) {
              $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
              $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
              $item['Tv_image_url'] = URL::to('/').'/public/uploads/images/'.$item->video_tv_image;

              $description = $item->description;
                do {
                    $previous = $description;
                    $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                } while ($description !== $previous);
              $details = $item->details;
                do {
                    $previous = $details;
                    $details = html_entity_decode($details, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                } while ($details !== $previous);
              $item['details']             = strip_tags($details);
              $item['description']         = strip_tags($description);

             
              if($item['type'] == 'mp4_url'){
                $item['url'] = $item['mp4_url'];
              }elseif($item['type'] == 'm3u8_url'){
                $item['url'] = $item['m3u8_url'];
              }elseif($item['type'] == ''){
                $item['url'] = URL::to('/').'/storage/app/public/'.$item['path'].'.m3u8';
              }else{
                $item['url'] = URL::to('/').'/storage/app/public/';
              }

              $details = html_entity_decode($item->description);
              $description = strip_tags($details);
              // $item['description'] = str_replace("\r", '', $description);
              return $item;
            });

        }else{

          $latest_videos = null;
        }

        if( $HomeSetting->category_videos == 1 ){

          $oldvideocategories = VideoCategory::select('id','image','order')->get()->toArray();
          $videocategories = VideoCategory::join('categoryvideos','video_categories.id', '=' ,'categoryvideos.category_id')->distinct()->select('video_categories.id','video_categories.image','video_categories.order')->get()->toArray();
          $order_video_categories = VideoCategory::select('id','name','order')->get()->toArray();
          $myData = array();

          foreach ($videocategories as $key => $videocategory) {
            $videocategoryid = $videocategory['id'];
            $genre_image = $videocategory['image'];

            $videos= Video::Join('categoryvideos','categoryvideos.video_id','=','videos.id')
              ->where('categoryvideos.category_id',$videocategoryid)->where('active','=',1)->where('status','=',1)->where('draft','=',1)
              ->orderBy('videos.created_at', 'desc')->limit(15)->get()->map(function ($item) {

                $item['video_url'] = URL::to('/').'/storage/app/public/';
                $item['category_name'] = VideoCategory::where('id',$item->category_id)->pluck('slug')->first();
                $item['category_order'] = VideoCategory::where('id',$item->category_id)->pluck('order')->first();

                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
                $item['Tv_image_url'] = URL::to('/').'/public/uploads/images/'.$item->video_tv_image;

                if($item['type'] == 'mp4_url'){
                  $item['video_url'] = $item['mp4_url'];
                }elseif($item['type'] == 'm3u8_url'){
                  $item['video_url'] = $item['m3u8_url'];
                }elseif($item['type'] == ''){
                  $item['video_url'] = URL::to('/').'/storage/app/public/'.$item['path'].'.m3u8';
                }else{
                  $item['video_url'] = URL::to('/').'/storage/app/public/';
                }
                
                $item['artist_name'] = Videoartist::join('artists','artists.id','=','video_artists.artist_id')
                                        ->where('video_artists.video_id', $item->video_id)->pluck('artist_name') ;

              return $item;
            });

            $main_genre = CategoryVideo::Join('video_categories','video_categories.id','=','categoryvideos.category_id')->get('name');

            foreach($main_genre as $value){
              $category[] = $value['name'];
            }

            if(!empty($category)){
              $main_genre = implode(",",$category);
            }else{
              $main_genre = "";
            }
            if ($videos->isEmpty()) {
              continue;
          }

          $msg = 'success';

           
            $myData[] = array(
              "message" => $msg,
              'gener_name' =>  VideoCategory::where('id',$videocategoryid)->pluck('name')->first(),
              'home_genre' =>  VideoCategory::where('id',$videocategoryid)->pluck('home_genre')->first(),
              'gener_id' =>  VideoCategory::where('id',$videocategoryid)->pluck('id')->first(),
              "videos" => $videos,
              "order_video_categories" => $order_video_categories,
            );
          }
        }
        else{
          $myData = null;

        }
        

        if($HomeSetting->series == 1){

          $series = Series::select('id','title','access','description','details','player_image','tv_image','slug')->where('active','1')->latest()->limit(15)->get()->map(function ($item) use($user_id) {
            // $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
            // $item['Tv_image_url'] = URL::to('/').'/public/uploads/images/'.$item->tv_image;
            $item['player_image_url']  = (!is_null($item->player_image) && $item->player_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$item->player_image) : $this->default_horizontal_image_url ;
            $item['Tv_image_url']      = (!is_null($item->tv_image) && $item->tv_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$item->tv_image) : $this->default_horizontal_image_url ;
            $description = $item->description;
              do {
                  $previous = $description;
                  $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
              } while ($description !== $previous);
            $details = $item->details;
              do {
                  $previous = $details;
                  $details = html_entity_decode($details, ENT_QUOTES | ENT_HTML5, 'UTF-8');
              } while ($details !== $previous);
            $item['details']             = strip_tags($details);
            $item['description']         = strip_tags($description);
            unset($item['player_image']);
            unset($item['tv_image']);
            $series_share_url = null;
            if($item['access'] == 'subscriber'){
              $subs_purchase = !empty($user_id) ? Subscription::where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
              $subs_exists_check_query = 0;
              if($subs_purchase){
                $new_date = Carbon::parse($subs_purchase->ends_at);
                $currentdate = Carbon::now();
                $subs_exists_check_query = $new_date->isAfter($currentdate) ? 1 : 0; 
              }
              $item['access'] =  ($subs_exists_check_query > 0) ? 'guest' : 'subscriber';
              $series_share_url = $item['access'] == 'subscriber' ? URL::to('becomesubscriber') : null ;
            }elseif($item['access'] == 'registered'){
              $item['access'] = !empty($user_id) ? 'guest' :  'registered'; 
            }else{
              $item['access'] = 'guest';
            }
            $item['series_share_url'] = $series_share_url;

            $season_ids = SeriesSeason::where('series_id',$item->id)->orderBy('order','desc')->pluck('id');
                    $first_season_id = $season_ids->first();
                    $season_epi_count = Episode::where('season_id',$first_season_id)->where('active','1')->count();
                    // dd($season_ids);

                    if ($season_ids->isNotEmpty()) {
                                $item['seasons'] = SeriesSeason::where('series_id', $item->id)
                                    ->orderBy('order','desc')
                                    ->limit(15)
                                    ->get()
                                    ->map(function ($season) use($user_id, $item, $season_ids) {
                                        $ppv_purchase = !empty($user_id) ? PpvPurchase::where('season_id',$season->id)->where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
                                        $ppv_exists_check_query = 0;
                                        if($ppv_purchase){
                                          $new_date = Carbon::parse($ppv_purchase->to_time);
                                          $currentdate = Carbon::now();
                                          $ppv_exists_check_query = $new_date->isAfter($currentdate) ? 1 : 0; 
                                        }

                                        if($season->access == 'free'){
                                          $season_access = 'guest';
                                        }elseif( $ppv_exists_check_query > 0){
                                          $season_access = 'guest';
                                        }else{
                                          $season_access = 'PPV';
                                        }
                                        $episodes = Episode::where('season_id', $season->id)
                                            ->orderByRaw("FIELD(season_id, " . implode(',', $season_ids->toArray()) . ")") // Orders by given season order
                                            ->orderBy('episode_order','desc')
                                            ->get()
                                            ->map(function ($episode) use ($season_access) {
                                              // return $episode;
                                              if($this->Theme == 'theme4'){
                                                if($episode->type == 'm3u8'){
                                                  $url = URL::to('/storage/app/public-latest/'. $episode->path .'.m3u8') ;
                                                } elseif($episode->type == 'embed'){
                                                    $url = $episode->url;
                                                }
                                                else{
                                                  $url = $episode->url;
                                                }
                                              }else{
                                                if($episode->type == 'm3u8'){
                                                  $url = URL::to('/storage/app/public/'. $episode->path .'.m3u8') ;
                                                } elseif($episode->type == 'embed'){
                                                    $url = $episode->url;
                                                }
                                                else{
                                                  $url = $episode->url;
                                                }
                                              }
                                              $description = $episode->episode_description;
                                                              do {
                                                                  $previous = $description;
                                                                  $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                                              } while ($description !== $previous);
                                              return [
                                                'id'                       => $episode->id,
                                                'title'                    => $episode->title,
                                                'slug'                     => $episode->slug,
                                                'player_image_url'         => (!is_null($episode->player_image) && $episode->player_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$episode->player_image) : $this->default_horizontal_image_url,
                                                'description'              => strip_tags($description),
                                                'episodeNumber'            => $episode->episode_order,
                                                'access'                   => $season_access,
                                                'content'                  => [
                                                                                'dateAdded' => $episode->created_at,
                                                                                'videos' => [
                                                                                    [
                                                                                        'videoType' => $episode->type,
                                                                                        'url' => $url,
                                                                                    ],
                                                                                ],
                                                                                'duration' => $episode->duration,
                                                                              ],
                                                'Tv_image_url'                 => (!is_null($episode->tv_image) && $episode->tv_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$episode->tv_image) : $this->default_horizontal_image_url,
                                                'status'                   => $episode->status,
                                              ];
                                            });

                                        // Only include the season if it has episodes
                                        if ($episodes->isNotEmpty()) {
                                            return [
                                                'title' => $season->series_seasons_name,
                                                'access' => $season_access,
                                                'share_url' => $season_access == 'PPV' ? URL::to('app/play_series/'.$item->slug) : null,
                                                'episodes' => $episodes,
                                            ];
                                        }

                                        // Return null for seasons with no episodes
                                        return null;
                                    })
                                    ->filter(function ($value) {
                                        return $value !== null;
                                    });

                                // Remove the 'seasons' key if it's an empty array
                                if ($item['seasons']->isEmpty()) {
                                    unset($item['seasons']);
                                }
                              }
                                return $item;
                            });
                          

          

        }else{

          $series = null;
        }

        if($HomeSetting->Series_based_on_Networks == 1){
          if($this->Theme == 'theme40'){

            $Series_based_on_Networks = SeriesNetwork::select('id', 'name', 'order', 'image', 'banner_image', 'slug', 'in_home')
                                                        ->where('in_home', 1)
                                                        ->orderBy('order')
                                                        ->get()
                                                        ->map(function ($item) use($user_id) {
                                                            $item['banner_image'] = (!is_null($item->banner_image) && $item->banner_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$item->banner_image) : $this->default_horizontal_image_url;
                                                            $item['series'] = Series::join('series_network_order', 'series.id', '=', 'series_network_order.series_id')
                                                                                      ->where('series.active', 1)
                                                                                      ->where('series_network_order.network_id', $item->id)
                                                                                      ->orderBy('series_network_order.order', 'asc')
                                                                                      ->select('series.*')
                                                                                      ->get()
                                                                                      ->map(function ($series) use($user_id) {
                                                                                          $series['player_image_url'] = (!is_null($series->player_image) && $series->player_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$series->player_image) : $this->default_horizontal_image_url;
                                                                                          $series['Tv_image_url'] = (!is_null($series->tv_image) && $series->tv_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$series->tv_image) : $this->default_horizontal_image_url;
                                                                                          $description = $series->description;
                                                                                            do {
                                                                                                $previous = $description;
                                                                                                $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                                                                            } while ($description !== $previous);
                                                                                          $details = $series->details;
                                                                                            do {
                                                                                                $previous = $details;
                                                                                                $details = html_entity_decode($details, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                                                                            } while ($details !== $previous);
                                                                                          $series['details']             = strip_tags($details);
                                                                                          $series['description']         = strip_tags($description);
                                                                                          $series_share_url = null;
                                                                                          if($series['access'] == 'subscriber'){
                                                                                            $subs_purchase = !empty($user_id) ? Subscription::where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
                                                                                            $subs_exists_check_query = 0;
                                                                                            if($subs_purchase){
                                                                                              $new_date = Carbon::parse($subs_purchase->ends_at);
                                                                                              $currentdate = Carbon::now();
                                                                                              $subs_exists_check_query = $new_date->isAfter($currentdate) ? 1 : 0; 
                                                                                            }
                                                                                            $series['access'] =  ($subs_exists_check_query > 0) ? 'guest' : 'subscriber';
                                                                                            $series_share_url = $series['access'] == 'subscriber' ? URL::to('becomesubscriber') : null ;
                                                                                          }elseif($series['access'] == 'registered'){
                                                                                            $series['access'] = !empty($user_id) ? 'guest' :  'registered'; 
                                                                                          }else{
                                                                                            $series['access'] = 'guest';
                                                                                          }
                                                                                          $series['series_share_url'] = $series_share_url;
                                                                                          
                                                                              
                                                                                      return $series;
                                                                                    });
                      

                      return $item;
              });

          }else{
              $Series_based_on_Networks = SeriesNetwork::select('id', 'name', 'order', 'image', 'banner_image', 'slug', 'in_home')
                                                        ->where('in_home', 1)
                                                        ->orderBy('order')
                                                        ->get()
                                                        ->map(function ($item) use($user_id) {
                                                            $item['banner_image'] = (!is_null($item->banner_image) && $item->banner_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$item->banner_image) : $this->default_horizontal_image_url;
                                                            $item['series'] = Series::join('series_network_order', 'series.id', '=', 'series_network_order.series_id')
                                                                                      ->where('series.active', 1)
                                                                                      ->where('series_network_order.network_id', $item->id)
                                                                                      ->orderBy('series_network_order.order', 'asc')
                                                                                      ->select('series.*')
                                                                                      ->limit(15)
                                                                                      ->get()
                                                                                      ->map(function ($series) use($user_id) {
                                                                                          $series['player_image_url'] = (!is_null($series->player_image) && $series->player_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$series->player_image) : $this->default_horizontal_image_url;
                                                                                          $series['Tv_image_url'] = (!is_null($series->tv_image) && $series->tv_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$series->tv_image) : $this->default_horizontal_image_url;
                                                                                          $description = $series->description;
                                                                                            do {
                                                                                                $previous = $description;
                                                                                                $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                                                                            } while ($description !== $previous);
                                                                                          $details = $series->details;
                                                                                            do {
                                                                                                $previous = $details;
                                                                                                $details = html_entity_decode($details, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                                                                            } while ($details !== $previous);
                                                                                          $series['details']             = strip_tags($details);
                                                                                          $series['description']         = strip_tags($description);
                                                                                          $series_share_url = null;
                                                                                          if($series['access'] == 'subscriber'){
                                                                                            $subs_purchase = !empty($user_id) ? Subscription::where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
                                                                                            $subs_exists_check_query = 0;
                                                                                            if($subs_purchase){
                                                                                              $new_date = Carbon::parse($subs_purchase->ends_at);
                                                                                              $currentdate = Carbon::now();
                                                                                              $subs_exists_check_query = $new_date->isAfter($currentdate) ? 1 : 0; 
                                                                                            }
                                                                                            $series['access'] =  ($subs_exists_check_query > 0) ? 'guest' : 'subscriber';
                                                                                            $series_share_url = $series['access'] == 'subscriber' ? URL::to('becomesubscriber') : null ;
                                                                                          }elseif($series['access'] == 'registered'){
                                                                                            $series['access'] = !empty($user_id) ? 'guest' :  'registered'; 
                                                                                          }else{
                                                                                            $series['access'] = 'guest';
                                                                                          }
                                                                                          $series['series_share_url'] = $series_share_url;
                                                                                          $series['series_count'] = $series->count();
                                                                                          $series['seasons'] = SeriesSeason::where('series_id', $series->id)->orderBy('order','desc')
                                                                                                                          ->get()
                                                                                                                          ->map(function ($season) use($user_id, $series) {
                                                                                                                              $ppv_purchase = !empty($user_id) ? PpvPurchase::where('season_id',$season->id)->where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
                                                                                                                              $ppv_exists_check_query = 0;
                                                                                                                              if($ppv_purchase){
                                                                                                                                $new_date = Carbon::parse($ppv_purchase->to_time);
                                                                                                                                $currentdate = Carbon::now();
                                                                                                                                $ppv_exists_check_query = $new_date->isAfter($currentdate) ? 1 : 0; 
                                                                                                                              }

                                                                                                                              if($season->access == 'free'){
                                                                                                                                $season_access = 'guest';
                                                                                                                              }elseif( $ppv_exists_check_query > 0){
                                                                                                                                $season_access = 'guest';
                                                                                                                              }else{
                                                                                                                                $season_access = 'PPV';
                                                                                                                              }

                                                                                                                              $season_ids = SeriesSeason::where('series_id',$series->id)->orderBy('order','desc')->pluck('id');
                                                                                                                              $first_season_id = $season_ids->first();
                                                                                                                              $season_epi_count = Episode::where('season_id',$first_season_id)->where('active','1')->count();
                                                                                                                              if ($season_ids->isNotEmpty()) {
                                                                                                                              $episodes = Episode::where('season_id', $season->id)
                                                                                                                                  ->orderByRaw("FIELD(season_id, " . implode(',', $season_ids->toArray()) . ")") // Orders by given season order
                                                                                                                                  ->orderBy('episode_order','desc')
                                                                                                                                  ->limit(15)
                                                                                                                                  ->get()
                                                                                                                                  ->map(function ($episode) use($season_access) {
                                                                                                                                    if($this->Theme == 'theme4'){
                                                                                                                                      if($episode->type == 'm3u8'){
                                                                                                                                        $url = URL::to('/storage/app/public-latest/'. $episode->path .'.m3u8') ;
                                                                                                                                      } elseif($episode->type == 'embed'){
                                                                                                                                          $url = $episode->url;
                                                                                                                                      }
                                                                                                                                      else{
                                                                                                                                        $url = $episode->url;
                                                                                                                                      }
                                                                                                                                    }else{
                                                                                                                                      if($episode->type == 'm3u8'){
                                                                                                                                        $url = URL::to('/storage/app/public/'. $episode->path .'.m3u8') ;
                                                                                                                                      } elseif($episode->type == 'embed'){
                                                                                                                                          $url = $episode->url;
                                                                                                                                      }
                                                                                                                                      else{
                                                                                                                                        $url = $episode->url;
                                                                                                                                      }
                                                                                                                                    }
                                                                                                                                    $description = $episode->episode_description;
                                                                                                                                                do {
                                                                                                                                                    $previous = $description;
                                                                                                                                                    $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                                                                                                                                } while ($description !== $previous);
                                                                                                                                    return [
                                                                                                                                      'id'                       => $episode->id,
                                                                                                                                      'title'                    => $episode->title,
                                                                                                                                      'slug'                     => $episode->slug,
                                                                                                                                      'player_image_url'         => (!is_null($episode->player_image) && $episode->player_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$episode->player_image) : $this->default_horizontal_image_url,
                                                                                                                                      'description'              => strip_tags($description),
                                                                                                                                      'episodeNumber'            => $episode->episode_order,
                                                                                                                                      'access'                   => $season_access,
                                                                                                                                      'content'                  => [
                                                                                                                                                                      'dateAdded' => $episode->created_at,
                                                                                                                                                                      'videos' => [
                                                                                                                                                                          [
                                                                                                                                                                              'videoType' => $episode->type,
                                                                                                                                                                              'url' => $url,
                                                                                                                                                                          ],
                                                                                                                                                                      ],
                                                                                                                                                                      'duration' => $episode->duration,
                                                                                                                                                                    ],
                                                                                                                                      'Tv_image_url'                 => (!is_null($episode->tv_image) && $episode->tv_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$episode->tv_image) : $this->default_horizontal_image_url,
                                                                                                                                      'status'                   => $episode->status,
                                                                                                                                    ];
                                                                                                                                  });
                                                                                                                                }else {
                                                                                                                                  $episodes = collect(); // Return empty collection if no seasons found
                                                                                                                              }

                                                                                                                              // Only include the season if it has episodes
                                                                                                                              if ($episodes->isNotEmpty()) {
                                                                                                                                  return [
                                                                                                                                      'title' => $season->series_seasons_name,
                                                                                                                                      'access' => $season_access,
                                                                                                                                      'share_url' => $season_access == 'PPV' ? URL::to('app/play_series/'.$series->slug) : null,
                                                                                                                                      'episodes' => $episodes,
                                                                                                                                  ];
                                                                                                                              }

                                                                                                                              // Return null for seasons with no episodes
                                                                                                                              return null;
                                                                                                                          })
                                                                                                                          ->filter(function ($value) {
                                                                                                                              return $value !== null;
                                                                                                                          });

                                                                                                                      // Remove the 'seasons' key if it's an empty array
                                                                                                                      if ($series['seasons']->isEmpty()) {
                                                                                                                          unset($series['seasons']);
                                                                                                                      }
                                                                              
                                                                                      return $series;
                                                                                    });
                      

                      return $item;
              });
          }
        }else{
          $Series_based_on_Networks = null;
        }
        

        if($HomeSetting->epg == 1){
            $current_timezone = current_timezone();
            $carbon_now = Carbon::now($current_timezone);
            $carbon_current_time =  $carbon_now->format('H:i:s');
            $carbon_today =  $carbon_now->format('n-j-Y');
            $homepage_default_image_url = array(
              'homepage_default_vertical_image_url' => default_vertical_image_url(),
              'homepage_default_horizontal_image_url' => default_horizontal_image_url(),
            );

            $epg = AdminEPGChannel::where('status', 1)->limit(15)->get()->map(function ($item) use ($homepage_default_image_url, $carbon_now, $carbon_today, $current_timezone) {

              $item['image_url'] = $item->image != null ? URL::to('public/uploads/EPG-Channel/' . $item->image) : $homepage_default_image_url['homepage_default_vertical_image_url'];
              $item['Player_image_url'] = $item->player_image != null ? URL::to('public/uploads/EPG-Channel/' . $item->player_image) : $homepage_default_image_url['homepage_default_horizontal_image_url'];
              $item['tv_image_url'] = $item->player_image != null ? URL::to('public/uploads/EPG-Channel/' . $item->player_image) : $homepage_default_image_url['homepage_default_horizontal_image_url'];
              $item['Logo_url'] = $item->logo != null ? URL::to('public/uploads/EPG-Channel/' . $item->logo) : $homepage_default_image_url['homepage_default_vertical_image_url'];
          
                $item['series'] = [
                    [
                        'title' => $item->name,
                        'player_image_url' => $item['Player_image_url'],
                          'season' => [
                              [
                                  'title' => $item->name,
                                  'player_image_url' => $item['Player_image_url'],
                                  'episodes' => array_values(ChannelVideoScheduler::where('channe_id', $item->id)
                                                                                    ->where('choosed_date', $carbon_today)
                                                                                    ->limit(15)
                                                                                    ->get()
                                                                                    ->map(function ($episode) use ($carbon_now, $current_timezone) {
                                                            
                                                                                        $TimeZone = TimeZone::where('id', $episode->time_zone)->first();
                                                            
                                                                                        $converted_start_time = Carbon::createFromFormat('m-d-Y H:i:s', $episode->choosed_date . ' ' . $episode->start_time, $TimeZone->time_zone)
                                                                                            ->copy()
                                                                                            ->tz($current_timezone);
                                                            
                                                                                        $converted_end_time = Carbon::createFromFormat('m-d-Y H:i:s', $episode->choosed_date . ' ' . $episode->end_time, $TimeZone->time_zone)
                                                                                            ->copy()
                                                                                            ->tz($current_timezone);
                                                            
                                                                                        if ($carbon_now->between($converted_start_time, $converted_end_time)) {
                                                                                            return [
                                                                                                'id' => $episode->id,
                                                                                                'socure_title' => $episode->socure_title,
                                                                                                'duration' => $episode->duration,
                                                                                                'episodeNumber' => '1',
                                                                                                'player_image_url' => URL::to('public/uploads/images/' . $episode->image),
                                                                                                'AM_PM_Time' => $converted_start_time->format('h:i A') . ' - ' . $converted_end_time->format('h:i A'),
                                                                                                'description' => $episode->description,
                                                                                                'content' => [
                                                                                                    'choosed_date' => $episode->choosed_date,
                                                                                                    'videos' => [
                                                                                                        [
                                                                                                            'videoType' => $episode->type,
                                                                                                            'url' => $episode->url,
                                                                                                        ],
                                                                                                    ],
                                                                                                    'duration' => $episode->duration,
                                                                                                ],
                                                                                                'Tv_image_url' => URL::to('public/uploads/images/' . $episode->image),
                                                                                                'status' => $episode->status,
                                                                                            ];
                                                                                        }
                                                            
                                                                                        return null;
                                                                                    })->filter()->toArray()) // Ensure that filtered result is converted to an array
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ];
                                                            
                                                                $item['source'] = 'EPG';
                                                                return $item;
                                                            });
          
        }else{
          $epg = null;
        }

        if($HomeSetting->audios == 1){

          $audios = Audio::orderBy('created_at', 'desc')->limit(15)->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
            $details = html_entity_decode($item->description);
            $description = strip_tags($details);
            
            $item['description'] = str_replace("\r", '', $description);
            return $item;
          });

        }else{

          $audios = [];
        }

        if($HomeSetting->albums == 1){

          $albums = AudioAlbums::orderBy('created_at', 'desc')->limit(15)->get()->map(function ($item) {
            $item['player_image_url'] = URL::to('/').'/public/uploads/albums/'.$item->album;
            return $item;
          });

        }else{
          $albums = [];
        }

        if($HomeSetting->live_category == 1){

          $livecategories = LiveCategory::select('id','image','order')->groupBy('name')->get()->toArray();
          $order_live_categories = LiveCategory::select('id','name','order')->groupBy('name')->get()->toArray();
          $LiveCategory = array();

          foreach ($livecategories as $key => $livecategory) {

            $livecategoryid = $livecategory['id'];
            $genre_image = $livecategory['image'];

            $live_category= LiveStream::Join('livecategories','livecategories.live_id','=','live_streams.id')
                          ->where('livecategories.category_id',$livecategoryid)
                          ->where('active','=',1)->where('status','=',1)
                          ->orderBy('live_streams.created_at', 'desc')->limit(15)->get()->map(function ($item) {

                            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                            $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
                            $item['Tv_image_url'] = URL::to('/').'/public/uploads/images/'.$item->Tv_live_image;

                            $item['category_name'] = LiveCategory::where('id',$item->category_id)->pluck('slug')->first();
                            $item['category_order'] = LiveCategory::where('id',$item->category_id)->pluck('order')->first();
                            $item['type'] = $item->url_type;

                            return $item;
                          });

            $main_genre = CategoryLive::Join('live_categories','live_categories.id','=','livecategories.category_id')->get('name');

            foreach($main_genre as $value){
              $category[] = $value['name'];
            }

            if(!empty($category)){
              $main_genre = implode(",",$category);
            }else{
              $main_genre = "";
            }

            if(count($live_category) > 0){
              $msg = 'success';
            }else{
              $msg = 'nodata';
            }

            $LiveCategory[] = array(
              "message" => $msg,
              'gener_name' =>  LiveCategory::where('id',$livecategoryid)->pluck('name')->first(),
              'gener_id' =>  LiveCategory::where('id',$livecategoryid)->pluck('id')->first(),
              "live_category" => $live_category,
              "order_video_categories" => $order_video_categories,
            );

          }
        }else{
          $LiveCategory = [];
        }

        if( $HomeSetting->live_videos == 1 ){

          $current_timezone = current_timezone();

            $live_videos = LiveStream::select('id', 'title', 'slug', 'year', 'rating', 'access', 'url_type', 'hls_url', 'live_stream_video', 'publish_type', 'publish_time', 'publish_status', 'ppv_price',
                                          'duration', 'rating', 'image', 'featured', 'Tv_live_image', 'player_image', 'details', 'description', 'free_duration',
                                          'recurring_program', 'program_start_time', 'program_end_time', 'custom_start_program_time', 'custom_end_program_time',
                                          'recurring_timezone', 'recurring_program_week_day', 'recurring_program_month_day','mp4_url')
                                      ->where('active', '=', '1')
                                      ->get()
                                      ->map(function ($item) use($user_id) {
                                        if($item['access'] == 'subscriber'){
                                            $item['share_url'] = URL::to('becomesubscriber');
                                        }elseif($item['access'] == 'ppv'){
                                          $item['share_url'] = (URL::to('app/live/'.$item->slug));
                                        }else{
                                          $item['share_url'] =null;
                                        }
                                        if($item['access'] == 'subscriber'){
                                          $subs_purchase = !empty($user_id) ? Subscription::where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
                                          $subs_exists_check_query = 0;
                                          if($subs_purchase){
                                            $new_date = Carbon::parse($subs_purchase->ends_at);
                                            $currentdate = Carbon::now();
                                            $item['access'] = $new_date->isAfter($currentdate) ? 'guest' : 'subscriber'; 
                                            // $item['share_url'] = $new_date->isAfter($currentdate) ? null : URL::to('becomesubscriber'); 
                                          }
                                        }elseif($item['access'] == 'ppv'){
                                          $ppv_purchase = !empty($user_id) ? PpvPurchase::where('live_id',$item->id)->where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
                                          $ppv_exists_check_query = 0;
                                          if($ppv_purchase){
                                            $new_date = Carbon::parse($ppv_purchase->to_time);
                                            $currentdate = Carbon::now();
                                            $item['access'] = $new_date->isAfter($currentdate) ? 'guest' : "PPV"; 
                                            // $item['share_url'] = $new_date->isAfter($currentdate) ? null : (URL::to('app/live/'.$item->slug)); 
                                          }
                                        }else{
                                          $item['access'] = 'guest';
                                          // $item['share_url'] = null;
                                        }
                                        

                                        
                                        


                                        $item['image'] = (!is_null($item->image) && $item->image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$item->image) : $this->default_horizontal_image_url;
                                        $item['player_image_url'] = (!is_null($item->player_image) && $item->player_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$item->player_image) : $this->default_horizontal_image_url;
                                        $item['Tv_image_url'] = (!is_null($item->Tv_live_image) && $item->Tv_live_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$item->Tv_live_image) : $this->default_horizontal_image_url;
                                        $details = html_entity_decode($item->description);
                                        $description = strip_tags($details);
                                        $item['description'] = str_replace("\r", '', $description);
                                        $item['type'] = $item->url_type;
                                        $video_url = $item['url_type'];
                                        if($video_url == "live_stream_video"){
                                          $item['url'] = $item->live_stream_video;
                                        }elseif($video_url == "mp4"){
                                          $item['url'] = $item->mp4_url;
                                        }
                                        else{
                                          $item['url'] = $item->hls_url;
                                        }
                                        return $item;
                                      });

            $livestreams_filter = $live_videos->filter(function ($livestream) use ($current_timezone) {

              $livestream->live_animation = 'true' ;
  
              if ($livestream->publish_type === 'recurring_program') {
          
                $Current_time = Carbon::now($current_timezone);
                $recurring_timezone = TimeZone::where('id', $livestream->recurring_timezone)->value('time_zone');
                $convert_time = $Current_time->copy()->timezone($recurring_timezone);
                $midnight = $convert_time->copy()->startOfDay();
                $endmidnight = $convert_time->copy()->endOfDay();
    
                $custom_start_midnight = new \DateTime($livestream->custom_start_program_time);
                $custom_start_midnight = clone $custom_start_midnight;
                $custom_start_midnight->setTime(0, 0, 0);
                
                // dd($custom_start_midnight->format('Y-m-d\TH:i'));
                
                $live_end_date = new \DateTime($livestream->custom_end_program_time);
                $program_end_date = clone $live_end_date;
                $program_end_date->modify('+1 day');
                $program_end_date->setTime(0, 0, 0);
          
                  switch ($livestream->recurring_program) {
                      case 'custom':
                          $recurring_program_Status =  ($livestream->custom_start_program_time >= $custom_start_midnight->format('Y-m-d\TH:i') && $livestream->custom_start_program_time <= $endmidnight->format('Y-m-d\TH:i')) && ($livestream->custom_end_program_time > $convert_time->format('Y-m-d\TH:i')) ;
                          $recurring_program_live_animation =  ($livestream->custom_start_program_time <= $convert_time->format('Y-m-d\TH:i') && $livestream->custom_end_program_time >= $convert_time->format('Y-m-d\TH:i')) ;
                          break;
                      case 'daily':
                          $recurring_program_Status = $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                          $recurring_program_live_animation = $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                          break;
                      case 'weekly':
                          $recurring_program_Status =  ( $livestream->recurring_program_week_day == $convert_time->format('N') ) && $convert_time->greaterThanOrEqualTo($midnight)  && ( $livestream->program_end_time >= $convert_time->format('H:i') );
                          $recurring_program_live_animation = $livestream->recurring_program_week_day == $convert_time->format('N') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                          break;
                      case 'monthly':
                          $recurring_program_Status = $livestream->recurring_program_month_day == $convert_time->format('d') && $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                          $recurring_program_live_animation = $livestream->recurring_program_month_day == $convert_time->format('d') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                          break;
                      default:
                          $recurring_program_Status = false;
                          $recurring_program_live_animation = false;
                          break;
                  }
  
                  $livestream->recurring_program_live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;
                  $livestream->publish_type = $recurring_program_live_animation == true ? 'publish_now' : $livestream->publish_type ;
  
                  $livestream->live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;
          
                  return $recurring_program_Status;
              }
          
              if ($livestream->publish_type === 'publish_later') {

                $Current_time = Carbon::now($current_timezone);
                
                $publish_later_Status = Carbon::parse($livestream->publish_time)->startOfDay()->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;
                $publish_later_live_animation = Carbon::parse($livestream->publish_time)->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;
    
                $livestream->publish_later_live_animation = $publish_later_live_animation;
                
                $livestream->recurring_program_live_animation_mobile = $publish_later_live_animation  == true ? 'true' : 'false' ;
    
                $livestream->live_animation = $publish_later_live_animation  == true ? 'true' : 'false' ;
    
                return $publish_later_Status;
            }
          
              return $livestream->publish_type === 'publish_now' || $livestream->publish_type === 'publish_later' && $livestream->publish_later_Status || ($livestream->publish_type === 'recurring_program' && $recurring_program_Status);
          });
    
          $livestreams_sort = $livestreams_filter->sortBy(function ($livestream) {

            if ($livestream->publish_type === 'publish_now') {
                $priority = 1;
                $time = Carbon::parse($livestream->created_at)->timestamp;
  
            } elseif ($livestream->publish_type === 'publish_later') {
                $priority = 2;
                $time = Carbon::parse($livestream->publish_time)->timestamp;
  
            } elseif ($livestream->publish_type === 'recurring_program') {
              
                $priority = 2;
                if (!empty($livestream->custom_start_program_time)) {
                    $time = Carbon::parse($livestream->custom_start_program_time)->timestamp;
                } else {
                    $time = Carbon::parse(Carbon::today()->format('Y-m-d') . ' ' . $livestream->program_start_time)->timestamp;
                }
            } else {
                $priority = 3;
                $time = 0;
            }
            return [$priority, $time];
        })->values()->take(15);

        }
        else{
          $livestreams_sort = null;
        }

        $Alllanguage   = Language::latest('created_at')->limit(15)->get()->map(function ($item) {
            $item['player_image_url'] =$item->language_image ?  URL::to('/').'/public/uploads/Language/'.$item->language_image : null ;
            return $item;
        });

        if(!empty($request->language_id)){
        $Language = Language::where('id', $request->language_id)->first();

        if(!empty($Language)){
          $VideoLanguage   = Video::Join('languagevideos','languagevideos.video_id','=','videos.id')
          ->where('languagevideos.language_id',$request->language_id)->get();
        }
        if(!empty($Language)){
          $languagesSeries = Series::Join('series_languages','series_languages.series_id','=','series.id')
          ->where('series_languages.language_id',$request->language_id)->get();
          }

        if(!empty($Language)){
          $languagesLive = LiveStream::Join('live_languages','live_languages.live_id','=','live_streams.id')
          ->where('live_languages.language_id',$request->language_id)->get();
          }

        if(!empty($Language)){

          $LanguagesAudio = Audio::Join('audio_languages','audio_languages.audio_id','=','audios.id')
          ->where('audio_languages.language_id',$request->language_id)->get();
        }

      }else{
        $VideoLanguage = [];
        $languagesSeries = [];
        $LanguagesAudio = [];
        $languagesLive = [];
      }

      if($this->Theme == 'theme4-check'){

        $section_index = (int) $request->input('section_index', 0);

        $based_network_count = $Series_based_on_Networks->count();
        $section_count = $based_network_count + 2;

        $series_sections = $Series_based_on_Networks->chunk(ceil($Series_based_on_Networks->count() / $based_network_count));

        if ($section_index === 0) {
            $response = [
                'status'          => 'true',
                'sections_count'  => $section_count,
                'next_section_index' => 1,
                'live_videos'     => $livestreams_sort,
            ];
        } elseif ($section_index > 0 && $section_index <= $based_network_count) {
          $section_data = $series_sections[$section_index - 1] ?? [];
            $response = [
                'status'                      => 'true',
                'sections_count'              => $section_count,
                'next_section_index' => $section_index + 1,
                'Series_based_on_Networks'    => array_values($section_data->toArray()),
            ];
        } elseif ($section_index == $based_network_count+1) {
            $response = [
                'status'          => 'true',
                'sections_count'  => $section_count,
                'next_section_index' => null,
                'series'          => $series,
            ];
        } else {
            $response = [
                'status' => 'false',
                'message' => 'Invalid section index',
            ];
        }

      }else{

      
                $response = array(
                  'status'=>'true',
                  // 'HomeSetting' => $HomeSetting,
                  // 'OrderHomeSetting' => $OrderHomeSetting,
                  // 'audios' => $audios,
                  // 'albums' => $albums,
                  // 'movies' => $movies,
                  // 'LiveCategory' => $LiveCategory,
                  // 'Alllanguage' => $Alllanguage  ,
                  // 'VideoLanguage' => $VideoLanguage  ,
                  // 'languagesSeries' => $languagesSeries  ,
                  // 'languagesLive' => $languagesLive  ,
                  // 'LanguagesAudio' => $LanguagesAudio  ,
                );

                $dataToCheck = [
                    'category_videos'               => $myData,
                    'movies'                        => $latest_videos,
                    'series'                        => $series,
                    'Series_based_on_Networks'      => $Series_based_on_Networks,
                    '24/7'                          => $epg,
                ];

                if ( !is_null($featured_videos) && count($featured_videos) > 0) {
                  $dataToCheck += ['featured_videos' => $featured_videos];
                }

                if ( !is_null($livestreams_sort) && count($livestreams_sort) > 0) {
                  $dataToCheck += ['live_videos' => $livestreams_sort];
                }

                foreach ($dataToCheck as $key => $value) {
                  if ($value !== null) {
                      $response[$key] = $value;
                  }
                }
      }
      } catch (\Throwable $th) {
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
          'nodata' => [],
        );
    }

    return response()->json($response, 200);

    }

    public function NetworkLoadSeries(Request $request) {
      try{

          $user_id = $request->query('user_id');
          $SeriesId = $request->series_id;
      
          $series = Series::where('id',$SeriesId)
                            ->get()
                            ->map(function ($series) use($user_id) {
                                $series['player_image_url'] = (!is_null($series->player_image) && $series->player_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$series->player_image) : $this->default_horizontal_image_url;
                                $series['Tv_image_url'] = (!is_null($series->tv_image) && $series->tv_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$series->tv_image) : $this->default_horizontal_image_url;
                                $description = $series->description;
                                  do {
                                      $previous = $description;
                                      $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                  } while ($description !== $previous);
                                $details = $series->details;
                                  do {
                                      $previous = $details;
                                      $details = html_entity_decode($details, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                  } while ($details !== $previous);
                                $series['details']             = strip_tags($details);
                                $series['description']         = strip_tags($description);
                                $series_share_url = null;
                                if($series['access'] == 'subscriber'){
                                  $subs_purchase = !empty($user_id) ? Subscription::where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
                                  $subs_exists_check_query = 0;
                                  if($subs_purchase){
                                    $new_date = Carbon::parse($subs_purchase->ends_at);
                                    $currentdate = Carbon::now();
                                    $subs_exists_check_query = $new_date->isAfter($currentdate) ? 1 : 0; 
                                  }
                                  $series['access'] =  ($subs_exists_check_query > 0) ? 'guest' : 'subscriber';
                                  $series_share_url = $series['access'] == 'subscriber' ? URL::to('becomesubscriber') : null ;
                                }elseif($series['access'] == 'registered'){
                                  $series['access'] = !empty($user_id) ? 'guest' :  'registered'; 
                                }else{
                                  $series['access'] = 'guest';
                                }
                                $series['series_share_url'] = $series_share_url;
                                $series['seasons'] = SeriesSeason::where('series_id', $series->id)
                                                                ->get()
                                                                ->map(function ($season) use($user_id, $series) {
                                                                    $ppv_purchase = !empty($user_id) ? PpvPurchase::where('season_id',$season->id)->where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
                                                                    $ppv_exists_check_query = 0;
                                                                    if($ppv_purchase){
                                                                      $new_date = Carbon::parse($ppv_purchase->to_time);
                                                                      $currentdate = Carbon::now();
                                                                      $ppv_exists_check_query = $new_date->isAfter($currentdate) ? 1 : 0; 
                                                                    }

                                                                    if($season->access == 'free'){
                                                                      $season_access = 'guest';
                                                                    }elseif( $ppv_exists_check_query > 0){
                                                                      $season_access = 'guest';
                                                                    }else{
                                                                      $season_access = 'PPV';
                                                                    }
                                                                    $episodes = Episode::where('season_id', $season->id)
                                                                        ->orderBy('episode_order')
                                                                        ->get()
                                                                        ->map(function ($episode) {
                                                                          if($this->Theme == 'theme4'){
                                                                            if($episode->type == 'm3u8'){
                                                                              $url = URL::to('/storage/app/public-latest/'. $episode->path .'.m3u8') ;
                                                                            } elseif($episode->type == 'embed'){
                                                                                $url = $episode->url;
                                                                            }
                                                                            else{
                                                                              $url = $episode->url;
                                                                            }
                                                                          }else{
                                                                            if($episode->type == 'm3u8'){
                                                                              $url = URL::to('/storage/app/public/'. $episode->path .'.m3u8') ;
                                                                            } elseif($episode->type == 'embed'){
                                                                                $url = $episode->url;
                                                                            }
                                                                            else{
                                                                              $url = $episode->url;
                                                                            }
                                                                          }
                                                                          $description = $episode->episode_description;
                                                                                      do {
                                                                                          $previous = $description;
                                                                                          $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                                                                      } while ($description !== $previous);
                                                                          return [
                                                                            'id'                       => $episode->id,
                                                                            'title'                    => $episode->title,
                                                                            'slug'                     => $episode->slug,
                                                                            'player_image_url'         => (!is_null($episode->player_image) && $episode->player_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$episode->player_image) : $this->default_horizontal_image_url,
                                                                            'description'              => strip_tags($description),
                                                                            'episodeNumber'            => $episode->episode_order,
                                                                            'access'                   => $episode->access,
                                                                            'content'                  => [
                                                                                                            'dateAdded' => $episode->created_at,
                                                                                                            'videos' => [
                                                                                                                [
                                                                                                                    'videoType' => $episode->type,
                                                                                                                    'url' => $url,
                                                                                                                ],
                                                                                                            ],
                                                                                                            'duration' => $episode->duration,
                                                                                                          ],
                                                                            'Tv_image_url'                 => (!is_null($episode->tv_image) && $episode->tv_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$episode->tv_image) : $this->default_horizontal_image_url,
                                                                            'status'                   => $episode->status,
                                                                          ];
                                                                        });

                                                                    // Only include the season if it has episodes
                                                                    if ($episodes->isNotEmpty()) {
                                                                        return [
                                                                            'title' => $season->series_seasons_name,
                                                                            'access' => $season_access,
                                                                            'share_url' => $season_access == 'PPV' ? URL::to('app/play_series/'.$series->slug) : null,
                                                                            'episodes' => $episodes,
                                                                        ];
                                                                    }

                                                                    // Return null for seasons with no episodes
                                                                    return null;
                                                                })
                                                                ->filter(function ($value) {
                                                                    return $value !== null;
                                                                });

                                                            // Remove the 'seasons' key if it's an empty array
                                                            if ($series['seasons']->isEmpty()) {
                                                                unset($series['seasons']);
                                                            }

                            return $series;
                          });
      
          return response()->json([
              'status'   => 'true',
              'series' => $series,
          ]);
    }catch(\Throwable $th){
      $response = array(
        'status'=>'false',
        'message'=>$th->getMessage(),
      );
    }
  }

    // public function NetworkLoadSeries(Request $request) {
    //     $user_id = $request->query('user_id');
    //     $networkId = $request->network_id;
    //     $page = $request->page ?? 1;
    //     $limit = 6;
    //     $offset = ($page - 1) * $limit;
    
    //     $series = Series::join('series_network_order', 'series.id', '=', 'series_network_order.series_id')
    //                     ->where('series.active', 1)
    //                     ->where('series_network_order.network_id', $networkId)
    //                     ->orderBy('series_network_order.order', 'asc')
    //                       ->offset($offset)
    //                       ->limit($limit)
    //                       ->get()
    //                       ->map(function ($series) use($user_id) {
    //                           $series['player_image_url'] = (!is_null($series->player_image) && $series->player_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$series->player_image) : $this->default_horizontal_image_url;
    //                           $series['Tv_image_url'] = (!is_null($series->tv_image) && $series->tv_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$series->tv_image) : $this->default_horizontal_image_url;
    //                           $description = $series->description;
    //                             do {
    //                                 $previous = $description;
    //                                 $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
    //                             } while ($description !== $previous);
    //                           $details = $series->details;
    //                             do {
    //                                 $previous = $details;
    //                                 $details = html_entity_decode($details, ENT_QUOTES | ENT_HTML5, 'UTF-8');
    //                             } while ($details !== $previous);
    //                           $series['details']             = strip_tags($details);
    //                           $series['description']         = strip_tags($description);
    //                           $series_share_url = null;
    //                           if($series['access'] == 'subscriber'){
    //                             $subs_purchase = !empty($user_id) ? Subscription::where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
    //                             $subs_exists_check_query = 0;
    //                             if($subs_purchase){
    //                               $new_date = Carbon::parse($subs_purchase->ends_at);
    //                               $currentdate = Carbon::now();
    //                               $subs_exists_check_query = $new_date->isAfter($currentdate) ? 1 : 0; 
    //                             }
    //                             $series['access'] =  ($subs_exists_check_query > 0) ? 'guest' : 'subscriber';
    //                             $series_share_url = $series['access'] == 'subscriber' ? URL::to('becomesubscriber') : null ;
    //                           }elseif($series['access'] == 'registered'){
    //                             $series['access'] = !empty($user_id) ? 'guest' :  'registered'; 
    //                           }else{
    //                             $series['access'] = 'guest';
    //                           }
    //                           $series['series_share_url'] = $series_share_url;
    //                           $series['seasons'] = SeriesSeason::where('series_id', $series->id)
    //                                                           ->get()
    //                                                           ->map(function ($season) use($user_id, $series) {
    //                                                               $ppv_purchase = !empty($user_id) ? PpvPurchase::where('season_id',$season->id)->where('user_id',$user_id)->orderBy('created_at', 'desc')->first() : null;
    //                                                               $ppv_exists_check_query = 0;
    //                                                               if($ppv_purchase){
    //                                                                 $new_date = Carbon::parse($ppv_purchase->to_time);
    //                                                                 $currentdate = Carbon::now();
    //                                                                 $ppv_exists_check_query = $new_date->isAfter($currentdate) ? 1 : 0; 
    //                                                               }

    //                                                               if($season->access == 'free'){
    //                                                                 $season_access = 'guest';
    //                                                               }elseif( $ppv_exists_check_query > 0){
    //                                                                 $season_access = 'guest';
    //                                                               }else{
    //                                                                 $season_access = 'PPV';
    //                                                               }
    //                                                               $episodes = Episode::where('season_id', $season->id)
    //                                                                   ->orderBy('episode_order')
    //                                                                   ->get()
    //                                                                   ->map(function ($episode) {
    //                                                                     if($this->Theme == 'theme4'){
    //                                                                       if($episode->type == 'm3u8'){
    //                                                                         $url = URL::to('/storage/app/public-latest/'. $episode->path .'.m3u8') ;
    //                                                                       } elseif($episode->type == 'embed'){
    //                                                                           $url = $episode->url;
    //                                                                       }
    //                                                                       else{
    //                                                                         $url = $episode->url;
    //                                                                       }
    //                                                                     }else{
    //                                                                       if($episode->type == 'm3u8'){
    //                                                                         $url = URL::to('/storage/app/public/'. $episode->path .'.m3u8') ;
    //                                                                       } elseif($episode->type == 'embed'){
    //                                                                           $url = $episode->url;
    //                                                                       }
    //                                                                       else{
    //                                                                         $url = $episode->url;
    //                                                                       }
    //                                                                     }
    //                                                                     $description = $episode->episode_description;
    //                                                                                 do {
    //                                                                                     $previous = $description;
    //                                                                                     $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
    //                                                                                 } while ($description !== $previous);
    //                                                                     return [
    //                                                                       'id'                       => $episode->id,
    //                                                                       'title'                    => $episode->title,
    //                                                                       'slug'                     => $episode->slug,
    //                                                                       'player_image_url'         => (!is_null($episode->player_image) && $episode->player_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$episode->player_image) : $this->default_horizontal_image_url,
    //                                                                       'description'              => strip_tags($description),
    //                                                                       'episodeNumber'            => $episode->episode_order,
    //                                                                       'access'                   => $episode->access,
    //                                                                       'content'                  => [
    //                                                                                                       'dateAdded' => $episode->created_at,
    //                                                                                                       'videos' => [
    //                                                                                                           [
    //                                                                                                               'videoType' => $episode->type,
    //                                                                                                               'url' => $url,
    //                                                                                                           ],
    //                                                                                                       ],
    //                                                                                                       'duration' => $episode->duration,
    //                                                                                                     ],
    //                                                                       'Tv_image_url'                 => (!is_null($episode->tv_image) && $episode->tv_image != 'default_image.jpg') ? $this->BaseURL.('/images/'.$episode->tv_image) : $this->default_horizontal_image_url,
    //                                                                       'status'                   => $episode->status,
    //                                                                     ];
    //                                                                   });

    //                                                               // Only include the season if it has episodes
    //                                                               if ($episodes->isNotEmpty()) {
    //                                                                   return [
    //                                                                       'title' => $season->series_seasons_name,
    //                                                                       'access' => $season_access,
    //                                                                       'share_url' => $season_access == 'PPV' ? URL::to('app/play_series/'.$series->slug) : null,
    //                                                                       'episodes' => $episodes,
    //                                                                   ];
    //                                                               }

    //                                                               // Return null for seasons with no episodes
    //                                                               return null;
    //                                                           })
    //                                                           ->filter(function ($value) {
    //                                                               return $value !== null;
    //                                                           });

    //                                                       // Remove the 'seasons' key if it's an empty array
    //                                                       if ($series['seasons']->isEmpty()) {
    //                                                           unset($series['seasons']);
    //                                                       }

    //                       return $series;
    //                     });
    
    //     return response()->json([
    //         'series' => $series,
    //         'next_page' => count($series) == $limit ? $page + 1 : null, // If series are available, provide next page
    //     ]);
    // }
  

    public function LanguageVideo(Request $request){

      $langid = $request->langid;
      $Language = Language::where('id', $langid)->first();
      try{

        if(!empty($Language)){
          $languagesVideo = Video::Join('languagevideos','languagevideos.video_id','=','videos.id')
          ->where('languagevideos.language_id',$langid)->get();

          if(count($languagesVideo) > 0){
            $status = 'true';
          }else{
            $status = 'false';
          }

          $response = array(
              'status'=>$status,
              'Language_name' => $Language->name,
              'Language' => $Language,
              'language_videos' => $languagesVideo,
          );
        }

      } catch (\Throwable $th) {
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
          'nodata' => [],
        );
    }
    return response()->json($response, 200);

    }


    public function LanguageSeries(Request $request){

      $langid = $request->langid;
      $Language = Language::where('id', $langid)->first();
      try{

        if(!empty($Language)){
          $languagesSeries = Series::Join('series_languages','series_languages.series_id','=','series.id')
          ->where('series_languages.language_id',$langid)->get();

          if(count($languagesSeries) > 0){
            $status = 'true';
          }else{
            $status = 'false';
          }

          $response = array(
              'status'=>$status,
              'Language_name' => $Language->name,
              'Language' => $Language,
              'languagesSeries' => $languagesSeries,
          );
        }

      } catch (\Throwable $th) {
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
          'nodata' => [],
        );
    }
    return response()->json($response, 200);

    }


    public function LanguageLive(Request $request){

      $langid = $request->langid;
      $Language = Language::where('id', $langid)->first();
      try{

        if(!empty($Language)){
          $languagesLive = LiveStream::Join('live_languages','live_languages.live_id','=','live_streams.id')
          ->where('live_languages.language_id',$langid)->get();
          if(count($languagesLive) > 0){
            $status = 'true';
          }else{
            $status = 'false';
          }
          $response = array(
              'status'=> $status,
              'Language_name' => $Language->name,
              'Language' => $Language,
              'languagesLive' => $languagesLive,
          );
        }

      } catch (\Throwable $th) {
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
          'nodata' => [],
        );
    }
    return response()->json($response, 200);

    }



    public function LanguageAudio(Request $request){

      $langid = $request->langid;
      $Language = Language::where('id', $langid)->first();
      try{

        if(!empty($Language)){

          $LanguagesAudio = Audio::Join('audio_languages','audio_languages.audio_id','=','audios.id')
          ->where('audio_languages.language_id',$langid)->get();

          if(count($LanguagesAudio) > 0){
            $status = 'true';
          }else{
            $status = 'false';
          }
          $response = array(
              'status'=> $status,
              'Language_name' => $Language->name,
              'Language' => $Language,
              'languagesLive' => $languagesLive,
          );
        }

      } catch (\Throwable $th) {
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
          'nodata' => [],
        );
    }
    return response()->json($response, 200);

    }

    public function TV_Language(Request $request)
    {

      $Language_id = $request->Language_id;

      $Language = Language::where('id', $Language_id)->first();

        try{

            $languagesVideo = Video::Join('languagevideos','languagevideos.video_id','=','videos.id')
                              ->where('languagevideos.language_id',$Language_id)->get();

            $languagesLive = LiveStream::Join('live_languages','live_languages.live_id','=','live_streams.id')
                                  ->where('live_languages.language_id',$Language_id)->get();

            $languagesSeries = Series::Join('series_languages','series_languages.series_id','=','series.id')
                                ->where('series_languages.language_id',$Language_id)->get();

            $LanguagesAudio = Audio::Join('audio_languages','audio_languages.audio_id','=','audio.id')
                                ->where('audio_languages.language_id',$Language_id)->get();

            $response = array(
                'status'=> 'true',
                'language_name'    => $Language ? $Language->name : "No data found",
                'Language'         => $Language ,
                'languages_Video'  => $languagesVideo ,
                'languages_Live'   => $languagesLive,
                'languages_Series' => $languagesSeries,
                'Languages_Audio'  => $LanguagesAudio ,
            );

        }
        catch (\Throwable $th) {

            $response = array(
              'status'=>'false',
              'message'=>$th->getMessage(),
            );

        }

      return response()->json($response, 200);

    }

    public function Page(Request $request)
    {
      $page_id = $request->page_id;
     $pages = Page::where('id', '=', $page_id)->where('active', '=', 1)->get()->map(function ($item) {
       $item['page_url'] = URL::to('page').'/'.$item->slug;
      //  $details = html_entity_decode($item->body);
      //  $description = strip_tags($details);
      //  $str_replace = str_replace("\r", '', $description);
      //  $item['body'] = str_replace("\n", '', $str_replace);
       return $item;
     });
     $response = array(
       'status' => 'true',
       'pages' => $pages
     );
     return response()->json($response, 200);
    }
    public function TV_Search(Request $request)
    {

      $search_value =  $request['search'];


      try{

        $videos_count = Video::where('title', 'LIKE', '%'.$search_value.'%')->count();
        $videocategorie_count = VideoCategory::where('name', 'LIKE', '%'.$search_value.'%')->count();
        $videolanguage_count = Language::where('name', 'LIKE', '%'.$search_value.'%')->count();
        $videoartist_count = Artist::where('artist_name', 'LIKE', '%'.$search_value.'%')->count();

        $albums_count = AudioAlbums::where('albumname', 'LIKE', '%'.$search_value.'%')->count();

        $audios_count = Audio::where('title', 'LIKE', '%'.$search_value.'%')->count();
        $audiocategories_count = AudioCategory::where('name', 'LIKE', '%'.$search_value.'%')->count();
        $audiolanguages_count = Language::where('name', 'LIKE', '%'.$search_value.'%')->count();
        $audioartists_count = Artist::where('artist_name', 'LIKE', '%'.$search_value.'%')->count();


        $liveStream_count = LiveStream::where('title', 'LIKE', '%'.$search_value.'%')->count();
        $LiveCategory_count = LiveCategory::where('name', 'LIKE', '%'.$search_value.'%')->count();
        $LiveLanguage_count = Language::where('name', 'LIKE', '%'.$search_value.'%')->count();

        $series_count = Series::where('title', 'LIKE', '%'.$search_value.'%')->count();
        $seriescategorie_count = VideoCategory::where('name', 'LIKE', '%'.$search_value.'%')->count();
        $serieslanguage_count = Language::where('name', 'LIKE', '%'.$search_value.'%')->count();
        $seriesartist_count = Artist::where('artist_name', 'LIKE', '%'.$search_value.'%')->count();

        if ($liveStream_count > 0) {
          $LiveStream = LiveStream::where('title', 'LIKE', '%'.$search_value.'%')->where('status','=',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
            $item['source'] = 'livestream';
            return $item;
          });

          } else {
            $LiveStream = [];
          }
        if ($audios_count > 0) {
          $audios = Audio::where('title', 'LIKE', '%'.$search_value.'%')->where('status','=',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
            $item['source'] = 'audios';
            return $item;
          });

          } else {
            $audios = [];
          }

        if ($albums_count > 0) {
          $albums = AudioAlbums::where('albumname', 'LIKE', '%'.$search_value.'%')->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/albums/'.$item->album;
        $item['source'] = 'audios_album';
        return $item;
        });

        } else {
        $albums = [];
        }

        if ($videos_count > 0) {
              $videos = Video::where('title', 'LIKE', '%'.$search_value.'%')->where('status','=',1)->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
          $item['source'] = 'videos';
          return $item;
        });

        } else {
          $videos = [];
        }

        if ($series_count > 0) {
          $series = Series::where('title', 'LIKE', '%'.$search_value.'%')->where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
          $item['source'] = 'series';
          return $item;
        });

        } else {
          $series = [];
        }
// video management
        $videoData = array();

        $videocategories = VideoCategory::where('name', 'LIKE', '%'.$search_value.'%')->get()->toArray();
        $videolanguages = Language::where('name', 'LIKE', '%'.$search_value.'%')->get()->toArray();
        $videoartists = Artist::where('artist_name', 'LIKE', '%'.$search_value.'%')->get()->toArray();

        if ($videocategorie_count > 0 || $videolanguage_count > 0 || $videoartist_count > 0) {

        foreach ($videocategories as $key => $videocategory) {
          $videocategoryid = $videocategory['id'];
          $genre_image = $videocategory['image'];
          $videocategories= Video::Join('categoryvideos','categoryvideos.video_id','=','videos.id')
          ->where('categoryvideos.category_id',$videocategoryid)
          ->where('active','=',1)->where('status','=',1)->where('draft','=',1)->orderBy('videos.created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['video_url'] = URL::to('/').'/storage/app/public/';
            $item['category_name'] = VideoCategory::where('id',$item->category_id)->pluck('slug')->first();
            $item['source'] = 'videos';
            return $item;
          });
          $videoData[] = array(
            'gener_name' =>  VideoCategory::where('id',$videocategoryid)->pluck('name')->first(),
            'home_genre' =>  VideoCategory::where('id',$videocategoryid)->pluck('home_genre')->first(),
            'gener_id' =>  VideoCategory::where('id',$videocategoryid)->pluck('id')->first(),
            "videocategories" => $videocategories
          );
        }
        foreach ($videolanguages as $key => $videolanguage) {
          $videolanguageid = $videolanguage['id'];
          $genre_image = $videolanguage['language_image'];
          $videolanguages= Video::Join('languagevideos','languagevideos.video_id','=','videos.id')
          ->where('languagevideos.language_id',$videolanguageid)
          ->where('active','=',1)->where('status','=',1)->where('draft','=',1)->orderBy('videos.created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['video_url'] = URL::to('/').'/storage/app/public/';
            $item['source'] = 'videos';
            return $item;
          });
          $videoData[] = array(
            'gener_name' =>  Language::where('id',$videolanguageid)->pluck('name')->first(),
            'gener_id' =>  Language::where('id',$videolanguageid)->pluck('id')->first(),
            "videolanguages" => $videolanguages
          );
        }

        foreach ($videoartists as $key => $videoartist) {
          $videoartistid = $videoartist['id'];
          $genre_image = $videoartist['image'];
          $videoartists= Video::join('video_artists', 'video_artists.video_id', '=', 'videos.id')
          ->where('video_artists.artist_id',$videoartistid)
          ->where('active','=',1)->where('status','=',1)->where('draft','=',1)->orderBy('videos.created_at', 'desc')->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['video_url'] = URL::to('/').'/storage/app/public/'; 
            $item['source'] = 'videos';
            return $item;
          });
          $videoData[] = array(
            'gener_name' =>  Artist::where('id',$videoartistid)->pluck('artist_name')->first(),
            'gener_id' =>  Artist::where('id',$videoartistid)->pluck('id')->first(),
            "videoartists" => $videoartists
          );
        }

      }

  //  Audio Management

      $audioData = array();

      $audiocategories = AudioCategory::where('name', 'LIKE', '%'.$search_value.'%')->get()->toArray();
      $audiolanguages = Language::where('name', 'LIKE', '%'.$search_value.'%')->get()->toArray();
      $audioartists = Artist::where('artist_name', 'LIKE', '%'.$search_value.'%')->get()->toArray();

      if ($audiocategories_count > 0 || $audiolanguages_count > 0 || $audioartists_count > 0) {

        foreach ($audiocategories as $key => $audiocategory) {
          $audiocategoryid = $audiocategory['id'];
          $genre_image = $audiocategory['image'];

          $audiocategories = Audio::Join('category_audios','category_audios.audio_id','=','audio.id')
          ->where('category_audios.category_id',$audiocategoryid)
          ->orderBy('audio.created_at', 'desc')
          ->get()->map(function ($item) {
            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
            // $item['auido_url'] = URL::to('/').'/storage/app/public/';
            $item['category_name'] = AudioCategory::where('id',$item->category_id)->pluck('slug')->first();
            $item['source'] = 'audios';
            return $item;
          });
        $audioData[] = array(
          'gener_name' =>  AudioCategory::where('id',$audiocategoryid)->pluck('name')->first(),
          'gener_id' =>  AudioCategory::where('id',$audiocategoryid)->pluck('id')->first(),
          "audiocategories" => $audiocategories
        );
      }
      foreach ($audiolanguages as $key => $audiolanguage) {
        $audiolanguageid = $audiolanguage['id'];
        $genre_image = $audiolanguage['language_image'];
        $audiolanguages= Audio::Join('audio_languages','audio_languages.audio_id','=','audio.id')
        ->where('audio_languages.language_id',$audiolanguageid)
        ->where('active','=',1)->where('status','=',1)->orderBy('audio.created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['source'] = 'audios';
          return $item;
        });
        $audioData[] = array(
          'gener_name' =>  Language::where('id',$audiolanguageid)->pluck('name')->first(),
          'gener_id' =>  Language::where('id',$audiolanguageid)->pluck('id')->first(),
          "audiolanguages" => $audiolanguages
        );
      }

      foreach ($audioartists as $key => $audioartist) {
        $audioartistid = $audioartist['id'];
        $genre_image = $audioartist['image'];
        $audioartists= Audio::join('audio_artists', 'audio_artists.audio_id', '=', 'audio.id')
        ->where('audio_artists.artist_id',$audioartistid)
        ->where('active','=',1)->where('status','=',1)->orderBy('audio.created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['source'] = 'audios';
          return $item;
        });
        $audioData[] = array(
          'gener_name' =>  Artist::where('id',$audioartistid)->pluck('artist_name')->first(),
          'gener_id' =>  Artist::where('id',$audioartistid)->pluck('id')->first(),
          "audioartists" => $audioartists
        );
      }

    }



  //  Series Management

  $seriesData = array();

  $seriescategories = VideoCategory::where('name', 'LIKE', '%'.$search_value.'%')->get()->toArray();
  $serieslanguages = Language::where('name', 'LIKE', '%'.$search_value.'%')->get()->toArray();
  $seriesartists = Artist::where('artist_name', 'LIKE', '%'.$search_value.'%')->get()->toArray();

  if ($seriescategorie_count > 0 || $serieslanguage_count > 0 || $seriesartist_count > 0) {

    foreach ($seriescategories as $key => $seriescategorie) {
      $seriescategorieid = $seriescategorie['id'];
      $genre_image = $seriescategorie['image'];

      $seriescategories = Series::Join('series_categories','series_categories.series_id','=','series.id')
      ->where('series_categories.category_id',$seriescategorieid)
      ->where('active','=',1)
      ->orderBy('series.created_at', 'desc')
      ->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        // $item['auido_url'] = URL::to('/').'/storage/app/public/';
        $item['category_name'] = VideoCategory::where('id',$item->category_id)->pluck('slug')->first();
        $item['source'] = 'series';
        return $item;
      });
    $seriesData[] = array(
      'gener_name' =>  VideoCategory::where('id',$seriescategorieid)->pluck('name')->first(),
      'gener_id' =>  VideoCategory::where('id',$seriescategorieid)->pluck('id')->first(),
      "seriescategories" => $seriescategories
    );
  }
  foreach ($serieslanguages as $key => $serieslanguage) {
    $serieslanguageid = $serieslanguage['id'];
    $genre_image = $serieslanguage['language_image'];
    $serieslanguage= Series::Join('series_languages','series_languages.series_id','=','series.id')
    ->where('series_languages.language_id',$serieslanguageid)
    ->where('active','=',1)->orderBy('series.created_at', 'desc')->get()->map(function ($item) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['source'] = 'series';
      return $item;
    });
    $seriesData[] = array(
      'gener_name' =>  Language::where('id',$serieslanguageid)->pluck('name')->first(),
      'gener_id' =>  Language::where('id',$serieslanguageid)->pluck('id')->first(),
      "serieslanguage" => $serieslanguage
    );
  }

  foreach ($seriesartists as $key => $seriesartist) {
    $seriesartistid = $seriesartist['id'];
    $genre_image = $seriesartist['image'];
    $seriesartists= Series::join('series_artists', 'series_artists.series_id', '=', 'series.id')
    ->where('series_artists.artist_id',$seriesartistid)
    ->where('active','=',1)->orderBy('series.created_at', 'desc')->get()->map(function ($item) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['source'] = 'series';
      return $item;
    });
    $seriesData[] = array(
      'gener_name' =>  Artist::where('id',$seriesartistid)->pluck('artist_name')->first(),
      'gener_id' =>  Artist::where('id',$seriesartistid)->pluck('id')->first(),
      "seriesartists" => $seriesartists
    );
  }

}

// Live Management
$liveData = array();
$livecategories = LiveCategory::where('name', 'LIKE', '%'.$search_value.'%')->get()->toArray();
$livelanguages = Language::where('name', 'LIKE', '%'.$search_value.'%')->get()->toArray();


if($LiveCategory_count > 0 || $LiveLanguage_count > 0){


  foreach ($livecategories as $key => $livecategory) {

    $livecategoryid = $livecategory['id'];
    $genre_image = $livecategory['image'];
    $live_category= LiveStream::Join('livecategories','livecategories.live_id','=','live_streams.id')
      ->where('livecategories.category_id',$livecategoryid)
      ->where('active','=',1)->where('status','=',1)
      ->orderBy('live_streams.created_at', 'desc')->get()->map(function ($item) {

        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['player_image_url'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
        $item['Tv_image_url'] = URL::to('/').'/public/uploads/images/'.$item->Tv_live_image;

        $item['category_name'] = LiveCategory::where('id',$item->category_id)->pluck('slug')->first();
        $item['category_order'] = LiveCategory::where('id',$item->category_id)->pluck('order')->first();
        $item['source'] = 'livestream';

        return $item;
      });
      $liveData[] = array(
        'gener_name' =>  LiveCategory::where('id',$livecategoryid)->pluck('name')->first(),
        'gener_id' =>  LiveCategory::where('id',$livecategoryid)->pluck('id')->first(),
        "live_category" => $live_category,
      );
      }

      foreach ($livelanguages as $key => $livelanguage) {
      $livelanguageid = $livelanguage['id'];
      $genre_image = $livelanguage['language_image'];
      $livelanguages= LiveStream::Join('live_languages','live_languages.live_id','=','live_streams.id')
      ->where('live_languages.language_id',$livelanguageid)
      ->where('active','=',1)->orderBy('live_streams.created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'livestream';

        return $item;
      });
      $liveData[] = array(
        'gener_name' =>  Language::where('id',$livelanguage)->pluck('name')->first(),
        'gener_id' =>  Language::where('id',$livelanguage)->pluck('id')->first(),
        "livelanguages" => $livelanguages,
      );

      }
    }

            $response = array(
                'status'=> 'true',
                'audios'         => $audios ,
                'albums'  => $albums ,
                'videos'   => $videos,
                'series' => $series,
                'livestream'  => $LiveStream ,
                'videoData'  => $videoData ,
                'audioData'  => $audioData ,
                'seriesData'  => $seriesData ,
                'liveData'  => $liveData ,


            );

        }
        catch (\Throwable $th) {

            $response = array(
              'status'=>'false',
              'message'=>$th->getMessage(),
            );

        }

      return response()->json($response, 200);
    }

    public function TVQRLogin(Request $request)
    {

      $email      =  $request['email'];
      $password   =  $request['password'];
      $tv_code    =  $request['tv_code '];
      $uniqueId   =  $request['uniqueId'];

      try{

        $TVLoginCode = TVLoginCode::where('uniqueId',$uniqueId)->count();

        if($TVLoginCode > 0){

          TVLoginCode::where('uniqueId',$uniqueId)->orderBy('created_at', 'DESC')->first()
          ->update([
            'email'       => $request->email,
            'uniqueId'    => $request->uniqueId,
            'tv_code'     => $request->tv_code,
            'type'        => 'Code',
          ]);

        }else{

          TVLoginCode::create([
            'email'       => $request->email,
            'uniqueId'    => $request->uniqueId,
            'tv_code'     => $request->tv_code,
            'type'        => 'Code',
            'status'      => 0,
        ]);


        }

        $user = User::where('email',$email)->first();
        if ($user) {
          if (Hash::check($password, $user->password)) {
            if($user->role == 'subscriber'){

              $Subscription = Subscription::where('user_id',$user->id)->orderBy('created_at', 'DESC')->first();
              $Subscription = Subscription::Join('subscription_plans','subscription_plans.plan_id','=','subscriptions.stripe_plan')
              ->where('subscriptions.user_id',$user->id)
              ->orderBy('subscriptions.created_at', 'desc')->first();
    
              $plans_name = $Subscription->plans_name;
              $plan_ends_at = $Subscription->ends_at;
    
            }else{
              $plans_name = '';
              $plan_ends_at = '';
            }
                $response = array(
                    'status'=> 'true',
                    'message' => 'Logged In Successfully',
                    'user_details'=> $user,
                    'plans_name'=>$plans_name,
                    'plan_ends_at'=>$plan_ends_at,
                    'avatar'=>URL::to('/').'/public/uploads/avatars/'.$user->avatar
                );
          } else {
              // Incorrect password
              $response = [
                  'status'  => 'false',
                  'message' => 'Password is incorrect',
              ];
          }
      } else {
          // Incorrect email
          $response = [
              'status'  => 'false',
              'message' => 'Email is incorrect',
          ];
      }
     } 
     catch (\Throwable $th) {

            $response = array(
              'status'=>'false',
              'message'=>$th->getMessage(),
            );

        }

      return response()->json($response, 200);
    }

    public function TVCodeVerification(Request $request)
    {

      try{

        TVLoginCode::create([
          'email'    => $request->email,
          'tv_code'  => $request->tv_code,
          'status'   => 0,
       ]);

        $response = array(
            'status'=> 'true',
            'message' => 'Added verfication code',
            'tv_code' => $request->tv_code,
        );

        }
        catch (\Throwable $th) {

            $response = array(
              'status'=>'false',
              'message'=>$th->getMessage(),
            );

        }

      return response()->json($response, 200);
    }

    public function TVCodeLogin(Request $request)
    {

      $tv_code =  $request['tv_code'];
      $uniqueId =  $request['uniqueId'];

      try{
        $TVLoginCodecount = TVLoginCode::where('tv_code',$request->tv_code)->count();
        if($TVLoginCodecount < 5){

        
        TVLoginCode::where('tv_code',$tv_code)->orderBy('created_at', 'DESC')->first()
        ->update([
           'status'  => 1,
           'tv_name'  => $request->tv_name,
            'uniqueId' =>  $request['uniqueId'],
        ]);
        $TVLoginCode = TVLoginCode::where('tv_code',$tv_code)->where('status',1)->orderBy('created_at', 'DESC')->first();

        if(!empty($TVLoginCode)){

        $user = User::where('email',$TVLoginCode->email)->first();
        if($user->role == 'subscriber'){

          $Subscription = Subscription::where('user_id',$user->id)->orderBy('created_at', 'DESC')->first();
          $Subscription = Subscription::Join('subscription_plans','subscription_plans.plan_id','=','subscriptions.stripe_plan')
          ->where('subscriptions.user_id',$user->id)
          ->orderBy('subscriptions.created_at', 'desc')->first();

          $plans_name = $Subscription->plans_name;
          $plan_ends_at = $Subscription->ends_at;

        }else{
          $plans_name = '';
          $plan_ends_at = '';
        }
        $response = array(
          'status'=> 'true',
          'message' => 'Logged In Successfully',
          'user_details'=> $user,
          'plans_name'=>$plans_name,
          'plan_ends_at'=>$plan_ends_at,
          'tv_code'=>$tv_code,
          'uniqueId'=>$request['uniqueId'],
          'avatar'=>URL::to('/').'/public/uploads/avatars/'.$user->avatar,
          'Count_User' => $TVLoginCodecount,

      );
      }else{
          $response = array(
            'status'=> 'false',
            'message' => 'User Count 0',
            'Count_User' => 0,
        );
      }

         } else{

            $response = array(
              'status'=> 'false',
              'message' => 'User Count Exited',
              'Count_User' => $TVLoginCodecount,
          );
          }
        }
        catch (\Throwable $th) {

            $response = array(
              'status'=>'false',
              'message'=>$th->getMessage(),
            );

        }

      return response()->json($response, 200);
    }

    public function TVLogout(Request $request)
    {

      try{

        $TVLoginCode = TVLoginCode::where('email',$request->email)->where('status',1)->orderBy('created_at', 'DESC')->first();

        $TVLoginCode=TVLoginCode::where('email',$request->email)->where('status',1)->orderBy('created_at', 'DESC')->delete();

        // TVLoginCode::where('email',$request->email)->where('status',1)->orderBy('created_at', 'DESC')->first()
        // ->update([
        //    'status'  => 0,
        // ]);

        $response = array(
            'status'=> 'true',
            'message' => 'Logged Out Successfully',
        );

        }
        catch (\Throwable $th) {

            $response = array(
              'status'=>'false',
              'message'=>$th->getMessage(),
            );

        }

      return response()->json($response, 200);
    }

  public function TVAlphaNumeric(Request $request)
  {

    try{
      $length = 2;
      $data = '1234567890ABCDEFGHIJKLMNOPQRSTUVWXYZabcefghijklmnopqrstuvwxyz';

      $unique_symbols = substr(str_shuffle($data), 0, $length);
      // $unique_symbols = substr(str_shuffle($data), 0, 8);
          $response = array(
            'status'=> 'true',
            'unique_symbols' => $unique_symbols,
        );
    }
      catch (\Throwable $th) {

      $response = array(
        'status'=>'false',
        'message'=>$th->getMessage(),
      );

  }

return response()->json($response, 200);


}


public function TvUniqueCodeLogin(Request $request)
{

  $uniqueId =  $request['uniqueId'];

  try{

    $TVLoginCode = TVLoginCode::where('uniqueId',$uniqueId)->where('status',1)->first();

    if(!empty($TVLoginCode)){

    $user = User::where('email',$TVLoginCode->email)->first();
    if($user->role == 'subscriber'){

      $Subscription = Subscription::where('user_id',$user->id)->orderBy('created_at', 'DESC')->first();
      $Subscription = Subscription::Join('subscription_plans','subscription_plans.plan_id','=','subscriptions.stripe_plan')
      ->where('subscriptions.user_id',$user->id)
      ->orderBy('subscriptions.created_at', 'desc')->first();

      $plans_name = $Subscription->plans_name;
      $plan_ends_at = $Subscription->ends_at;

    }else{
      $plans_name = '';
      $plan_ends_at = '';
    }

  }
      $response = array(
          'status'=> 'true',
          'message' => 'Logged In Successfully',
          'user_details'=> $user,
          'plans_name'=>$plans_name,
          'plan_ends_at'=>$plan_ends_at,
          'uniqueId'=>$request['uniqueId'],
          'avatar'=>URL::to('/').'/public/uploads/avatars/'.$user->avatar
      );

    }
    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }

  return response()->json($response, 200);
}

public function Paystack_VideoRent_Paymentverify ( Request $request )
  {
      try {

          $setting = Setting::first();
          $ppv_hours = $setting->ppv_hours;

          $d = new \DateTime('now');
          $now = $d->format('Y-m-d h:i:s a');
          $time = date('h:i:s', strtotime($now));
          $to_time = date('Y-m-d h:i:s a',strtotime('+'.$ppv_hours.' hour',strtotime($now)));

              // Verify Payment

          $reference_code = $request->reference_id;

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "https://api.paystack.co/transaction/verify/$reference_code",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_SSL_VERIFYHOST => 0,
              CURLOPT_SSL_VERIFYPEER => 0,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => $this->SecretKey_array,
          ));

          $result = curl_exec($curl);
          $payment_result = json_decode($result, true);
          $err = curl_error($curl);
          curl_close($curl);

                              // Store data

          $video = Video::where('id','=',$request->video_id)->first();

          if(!empty($video)){
              $moderators_id = $video->user_id;
          }

          if(!empty($moderators_id)){
              $moderator = ModeratorsUser::where('id','=',$moderators_id)->first();
              $total_amount = $video->ppv_price;
              $title =  $video->title;
              $commssion = VideoCommission::first();
              $percentage = $commssion->percentage;
              $ppv_price = $video->ppv_price;
              $admin_commssion = ($percentage/100) * $ppv_price ;
              $moderator_commssion = $ppv_price - $percentage;
              $moderator_id = $moderators_id;
          }
          else
          {
              $total_amount = $video->ppv_price;
              $title =  $video->title;
              $commssion = VideoCommission::first();
              $percentage = null;
              $ppv_price = $video->ppv_price;
              $admin_commssion =  null;
              $moderator_commssion = null;
              $moderator_id = null;
          }

          $purchase = new PpvPurchase;
          $purchase->user_id      = $request->user_id ;
          $purchase->video_id     = $request->video_id ;
          $purchase->total_amount = $payment_result['data']['amount'] ;
          $purchase->admin_commssion = $admin_commssion;
          $purchase->moderator_commssion = $moderator_commssion;
          $purchase->status = 'active';
          $purchase->to_time = $to_time;
          $purchase->moderator_id = $moderator_id;
          $purchase->save();

          if ($err) {                 // Error
              $response = array(
                  "status"  => 'false' ,
                  "message" => $err
              );
          }
          else {                      // Success
              $response = array(
                  "status"  => 'true' ,
                  "message" => "Payment done! Successfully" ,
              );
          }

      } catch (\Exception $e) {

          $response = array(
              "status"  => 'false' ,
              "message" => $e->getMessage(),
          );
      }

      return response()->json($response, 200);
  }

  public function Paystack_liveRent_Paymentverify( Request $request )
  {
      try {

          $setting = Setting::first();
          $ppv_hours = $setting->ppv_hours;

          $to_time = ppv_expirytime_started();

               // Verify Payment

          $reference_code = $request->reference_id;

          $curl = curl_init();

          curl_setopt_array($curl, array(
              CURLOPT_URL => "https://api.paystack.co/transaction/verify/$reference_code",
              CURLOPT_RETURNTRANSFER => true,
              CURLOPT_ENCODING => "",
              CURLOPT_MAXREDIRS => 10,
              CURLOPT_TIMEOUT => 30,
              CURLOPT_SSL_VERIFYHOST => 0,
              CURLOPT_SSL_VERIFYPEER => 0,
              CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
              CURLOPT_CUSTOMREQUEST => "GET",
              CURLOPT_HTTPHEADER => $this->SecretKey_array,
          ));

          $result = curl_exec($curl);
          $payment_result = json_decode($result, true);
          $err = curl_error($curl);
          curl_close($curl);

          $video = LiveStream::where('id','=',$request->live_id)->first();

          if(!empty($video)){
          $moderators_id = $video->user_id;
          }

          if(!empty($moderators_id)){
              $moderator        = ModeratorsUser::where('id','=',$moderators_id)->first();
              $total_amount     = $video->ppv_price;
              $title            =  $video->title;
              $commssion        = VideoCommission::first();
              $percentage       = $commssion->percentage;
              $ppv_price        = $video->ppv_price;
              $admin_commssion  = ($percentage/100) * $ppv_price ;
              $moderator_commssion = $ppv_price - $percentage;
              $moderator_id = $moderators_id;
          }
          else
          {
              $total_amount   = $video->ppv_price;
              $title          =  $video->title;
              $commssion      = VideoCommission::first();
              $percentage     = null;
              $ppv_price       = $video->ppv_price;
              $admin_commssion =  null;
              $moderator_commssion = null;
              $moderator_id = null;
          }

          $purchase = new PpvPurchase;
          $purchase->user_id       =  $request->user_id ;
          $purchase->live_id       =  $request->live_id ;
          $purchase->total_amount  =  $payment_result['data']['amount'] ;
          $purchase->admin_commssion = $admin_commssion;
          $purchase->moderator_commssion = $moderator_commssion;
          $purchase->status = 'active';
          $purchase->to_time = $to_time;
          $purchase->moderator_id = $moderator_id;
          $purchase->save();

          $livepurchase = new LivePurchase;
          $livepurchase->user_id  =  $request->user_id ;
          $livepurchase->video_id = $request->live_id;
          $livepurchase->to_time = $to_time;
          $livepurchase->expired_date = $to_time;
          $livepurchase->amount = $payment_result['data']['amount'] ;
          $livepurchase->from_time = Carbon::now()->format('Y-m-d H:i:s');
          $livepurchase->unseen_expiry_date = ppv_expirytime_notstarted();
          $livepurchase->status = 1;
          $livepurchase->save();

          if ($err) {                 // Error
              $response = array(
                  "status"  => 'false' ,
                  "message" => $err
              );
          }
          else {                      // Success
              $response = array(
                  "status"  => 'true' ,
                  "message" => "Payment done! Successfully for PPV Live-id = " .$request->live_id ,
              );
          }

      } catch (\Exception $e) {

          $response = array(
              "status"  => 'false' ,
              "message" => $e->getMessage(),
         );
      }
      return response()->json($response, 200);
  }



public function CheckBecomeSubscription(Request $request)
{

  $user_id =  $request['user_id'];

  try{

    $Subscription = Subscription::where('user_id',$user_id)->whereDate('created_at','=',\Carbon\Carbon::now()->today())->first();

    if(!empty($Subscription)){

    $user = User::where('id',$Subscription->user_id)->first();

    if($user->role == 'subscriber'){
      $role = $user->role;
    }else{
      $role = $user->role;
    }

    $response = array(
      'status'=> 'true',
      'message' => 'Verfied Become Subscription',
      'user_role'=> $role,
      'user_details'=> $user,
  );

  }else{

      $response = array(
        'status'=> 'true',
        'message' => 'Verfied Become Subscription',
        'user_role'=> '',
        'user_details'=> '',
    );
  }


    }
    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}
 
public function test( $page_no)
{

  $getCategories = Video::Paginate( 20, ['*'], 'page', $page_no );

  return response()->json($getCategories,200);

}


public function VideoSchedules(Request $request)
{

  try{

    $video_schedules = VideoSchedules::get();

    $response = array(
      'status'=> 'true',
      'message' => 'Video Schedules Retrived Data',
      'video_schedules'=> $video_schedules,
  );


    }
    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}



public function ScheduledVideos(Request $request)
{

  try{

    $scheduled_videos = ScheduleVideos::get();

    $response = array(
      'status'=> 'true',
      'message' => 'Scheduled Videos Retrived Data',
      'scheduled_videos'=> $scheduled_videos,
  );


    }
    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}


public function ReScheduledVideos(Request $request)
{

  try{

    $rescheduled_videos = ReSchedule::get();

    $response = array(
      'status'=> 'true',
      'message' => 'ReScheduled Videos Retrived Data',
      'rescheduled_videos'=> $rescheduled_videos,
  );


    }
    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}

public function Video_Schedules(Request $request)
{

  try{

    $Schedule_id =  $request['schedule_id'];

    $VideoSchedules = VideoSchedules::where("id", "=", $Schedule_id)
    ->first(); 

    $response = array(
      'status'=> 'true',
      'message' => 'Video Schedules Retrived Data',
      'VideoSchedules'=> $VideoSchedules,
  );


    }
    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}


public function Scheduled_Videos(Request $request)
{

  try{

    $Schedule_id =  $request['schedule_id'];
    $shedule_date =  $request['shedule_date'];

    $VideoSchedules = VideoSchedules::where("id", "=", $Schedule_id)
    ->first(); 
    $scheduled_videos = ScheduleVideos::where('schedule_id',$Schedule_id)->where('shedule_date',$shedule_date)->get();

    $response = array(
      'status'=> 'true',
      'message' => 'Schedule Videos Videos Retrived Data',
      'VideoSchedules'=> $VideoSchedules,
      'scheduled_videos'=> $scheduled_videos,

  );


    }
    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}


public function ReScheduled_Videos(Request $request)
{

  try{

    $Schedule_id =  $request['schedule_id'];
    $reschedule_date =  $request['reschedule_date'];

    $VideoSchedules = VideoSchedules::where("id", "=", $Schedule_id)
    ->first(); 
    $scheduled_videos = ReScheduled::where('schedule_id',$Schedule_id)->where('reschedule_date',$reschedule_date)->get();

    $response = array(
      'status'=> 'true',
      'message' => 'ReScheduled Videos Retrived Data',
      'VideoSchedules'=> $VideoSchedules,
  );


    }
    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}


public function TvQRCodeLogin(Request $request)
{

  $tv_code =  $request['tv_qrcode'];
  $uniqueId =  $request['uniqueId'];
  $email =  $request['email'];

  try{
    
    $TVLoginCode = TVLoginCode::where('tv_code',$tv_code)->where('status',1)->first();
    $TVLoginCodecount = TVLoginCode::where('email',$email)->where('status',1)->count();

    if($TVLoginCodecount < 5){
    TVLoginCode::create([
      'email'    => $request->email,
      'tv_code'  => $request->tv_qrcode,
      'uniqueId'  => $request->uniqueId,
      'tv_name'  => $request->tv_name,
      'type'  => 'QRScan',
      'status'   => 1,
   ]);
 

    $TVLoginCode = TVLoginCode::where('tv_code',$tv_code)->where('status',1)->first();

    if(!empty($TVLoginCode)){

    $user = User::where('email',$TVLoginCode->email)->first();
    if($user->role == 'subscriber'){

      $Subscription = Subscription::where('user_id',$user->id)->orderBy('created_at', 'DESC')->first();
      $Subscription = Subscription::Join('subscription_plans','subscription_plans.plan_id','=','subscriptions.stripe_plan')
      ->where('subscriptions.user_id',$user->id)
      ->orderBy('subscriptions.created_at', 'desc')->first();

      $plans_name = $Subscription->plans_name;
      $plan_ends_at = $Subscription->ends_at;

    }else{
      $plans_name = '';
      $plan_ends_at = '';
    }

  }
      $response = array(
          'status'=> 'true',
          'message' => 'Logged In Successfully',
          'user_details'=> $user,
          'plans_name'=>$plans_name,
          'plan_ends_at'=>$plan_ends_at,
          'tv_code'=>$tv_code,
          'uniqueId'=>$request['uniqueId'],
          'avatar'=>URL::to('/').'/public/uploads/avatars/'.$user->avatar,
          'Count_User' => $TVLoginCodecount,

      );
    }else{

      $response = array(
        'status'=> 'false',
        'message' => 'User Count Exited',
        'Count_User' => $TVLoginCodecount,
    );
    }
  }

    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}


public function TVQRCodeLogout(Request $request)
{

  try{

    $TVLoginCode = TVLoginCode::where('email',$request->email)->where('status',1)->orderBy('created_at', 'DESC')->first();

    $TVLoginCode=TVLoginCode::where('email',$request->email)->where('status',1)->orderBy('created_at', 'DESC')->delete();

    $response = array(
        'status'=> 'true',
        'message' => 'Logged Out Successfully',
    );

    }
    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}
 
  public function site_theme_setting()
  {
      try {

          $Site_theme_setting = SiteTheme::get()->map(function ($item) {
            $item['dark_mode_logo_url'] = URL::to('/public/uploads/settings/'.$item->dark_mode_logo);
            $item['light_mode_logo_url'] = URL::to('/public/uploads/settings/'.$item->light_mode_logo);
            return $item;
          });;

        $response = array(
          'status'=> 'true',
          'message' => 'Retrieved Logo Site theme setting Successfully !!',
          'Site_theme_setting'=> $Site_theme_setting,
        );

      } 
      catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

      }

      return response()->json($response, 200);
  }

  public function TVLoggedDetails(Request $request)
  {
    try{

      $TVLoginDetails = TVLoginCode::where('email',$request->email)->where('status',1)->get();

      $response = array(
          'status'=> 'true',
          'message' => 'Existing Users',
          'TVLoginDetails' => $TVLoginDetails
      );

      }
      catch (\Throwable $th) {

          $response = array(
            'status'=>'false',
            'message'=>$th->getMessage(),
          );

      }
    return response()->json($response, 200);
  }


  
public function QRCodeMobileLogin(Request $request)
{

  $tv_code =  $request['tv_code'];
  $uniqueId =  $request['uniqueId'];
  $email =  $request['email'];

  try{
    
    $TVLoginCodecount = TVLoginCode::where('email',$email)->where('status',1)->count();

    if($TVLoginCodecount < 5){

    TVLoginCode::create([
      'email'    => $request->email,
      'tv_code'  => $request->tv_code,
      'uniqueId'  => $request->uniqueId,
      'type'  => 'QRScan',
      'status'   => 1,
   ]);
 

    $TVLoginCode = TVLoginCode::where('tv_code',$request->tv_code)->where('status',1)->orderBy('created_at', 'DESC')->first();

    if(!empty($TVLoginCode)){

    $user = User::where('email',$TVLoginCode->email)->first();
    if($user->role == 'subscriber'){

      $Subscription = Subscription::where('user_id',$user->id)->orderBy('created_at', 'DESC')->first();
      $Subscription = Subscription::Join('subscription_plans','subscription_plans.plan_id','=','subscriptions.stripe_plan')
      ->where('subscriptions.user_id',$user->id)
      ->orderBy('subscriptions.created_at', 'desc')->first();

      $plans_name = $Subscription->plans_name;
      $plan_ends_at = $Subscription->ends_at;

    }else{
      $plans_name = '';
      $plan_ends_at = '';
    }

  }
      $response = array(
          'status'=> 'true',
          'message' => 'Logged In Successfully',
          'user_details'=> $user,
          'plans_name'=>$plans_name,
          'plan_ends_at'=>$plan_ends_at,
          'tv_code'=>$tv_code,
          'uniqueId'=>$request['uniqueId'],
          'avatar'=>URL::to('/').'/public/uploads/avatars/'.$user->avatar,
          'Count_User' => $TVLoginCodecount,

      );
    }else{

      $response = array(
        'status'=> 'false',
        'message' => 'User Count Exited',
        'Count_User' => $TVLoginCodecount,
    );
    }
  }

    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}


public function QRCodeMobileLogout(Request $request)
{

  try{

    $TVLoginCode = TVLoginCode::where('email',$request->email)->where('tv_code',$request->tv_code)->where('status',1)->orderBy('created_at', 'DESC')->first();

    $TVLoginCode=TVLoginCode::where('email',$request->email)->where('tv_code',$request->tv_code)->where('status',1)->orderBy('created_at', 'DESC')->delete();

    $response = array(
        'status'=> 'true',
        'message' => 'Logged Out Successfully',
    );

    }
    catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );

    }

  return response()->json($response, 200);
}


  public function comment_store(Request $request)
  {
    try {

        if( $request->source == 'LiveStream_play' ){
          $source = "App\LiveStream";
        }
        elseif( $request->source == 'play_videos' ){
            $source = "App\Video";
        }
        elseif( $request->source == 'play_episode' ){
            $source = "App\Episode";
        }
        elseif( $request->source == 'play_audios' ){
            $source = "App\Audio";
        }
        elseif( $request->source == 'play_ugc_videos' ){
          $source = "App\UGCVideo";
        }
    
        $inputs = array(
            'user_id'   => $request->user_id ,
            'user_role' => User::where('id',$request->user_id)->pluck('role')->first() ,
            'user_name' => User::where('id',$request->user_id)->pluck('username')->first() ,
            'first_letter' => User::where('id',$request->user_id)->pluck('username')->first()  != null ? User::where('id',$request->user_id)->pluck('username')->first() : 'No Name',
            'commenter_type'   => 'App\User' ,
            'commentable_type' => $request->source ,
            'source'      => $source ,
            'source_id'   => $request->source_id ,
            'comment'  => $request->message ,
            'approved' => 1 ,
        );
        
        WebComment::create($inputs);

        $response = array(
          'status'=> 'true',
          'message'  => ucwords('Comment added Successfully !!'),
          'user_id'  => $request->user_id,
          'source_id'=> $request->source_id, 
          'source'   => $source,
        );

    } catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }

    return response()->json($response, 200);
  }

  public function comment_edit(Request $request)
  {
    try {

        $comment_id = $request->comment_id ;

        $comment = WebComment::where($comment_id)->get();

        $response = array(
          'status'=> 'true',
          'message' => ucwords('Comment Message Retrieved Successfully !!'),
          'comment' => $comment ,
        );

    } catch (\Throwable $th) {
      
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }
    return response()->json($response, 200);
  }

  public function comment_update(Request $request)
  {
    try {

      $comment_id = $request->comment_id ;

      if( $request->source == 'LiveStream_play' ){
          $source = "App\LiveStream";
      }
      elseif( $request->source == 'play_videos' ){
          $source = "App\Video";
      }
      elseif( $request->source == 'play_episode' ){
          $source = "App\Episode";
      }
      elseif($request->source == 'play_audios'){
        $source = "App\Audio";
      }
      elseif( $request->source == 'play_ugc_videos' ){
          $source = "App\UGCVideo";
      }

      $inputs = array(
          'user_id'   => $request->user_id ,
          'user_role' => User::where('id',$request->user_id)->pluck('role')->first() ,
          'user_name' => User::where('id',$request->user_id)->pluck('username')->first() ,
          'first_letter' => User::where('id',$request->user_id)->pluck('username')->first()  != null ? User::where('id',$request->user_id)->pluck('username')->first() : 'No Name',
          'commenter_type'   => 'App\User' ,
          'commentable_type' => $request->source ,
          'source'      => $source ,
          'source_id'   => $request->source_id ,
          'comment'     => $request->message ,
          'approved'    => 1 ,
      );

      WebComment::findorfail($comment_id)->update($inputs);

      $response = array(
        'status'=> 'true',
        'message' => ucwords('Comment Message Updated Successfully !!'),
        'user_id'  => $request->user_id,
        'source_id'=> $request->source_id, 
        'source'   => $source,
      );

    } catch (\Throwable $th) {
      
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }

    return response()->json($response, 200);

  }

  public function comment_destroy(Request $request)
  {
    try {

        $comment_id = $request->comment_id ;

        WebComment::where('id',$comment_id)->delete();

        $response = array(
          'status'=> 'true',
          'message' => ucwords('comment message deleted successfully !!'),
        );

    } catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }

    return response()->json($response, 200);

  }

  public function comment_reply(Request $request)
  {
    try {

        $comment_id = $request->comment_id ;

        if( $request->source == 'LiveStream_play' ){
          $source = "App\LiveStream";
        }
        elseif( $request->source == 'play_videos' ){
            $source = "App\Video";
        }
        elseif( $request->source == 'play_episode' ){
            $source = "App\Episode";
        }
        elseif( $request->source == 'play_audios' ){
            $source = "App\Audio";
        }
        elseif( $request->source == 'play_ugc_videos' ){
          $source = "App\UGCVideo";
      }
  
        $inputs = array(
            'user_id'   => $request->user_id ,
            'user_role' => User::where('id',$request->user_id)->pluck('role')->first() ,
            'user_name' => User::where('id',$request->user_id)->pluck('username')->first() ,
            'first_letter' => User::where('id',$request->user_id)->pluck('username')->first()  != null ? User::where('id',$request->user_id)->pluck('username')->first() : 'No Name',
            'commenter_type'   => 'App\User' ,
            'commentable_type' => $request->source ,
            'source'      =>  $source   ,
            'source_id'   => $request->source_id ,
            'comment'   => $request->message ,
            'child_id'  => $comment_id ,
            'approved' => 1 ,
        );
    
        WebComment::create($inputs);

        $response = array(
          'status'=> 'true',
          'message' => ucwords('Comment Reply Message added Successfully !!'),
          'user_id'  => $request->user_id,
          'source_id'=> $request->source_id, 
          'source'   => $source,
          'child_id'  => $comment_id 
        );

    } catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }
    return response()->json($response, 200);
  }

  public function comment_message(Request $request)
  {

    try {

      $validator = Validator::make($request->all(), [
        'source_id'  => 'required|integer',
        'commentable_type' => 'required'
      ]);
  
      if ($validator->fails()) {

        $response = [
            'status'    => 'false',
            'message'    => $validator->errors()->first(),
        ];

        return response()->json($response, 422); 
      }

      $comment = WebComment::with('child_comment')->where('source_id', $request->source_id)
                              ->where('commentable_type', $request->commentable_type)
                              ->whereNull('child_id')
                              ->get()
                              ->filter(function ($item) {
                                  return User::where('id', $item->user_id)->exists();
                              })
                              ->map(function ($item) {
                                  $item['user_image'] = User::where('id', $item->user_id)->pluck('avatar')->first();
                                  $item['user_image_url'] = URL::to('public/uploads/avatars/' . $item['user_image']);
                                  $item['user_name'] = User::where('id', $item->user_id)->pluck('username')->first();
                                  return $item;
                              })
                              ->values()
                              ->all();

      $response = array(
        'status'=> 'true',
        'status_code'=> 200,
        'message'  => ucwords('Comment Section Message Retrieved Successfully !!'),
        'comment'   => $comment,
      );

    } catch (\Throwable $th) {

          $response = array(
            'status'=>'false',
            'status_code'=> 400,
            'message'=>$th->getMessage(),
          );
    }

    return response()->json($response, $response['status_code']);
  }

  public function channel_partner(Request $request)
    {
        try {

            $channel_partner = Channel::select('id','channel_name','status','channel_image','channel_slug')
                    ->where('status',1)->latest()->limit(30)->get()->map(function ($item) {
                    $item['image_url'] = URL::to('/public/uploads/albums/'.$item->channel_image);
                    return $item;
                });

            $data = [
                "status" => true,
                "message" => 'Retrieved Channel Partner Section data Successfully' ,
                "channel_partner_count" => count($channel_partner),
                "channel_partner" => $channel_partner,
            ];

        } catch (\Throwable $th) {
            
            $data = array(
                'status' => false,
                'message' => $th->getMessage() ,
            );
        }

        return response()->json($data, 200);
    }

  
  public function ChannelHome(Request $request)
  {
    try{

      $settings = Setting::first();
      $slug = $request->slug;
      $channel = Channel::where('channel_slug',$slug)->first(); 

      $channels = Channel::where('channel_slug',$slug)->get()->map(function ($item) {

        $settings = Setting::first();
  
          if(!empty($item['channel_banner']) && $item['channel_banner'] != null){
            $item['channel_banner'] = $item->channel_banner;
          }else{
            $item['channel_banner'] = URL::to('/public/uploads/images/'.$settings->default_horizontal_image);
          }
                
          if(!empty($item['channel_image']) && $item['channel_image'] != null){
            $item['channel_image'] = $item->channel_image;
          }else{
            $item['channel_image'] = URL::to('/public/uploads/images/'.$settings->default_video_image);
          }
          if(!empty($item['channel_logo']) && $item['channel_logo'] != null){
            $item['channel_logo'] = $item->channel_logo;
          }else{
            $item['channel_logo'] = URL::to('/public/uploads/images/'.$settings->default_video_image);
          }

          $UserChannelSubscription_status = true ;

          if ( $settings->user_channel_plans_page_status == 1 ){

              if (!Auth::guest()) {

                  $UserChannelSubscription = UserChannelSubscription::where('user_id',auth()->user()->id)
                                                  ->where('channel_id',$item->id)->where('status','active')
                                                  ->where('subscription_start', '<=', Carbon::now())
                                                  ->where('subscription_ends_at', '>=', Carbon::now())
                                                  ->latest()->first();
              }

              if (!Auth::guest() && Auth::user()->role != "admin"){

                  $UserChannelSubscription_status = is_null($UserChannelSubscription) ? false : true ;

              }elseif(!Auth::guest() && Auth::user()->role == "admin"){

                $UserChannelSubscription_status =  true ;

              }elseif( Auth::guest() ){

                $UserChannelSubscription_status =  false ;

              }
          }

          $item['UserChannelSubscription_status'] =  $UserChannelSubscription_status ;
          $item['channel_payment_url'] =  URL::to('channel-payment/'.$item->id) ;

          return $item;
      });

      $currency = CurrencySetting::first();
          
              $livetreams = LiveStream::where('active', '=', '1')->where('user_id', '=', $channel->id)
              ->where('uploaded_by', '=', 'Channel')->orderBy('created_at', 'DESC')
              ->get();

              $audios = Audio::where('active', '=', '1')->where('user_id', '=', $channel->id)
              ->where('uploaded_by', '=', 'Channel')
              ->orderBy('created_at', 'DESC')
              ->get() ;

              $latest_series = Series::where('active', '=', '1')->where('user_id', '=', $channel->id)
              ->where('uploaded_by', '=', 'Channel')->orderBy('created_at', 'DESC')
              ->get();

              $latest_videos = Video::where('active', '=', '1')->where('status', '=', '1')->where('user_id', '=', $channel->id)
              ->where('uploaded_by', '=', 'Channel')->where('draft', '=', '1')
              ->get();
          $ThumbnailSetting = ThumbnailSetting::first();

          $media_url = URL::to('/channel') . '/' . $slug;
          $facebook_url = 'https://www.facebook.com/sharer/sharer.php?u=' . $media_url;
          $twitter_url = 'https://twitter.com/intent/tweet?text=' . $media_url;

          $response = array(
              'status'=> 'true',
              'latest_video' => $latest_videos,
              'latest_series' => $latest_series,
              'audios' => $audios,
              'livetream' => $livetreams,
              'currency' => $currency,
              'ThumbnailSetting' => $ThumbnailSetting,
              'LiveCategory' => LiveCategory::get(),
              'VideoCategory' => VideoCategory::get(),
              'AudioCategory' => AudioCategory::get(),
              'channel' => $channels,
              'media_url' => $media_url,
              'facebook_url' => $facebook_url,
              'twitter_url' => $twitter_url,

          );
          
              } catch (\Throwable $th) {

                $response = array(
                  'status'=>'false',
                  'message'=>$th->getMessage(),
                );
          }

          return response()->json($response, 200);
      }


      public function ChannelList()
      {
        try{

          $channels = Channel::where('status',1)->latest()->limit(30)->get()->map(function ($item) {
              $item['channel_image'] = $item->channel_image != null ? $item->channel_image : URL::to('/public/uploads/images/'.default_horizontal_image()) ;
              $item['channel_banner'] = $item->channel_banner != null ? $item->channel_banner : URL::to('/public/uploads/images/'.default_vertical_image())  ;
              $item['channel_logo'] = $item->channel_logo != null ? $item->channel_logo : URL::to('/public/uploads/images/'.default_vertical_image());
              $item['source']    = "Channel_Partner";
              return $item;
          });

              $response = array(
                  'status'=> 'true',
                  'channels' => $channels,
                  'ThumbnailSetting' => CurrencySetting::first() ,
                  'currency' => ThumbnailSetting::first(),
              );
              
            } catch (\Throwable $th) {

              $response = array(
                'status'=>'false',
                'message'=>$th->getMessage(),
              );
        }

        return response()->json($response, 200);
          
      }

      
    public function channel_category_videos(Request $request)
    {
      try{

        $videosCategory = VideoCategory::find($request->category_id) != null ? VideoCategory::find($request->category_id)->specific_category_videos : array();
         
        $videos_Category = $videosCategory->where('user_id', $request->user_id)->where('uploaded_by' ,'Channel')->all();

        $response = array( 'status'=> 'true','videosCategory' => $videos_Category );
 
      } catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }

    return response()->json($response, 200);
    }

    public function channel_category_series(Request $request)
    {
      try{
        $SeriesCategory = SeriesGenre::find($request->category_id) != null ? SeriesGenre::find($request->category_id)->specific_category_series : array();
        
        $Series_Category = $SeriesCategory->where('user_id', $request->user_id)->where('uploaded_by' ,'Channel')->all();

        $response = array( 'status'=> 'true','SeriesCategory' => $Series_Category );
      } catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }

    return response()->json($response, 200);
    }

    public function channel_category_live(Request $request)
    {
      try{
        $LiveCategory = LiveCategory::find($request->category_id) != null ? LiveCategory::find($request->category_id)->specific_category_live : array();
        
        $Live_Category = $LiveCategory->where('user_id', $request->user_id)->where('uploaded_by' ,'Channel')->all();

        $response = array( 'status'=> 'true','LiveCategory' => $Live_Category );

      } catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }

    return response()->json($response, 200);
    }

    public function channel_category_audios(Request $request)
    {
      try{
        $AudioCategory = AudioCategory::find($request->category_id) != null ? AudioCategory::find($request->category_id)->specific_category_audio : array();

        $Audio_Category = $AudioCategory->where('user_id', $request->user_id)->where('uploaded_by' ,'Channel')->all();

        $response = array('status'=> 'true', 'AudioCategory' => $Audio_Category );

        } catch (\Throwable $th) {

          $response = array(
            'status'=>'false',
            'message'=>$th->getMessage(),
          );
      }

      return response()->json($response, 200);
    }

    
  public function HomeContentPartner(Request $request)
  {

    try {
      $ContentPartner = ModeratorsUser::where('status',1)->get()->map(function ($item) {
      $item['banner'] = URL::to('/public/uploads/moderator_albums/'.$item->banner);
      $item['picture'] = URL::to('/public/uploads/moderator_albums/'.$item->picture);
      return $item;
  });
      $response = array(
        'status'=> 'true',
        'message'  => 'Content Partner section Retrieved Successfully !!',
        'ContentPartner' => $ContentPartner, 
        'order_settings' => OrderHomeSetting::orderBy('order_id', 'asc')->get(), 
        'order_settings_list' => OrderHomeSetting::get(), 
  
      );

    } catch (\Throwable $th) {

          $response = array(
            'status'=>'false',
            'message'=>$th->getMessage(),
          );
    }

    return response()->json($response, 200);
  }


  public function ContentPartnerHome(Request $request)
  {
    try{
      $settings = Setting::first();
      $slug = $request->slug;
      $ModeratorsUserid = ModeratorsUser::where('slug',$slug)->first(); 

      $ModeratorsUser = ModeratorsUser::where('slug',$slug)->get()->map(function ($item) {
      $settings = Setting::first();

        if(!empty($item['banner']) && $item['banner'] != null){
          $item['banner'] = URL::to('/public/uploads/moderator_albums/'.$item->banner);
        }else{
          $item['banner'] = URL::to('/public/uploads/images/'.$settings->default_horizontal_image);
        }
        if(!empty($item['picture']) && $item['picture'] != null){
          $item['picture'] = URL::to('/public/uploads/moderator_albums/'.$item->picture);
        }else{
          $item['picture'] = URL::to('/public/uploads/images/'.$settings->default_video_image);
        }
        return $item;
    });

      $currency = CurrencySetting::first();

              $livetreams = LiveStream::where('active', '=', '1')->where('user_id', '=', $ModeratorsUserid->id)
              ->where('uploaded_by', '=', 'CPP')->orderBy('created_at', 'DESC')
              ->get();

              $audios = Audio::where('active', '=', '1')->where('user_id', '=', $ModeratorsUserid->id)
              ->where('uploaded_by', '=', 'CPP')
              ->orderBy('created_at', 'DESC')
              ->get() ;

              $latest_series = Series::where('active', '=', '1')->where('user_id', '=', $ModeratorsUserid->id)
              ->where('uploaded_by', '=', 'CPP')->orderBy('created_at', 'DESC')
              ->get();

              $latest_videos = Video::where('active', '=', '1')->where('status', '=', '1')->where('user_id', '=', $ModeratorsUserid->id)
              ->where('uploaded_by', '=', 'CPP')->where('draft', '=', '1')
              ->get();
  
          $ThumbnailSetting = ThumbnailSetting::first();

          $media_url = URL::to('/contentpartner') . '/' . $slug;
          $facebook_url = 'https://www.facebook.com/sharer/sharer.php?u=' . $media_url;
          $twitter_url = 'https://twitter.com/intent/tweet?text=' . $media_url;

          $response = array(
              'status'=> 'true',
              'Content_Partner' => $ModeratorsUser,
              'currency' => $currency,
              'latest_video' => $latest_videos,
              'latest_series' => $latest_series,
              'audios' => $audios,
              'livetream' => $livetreams,
              'ThumbnailSetting' => $ThumbnailSetting,
              'LiveCategory' => LiveCategory::get(),
              'VideoCategory' => VideoCategory::get(),
              'AudioCategory' => AudioCategory::get(),
              'media_url' => $media_url,
              'facebook_url' => $facebook_url,
              'twitter_url' => $twitter_url,
          );
          
          } catch (\Throwable $th) {

            $response = array(
              'status'=>'false',
              'message'=>$th->getMessage(),
            );
      }

      return response()->json($response, 200);
      
  }


  
  public function ContentList()
  {

    try{ 
      $settings = Setting::first();
      $ModeratorsUser = ModeratorsUser::get(); 
      $ModeratorsUser = ModeratorsUser::where('status',1)->get()->map(function ($item) {
      $settings = Setting::first();
        if(!empty($item['banner']) && $item['banner'] != null){
          $item['banner'] = URL::to('/public/uploads/moderator_albums/'.$item->banner);
        }else{
          $item['banner'] = URL::to('/public/uploads/images/'.$settings->default_horizontal_image);
        }
        if(!empty($item['picture']) && $item['picture'] != null){
          $item['picture'] = URL::to('/public/uploads/moderator_albums/'.$item->picture);
        }else{
          $item['picture'] = URL::to('/public/uploads/images/'.$settings->default_video_image);
        }
        return $item;
    });
      $currency = CurrencySetting::first();
      $ThumbnailSetting = ThumbnailSetting::first();
        
          $response = array(
              'status'=> 'true',
              'currency' => $currency,
              'ModeratorsUser' => $ModeratorsUser,
              'ThumbnailSetting' => $ThumbnailSetting,
              'Content_Partner' => ModeratorsUser::get(),

          );
          
        } catch (\Throwable $th) {

          $response = array(
            'status'=>'false',
            'message'=>$th->getMessage(),
          );
    }

    return response()->json($response, 200);
      
  }

  public function Content_category_videos(Request $request)
  {
    try{
      $videosCategory = VideoCategory::find($request->category_id) != null ? VideoCategory::find($request->category_id)->specific_category_videos : array();
       
      $videos_Category = $videosCategory->where('user_id', $request->user_id)->where('uploaded_by' ,'CPP')->all();

      $response = array( 'status'=> 'true','videosCategory' => $videos_Category );

    } catch (\Throwable $th) {

            $response = array(
              'status'=>'false',
              'message'=>$th->getMessage(),
            );
      }

      return response()->json($response, 200);
  }

  public function Content_category_series(Request $request)
  {
    try{
      $SeriesCategory = SeriesGenre::find($request->category_id) != null ? SeriesGenre::find($request->category_id)->specific_category_series : array();
      
      $Series_Category = $SeriesCategory->where('user_id', $request->user_id)->where('uploaded_by' ,'CPP')->all();

      $response = array( 'status'=> 'true','SeriesCategory' => $Series_Category );


        } catch (\Throwable $th) {

          $response = array(
            'status'=>'false',
            'message'=>$th->getMessage(),
          );
    }

    return response()->json($response, 200);
  }

  public function Content_category_live(Request $request)
  {
    try{
      $LiveCategory = LiveCategory::find($request->category_id) != null ? LiveCategory::find($request->category_id)->specific_category_live : array();
      
      $Live_Category = $LiveCategory->where('user_id', $request->user_id)->where('uploaded_by' ,'CPP')->all();
      $response = array('status'=> 'true', 'LiveCategory' => $Live_Category );


    } catch (\Throwable $th) {

          $response = array(
            'status'=>'false',
            'message'=>$th->getMessage(),
          );
    }

    return response()->json($response, 200);
  }

  public function Content_category_audios(Request $request)
  {
    try{

      $AudioCategory = AudioCategory::find($request->category_id) != null ? AudioCategory::find($request->category_id)->specific_category_audio : array();
      
      $Audio_Category = $AudioCategory->where('user_id', $request->user_id)->where('uploaded_by' ,'CPP')->all();

      $response = array( 'status'=> 'true','AudioCategory' => $Audio_Category );

        } catch (\Throwable $th) {

          $response = array(
            'status'=>'false',
            'message'=>$th->getMessage(),
          );
    }

    return response()->json($response, 200);
  }

  public function all_videos()
  {
    try {
          // Video Category 

                $VideoCategory = VideoCategory::select('id','slug','in_home')->where('in_home','=',1)
                                ->get()->map(function ($item) {
                                    $item['redirect_url']  = URL::to('videos/category/'.$item->slug);
                                    $item['source_data']   = 'video_category';
                                    return $item;
                                });

            // Series Genres

                $SeriesGenre = SeriesGenre::select('id','slug','in_home')
                                ->get()->map(function ($item) {
                                    $item['redirect_url']  = URL::to('series/category/'.$item->slug);
                                    $item['source_data']  = 'SeriesGenre';
                                    return $item;
                                });
                                

            // Fetch all OrderHomeSetting list

                $OrderHomeSetting = OrderHomeSetting::get(); 

            // Fetch all videos list
                $videos = Video::select('active','status','draft','age_restrict','id','created_at','slug','image','title','rating','duration','featured','year')
                        ->where('active', '1')->where('status', '1')->where('draft', '1');

                    if (Geofencing() != null && Geofencing()->geofencing == 'ON') {
                        $videos = $videos->whereNotIn('videos.id', Block_videos());
                    }
                    if (check_Kidmode() == 1) {
                        $videos = $videos->whereBetween('videos.age_restrict', [0, 12]);
                    }
                    
                $videos = $videos->latest()->get()->map(function ($item) {
                    $item['source']       = 'videos';
                    $item['source_data']  = 'videos';
                    $item['redirect_url'] = URL::to('category/videos/'.$item->slug) ;
                    $item['image_url']    = URL::to('public/uploads/images/' . $item->image);
                    $item['title']    = $item->title;
                    $item['rating']   = $item->rating;
                    $item['duration'] = $item->duration;
                    $item['featured'] = $item->featured;
                    $item['year']     = $item->year;
                    $item['age_restrict'] = $item->age_restrict;
                    return $item;
                });

            // Fetch all series list

                $Series = Series::select('active','id','created_at','slug','image','title','rating','duration','featured','year')
                                    ->where('active', '=', '1')->orderBy('created_at', 'DESC')->latest()->get()
                                    ->map(function ($item) use($OrderHomeSetting) {
                    $item['source']       = $OrderHomeSetting->where('id',5)->pluck('header_name')->first() != null ? $OrderHomeSetting->where('id',5)->pluck('header_name')->first() : "Series" ;
                    $item['source_data']  = 'series';
                    $item['redirect_url'] = URL::to('play_series/'.$item->slug) ;
                    $item['image_url']    = URL::to('public/uploads/images/'.$item->image);
                    $item['title']    = $item->title;
                    $item['rating']   = $item->rating;
                    $item['duration'] = $item->duration;
                    $item['featured'] = $item->featured;
                    $item['year']     = $item->year;
                    $item['age_restrict'] = null ;
                    return $item;
                });

            // Fetch all audio albums list

                $AudioAlbums = AudioAlbums::orderBy('created_at', 'desc')->get()->map(function ($item) use($OrderHomeSetting) {
                    $item['source']       = $OrderHomeSetting->where('id',7)->pluck('header_name')->first() != null ? $OrderHomeSetting->where('id',7)->pluck('header_name')->first() : "Podcast";
                    $item['source_data']  = 'AudioAlbums';
                    $item['redirect_url'] = URL::to('album/'.$item->slug) ;
                    $item['image_url']    = URL::to('public/uploads/albums/' . $item->album);
                    $item['title']        = $item->albumname;
                    $item['age_restrict'] = null ;
                    $item['rating']       = null;
                    $item['duration']     = null;
                    $item['featured']     = null;
                    $item['year']         = null;
                    return $item;
                  });

            // Merge the results of the video, series, and audio album queries

                $mergedResults = $videos->merge($Series)->merge($AudioAlbums);

            // Paginate the merged results using LengthAwarePaginator

                $currentPage = request()->get('page') ?: 1;
                $pagedData = $mergedResults->forPage($currentPage, $this->settings->videos_per_page);

                $mergedResults = new LengthAwarePaginator(
                    $pagedData,
                    $mergedResults->count(),
                    $this->settings->videos_per_page,
                    $currentPage,
                    ['path' => request()->url()]
                );


            $videos_data[] = $mergedResults ;

            return response()->json([
              'status'  => 'true',
              'Message' => 'All videos Retrieved  Successfully',
              'videos'    => $mergedResults,
              'ppv_gobal_price'  => $this->ppv_gobal_price,
              'SeriesGenre'      => $SeriesGenre ,
              'VideoCategory'    => $VideoCategory ,
              'video_andriod'    => $videos_data ,
              'currency'         => CurrencySetting::first(),
              'ThumbnailSetting' => ThumbnailSetting::first(),
           ], 200);

    } catch (\Throwable $th) {
        return response()->json([
                'status'  => 'false',
                'Message' => $th->getMessage(),
            ], 200);
    }
  }

  public function all_videos_IOS()
  {
    try {
          // Video Category 

                $VideoCategory = VideoCategory::select('id','slug','in_home')->where('in_home','=',1)
                                ->get()->map(function ($item) {
                                    $item['redirect_url']  = URL::to('videos/category/'.$item->slug);
                                    $item['source_data']   = 'video_category';
                                    return $item;
                                });

            // Series Genres

                $SeriesGenre = SeriesGenre::select('id','slug','in_home')
                                ->get()->map(function ($item) {
                                    $item['redirect_url']  = URL::to('series/category/'.$item->slug);
                                    $item['source_data']  = 'SeriesGenre';
                                    return $item;
                                });
                                

            // Fetch all OrderHomeSetting list

                $OrderHomeSetting = OrderHomeSetting::get(); 

            // Fetch all videos list
                $videos = Video::select('active','status','draft','age_restrict','id','created_at','slug','image','title','rating','duration','featured','year')
                        ->where('active', '1')->where('status', '1')->where('draft', '1');

                    if (Geofencing() != null && Geofencing()->geofencing == 'ON') {
                        $videos = $videos->whereNotIn('videos.id', Block_videos());
                    }
                    if (check_Kidmode() == 1) {
                        $videos = $videos->whereBetween('videos.age_restrict', [0, 12]);
                    }
                    
                $videos = $videos->latest()->get()->map(function ($item) {
                    $item['source']       = 'videos';
                    $item['source_data']  = 'videos';
                    $item['redirect_url'] = URL::to('category/videos/'.$item->slug) ;
                    $item['image_url']    = URL::to('public/uploads/images/' . $item->image);
                    $item['title']    = $item->title;
                    $item['rating']   = $item->rating;
                    $item['duration'] = $item->duration;
                    $item['featured'] = $item->featured;
                    $item['year']     = $item->year;
                    $item['age_restrict'] = $item->age_restrict;
                    return $item;
                });

            // Fetch all series list

                $Series = Series::select('active','id','created_at','slug','image','title','rating','duration','featured','year')
                                    ->where('active', '=', '1')->orderBy('created_at', 'DESC')->latest()->get()
                                    ->map(function ($item) use($OrderHomeSetting) {
                    $item['source']       = $OrderHomeSetting->where('id',5)->pluck('header_name')->first() != null ? $OrderHomeSetting->where('id',5)->pluck('header_name')->first() : "Series" ;
                    $item['source_data']  = 'series';
                    $item['redirect_url'] = URL::to('play_series/'.$item->slug) ;
                    $item['image_url']    = URL::to('public/uploads/images/'.$item->image);
                    $item['title']    = $item->title;
                    $item['rating']   = $item->rating;
                    $item['duration'] = $item->duration;
                    $item['featured'] = $item->featured;
                    $item['year']     = $item->year;
                    $item['age_restrict'] = null ;
                    return $item;
                });

            // Fetch all audio albums list

                $AudioAlbums = AudioAlbums::orderBy('created_at', 'desc')->get()->map(function ($item) use($OrderHomeSetting) {
                    $item['source']       = $OrderHomeSetting->where('id',7)->pluck('header_name')->first() != null ? $OrderHomeSetting->where('id',7)->pluck('header_name')->first() : "Podcast";
                    $item['source_data']  = 'AudioAlbums';
                    $item['redirect_url'] = URL::to('album/'.$item->slug) ;
                    $item['image_url']    = URL::to('public/uploads/albums/' . $item->album);
                    $item['title']        = $item->albumname;
                    $item['age_restrict'] = null ;
                    $item['rating']       = null;
                    $item['duration']     = null;
                    $item['featured']     = null;
                    $item['year']         = null;
                    return $item;
                  });

            // Merge the results of the video, series, and audio album queries

                $mergedResults = $videos->merge($Series)->merge($AudioAlbums);
                  // echo "<pre>";
            // Paginate the merged results using LengthAwarePaginator

                $currentPage = request()->get('page') ?: 1;
                $pagedData = $mergedResults->forPage($currentPage, $this->settings->videos_per_page);

                $mergedResults = new LengthAwarePaginator(
                    $pagedData,
                    $mergedResults->count(),
                    $this->settings->videos_per_page,
                    $currentPage,
                    ['path' => request()->url()]
                );
                // print_r($mergedResults);exit;

                $current_page = request()->get('page');
             
                if(request()->get('page') > 1 ){
                  foreach($mergedResults as $key => $value){                   
                    $array_values[] = $value;
                // print_r($mergedResults);exit;

                  }
             
                }else{
                  foreach($mergedResults as $key => $value){
                    $array_values[] = $value;
                  }
                }
            $videos_data[] = $mergedResults ;

            return response()->json([
              'status'  => 'true',
              'Message' => 'All videos Retrieved  Successfully',
              'mergedResults'    => $mergedResults ,
              'current_page'    => $current_page,
              'videos'    => $array_values,
              'ppv_gobal_price'  => $this->ppv_gobal_price,
              'SeriesGenre'      => $SeriesGenre ,
              'VideoCategory'    => $VideoCategory ,
              'video_andriod'    => $videos_data ,
              'currency'         => CurrencySetting::first(),
              'ThumbnailSetting' => ThumbnailSetting::first(),

           ], 200);

    } catch (\Throwable $th) {
        return response()->json([
                'status'  => 'false',
                'Message' => $th->getMessage(),
            ], 200);
    }
  }

  public function all_videos_tv()
  {
    try {
          // Video Category 

                $VideoCategory = VideoCategory::select('id','slug','in_home')->where('in_home','=',1)
                                ->get()->map(function ($item) {
                                    $item['redirect_url']  = URL::to('videos/category/'.$item->slug);
                                    $item['source_data']   = 'video_category';
                                    return $item;
                                });

            // Series Genres

                $SeriesGenre = SeriesGenre::select('id','slug','in_home')
                                ->get()->map(function ($item) {
                                    $item['redirect_url']  = URL::to('series/category/'.$item->slug);
                                    $item['source_data']  = 'SeriesGenre';
                                    return $item;
                                });
                                

            // Fetch all OrderHomeSetting list

                $OrderHomeSetting = OrderHomeSetting::get(); 

            // Fetch all videos list
                $videos = Video::select('active','status','draft','age_restrict','id','created_at','slug','image','title','rating','duration','featured','year')
                        ->where('active', '1')->where('status', '1')->where('draft', '1');

                    if (Geofencing() != null && Geofencing()->geofencing == 'ON') {
                        $videos = $videos->whereNotIn('videos.id', Block_videos());
                    }
                    if (check_Kidmode() == 1) {
                        $videos = $videos->whereBetween('videos.age_restrict', [0, 12]);
                    }
                    
                $videos = $videos->latest()->get()->map(function ($item) {
                    $item['source']       = 'videos';
                    $item['source_data']  = 'videos';
                    $item['redirect_url'] = URL::to('category/videos/'.$item->slug) ;
                    $item['image_url']    = URL::to('public/uploads/images/' . $item->image);
                    $item['title']    = $item->title;
                    $item['rating']   = $item->rating;
                    $item['duration'] = $item->duration;
                    $item['featured'] = $item->featured;
                    $item['year']     = $item->year;
                    $item['age_restrict'] = $item->age_restrict;
                    return $item;
                });

            // Fetch all series list

                $Series = Series::select('active','id','created_at','slug','image','title','rating','duration','featured','year')
                                    ->where('active', '=', '1')->orderBy('created_at', 'DESC')->latest()->get()
                                    ->map(function ($item) use($OrderHomeSetting) {
                    $item['source']       = $OrderHomeSetting->where('id',5)->pluck('header_name')->first() != null ? $OrderHomeSetting->where('id',5)->pluck('header_name')->first() : "Series" ;
                    $item['source_data']  = 'series';
                    $item['redirect_url'] = URL::to('play_series/'.$item->slug) ;
                    $item['image_url']    = URL::to('public/uploads/images/'.$item->image);
                    $item['title']    = $item->title;
                    $item['rating']   = $item->rating;
                    $item['duration'] = $item->duration;
                    $item['featured'] = $item->featured;
                    $item['year']     = $item->year;
                    $item['age_restrict'] = null ;
                    return $item;
                });

            // Fetch all audio albums list

                $AudioAlbums = AudioAlbums::orderBy('created_at', 'desc')->get()->map(function ($item) use($OrderHomeSetting) {
                    $item['source']       = $OrderHomeSetting->where('id',7)->pluck('header_name')->first() != null ? $OrderHomeSetting->where('id',7)->pluck('header_name')->first() : "Podcast";
                    $item['source_data']  = 'AudioAlbums';
                    $item['redirect_url'] = URL::to('album/'.$item->slug) ;
                    $item['image_url']    = URL::to('public/uploads/albums/' . $item->album);
                    $item['title']        = $item->albumname;
                    $item['age_restrict'] = null ;
                    $item['rating']       = null;
                    $item['duration']     = null;
                    $item['featured']     = null;
                    $item['year']         = null;
                    return $item;
                  });

            // Merge the results of the video, series, and audio album queries

            $mergedResults = $videos->merge($Series)->merge($AudioAlbums);

            $videos_data[] = $mergedResults ;

            return response()->json([
              'status'  => 'true',
              'Message' => 'All videos Retrieved  Successfully',
              'videos'    => $mergedResults,
              'ppv_gobal_price'  => $this->ppv_gobal_price,
              'SeriesGenre'      => $SeriesGenre ,
              'VideoCategory'    => $VideoCategory ,
              'video_andriod'    => $videos_data ,
              'currency'         => CurrencySetting::first(),
              'ThumbnailSetting' => ThumbnailSetting::first(),
           ], 200);

    } catch (\Throwable $th) {
        return response()->json([
                'status'  => 'false',
                'Message' => $th->getMessage(),
            ], 200);
    }
  }



  // Menus API 

  public function Menus()
  {
    try{
          $settings = Setting::get();
          $Menus = Menu::orderBy('order', 'asc')->get(); 
          $VideoCategory = VideoCategory::where('in_home','=',1)->get();
          $LiveCategory = LiveCategory::get();
          $AudioCategory = AudioCategory::get();
          $SeriesGenre = SeriesGenre::where('in_home','=',1)->get();
          
          $response = array(
            'status'=> 'true',
            'Menus' => $Menus,
            'VideoCategory' => $VideoCategory,
            'LiveCategory' => $LiveCategory,
            'AudioCategory' => $AudioCategory,
            'SeriesGenre' => $SeriesGenre,
            'settings' => $settings,
          );
              
      }catch (\Throwable $th) {

          $response = array(
              'status'=>'false',
              'message'=>$th->getMessage(),
          );
      }
      
      return response()->json($response, 200);
  }
      
  public function DataFree()
  {
    try{
      $HomeSetting = MobileHomeSetting::first();
      
      if($HomeSetting->latest_videos == 1){
      $settings = Setting::get();
        // Data Free Video Based on Category 
         
        $DataFreeCategories = VideoCategory::where('slug','datafree')->where('in_home','=',1)->first();
          $countDataFreeCategories = VideoCategory::where('slug','datafree')->where('in_home','=',1)->count();
          if ($countDataFreeCategories > 0 ) {   

                $videos = Video::join('categoryvideos', 'categoryvideos.video_id', '=', 'videos.id')
                            ->where('category_id','=',@$DataFreeCategories->id)->where('active', '=', '1')
                            ->where('status', '=', '1')->where('draft', '=', '1');
                $videos = $videos->latest('videos.created_at')->get();
          
          }else{
            $videos = [];
          }

        // Data Free Series Based on Category 

          $DataFreeseriesCategories = SeriesGenre::where('slug','datafree')->where('in_menu','=',1)->first();
          $countDataFreeseriesCategories = SeriesGenre::where('slug','datafree')->where('in_menu','=',1)->count();
          if ($countDataFreeseriesCategories > 0 ) {   

                $series = Series::join('series_categories', 'series_categories.series_id', '=', 'series.id')
                            ->where('category_id','=',@$DataFreeseriesCategories->id)->where('active', '=', '1')
                            ->where('active', '=', '1');
                $series = $series->latest('series.created_at')->get();
          
          }else{
             $series = [];
          }

        // Data Free Live Stream Based on Category 

          $DataFreeliveCategories = LiveCategory::where('slug','datafree')->first();
          $countDataFreeliveCategories = LiveCategory::where('slug','datafree')->count();
          if ($countDataFreeliveCategories > 0 ) {   

                $live_streams = LiveStream::join('livecategories', 'livecategories.live_id', '=', 'live_streams.id')
                            ->where('category_id','=',@$DataFreeliveCategories->id)->where('active', '=', '1')
                            ->where('status', '=', '1');
                $live_streams = $live_streams->latest('live_streams.created_at')->get();
          
          }else{
             $live_streams = [];
          }

        // Data Free Audio Based on Category 

          $DataFreeAudioCategories = AudioCategory::where('slug','datafree')->first();
          $countDataFreeAudioCategories = AudioCategory::where('slug','datafree')->count();
          if ($countDataFreeAudioCategories > 0 ) {   

                $audio = Audio::join('category_audios', 'category_audios.audio_id', '=', 'audio.id')
                            ->where('category_id','=',@$DataFreeAudioCategories->id)->where('active', '=', '1')
                            ->where('status', '=', '1');
                $audio = $audio->latest('audio.created_at')->get();
          
          }else{
             $audio = [];
          } 
        
          $response = array(
              'status'=> 'true',
              'videos' => $videos,
              'series' => $series,
              'live_streams' => $live_streams,
              'audio' => $audio,
              'settings' => $settings,
          );
      }else{

          $response = array(
            'status'=> 'true',
            'Message' => 'Please Trun On Latest Video on Home Page Settings',
            'videos' => [],
            'series' =>[],
            'live_streams' => [],
            'audio' => [],
            'settings' => [],
        );
      }
          
        } catch (\Throwable $th) {

          $response = array(
            'status'=>'false',
            'message'=>$th->getMessage(),
          );
    }

    return response()->json($response, 200);
      
  }
  public function categoryLive(Request $request)
  {
      try{

        $query =  LiveCategory::find($request->category_id)->specific_category_live();

        $query->where('active',1)->where('status', 1);

        $data = $query->latest()->get();
            
        $data->transform(function ($item) {
              $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
              $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
              $item['source']    = "Livestream";
              return $item;
        });

        
        $response = array( 'status'=> 'true','LiveCategory' => $data );

      } catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
    }

    return response()->json($response, 200);
  }
  
  //  All Homepage

  public function All_Homepage(Request $request)
  {
    try {
   
      $user_id = $request->user_id;

      $homepage_input_array = ['limit' => 15, 'MobileHomeSetting' => MobileHomeSetting::first(),  'Geofencing' => Geofencing() , 'default_vertical_image_url' => default_vertical_image_url() , 'default_horizontal_image_url' => default_horizontal_image_url() , 'LiveStream_based_categories_status' => 0];

      $All_Homepage_homesetting =  $this->All_Homepage_homesetting( $user_id, $homepage_input_array );

      if (!empty($request->page)) {

        $OrderHomeSettings =  OrderHomeSetting::whereIn('video_name', $All_Homepage_homesetting )->orderBy('order_id','asc')->paginate(3);
      
        $OrderHomeSettings_list = OrderHomeSetting::whereIn('video_name', $All_Homepage_homesetting)->orderBy('order_id', 'asc')->paginate(3)->toArray();
       
        $OrderHomeSettings_list['data'] = array_map(function($item) {
                                                return $item['video_name'];
                                            }, $OrderHomeSettings_list['data']);
      }else{
        $OrderHomeSettings =  OrderHomeSetting::whereIn('video_name', $All_Homepage_homesetting )->orderBy('order_id','asc')->get()->toArray();
        $OrderHomeSettings_list =  OrderHomeSetting::whereIn('video_name', $All_Homepage_homesetting )->orderBy('order_id','asc')->pluck('video_name');
      }

      $result = array();

      foreach ($OrderHomeSettings as $key => $OrderHomeSetting) {
                 
        if($OrderHomeSetting['video_name'] == "latest_videos"){      // Latest Videos
          
          $data = $this->All_Homepage_latestvideos($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "videos" ;

        }

        if( $OrderHomeSetting['video_name'] == "featured_videos" ){     // Featured videos
          
          $data = $this->All_Homepage_featured_videos($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "videos" ;

        }

        if( $OrderHomeSetting['video_name'] == "live_videos" ){       // Live videos
          
          $data = $this->All_Homepage_live_videos($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "livestream" ;

        }

        if( $OrderHomeSetting['video_name'] == "radio_station" ){       // Radio Station
          
          $data = $this->All_Homepage_radio_stations($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "radiostation" ;

        }

        if( $OrderHomeSetting['video_name'] == "user_generated_content" ){       // Radio Station
          
          $data = $this->All_Homepage_user_generated_content($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "user_generated_content" ;

        }


        if( $OrderHomeSetting['video_name'] == "series" ){          // Series
          
          $data = $this->All_Homepage_series_videos($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "series" ;

        }

        if( $OrderHomeSetting['video_name'] == "audios" ){          // Audios
          
          $data = $this->All_Homepage_audios($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "audios" ;

        }

        if( $OrderHomeSetting['video_name'] == "albums" ){          // Albums
          
          $data = $this->All_Homepage_albums($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "audios_albums" ;

        }


        // if( $OrderHomeSetting['video_name'] == "artist" ){          // Artist
          
        //   $data = $this->All_Homepage_artist();
        //   $source = $OrderHomeSetting['video_name'] ;
        //   $header_name = $OrderHomeSetting['header_name'] ;
        // $source_type = "artist" ;

        // }

        if( $OrderHomeSetting['video_name'] == "video_schedule" ){    // video_schedule
          
          $data = $this->All_Homepage_video_schedule($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "videos" ;

        }

        if( $OrderHomeSetting['video_name'] == "ChannelPartner" ){    // ChannelPartner
          
          $data = $this->All_Homepage_ChannelPartner($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "ChannelPartner" ;

        }

        if( $OrderHomeSetting['video_name'] == "ContentPartner" ){    // ContentPartner
          
          $data = $this->All_Homepage_ContentPartner($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "ContentPartner" ;

        }

        
        if( $OrderHomeSetting['video_name'] == "latest_viewed_Videos" ){    // Latest viewed videos
          
          $data = $this->All_Homepage_latest_viewed_Videos( $user_id,$homepage_input_array );
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "videos" ;

        }

        if( $OrderHomeSetting['video_name'] == "latest_viewed_Livestream" ){    // Latest viewed Livestream
          
          $data = $this->All_Homepage_latest_viewed_Livestream( $user_id,$homepage_input_array );
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "livestream" ;

        }

        if( $OrderHomeSetting['video_name'] == "latest_viewed_Audios" ){    // Latest viewed Audios
          
          $data = $this->All_Homepage_latest_viewed_Audios( $user_id,$homepage_input_array );
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "audios" ;

        }

        if( $OrderHomeSetting['video_name'] == "latest_viewed_Episode" ){    // Latest viewed Episode
          
          $data = $this->All_Homepage_latest_viewed_Episode( $user_id,$homepage_input_array );
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "episode" ;

        }


        if( $OrderHomeSetting['video_name'] == "category_videos" ){          // Videos based on Categories
          
          $data = $this->All_Homepage_category_videos($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = null ;
          $source_type = "videos" ;

        }

        if( $OrderHomeSetting['video_name'] == "live_category" ){          // livestream Videos based on category 
          
          $data = $this->All_Homepage_category_livestream($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = null ;
          $source_type = "livestreams" ;

        }

        if( $OrderHomeSetting['video_name'] == "Recommended_videos_site" ){          // Recommendation - Mostwatched Videos
          
          $data = $this->All_Homepage_Recommended_videos_site($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "videos" ;

        }

        if( $OrderHomeSetting['video_name'] == "Recommended_videos_users" ){          // Recommendation - Mostwatched Videos User
          
          $data = $this->All_Homepage_Recommended_videos_users($user_id,$homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "videos" ;

        }

        if( $OrderHomeSetting['video_name'] == "Recommended_videos_Country" ){          // Recommendation - Country Mostwatched Videos
         
          $data = $this->All_Homepage_Recommended_videos_Country($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "videos" ;

        }

        if( $OrderHomeSetting['video_name'] == "liveCategories" ){          // live Categories
         
          $data = $this->All_Homepage_liveCategories($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "liveCategories" ;

        }

        if( $OrderHomeSetting['video_name'] == "videoCategories" ){          // Video Categories
         
          $data = $this->All_Homepage_videoCategories($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "videoCategories" ;

        }


        if( $OrderHomeSetting['video_name'] == "Series_Genre" ){          // Video Categories
         
          $data = $this->All_Homepage_SeriesGenre($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "SeriesGenre" ;

        }

        if( $OrderHomeSetting['video_name'] == "Audio_Genre" ){          // Audio Genre
         
          $data = $this->All_Homepage_Audio_Genre($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "Audio_Genre" ;

        }

        if( $OrderHomeSetting['video_name'] == "Audio_Genre_audios" ){   // Audio Genre based on audios
         
          $data = $this->All_Homepage_Audio_Genre_audios($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = null ;
          $source_type = "Audios" ;

        }

        if( $OrderHomeSetting['video_name'] == "video_play_list" ){          // Video PlayList
         
          $data = $this->All_Homepage_video_playlist($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "VideoPlayList" ;

        }

        if( $OrderHomeSetting['video_name'] == "my_play_list" ){          // Audio PlayList
         
          $data = $this->All_Homepage_my_playlist($user_id,$homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "AudioPlaylist" ;

        }

        if($OrderHomeSetting['video_name'] == "Document"){      // Latest Videos
          
          $data = $this->All_Homepage_Documents($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "Document" ;

        }

        if($OrderHomeSetting['video_name'] == "Document_Category"){      // Document Category
          
          $data = $this->All_Homepage_Document_Category($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "Document_Category" ;
        }

        if($OrderHomeSetting['video_name'] == "Series_based_on_Networks"){      // Series based on Networks
          
          $data = $this->All_Homepage_Series_based_on_Networks($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "series" ;
        }

        if($OrderHomeSetting['video_name'] == "Series_Networks"){      // Series Networks
          
          $data = $this->All_Homepage_Series_Networks($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "Series_Networks" ;
        }

        if($OrderHomeSetting['video_name'] == "Series_Genre_videos"){      // Series Networks

          $data = $this->All_Homepage_Series_based_on_genre($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "Series" ;
        }

        if($OrderHomeSetting['video_name'] == "EPG"){      // EPG

          $data = $this->All_Homepage_EPG($homepage_input_array);
          $source = $OrderHomeSetting['video_name'] ;
          $header_name = $OrderHomeSetting['header_name'] ;
          $header_name_IOS = $OrderHomeSetting['header_name'] ;
          $source_type = "EPG" ;
        }


        $result[] = array(
          "source"      => $source,
          "header_name" => $header_name,
          "header_name_IOS" => $header_name_IOS,
          "source_type" => $source_type,
          "data"        => $data,
        );

      }

      $response = array(
        'status' => 'true',
        'status_code' => 200,
        'message' => Str::title("retrieved the homepage sections data successfully!!"),
        'lists'   => $OrderHomeSettings_list,
        'Home_page' => $result,
      );
         
    } catch (\Throwable $th) {

        $response = array(
          'status' => 'false',
          'status_code' => 400,
          'message' => $th->getMessage(),
        );
      }
  
      return response()->json($response, $response['status_code']);
  }

  private  function All_Homepage_homesetting( $user_id,$homepage_input_array ){

     $Homesetting = MobileHomeSetting::first();

     $input = array();

     if($Homesetting->featured_videos == 1 && $this->All_Homepage_featured_videos($homepage_input_array)->isNotEmpty() ){
        array_push($input,'featured_videos');
     }

     if($Homesetting->latest_videos == 1 && $this->All_Homepage_latestvideos($homepage_input_array)->isNotEmpty() ){
       array_push($input,'latest_videos');
    }

     if($Homesetting->category_videos == 1 && $this->All_Homepage_category_videos($homepage_input_array)->isNotEmpty() ){
        array_push($input,'category_videos');
     }

     if($Homesetting->live_category == 1 && $this->All_Homepage_category_livestream($homepage_input_array)->isNotEmpty() ){
        array_push($input,'live_category');
     }

    if($Homesetting->videoCategories == 1 && $this->All_Homepage_videoCategories($homepage_input_array)->isNotEmpty() ){
        array_push($input,'videoCategories');
    }

    if($Homesetting->liveCategories == 1 && $this->All_Homepage_liveCategories($homepage_input_array)->isNotEmpty() ){
      array_push($input,'liveCategories');
    }

    if($Homesetting->live_videos == 1 && $this->All_Homepage_live_videos($homepage_input_array)->isNotEmpty() ){
      array_push($input,'live_videos');
    }

    if($Homesetting->radio_station == 1 && $this->All_Homepage_radio_stations($homepage_input_array)->isNotEmpty() ){
      array_push($input,'radio_station');
    }

    if($Homesetting->user_generated_content == 1 && $this->All_Homepage_user_generated_content($homepage_input_array)->isNotEmpty() ){
      array_push($input,'user_generated_content');
    }



    if($Homesetting->series == 1 && $this->All_Homepage_series_videos($homepage_input_array)->isNotEmpty() ){
      array_push($input,'series');
    }

    if($Homesetting->audios == 1 && $this->All_Homepage_audios($homepage_input_array)->isNotEmpty() ){
      array_push($input,'audios');
    }

    if($Homesetting->albums == 1  && $this->All_Homepage_albums($homepage_input_array)->isNotEmpty() ){
      array_push($input,'albums');
    }

    if($Homesetting->video_schedule == 1 && $this->All_Homepage_video_schedule($homepage_input_array)->isNotEmpty() ){
      array_push($input,'video_schedule');
    }

    if($Homesetting->channel_partner == 1 && $this->All_Homepage_ChannelPartner($homepage_input_array)->isNotEmpty() ){
      array_push($input,'ChannelPartner');
    }

    if($Homesetting->content_partner == 1 && $this->All_Homepage_ContentPartner($homepage_input_array)->isNotEmpty() ){
      array_push($input,'ContentPartner');
    }

    if($Homesetting->AudioGenre == 1 && $this->All_Homepage_Audio_Genre($homepage_input_array)->isNotEmpty() ){
      array_push($input,'Audio_Genre');
    }
    
    if($Homesetting->AudioGenre_audios == 1 && $this->All_Homepage_Audio_Genre_audios($homepage_input_array)->isNotEmpty() ){
      array_push($input,'Audio_Genre_audios');
    }

    if($Homesetting->latest_viewed_Videos == 1 && $this->All_Homepage_latest_viewed_Videos( $user_id,$homepage_input_array )->isNotEmpty() ){
      array_push($input,'latest_viewed_Videos');
    }

    if($Homesetting->latest_viewed_Livestream == 1 && ($this->All_Homepage_latest_viewed_Livestream( $user_id,$homepage_input_array ))->isNotEmpty() ){
      array_push($input,'latest_viewed_Livestream');
    }

    if($Homesetting->latest_viewed_Episode == 1 && $this->All_Homepage_latest_viewed_Episode( $user_id,$homepage_input_array )->isNotEmpty() ){
      array_push($input,'latest_viewed_Episode');
    }

    if($Homesetting->latest_viewed_Audios == 1 && $this->All_Homepage_latest_viewed_Audios( $user_id,$homepage_input_array )->isNotEmpty() ){
      array_push($input,'latest_viewed_Audios');
    }

    if($Homesetting->Recommended_videos_site == 1 && $this->All_Homepage_Recommended_videos_site($homepage_input_array)->isNotEmpty()  ){
      array_push($input,'Recommended_videos_site');
    }

    if($Homesetting->Recommended_videos_users == 1 && $this->All_Homepage_Recommended_videos_users( $user_id,$homepage_input_array )->isNotEmpty()  ){
      array_push($input,'Recommended_videos_users');
    }

    if($Homesetting->Recommended_videos_Country == 1 && $this->All_Homepage_Recommended_videos_Country($homepage_input_array)->isNotEmpty()  ){
      array_push($input,'Recommended_videos_Country');
    }

    if($Homesetting->continue_watching == 1 ){
      array_push($input,'continue_watching');
    }

    if($Homesetting->SeriesGenre == 1 && $this->All_Homepage_SeriesGenre($homepage_input_array)->isNotEmpty() ){
      array_push($input,'Series_Genre');
    }

    if($Homesetting->my_playlist == 1 && $this->All_Homepage_my_playlist( $user_id,$homepage_input_array )->isNotEmpty() ){
      array_push($input,'my_play_list');
    }

   if($Homesetting->video_playlist == 1 && $this->All_Homepage_video_playlist($homepage_input_array)->isNotEmpty() ){
      array_push($input,'video_play_list');
    }

    if($Homesetting->Document == 1 && $this->All_Homepage_Documents($homepage_input_array)->isNotEmpty() ){
      array_push($input,'Document');
    }

    if($Homesetting->Document_Category == 1 && $this->All_Homepage_Document_Category($homepage_input_array)->isNotEmpty() ){
      array_push($input,'Document_Category');
    }

    if($Homesetting->Series_Networks == 1 && $this->All_Homepage_Series_Networks($homepage_input_array)->isNotEmpty() ){
      array_push($input,'Series_Networks');
    }

    if($Homesetting->Series_based_on_Networks == 1 && $this->All_Homepage_Series_based_on_Networks($homepage_input_array)->isNotEmpty() ){
      array_push($input,'Series_based_on_Networks');
    }

    if($Homesetting->SeriesGenre_videos == 1 && $this->All_Homepage_Series_based_on_genre($homepage_input_array)->isNotEmpty() ){
      array_push($input,'Series_Genre_videos');
    }

    if($Homesetting->epg == 1 && $this->All_Homepage_EPG($homepage_input_array)->isNotEmpty() ){
      array_push($input,'epg');
    }

    return $input;
  }

  private static function All_Homepage_latestvideos($homepage_input_array){
   

    $latest_videos_status = $homepage_input_array['MobileHomeSetting']->latest_videos;
    $homepage_geofencing = $homepage_input_array['Geofencing'];
    $homepage_default_image_url = array(
      'homepage_default_vertical_image_url' => $homepage_input_array['default_vertical_image_url'],
      'homepage_default_horizontal_image_url' => $homepage_input_array['default_horizontal_image_url'],
    );

   
    $check_Kidmode        = 0 ;

    if( $latest_videos_status == null || $latest_videos_status == 0 ):

      $data = array();       // Note - if the home-setting (latest_videos) is turned off in the admin panel

    else:

      $data = Video::select('id','title','slug','year','rating','access','publish_type','global_ppv','publish_time','ppv_price','duration','rating','image','featured','age_restrict','player_image','description','trailer','trailer_type','video_tv_image')
        ->where('active',1)->where('status', 1)->where('draft',1);

          if(  $homepage_geofencing !=null &&  $homepage_geofencing->geofencing == 'ON')
          {
            $data = $data->whereNotIn('videos.id',Block_videos());
          }

          if( $check_Kidmode == 1 )
          {
            $data = $data->whereBetween('age_restrict', [ 0, 12 ]);
          }

      $data = $data->latest()->limit( $homepage_input_array['limit'])->get()->map(function ($item) use ( $homepage_default_image_url ) {
        $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $homepage_default_image_url['homepage_default_vertical_image_url'] ;
        $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $homepage_default_image_url['homepage_default_horizontal_image_url'] ;
        $item['tv_image_url'] = !is_null($item->video_tv_image) ? URL::to('/public/uploads/images/'.$item->video_tv_image) : $homepage_default_image_url['homepage_default_horizontal_image_url'];
        $item['description'] = $item->description ;
        $item['source']    = "Videos";
        return $item;
      });

    endif;

    return $data ;

  }

  private static function All_Homepage_featured_videos($homepage_input_array){

    $featured_videos_status = $homepage_input_array['MobileHomeSetting']->featured_videos;
    $homepage_geofencing = $homepage_input_array['Geofencing'];
    $homepage_default_image_url = array(
      'homepage_default_vertical_image_url' => $homepage_input_array['default_vertical_image_url'],
      'homepage_default_horizontal_image_url' => $homepage_input_array['default_horizontal_image_url'],
    );

    $check_Kidmode        = 0 ;

      if( $featured_videos_status == null || $featured_videos_status == 0 ):

          $data = array();        // Note - if the home-setting (featured_videos) is turned off in the admin panel
      
      else:

        $data = Video::select('id','player_image','title','slug','year','rating','access','publish_type','global_ppv','publish_time','ppv_price','duration','rating','image','featured','age_restrict','description','trailer','trailer_type','video_tv_image')
          ->where('active',1)->where('status', 1)->where('draft',1)->where('featured',1);

            if( $homepage_geofencing !=null && $homepage_geofencing->geofencing == 'ON')
            {
                $data = $data->whereNotIn('videos.id',Block_videos());
            }

            if( $check_Kidmode == 1 )
            {
                $data = $data->whereBetween('age_restrict', [ 0, 12 ]);
            }
        
        $data = $data->latest()->limit($homepage_input_array['limit'])->get()->map(function ($item) use ( $homepage_default_image_url ) {
            $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $homepage_default_image_url['homepage_default_vertical_image_url'] ;
            $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $homepage_default_image_url['homepage_default_horizontal_image_url'] ;
            $item['tv_image_url'] = !is_null($item->video_tv_image) ? URL::to('/public/uploads/images/'.$item->video_tv_image) : $homepage_default_image_url['homepage_default_horizontal_image_url'];
            $item['description'] = $item->description ;
            $item['source']    = "Videos";
            return $item;
        });

      endif;

    return $data ;

  }

  private static function All_Homepage_live_videos($homepage_input_array){

    $live_stream_videos_status = $homepage_input_array['MobileHomeSetting']->live_videos;
    $homepage_geofencing = $homepage_input_array['Geofencing'];
    $homepage_default_image_url = array(
      'homepage_default_vertical_image_url' => $homepage_input_array['default_vertical_image_url'],
      'homepage_default_horizontal_image_url' => $homepage_input_array['default_horizontal_image_url'],
    );

      if( $live_stream_videos_status == null || $live_stream_videos_status == 0 ):   

          $livestreams = array();      // Note - if the home-setting (live_videos) is turned off in the admin panel

      else:

        $current_timezone = Setting::pluck('default_time_zone')->first();

        $livestreams = LiveStream::select('id', 'title', 'slug', 'year', 'rating', 'access', 'publish_type', 'publish_time', 'publish_status', 'ppv_price',
                                            'duration', 'rating', 'image', 'featured', 'Tv_live_image', 'player_image', 'details', 'description', 'free_duration',
                                            'recurring_program', 'program_start_time', 'program_end_time', 'custom_start_program_time', 'custom_end_program_time',
                                            'recurring_timezone', 'recurring_program_week_day', 'recurring_program_month_day')
                                        ->where('active', '1')
                                        ->where('status', 1)
                                        ->get()->map(function ($item) use ($homepage_default_image_url) {
                                          $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $homepage_default_image_url['homepage_default_vertical_image_url'] ;
                                          $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $homepage_default_image_url['homepage_default_horizontal_image_url'] ;
                                          $item['tv_image_url'] = !is_null($item->Tv_live_image) ? URL::to('/public/uploads/images/'.$item->Tv_live_image) : $homepage_default_image_url['homepage_default_horizontal_image_url']  ;
                                          $item['description'] = $item->description ;
                                          $item['source']    = "Livestream";
                                          return $item;
                                      });
    
        $livestreams_filter = $livestreams->filter(function ($livestream) use ($current_timezone) {

          $livestream->live_animation = 'true' ;

          if ($livestream->publish_type === 'recurring_program') {

            $Current_time = Carbon::now($current_timezone);
            $recurring_timezone = TimeZone::where('id', $livestream->recurring_timezone)->value('time_zone');
            $convert_time = $Current_time->copy()->timezone($recurring_timezone);
            $midnight = $convert_time->copy()->startOfDay();
            $endmidnight = $convert_time->copy()->endOfDay();

            $custom_start_midnight = new \DateTime($livestream->custom_start_program_time);
            $custom_start_midnight = clone $custom_start_midnight;
            $custom_start_midnight->setTime(0, 0, 0);
            
            // dd($custom_start_midnight->format('Y-m-d\TH:i'));
            
            $live_end_date = new \DateTime($livestream->custom_end_program_time);
            $program_end_date = clone $live_end_date;
            $program_end_date->modify('+1 day');
            $program_end_date->setTime(0, 0, 0);
      
              switch ($livestream->recurring_program) {
                  case 'custom':
                      $recurring_program_Status =  ($livestream->custom_start_program_time >= $custom_start_midnight->format('Y-m-d\TH:i') && $livestream->custom_start_program_time <= $endmidnight->format('Y-m-d\TH:i')) && ($livestream->custom_end_program_time > $convert_time->format('Y-m-d\TH:i')) ;
                      $recurring_program_live_animation =  ($livestream->custom_start_program_time <= $convert_time->format('Y-m-d\TH:i') && $livestream->custom_end_program_time >= $convert_time->format('Y-m-d\TH:i')) ;
                      break;
                  case 'daily':
                      $recurring_program_Status = $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                      $recurring_program_live_animation = $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                      break;
                  case 'weekly':
                      $recurring_program_Status =  ( $livestream->recurring_program_week_day == $convert_time->format('N') ) && $convert_time->greaterThanOrEqualTo($midnight)  && ( $livestream->program_end_time >= $convert_time->format('H:i') );
                      $recurring_program_live_animation = $livestream->recurring_program_week_day == $convert_time->format('N') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                      break;
                  case 'monthly':
                      $recurring_program_Status = $livestream->recurring_program_month_day == $convert_time->format('d') && $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                      $recurring_program_live_animation = $livestream->recurring_program_month_day == $convert_time->format('d') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                      break;
                  default:
                      $recurring_program_Status = false;
                      $recurring_program_live_animation = false;
                      break;
              }

              $livestream->recurring_program_live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;

              $livestream->live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;
      
              return $recurring_program_Status;
          }
      
          if ($livestream->publish_type === 'publish_later') {

            $Current_time = Carbon::now($current_timezone);
            
            $publish_later_Status = Carbon::parse($livestream->publish_time)->startOfDay()->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;
            $publish_later_live_animation = Carbon::parse($livestream->publish_time)->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;

            $livestream->publish_later_live_animation = $publish_later_live_animation;
            
            $livestream->recurring_program_live_animation_mobile = $publish_later_live_animation  == true ? 'true' : 'false' ;

            $livestream->live_animation = $publish_later_live_animation  == true ? 'true' : 'false' ;

            return $publish_later_Status;
        }
      
          return $livestream->publish_type === 'publish_now' || $livestream->publish_type === 'publish_later' && $livestream->publish_later_Status || ($livestream->publish_type === 'recurring_program' && $recurring_program_Status);
      });

      $livestreams_sort = $livestreams_filter->sortBy(function ($livestream) {

          if ($livestream->publish_type === 'publish_now') {
              $priority = 1;
              $time = Carbon::parse($livestream->created_at)->timestamp;

          } elseif ($livestream->publish_type === 'publish_later') {
              $priority = 2;
              $time = Carbon::parse($livestream->publish_time)->timestamp;

          } elseif ($livestream->publish_type === 'recurring_program') {
            
              $priority = 2;
              if (!empty($livestream->custom_start_program_time)) {
                  $time = Carbon::parse($livestream->custom_start_program_time)->timestamp;
              } else {
                  $time = Carbon::parse(Carbon::today()->format('Y-m-d') . ' ' . $livestream->program_start_time)->timestamp;
              }
          } else {
              $priority = 3;
              $time = 0;
          }
          return [$priority, $time];
      })->values();
        
        return $livestreams_sort->take($homepage_input_array['limit']);

      endif;

      return $livestreams ;
  }

    
  private static function All_Homepage_radio_stations($homepage_input_array){
    
    $radio_station_status = $homepage_input_array['MobileHomeSetting']->radio_station;
    $homepage_geofencing = $homepage_input_array['Geofencing'];
    $homepage_default_image_url = array(
      'homepage_default_vertical_image_url' => $homepage_input_array['default_vertical_image_url'],
      'homepage_default_horizontal_image_url' => $homepage_input_array['default_horizontal_image_url'],
    );
      if( $radio_station_status == null || $radio_station_status == 0 ):   
          $livestreams = array();  
      else:
        $livestreams = LiveStream::select('id', 'title', 'slug', 'year', 'rating', 'access', 'publish_type', 'publish_time', 'publish_status', 'ppv_price',
                                            'duration', 'rating', 'image', 'featured', 'Tv_live_image', 'player_image', 'details', 'description', 'free_duration',
                                            'recurring_program', 'program_start_time', 'program_end_time', 'custom_start_program_time', 'custom_end_program_time',
                                            'scheduler_program_days','scheduler_program_title','scheduler_program_start_time', 'scheduler_program_end_time',
                                            'recurring_timezone', 'recurring_program_week_day', 'recurring_program_month_day')
                                          ->where('active', '1')
                                          ->where('stream_upload_via','radio_station')
                                          ->where('status', 1)
                                          ->get()->map(function ($item) use ($homepage_default_image_url) {
                                            $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $homepage_default_image_url['homepage_default_vertical_image_url'] ;
                                            $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $homepage_default_image_url['homepage_default_horizontal_image_url'] ;
                                            $item['tv_image_url'] = !is_null($item->Tv_live_image) ? URL::to('/public/uploads/images/'.$item->Tv_live_image) : $homepage_default_image_url['homepage_default_horizontal_image_url']  ;
                                            $item['description'] = $item->description ;
                                            $item['source']    = "Radio Station";
                                            return $item;
                                        });

      endif;
      return $livestreams ;
  }

      
    private static function All_Homepage_user_generated_content($homepage_input_array){

      $user_generated_content_status = $homepage_input_array['MobileHomeSetting']->user_generated_content;
      $homepage_geofencing = $homepage_input_array['Geofencing'];
      $homepage_default_image_url = array(
        'homepage_default_vertical_image_url' => $homepage_input_array['default_vertical_image_url'],
        'homepage_default_horizontal_image_url' => $homepage_input_array['default_horizontal_image_url'],
      );

        if( $user_generated_content_status == null || $user_generated_content_status == 0 ):    

            $data = array();      // Note - if the home-setting (user_generated_content) is turned off in the admin panel
        else:
          $data = UGCVideo::where('active',1)->latest()->limit($homepage_input_array['limit'])->get()->map(function ($item) use ($homepage_default_image_url) {
              $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $homepage_default_image_url['homepage_default_vertical_image_url'] ;
              $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $homepage_default_image_url['homepage_default_horizontal_image_url'] ;
              $item['tv_image_url'] = !is_null($item->player_image) ? URL::to('/public/uploads/images/'.$item->player_image) : $homepage_default_image_url['homepage_default_horizontal_image_url'];
              $item['description'] = null ;
              $item['source']    = "User Generated Content";
              return $item;
          });        
        endif;

      return $data ;
    }



  private static function All_Homepage_series_videos($homepage_input_array){

    $series_status = $homepage_input_array['MobileHomeSetting']->series;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $series_status != null && $series_status == 0 ):

          $data = array();        // Note - if the home-setting (series) is turned off in the admin panel
      
      else:

        $data = Series::select('id','title','slug','access','active','ppv_status','featured','duration','image','embed_code','mp4_url','webm_url','ogg_url','url','player_image','description','tv_image')
            ->where('active', '1')->latest()->limit($homepage_input_array['limit'])->get()->map(function ($item) {
                $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
                $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
                $item['tv_image_url'] = URL::to('/public/uploads/images/'.$item->tv_image);
                $description = $item->description;
                                do {
                                    $previous = $description;
                                    $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                } while ($description !== $previous);
                $item['description'] = strip_tags($description);
                $item['season_count'] = SeriesSeason::where('series_id',$item->id)->count();
                $item['episode_count'] = Episode::where('series_id',$item->id)->count();
                $item['source']    = "Series";
                return $item;
        });
      
      endif;

      return $data ;
  }

  private static function All_Homepage_audios($homepage_input_array){

    $audios_status = $homepage_input_array['MobileHomeSetting']->audios;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $audios_status == null || $audios_status == 0 ):    

          $data = array();      // Note - if the home-setting (audios) is turned off in the admin panel

      else:

        $data = Audio::select('id','title','slug','year','rating','access','ppv_price','duration','rating','image','player_image','featured','description','mp3_url')
          ->where('active',1)->where('status', 1)->latest();

            if( $homepage_geofencing !=null && $homepage_geofencing->geofencing == 'ON')
            {
              $data = $data->whereNotIn('audio.id',Block_audios());
            }

        $data = $data->limit($homepage_input_array['limit'])->get()->map(function ($item) {
            $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
            $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
            $item['tv_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
            $item['redirect_url'] = URL::to('album/'.$item->slug);
            $item['description'] = $item->description ;
            $item['source']    = "Audios";
            return $item;
        }); 

      endif;

      return $data;
  }

  private static function All_Homepage_albums($homepage_input_array){

    $albums_status = $homepage_input_array['MobileHomeSetting']->albums;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if(  $albums_status == null || $albums_status == 0 ):    

          $data = array();      // Note - if the home-setting (albums) is turned off in the admin panel

      else:

          $data = AudioAlbums::latest()->limit($homepage_input_array['limit'])->get()->map(function ($item) {
              $item['image_url'] = URL::to('/public/uploads/albums/'.$item->album);
              $item['Player_image_url'] = URL::to('/public/uploads/albums/'.$item->album); // Note - No Player Image for Albums
              $item['tv_image_url'] = URL::to('/public/uploads/images/'.$item->album); // Note - No TV Image for Albums
              $item['redirect_url'] = URL::to('audio/'.$item->slug);
              $item['description'] = null ;
              $item['source']    = "Audios_album";
              return $item;
          });

      endif;

    return $data ;
  }

  // private static function All_Homepage_artist(){

  //   $artist_status = MobileHomeSetting::pluck('artist')->first();

  //     if( $artist_status == null ||  $artist_status == 0 ):  

  //         $data = array();      // Note - if the home-setting (artist) is turned off in the admin panel

  //     else:

  //       $data = Artist::latest()->limit(30)->get()->map(function ($item) {
  //           $item['image_url'] = URL::to('/public/uploads/albums/'.$item->image);
  //           $item['redirect_url'] = URL::to('artist/'.$item->slug);
  //           return $item;
  //       });

  //     endif;

  //   return $data ;
  // }

  private static function All_Homepage_video_schedule($homepage_input_array){

    $video_schedule_status = $homepage_input_array['MobileHomeSetting']->video_schedule;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $video_schedule_status == null || $video_schedule_status == 0 ):    

          $data = array();      // Note - if the home-setting (video_schedule) is turned off in the admin panel

      else:

        $data = VideoSchedules::where('in_home',1)->latest()->limit($homepage_input_array['limit'])->get()->map(function ($item) {
            $item['image_url'] = $item->image;
            $item['Player_image_url'] = $item->player_image; 
            $item['tv_image_url'] = $item->player_image; // Note - No TV Image 
            $item['description'] = null ;
            $item['source']    = "Videos";
            return $item;
        });
      
      endif;

    return $data ;
  }

  private static function All_Homepage_ChannelPartner($homepage_input_array){

    $channel_partner_status = $homepage_input_array['MobileHomeSetting']->channel_partner;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


       if( $channel_partner_status == null || $channel_partner_status == 0 ):   

           $data = array();      // Note - if the home-setting (channel_partner) is turned off in the admin panel
      
       else:

         $data = Channel::where('status',1)->latest()->limit($homepage_input_array['limit'])->get()->map(function ($item) {
                    $item['image_url'] = $item->channel_image != null ? $item->channel_image : URL::to('/public/uploads/images/'.default_vertical_image()) ;
                    $item['Player_image_url'] = $item->channel_banner != null ? $item->channel_banner : URL::to('/public/uploads/images/'.default_horizontal_image())  ;
                    $item['tv_image_url']     = $item->channel_banner != null ? $item->channel_banner : URL::to('/public/uploads/images/'.default_horizontal_image())  ;     // Note - No TV Image
                    $item['Channel_Logo_url'] = $item->channel_logo != null ? $item->channel_logo : URL::to('/public/uploads/images/'.default_vertical_image());
                    $item['description'] = null ;
                    $item['source']    = "Channel_Partner";

                    $settings = Setting::first();

                    $UserChannelSubscription_status = true ;

                    if ( $settings->user_channel_plans_page_status == 1 ){

                        if (!Auth::guest()) {

                            $UserChannelSubscription = UserChannelSubscription::where('user_id',auth()->user()->id)
                                                            ->where('channel_id',$item->id)->where('status','active')
                                                            ->where('subscription_start', '<=', Carbon::now())
                                                            ->where('subscription_ends_at', '>=', Carbon::now())
                                                            ->latest()->first();
                        }

                        if (!Auth::guest() && Auth::user()->role != "admin"){

                            $UserChannelSubscription_status = is_null($UserChannelSubscription) ? false : true ;

                        }elseif(!Auth::guest() && Auth::user()->role == "admin"){

                          $UserChannelSubscription_status =  true ;

                        }elseif( Auth::guest() ){

                          $UserChannelSubscription_status =  false ;

                        }
                    }

                    $item['UserChannelSubscription_status'] =  $UserChannelSubscription_status ;
                    $item['channel_payment_url'] =  URL::to('channel-payment/'.$item->id) ;
                    
                    return $item;
                  });

       endif;
   
    return $data;
  }

  private static function All_Homepage_ContentPartner($homepage_input_array){

    $content_partner_status = $homepage_input_array['MobileHomeSetting']->content_partner;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $content_partner_status == null || $content_partner_status == 0 ): 

          $data = array();      // Note - if the home-setting (content_partner) is turned off in the admin panel
      else:

          $data = ModeratorsUser::where('status',1)->latest()->limit($homepage_input_array['limit'])->get()->map(function ($item) {
                    $item['image_url'] =  URL::to('public/uploads/picture/'.$item->picture)  ;
                    $item['Player_image_url'] = URL::to('public/uploads/picture/'.$item->banner) ; 
                    $item['tv_image_url'] = URL::to('public/uploads/picture/'.$item->banner) ; // Note - No TV Image
                    $item['description'] = null ;
                    $item['source']    = "Content_Partner";
                  return $item;
              });
      endif;

    return $data;
  }

  private static function All_Homepage_latest_viewed_Videos( $user_id,$homepage_input_array ){

    $latest_viewed_Videos_status = $homepage_input_array['MobileHomeSetting']->latest_viewed_Videos;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $latest_viewed_Videos_status == null || $latest_viewed_Videos_status == 0 ): 

          $data = array();      // Note - if the home-setting (latest_viewed_Videos_status) is turned off in the admin panel
      else:

        $data = RecentView::join('videos', 'videos.id', '=', 'recent_views.video_id')
              ->where('recent_views.user_id',$user_id)
              ->groupBy('recent_views.video_id');

              if($homepage_geofencing !=null && $homepage_geofencing->geofencing == 'ON'){
                  $data = $data  ->whereNotIn('videos.id',Block_videos());
              }
              
        $data = $data->limit($homepage_input_array['limit'])->get()->map(function ($item) {
          $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
          $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image); 
          $item['tv_image_url'] = URL::to('public/uploads/images/'.$item->video_tv_image) ; 
          $item['description'] = $item->description ;
          $item['source']    = "Videos";
              return $item;
          });
      endif;

    return $data;

  }

  private static function All_Homepage_latest_viewed_Livestream( $user_id, $homepage_input_array){

    $latest_viewed_Livestream_status = $homepage_input_array['MobileHomeSetting']->latest_viewed_Livestream;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $latest_viewed_Livestream_status == null || $latest_viewed_Livestream_status == 0 ): 

          $data = array();      // Note - if the home-setting (latest_viewed_Livestream_status) is turned off in the admin panel
      else:

          $data = RecentView::join('live_streams', 'live_streams.id', '=', 'recent_views.live_id')
                  ->where('recent_views.user_id',$user_id)
                  ->groupBy('recent_views.live_id')
                  ->limit($homepage_input_array['limit'])->get()->map(function ($item) {
                    $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
                    $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
                    $item['tv_image_url'] = URL::to('public/uploads/images/'.$item->player_image) ; // Note - No TV Image
                    $item['description'] = $item->description ;
                    $item['source']    = "Livestream";
                        return $item;
                    });
              
      endif;

    return $data;

  }

  private static function All_Homepage_latest_viewed_Episode( $user_id, $homepage_input_array ){

    $latest_viewed_Episode_status = $homepage_input_array['MobileHomeSetting']->latest_viewed_Episode;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $latest_viewed_Episode_status == null || $latest_viewed_Episode_status == 0 ): 

          $data = array();      // Note - if the home-setting (latest_viewed_Episode_status) is turned off in the admin panel
      else:

          $data = RecentView::Select('episodes.*', 'episodes.slug as episode_slug', 'series.id', 'series.slug as series_slug', 'recent_views.episode_id', 'recent_views.user_id')
                    ->join('episodes', 'episodes.id', '=', 'recent_views.episode_id')
                    ->join('series', 'series.id', '=', 'episodes.series_id')
                    ->where('recent_views.user_id', $user_id)
                    ->groupBy('recent_views.episode_id')
                    ->limit($homepage_input_array['limit'])->get()->map(function ($item) {
                      $item['image_url'] = URL::to('/public/uploads/image/'.$item->image);
                      $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
                      $item['tv_image_url']     = URL::to('public/uploads/images/'.$item->tv_image) ; 
                      $item['description'] = $item->episode_description ;
                      $item['source']    = "Episode";
                          return $item;
                      });

      endif;

    return $data;

  }


  private static function All_Homepage_latest_viewed_Audios($user_id,$homepage_input_array){

    $latest_viewed_Audios_status = $homepage_input_array['MobileHomeSetting']->latest_viewed_Audios;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $latest_viewed_Audios_status == null || $latest_viewed_Audios_status == 0 ): 

          $data = array();      // Note - if the home-setting (latest_viewed_Audios_status) is turned off in the admin panel
      else:

          $data =  RecentView::join('audio', 'audio.id', '=', 'recent_views.audio_id')
            ->where('recent_views.user_id',$user_id)
            ->groupBy('recent_views.audio_id');

            if( $homepage_geofencing !=null &&  $homepage_geofencing->geofencing == 'ON'){
                $data = $data  ->whereNotIn('audio.id',Block_audios());
            }

            $data = $data->limit($homepage_input_array['limit'])->get()->map(function ($item) {
              $item['image_url'] = URL::to('/public/uploads/audios/'.$item->image);
              $item['Player_image_url'] = URL::to('/public/uploads/audios/'.$item->player_image);
              $item['tv_image_url']     = URL::to('public/uploads/audios/'.$item->player_image) ; // Note - No TV Image
              $item['description'] = $item->description ;
              $item['source']    = "Audios";
                  return $item;
              });
              
      endif;

    return $data;

  }


  private static function All_Homepage_liveCategories($homepage_input_array){

    $livestreamcategory_status = $homepage_input_array['MobileHomeSetting']->liveCategories;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $livestreamcategory_status == null || $livestreamcategory_status == 0 ): 

          $data = array();      // Note - if the home-setting (Livestream category status) is turned off in the admin panel
      else:

        $data =  LiveCategory::where('in_menu',1)->limit($homepage_input_array['limit'])->orderBy('order')->get()->map(function ($item) {
                              $item['image_url'] = URL::to('public/uploads/livecategory/'.$item->image);
                              $item['Player_image_url'] = URL::to('public/uploads/livecategory/'.$item->image); // Note - No Player Image for LiveCategory
                              $item['tv_image_url'] = URL::to('public/uploads/livecategory/'.$item->image); // Note - No TV Image for LiveCategory
                              $item['description'] = null ;
                              $item['source']    = "LiveCategory";
                              return $item;
                            });
      endif;
   
    return $data;
  }

  private static function All_Homepage_videoCategories($homepage_input_array){

    $videoCategories_status = $homepage_input_array['MobileHomeSetting']->videoCategories;
    $homepage_geofencing = $homepage_input_array['Geofencing'];

    $Setting = Setting::first();

      if( $videoCategories_status == null || $videoCategories_status == 0 ): 

          $data = array();      // Note - if the home-setting (video Categories status) is turned off in the admin panel
      else:

          $data =  VideoCategory::where('in_home',1)->limit($homepage_input_array['limit'])->orderBy('order')->get()->map(function ($item) {
                          $item['title']     = $item->name ;
                          $item['image_url'] = URL::to('public/uploads/videocategory/'.$item->image);
                          $item['Player_image_url'] = URL::to('public/uploads/videocategory/'.$item->banner_image);
                          $item['tv_image_url'] = URL::to('public/uploads/videocategory/'.$item->banner_image); // Note - No TV Image for videocategory
                          $item['description'] = null ;
                          $item['source']    = "category_videos"; 
                          return $item;
                        });

      endif;
   
    return $data;
  }

  private static function All_Homepage_SeriesGenre($homepage_input_array){

    $SeriesGenre_status = $homepage_input_array['MobileHomeSetting']->SeriesGenre;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $SeriesGenre_status == null || $SeriesGenre_status == 0 ): 

          $data = array();      // Note - if the home-setting (Series Genre status) is turned off in the admin panel
      else:

          $data =  SeriesGenre::where('in_home',1)->latest()->limit($homepage_input_array['limit'])->orderBy('order')->get()->map(function ($item) {
                        $item['image_url'] = URL::to('public/uploads/videocategory/'.$item->image) ;
                        $item['Player_image_url'] = URL::to('public/uploads/videocategory/'.$item->banner_image) ;
                        $item['tv_image_url'] = URL::to('public/uploads/videocategory/'.$item->banner_image); // Note - No TV Image for videocategory
                        $item['description'] = null ;
                        $item['source']    = "SeriesGenre";
                        return $item;
                    });
      endif;
   
    return $data;
  }


  private static function All_Homepage_my_playlist( $user_id,$homepage_input_array ){

    $my_playlist_status = $homepage_input_array['MobileHomeSetting']->my_playlist;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $my_playlist_status == null || $my_playlist_status == 0 ): 

          $data = array();      // Note - if the home-setting (Audio Playlist status) is turned off in the admin panel
      else:

          // $data =  MyPlaylist::select('id','title','slug', 'image as image_url', 'description')
          // ->where('user_id',$user_id)->get();
          $data =  MyPlaylist::where('user_id',$user_id)->limit($homepage_input_array['limit'])->get()->map(function ($item) {
            $item['image_url'] = $item->image ;
            $item['Player_image_url'] = $item->image ; // Note - No Player Image 
            $item['tv_image_url'] = $item->image; // Note - No TV Image 
            $item['description'] = null ;
            $item['source']    = "my_play_list";
            return $item;
          });
          
      endif;
   
    return $data;
  }


  
  private static function All_Homepage_video_playlist($homepage_input_array){

    $video_playlist_status = $homepage_input_array['MobileHomeSetting']->video_playlist;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $video_playlist_status == null || $video_playlist_status == 0 ): 

          $data = array();      // Note - if the home-setting (Video Playlist status) is turned off in the admin panel
      else:

          $data =  AdminVideoPlaylist::limit($homepage_input_array['limit'])->get()->map(function ($item) {
                        $item['image_url'] = URL::to('public/uploads/images/'.$item->image) ;
                        $item['Player_image_url'] = URL::to('public/uploads/images/'.$item->image); // Note - No Player Image 
                        $item['tv_image_url'] = URL::to('public/uploads/images/'.$item->image) ; // Note - No TV Image 
                        $item['description'] = null ;
                        $item['source']    = "VideoPlaylist";
                        return $item;
                    });
      endif;
   
    return $data;
  }


  private static function All_Homepage_Documents($homepage_input_array){

    $Document_status = $homepage_input_array['MobileHomeSetting']->Document;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


      if( $Document_status == null || $Document_status == 0 ): 

          $data = array();      // Note - if the home-setting (Document status) is turned off in the admin panel
      else:

          $data =  Document::limit($homepage_input_array['limit'])->get()->map(function ($item) {
                        $item['image_url'] = URL::to('public/uploads/Document/'.$item->image) ;
                        $item['Player_image_url'] = URL::to('public/uploads/Document/'.$item->image); // Note - No Player Image 
                        $item['tv_image_url'] = URL::to('public/uploads/Document/'.$item->image) ; // Note - No TV Image 
                        $item['document_url'] = URL::to('public/uploads/Document/'.$item->document) ;
                        $item['description'] = null ;
                        $item['source']    = "Document";
                        return $item;
                    });
      endif;
   
    return $data;
  }

  private static function All_Homepage_Document_Category($homepage_input_array){

    $Document_Category_status = $homepage_input_array['MobileHomeSetting']->Document_Category;

      if( $Document_Category_status == null || $Document_Category_status == 0 ): 

          $data = array();      // Note - if the home-setting (Audio Genre Audios status) is turned off in the admin panel
      else:
          
        $data =  DocumentGenre::limit($homepage_input_array['limit'])->get()->map(function ($item)  {
          $item['image_url'] = $item->image != null ? URL::to('public/uploads/Document/'.$item->image ) : default_vertical_image_url() ;
          $item['source']    = "Document_Category";
          $item['Documents'] = Document::where('category', '!=', null)
                                      ->whereJsonContains('category', (string)$item->id)
                                      ->get()
                                      ->map(function ($item) {
                                        $item['image_url'] = $item->image != null ?  URL::to('public/uploads/Document/'.$item->image) : default_vertical_image_url() ;
                                        $item['Player_image_url'] = URL::to('public/uploads/Document/'.$item->image); // Note - No Player Image 
                                        $item['tv_image_url'] = URL::to('public/uploads/Document/'.$item->image) ; // Note - No TV Image 
                                        $item['document_url'] = URL::to('public/uploads/Document/'.$item->document) ;
                                        $item['source']    = "Document_Category";
                                        return $item->toArray();
              });
            return $item;
          });
                
      endif;

    return $data;
  }


  private static function All_Homepage_Recommended_videos_site($homepage_input_array){

    $Recommendation_status = $homepage_input_array['MobileHomeSetting']->Recommended_videos_site;
    $homepage_geofencing = $homepage_input_array['Geofencing'];

      if( $Recommendation_status == null || $Recommendation_status == 0 ): 

          $data = array();      // Note - if the home-setting (Recommendation_status) is turned off in the admin panel
      else:

        $check_Kidmode = 0 ;

        $data = RecentView::select('video_id','videos.id', 'videos.title', 'videos.slug', 'videos.year', 'videos.rating', 'videos.access', 'videos.publish_type', 'videos.global_ppv', 'videos.publish_time', 'videos.ppv_price', 'videos.duration', 'videos.rating', 'videos.image', 'videos.featured', 'videos.age_restrict','videos.description','videos.player_image','videos.trailer','videos.trailer_type','videos.video_tv_image',DB::raw('COUNT(video_id) AS count'))
              ->join('videos', 'videos.id', '=', 'recent_views.video_id');

            if($homepage_geofencing !=null && $homepage_geofencing->geofencing == 'ON')
            {
              $data = $data->whereNotIn('videos.id',Block_videos());
            }

            if( $check_Kidmode == 1 )
            {
              $data = $data->whereBetween('videos.age_restrict', [ 0, 12 ]);
            }

            $data = $data->groupBy('video_id')
                  ->orderByRaw('count DESC' )->limit($homepage_input_array['limit'])->get()->map(function ($item) {
                    $item['image_url'] = URL::to('public/uploads/images/'.$item->image) ;
                    $item['Player_image_url'] = URL::to('public/uploads/images/'.$item->player_image);
                    $item['tv_image_url'] = URL::to('public/uploads/images/'.$item->video_tv_image) ; 
                    $item['description'] = $item->description ;
                    $item['source']    = "Videos";
                    return $item;
            });

      endif;
   
    return $data;

  }

  private static function All_Homepage_Recommended_videos_users($user_id,$homepage_input_array)
  {

    $Recommendation_status = $homepage_input_array['MobileHomeSetting']->Recommended_videos_users;
    $homepage_geofencing = $homepage_input_array['Geofencing'];

      if( $Recommendation_status == null || $Recommendation_status == 0 ): 

          $data = array();      // Note - if the home-setting (Recommendation_status) is turned off in the admin panel
      else:

        $check_Kidmode = 0 ;

        $data = RecentView::select('video_id','videos.id', 'videos.title', 'videos.slug', 'videos.year', 'videos.rating', 'videos.access', 'videos.publish_type', 'videos.global_ppv', 'videos.publish_time', 'videos.ppv_price', 'videos.duration', 'videos.rating', 'videos.image', 'videos.featured', 'videos.age_restrict','videos.player_image', 'videos.description','videos.trailer','videos.trailer_type','videos.video_tv_image',DB::raw('COUNT(video_id) AS count'))
                  ->join('videos', 'videos.id', '=', 'recent_views.video_id')
                  ->groupBy('video_id')->where('recent_views.user_id',$user_id)
                  ->orderByRaw('count DESC' );
                  
                  if($homepage_geofencing !=null && $homepage_geofencing->geofencing == 'ON')
                  {
                    $data = $data->whereNotIn('videos.id',Block_videos());
                  }
      
                  if( $check_Kidmode == 1 )
                  {
                    $data = $data->whereBetween('videos.age_restrict', [ 0, 12 ]);
                  }

                  $data = $data->limit($homepage_input_array['limit'])->get()->map(function ($item) {
                      $item['image_url'] = URL::to('public/uploads/images/'.$item->image) ;
                      $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
                      $item['tv_image_url'] = URL::to('public/uploads/images/'.$item->video_tv_image) ; 
                      $item['description'] = $item->description ;
                      $item['source']    = "Videos";
                  return $item;
            });
      endif;
   
     return $data;
  }

  private static function All_Homepage_Recommended_videos_Country($homepage_input_array)
  {

    $Recommendation_status = $homepage_input_array['MobileHomeSetting']->Recommended_videos_Country;
    $homepage_geofencing = $homepage_input_array['Geofencing'];

    if( $Recommendation_status == null || $Recommendation_status == 0 ): 

        $data = array();      // Note - if the home-setting (Recommendation_status) is turned off in the admin panel
    else:
      
        $check_Kidmode = 0 ;

        $data = RecentView::select('video_id','videos.id', 'videos.title', 'videos.slug', 'videos.year', 'videos.rating', 'videos.access', 'videos.publish_type', 'videos.global_ppv', 'videos.publish_time', 'videos.ppv_price', 'videos.duration', 'videos.rating', 'videos.image', 'videos.featured', 'videos.age_restrict','videos.player_image','videos.trailer','videos.trailer_type','videos.description','videos.video_tv_image',DB::raw('COUNT(video_id) AS count'))
                  ->join('videos', 'videos.id', '=', 'recent_views.video_id')->groupBy('video_id')->orderByRaw('count DESC' )
                  ->where('country_name', Country_name());
                  
                  if($homepage_geofencing !=null && $homepage_geofencing->geofencing == 'ON')
                  {
                    $data = $data->whereNotIn('videos.id',Block_videos());
                  }
      
                  if( $check_Kidmode == 1 )
                  {
                    $data = $data->whereBetween('videos.age_restrict', [ 0, 12 ]);
                  }

                  $data = $data->limit($homepage_input_array['limit'])->get()->map(function ($item) {
                      $item['image_url'] = URL::to('public/uploads/images/'.$item->image) ;
                      $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
                      $item['tv_image_url'] = URL::to('public/uploads/images/'.$item->video_tv_image) ; 
                      $item['description'] = $item->description ;
                      $item['source']    = "Videos"; 
                  return $item;
            });
    endif;
 
   return $data;

  }

  private static function All_Homepage_category_videos($homepage_input_array){

    $category_videos_status = $homepage_input_array['MobileHomeSetting']->category_videos;
    $homepage_geofencing = $homepage_input_array['Geofencing'];

    if( $category_videos_status == null || $category_videos_status == 0 ): 

        $data = array();      // Note - if the home-setting (category_videos_status) is turned off in the admin panel
    else:

        $check_Kidmode = 0 ;

        $data = VideoCategory::query()
        ->whereHas('category_videos', function ($query) use ($check_Kidmode,$homepage_geofencing) {
            $query->where('videos.active', 1)->where('videos.status', 1)->where('videos.draft', 1);
    
            if ( $homepage_geofencing != null &&  $homepage_geofencing->geofencing == 'ON') {
              $query->whereNotIn('videos.id', Block_videos());
            }
    
            if ($check_Kidmode == 1) {
              $query->whereBetween('videos.age_restrict', [0, 12]);
            }
        })

        ->with(['category_videos' => function ($videos) use ($check_Kidmode,$homepage_geofencing) {
            $videos->select('videos.id', 'title', 'slug', 'year', 'rating', 'access', 'publish_type', 'global_ppv', 'publish_time', 'ppv_price', 'duration', 'rating', 'image', 'featured', 'age_restrict','player_image','description','videos.trailer','videos.trailer_type','videos.video_tv_image')
                ->where('videos.active', 1)
                ->where('videos.status', 1)
                ->where('videos.draft', 1);
    
            if ( $homepage_geofencing != null &&  $homepage_geofencing->geofencing == 'ON') {
                $videos->whereNotIn('videos.id', Block_videos());
            }
    
            if ($check_Kidmode == 1) {
                $videos->whereBetween('videos.age_restrict', [0, 12]);
            }
    
            $videos->latest('videos.created_at')->get();
        }])
        ->select('video_categories.id', 'video_categories.name', 'video_categories.slug', 'video_categories.in_home', 'video_categories.order')
        ->where('video_categories.in_home', 1)
        ->whereHas('category_videos', function ($query) use ($check_Kidmode,$homepage_geofencing) {
            $query->where('videos.active', 1)->where('videos.status', 1)->where('videos.draft', 1);
    
            if ( $homepage_geofencing != null &&  $homepage_geofencing->geofencing == 'ON') {
                $query->whereNotIn('videos.id', Block_videos());
            }
    
            if ($check_Kidmode == 1) {
                $query->whereBetween('videos.age_restrict', [0, 12]);
            }
        })
        ->orderBy('video_categories.order')
        ->limit($homepage_input_array['limit'])
        ->get()
        ->map(function ($category) {
            $category->category_videos->map(function ($video) {
                $video->image_url = URL::to('/public/uploads/images/'.$video->image);
                $video->Player_image_url = URL::to('/public/uploads/images/'.$video->player_image);
                $video->tv_image_url = URL::to('public/uploads/images/'.$video->video_tv_image) ; 
                $video->description  = $video->description ;
                $video->source  = "Videos";
                return $video;
            });
            $category->source =  "category_videos" ;
            return $category;
        });
    
    endif;

    return $data;
  }

  private static function All_Homepage_category_livestream($homepage_input_array){

      $live_category_status = $homepage_input_array['MobileHomeSetting']->live_category;
      $homepage_geofencing = $homepage_input_array['Geofencing'];
      $LiveStream_based_categories_status =  $homepage_input_array['LiveStream_based_categories_status'];

      if(( $live_category_status == null || $live_category_status == 0 ) && $LiveStream_based_categories_status == 0 ): 

          $data = array();      // Note - if the home-setting (Live category status) is turned off in the admin panel
      else:

          $data = LiveCategory::query()->whereHas('category_livestream', function ($query) use($homepage_input_array) {
                        $query->where('live_streams.active',1)->where('live_streams.status', 1)->limit($homepage_input_array['limit']);
                      })

          ->with(['category_livestream' => function ($live_stream_videos) use($homepage_input_array) {
              $live_stream_videos
                  ->select('live_streams.id','live_streams.title','live_streams.slug','live_streams.year','live_streams.rating','live_streams.access','live_streams.ppv_price','live_streams.publish_type','live_streams.publish_status','live_streams.publish_time','live_streams.duration','live_streams.rating','live_streams.image','live_streams.featured','live_streams.player_image','live_streams.description')
                  ->where('live_streams.active',1)->where('live_streams.status', 1)
                  ->orderBy('live_streams.created_at', 'desc')
                  ->limit($homepage_input_array['limit']);
          }])
          ->select('live_categories.id','live_categories.name', 'live_categories.slug', 'live_categories.order')
          ->orderBy('live_categories.order')
          ->get();
      
          $data->each(function ($category) {
              $category->category_livestream->transform(function ($item) {
                  $item['image_url'] = URL::to('public/uploads/images/'.$item->image);
                  $item['Player_image_url'] = URL::to('public/uploads/images/'.$item->player_image);
                  $item['tv_image_url'] = URL::to('public/uploads/images/'.$item->player_image) ;  // Note - No TV Image
                  $item['description'] = $item->description ;
                  $item['source'] = "Livestream";
                  return $item;
              });
              $category->source =  "live_category" ;
              return $category;
        });

      endif;

    return $data;
  }

  private static function All_Homepage_Audio_Genre($homepage_input_array){

    $Audio_Genre_status = $homepage_input_array['MobileHomeSetting']->AudioGenre;
    $homepage_geofencing = $homepage_input_array['Geofencing'];

      if( $Audio_Genre_status == null || $Audio_Genre_status == 0 ): 

          $data = array();      // Note - if the home-setting (Audio Genre status) is turned off in the admin panel
      else:

        $data = AudioCategory::query()->latest()->limit($homepage_input_array['limit'])->get()->map(function ($item) {
              $item['image_url'] = URL::to('public/uploads/audios/'.$item->image) ;
              $item['Player_image_url'] = URL::to('public/uploads/audios/'.$item->player_image) ;
              $item['tv_image_url'] = URL::to('public/uploads/audios/'.$item->player_image) ;  // Note - No TV Image
              $item['description'] = null ;
              $item['source']    = "Audios";
            return $item;
        });

      endif;

    return $data;

  }

  private static function All_Homepage_Audio_Genre_audios($homepage_input_array){

    $Audio_Genre_audios_status = $homepage_input_array['MobileHomeSetting']->AudioGenre_audios;
    $homepage_geofencing = $homepage_input_array['Geofencing'];

      if( $Audio_Genre_audios_status == null || $Audio_Genre_audios_status == 0 ): 

          $data = array();      // Note - if the home-setting (Audio Genre Audios status) is turned off in the admin panel
      else:
          
        $data = AudioCategory::query()->whereHas('category_audios', function ($query) {
            $query->where('audio.active', 1);
          })
          ->with(['category_audios' => function ($audios_videos) use ($homepage_input_array) {
              $audios_videos
                  ->select('audio.id','audio.title','audio.slug','audio.year','audio.rating','audio.access','audio.ppv_price','audio.duration','audio.rating','audio.image','audio.featured','audio.player_image','audio.description','audio.mp3_url')
                  ->where('audio.active', 1)
                  ->latest('audio.created_at')
                  ->limit($homepage_input_array['limit']);
          }])
          ->select('audio_categories.id', 'audio_categories.name', 'audio_categories.slug', 'audio_categories.order')
          ->orderBy('audio_categories.order')
          ->get();
      
          $data->each(function ($category) {
              $category->category_audios->transform(function ($item) {
                  $item['image_url'] = URL::to('public/uploads/images/'.$item->image);
                  $item['Player_image_url'] = URL::to('public/uploads/images/'.$item->player_image) ;
                  $item['tv_image_url'] = URL::to('public/uploads/images/'.$item->player_image) ;  // Note - No TV Image
                  $item['description'] = $item->description ;
                  $item['source']    = "Audios";
                  $item['source_Name'] = "category_audios";
                  return $item;
              });
              $category->source =  "Audio_Genre_audios" ;
              return $category;
        });
      endif;

    return $data;
  }

  private static function All_Homepage_Series_Networks($homepage_input_array){

    $Homepage_Series_Networks_status = $homepage_input_array['MobileHomeSetting']->Series_Networks;
    $homepage_geofencing = $homepage_input_array['Geofencing'];

    if( $Homepage_Series_Networks_status == null || $Homepage_Series_Networks_status == 0 ): 

        $data = array();      // Note - if the home-setting (Series Networks status) is turned off in the admin panel
    else:
      
        $default_vertical_image_url = default_vertical_image_url();
        $default_horizontal_image_url = default_horizontal_image_url();

        $data = SeriesNetwork::where('in_home',1)->orderBy('order')->limit($homepage_input_array['limit'])->get()->map(function ($item) use ($default_vertical_image_url , $default_horizontal_image_url) {
          $item['image_url'] = $item->image != null ? URL::to('public/uploads/seriesNetwork/'.$item->image ) : $default_vertical_image_url ;
          $item['banner_image_url'] = $item->banner_image != null ?  URL::to('public/uploads/seriesNetwork/'.$item->banner_image ) : $default_horizontal_image_url;
          $item['Player_image_url'] = $item->banner_image != null ?  URL::to('public/uploads/seriesNetwork/'.$item->banner_image ) : $default_horizontal_image_url;
          $item['tv_image_url'] =   $item->banner_image != null ?  URL::to('public/uploads/seriesNetwork/'.$item->banner_image ) : $default_horizontal_image_url ;  // Note - No TV Image
          $item['title'] = $item->name;
          $item['source']    = "Series_Networks";
          $item['source_Name'] = "Series_Networks";

          // $item['series'] = Series::select('id','title','slug','access','active','ppv_status','featured','duration','image','embed_code',
          //                                                                                     'mp4_url','webm_url','ogg_url','url','tv_image','player_image','details','description','network_id')
          //                                                                                     ->where('active', '1')->whereJsonContains('network_id',["$item->id"])
          //                                                                                     ->latest()->limit(15)->get()->map(function ($item) {
          //                                                                                             $item['image_url'] = $item->image != null ?  URL::to('public/uploads/images/'.$item->image) : $default_vertical_image_url ;
          //                                                                                             $item['Player_image_url'] = $item->player_image != null ?  URL::to('public/uploads/images/'.$item->player_image) : $default_horizontal_image_url ;
          //                                                                                             $item['TV_image_url'] = $item->tv_image != null ?  URL::to('public/uploads/images/'.$item->tv_image) : $default_horizontal_image_url ;       
          //                                                                                             $item['season_count'] =  SeriesSeason::where('series_id',$item->id)->count();
          //                                                                                             $item['episode_count'] =  Episode::where('series_id',$item->id)->count();
          //                                                                                             $item['source']   = "series";
          //                                                                                             return $item;
          //                                                                                         });  

          return $item;
        });

    endif;

    return $data;
  }

  private static function All_Homepage_Series_based_on_Networks($homepage_input_array){

    $Homepage_Series_based_on_Networks_status = $homepage_input_array['MobileHomeSetting']->Series_based_on_Networks;
    $homepage_geofencing = $homepage_input_array['Geofencing'];

    if( $Homepage_Series_based_on_Networks_status == null || $Homepage_Series_based_on_Networks_status == 0 ): 

        $data = array();      // Note - if the home-setting (Series based on Networks status) is turned off in the admin panel
    else:
      
      $data = SeriesNetwork::where('in_home', 1)->orderBy('order')->limit($homepage_input_array['limit'])->get()->map(function ($item) use ($homepage_input_array) {

        $item['source'] = "Series_based_on_Networks" ;

        $item['Series_depends_Networks'] = Series::join('series_network_order', 'series.id', '=', 'series_network_order.series_id')
                                                  ->where('series.active', 1)
                                                  ->where('series_network_order.network_id', $item->id)
                                                  ->orderBy('series_network_order.order', 'asc')
                                                  ->get()
                                                  ->map(function ($series) { 
                                                        $series->id = $series->series_id;
                                                        $series['image_url']        = (!is_null($series->image) && $series->image != 'default_image.jpg')  ? URL::to('public/uploads/images/'.$series->image) : default_vertical_image() ;
                                                        $series['Player_image_url'] = (!is_null($series->player_image) && $series->player_image != 'default_image.jpg')  ? URL::to('public/uploads/images/'.$series->player_image )  :  default_horizontal_image_url() ;
                                                        $series['tv_image_url'] = (!is_null($series->tv_image) && $series->tv_image != 'default_image.jpg')  ? URL::to('public/uploads/images/'.$series->tv_image )  :  default_horizontal_image_url() ;  // Note - No TV Image
                                                        $description = $series->description;
                                                        do {
                                                            $previous = $description;
                                                            $description = html_entity_decode($description, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                                        } while ($description !== $previous);
                                                        $details = $series->details;
                                                                    do {
                                                                        $previous = $details;
                                                                        $details = html_entity_decode($details, ENT_QUOTES | ENT_HTML5, 'UTF-8');
                                                                    } while ($details !== $previous);
                                                        $series['details']             = strip_tags($details);
                                                        $series['description']         = strip_tags($description);

                                                        $series['upload_on'] = Carbon::parse($series->created_at)->isoFormat('MMMM Do YYYY'); 
                                                
                                                        $series['duration_format'] =  !is_null($series->duration) ?  Carbon::parse( $series->duration)->format('G\H i\M'): null ;
                                                
                                                    

                                                
                                                        $series['source'] = 'Series';
                                                        return $series;
                                                                
        });
        return $item;
      });

    endif;

    return $data;
  }

  private static function All_Homepage_Series_based_on_genre($homepage_input_array){

    $Homepage_Series_based_on_genre_status = $homepage_input_array['MobileHomeSetting']->SeriesGenre_videos;
    $homepage_geofencing = $homepage_input_array['Geofencing'];


    if( $Homepage_Series_based_on_genre_status == null || $Homepage_Series_based_on_genre_status == 0 ){

        $data = array();   

    }else{
      
      $data = SeriesGenre::query()->whereHas('category_series', function ($query) {})
                    ->with([
                        'category_series' => function ($series) use ($homepage_input_array) {
                            $series->select('series.*')->where('series.active', 1)->latest('series.created_at');
                        },
                    ])
                    ->select('series_genre.id', 'series_genre.name', 'series_genre.slug', 'series_genre.order')
                    ->orderBy('series_genre.order')
                    ->limit($homepage_input_array['limit'])
                    ->get();
  
      $data->each(function ($category) {
          $category->category_series->transform(function ($item) {
  
              $item['image_url']        = !is_null($item->image)  ? URL::to('public/uploads/images/'.$item->image) : default_vertical_image() ;
              $item['Player_image_url'] = !is_null($item->player_image)  ? URL::to('public/uploads/images/'.$item->player_image ) : default_horizontal_image_url() ;
              $item['tv_image_url'] = (!is_null($item->tv_image) && $item->tv_image != 'default_image.jpg')  ? URL::to('public/uploads/images/'.$item->tv_image )  :  default_horizontal_image_url() ;  // Note - No TV Image

              $item['upload_on'] =  Carbon::parse($item->created_at)->isoFormat('MMMM Do YYYY'); 
  
              $item['duration_format'] =  !is_null($item->duration) ?  Carbon::parse( $item->duration)->format('G\H i\M'): null ;
  
              $item['Series_depends_episodes'] = Series::find($item->id)->Series_depends_episodes
                                                      ->map(function ($item) {
                                                          $item['image_url']  = !is_null($item->image) ? URL::to('public/uploads/images/'.$item->image) : default_vertical_image() ;
                                                          return $item;
                                                  });
  
              $item['source'] = 'Series';
              return $item;
          });
          return $category;
      });
    }

    return $data;
  }

  private static function All_Homepage_EPG($homepage_input_array){

    $epg_status = $homepage_input_array['MobileHomeSetting']->latest_videos;
    $homepage_geofencing = $homepage_input_array['Geofencing'];

    $homepage_default_image_url = array(
      'homepage_default_vertical_image_url' => $homepage_input_array['default_vertical_image_url'],
      'homepage_default_horizontal_image_url' => $homepage_input_array['default_horizontal_image_url'],
    );

    if (is_null($epg_status) && $epg_status == 0 ) {

      return $data ;

    }else{

        $current_timezone = current_timezone();
        $carbon_now = Carbon::now($current_timezone);
        $carbon_current_time =  $carbon_now->format('H:i:s');
        $carbon_today =  $carbon_now->format('n-j-Y');

        $data =  AdminEPGChannel::where('status',1)->limit($homepage_input_array['limit'])->get()->map(function ($item) use ($homepage_default_image_url , $carbon_now , $carbon_today , $current_timezone) {
                    
          $item['image_url'] = $item->image != null ? URL::to('public/uploads/EPG-Channel/'.$item->image ) : $homepage_default_image_url['homepage_default_vertical_image_url'] ;
          $item['Player_image_url'] = $item->player_image != null ?  URL::to('public/uploads/EPG-Channel/'.$item->player_image ) : $homepage_default_image_url['homepage_default_horizontal_image_url'] ;
          $item['tv_image_url']     = $item->player_image != null ?  URL::to('public/uploads/EPG-Channel/'.$item->player_image ) : $homepage_default_image_url['homepage_default_horizontal_image_url'] ;
          $item['Logo_url'] = $item->logo != null ?  URL::to('public/uploads/EPG-Channel/'.$item->logo ) : $homepage_default_image_url['homepage_default_vertical_image_url'] ;
                                              
          $item['ChannelVideoScheduler_current_video_details']  =  ChannelVideoScheduler::where('channe_id',$item->id)->where('choosed_date' , $carbon_today )
                                                                      ->get()->map(function ($item) use ($carbon_now , $current_timezone) {

                                                                          $TimeZone   = TimeZone::where('id',$item->time_zone)->first();

                                                                          $converted_start_time =Carbon::createFromFormat('m-d-Y H:i:s', $item->choosed_date . $item->start_time, $TimeZone->time_zone )
                                                                                                                          ->copy()->tz( $current_timezone );

                                                                          $converted_end_time =Carbon::createFromFormat('m-d-Y H:i:s', $item->choosed_date . $item->end_time, $TimeZone->time_zone )
                                                                                                                          ->copy()->tz( $current_timezone );

                                                                          if ($carbon_now->between($converted_start_time, $converted_end_time)) {
                                                                              $item['video_image_url'] = URL::to('public/uploads/images/'.$item->image ) ;
                                                                              $item['converted_start_time'] = $converted_start_time->format('h:i A');
                                                                              $item['converted_end_time']   =   $converted_end_time->format('h:i A');
                                                                              return $item ;
                                                                          }

                                                                      })->filter()->first();
          $item['source'] = 'EPG';
          return $item;
        });
    }
    
    return $data;
  } 

  // Page List

  public function All_Pagelist(Request $request)
  {
    try {

      $source_name = $request->source_name;
      $data = [];
      $Page_List_Name = 'No data';
      $category_name = null;

      $Pagelist_default_image_url = array(
        'default_vertical_image_url' => default_vertical_image_url(),
        'default_horizontal_image_url' => default_horizontal_image_url(),
      );
      
      if ($source_name != null) {

          switch ($source_name) {

              case 'latest_videos':
                  $data = $this->Latest_videos_Pagelist();
                  $Page_List_Name = 'Latest_videos_Pagelist';
                  break;
      
              case 'live_videos':
                  $data = $this->Livestream_Pagelist();
                  $Page_List_Name = 'Livestream_Pagelist';
                  break;

              case 'radio_station':
                $data = $this->Radiostation_Pagelist();
                $Page_List_Name = 'Radiostation_Pagelist';
                break;

              case 'user_generated_content':
                $data = $this->UGC_Pagelist();
                $Page_List_Name = 'UGC_Pagelist';
                break;
      
              case 'featured_videos':
                  $data = $this->Featured_videos_Pagelist();
                  $Page_List_Name = 'Featured_videos_Pagelist';
                  break;

              case 'ChannelPartner':
                  $data = $this->Channel_Pagelist();
                  $Page_List_Name = 'Channel_Pagelist';
                  break;
      
              case 'ContentPartner':
                  $data = $this->Content_Pagelist();
                  $Page_List_Name = 'Content_Pagelist';
                  break;
      
              case 'series':
                  $data = $this->Series_Pagelist();
                  $Page_List_Name = 'Series_Pagelist';
                  break;
      
              case 'Recommended_videos_site':
                  $data = $this->Recommended_videos_site_Pagelist();
                  $Page_List_Name = 'Recommended_videos_site_Pagelist';
                  break;
      
              case 'Recommended_videos_Country':
                  $data = $this->Recommended_videos_Country_Pagelist();
                  $Page_List_Name = 'Recommended_videos_Country_Pagelist';
                  break;
      
              case 'Recommended_videos_users':
                  $data = $this->Recommended_videos_users_Pagelist($request->user_id);
                  $Page_List_Name = 'Recommended_videos_users_Pagelist';
                  break;

              case 'Audios_albums_Pagelist':
                    $data = $this->Audios_albums_Pagelist();
                    $Page_List_Name = 'Audios_albums_Pagelist';
                    break;

              case 'audios':
                    $data = $this->Audios_Pagelist();
                    $Page_List_Name = 'Audios_Pagelist';
                    break;

              case 'videoCategories':
                    $data = $this->videoCategories_Pagelist();
                    $Page_List_Name = 'videoCategories_Pagelist';
                    break;

              case 'liveCategories':
                    $data = $this->live_category_Pagelist();
                    $Page_List_Name = 'live_categories_Pagelist';
                    break;   
                    
              case 'video_schedule':
                    $data = $this->video_schedule_Pagelist();
                    $Page_List_Name = 'video_schedule_Pagelist';
                    break;  

              case 'Audio_Genre':
                    $data = $this->Audio_Genre_Pagelist();
                    $Page_List_Name = 'Audio_Genre_Pagelist';
                    break;  

              case 'Series_Genre':
                    $data = $this->Series_Genre_Pagelist();
                    $Page_List_Name = 'Series_Genre_Pagelist';
                    break;  

              case 'category_videos':
                    $data = $this->Specific_Category_Videos_Pagelist($request->category_id);
                    $Page_List_Name = 'Specific_Category_Videos';

                    $category = VideoCategory::find($request->category_id);
                    if ($category) {
                        $category_name = $category->name;
                    }
                    break;  

              case 'live_category':
                    $data = $this->Specific_Category_Livestreams_Pagelist($request->category_id);
                    $Page_List_Name = 'Specific_Category_Livestreams';
                    $category = LiveCategory::find($request->category_id);
                    if ($category) {
                        $category_name = $category->name;
                    }
                    break;  


              case 'Audio_Genre_audios':
                    $data = $this->Specific_Genre_audios_Pagelist($request->category_id);
                    $Page_List_Name = 'Specific_Genre_audios_Pagelist';
                    break;  

              case 'Series_Genre_videos':
                $data = $this->Specific_Genre_Series_Pagelist($request->category_id);
                $Page_List_Name = 'Specific_Genre_Series_Pagelist';
                break;  

              case 'my_play_list':
                $data = $this->Specific_Audio_Playlist_Pagelist($request->user_id);
                $Page_List_Name = 'Specific_Audio_Playlist_Pagelist';
                break;  
                
              case 'video_play_list':
                $data = $this->Video_Playlist_Pagelist();
                $Page_List_Name = 'Video_Playlist_Pagelist';
                break;  

              case 'Document':
                $data = $this->Document_Pagelist();
                $Page_List_Name = 'Document_Pagelist';
                break;  

              case 'Document_Category':
                $data = $this->Document_Category_Pagelist($request->category_id);
                $Page_List_Name = 'Document_Category_Pagelist';
                break;  
                
              case 'Series_Networks':
                $data = $this->SeriesNetwork_Pagelist();
                $Page_List_Name = 'Series_Network_Pagelist';
                break;  
                
              case 'Series_based_on_Networks':
                $data = $this->Series_based_on_Networks_Pagelist();
                $Page_List_Name = 'Series_based_on_Networks_Pagelist';
                break;  

              case 'Series_based_on_genre':
                $data = $this->Series_based_on_genre_Pagelist();
                $Page_List_Name = 'Series_based_on_genre_Pagelist';
                break;  

              case 'EPG':
                $data = $this->EPG_Pagelist( $Pagelist_default_image_url );
                $Page_List_Name = 'EPG_Pagelist';
                break;  
          }
      }

        $response = array(
          'status' => 'true',
          'message' => ' Retrieved Page List Successfully',
          'Page_List_Name' => $Page_List_Name,
          'Category_Name' => $category_name,
          'Page_List' => $data,
        );

    } catch (\Throwable $th) {

      $response = array(
        'status' => 'false',
        'Page_List' => $th->getMessage(),
      );
    }

    return response()->json($response, 200);
  }

  private static function Specific_Category_Videos_Pagelist($category_id){

    $check_Kidmode = 0 ;

    $query = VideoCategory::find($category_id)->specific_category_videos();

    $query->where('videos.active', 1)->where('videos.status', 1)->where('videos.draft', 1);

    if (Geofencing() !== null && Geofencing()->geofencing === 'ON') {
        $query->whereNotIn('videos.id', Block_videos());
    }
    
    if ($check_Kidmode == 1) {
        $query->whereBetween('age_restrict', [0, 12]);
    }

    $data = $query->latest()->get();

    $data->transform(function ($item) {
      $item->image_url = URL::to('/public/uploads/images/'.$item->image);
      $item->player_image_url = URL::to('/public/uploads/images/'.$item->player_image);
      $item->source = "Videos";
      return $item;
    });

    return $data;

  }

  private static function Specific_Category_Livestreams_Pagelist( $category_id ){
    
    $query =  LiveCategory::find($category_id)->specific_category_live();

    $query->where('active',1)->where('status', 1);

    $data = $query->latest()->get();
        
    $data->transform(function ($item) {
          $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
          $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
          $item['source']    = "Livestream";
          return $item;
    });

    return $data;
    
  }

  private static function Specific_Genre_audios_Pagelist( $category_id ){
    
    $query =  AudioCategory::find($category_id)->specific_category_audio();

    $query->where('active',1)->where('status', 1);

    $data = $query->latest()->get();

    $data->transform(function ($item) {
      $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
      $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
      $item['source']    = "Audios";
      return $item;
    });
  
    return $data;
    
  }

  private static function Specific_Genre_Series_Pagelist( $category_id ){
    
    $query =  SeriesGenre::find($category_id)->specific_category_series();

    $query->where('active',1);

    $data = $query->latest()->get();

    $data->transform(function ($item) {
      $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
      $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
      $item['season_count'] = SeriesSeason::where('series_id',$item->id)->count();
      $item['episode_count'] = Episode::where('series_id',$item->id)->count();
      $item['source']    = "series";
      return $item;
    });
  
    return $data;
    
  }

  
  private static function Document_Category_Pagelist( $category_id ){
    

    $query =  Document::where('category','!=',null)
    ->WhereJsonContains('category',(string) $category_id)->latest();

    $data = $query->latest()->get();

    $data->transform(function ($item) {
      $item['image_url'] = !is_null($item->image )? URL::to('public/uploads/Document/'.$item->image) : default_vertical_image_url() ;
      $item['document_url'] = !is_null($item->document )? URL::to('public/uploads/Document/'.$item->document) : default_vertical_image_url() ;
      $item['Category']    = DocumentGenre::where('id',$category_id)->first();
      $item['source']    = "Document_Category";
      return $item;
    });
  
    return $data;
    
  }

  private static function SeriesNetwork_Pagelist(){
    
        $default_vertical_image_url = default_vertical_image_url();
        $default_horizontal_image_url = default_horizontal_image_url();

        $data = SeriesNetwork::where('in_home',1)->orderBy('order')->limit(15)->get()->map(function ($item) use ($default_vertical_image_url , $default_horizontal_image_url) {
          $item['image_url'] = $item->image != null ? URL::to('public/uploads/seriesNetwork/'.$item->image ) : $default_vertical_image_url ;
          $item['banner_image_url'] = $item->banner_image != null ?  URL::to('public/uploads/seriesNetwork/'.$item->banner_image ) : $default_horizontal_image_url;
          $item['Player_image_url'] = $item->banner_image != null ?  URL::to('public/uploads/seriesNetwork/'.$item->banner_image ) : $default_horizontal_image_url;
          $item['title'] = $item->name;
          $item['source'] = 'Series_Networks';

          $item['series'] = Series::select('id','title','slug','access','active','ppv_status','featured','duration','image','embed_code',
                                                                                              'mp4_url','webm_url','ogg_url','url','tv_image','player_image','details','description','network_id')
                                                                                              ->where('active', '1')->whereJsonContains('network_id',["$item->id"])
                                                                                              ->latest()->limit(15)->get()->map(function ($item) {
                                                                                                      $item['image_url'] = $item->image != null ?  URL::to('public/uploads/images/'.$item->image) : $default_vertical_image_url ;
                                                                                                      $item['Player_image_url'] = $item->player_image != null ?  URL::to('public/uploads/images/'.$item->player_image) : $default_horizontal_image_url ;
                                                                                                      $item['TV_image_url'] = $item->tv_image != null ?  URL::to('public/uploads/images/'.$item->tv_image) : $default_horizontal_image_url ;       
                                                                                                      $item['season_count'] =  SeriesSeason::where('series_id',$item->id)->count();
                                                                                                      $item['episode_count'] =  Episode::where('series_id',$item->id)->count();
                                                                                                      return $item;
                                                                                                  });  

          return $item;
        });

      return $data ;
  }

  public function Network_depends_series(Request $request)
  {
    try {
      
        $this->validate($request, [ 'network_id'  => 'required|integer' ]);

        $Networks_depends_series = Series::join('series_network_order', 'series.id', '=', 'series_network_order.series_id')
                                      ->where('series.active', 1)
                                      ->where('series_network_order.network_id', [(string)$request->network_id])
                                      ->orderBy('series_network_order.order', 'asc')
                                          ->get()->map(function ($item) { 
                                            
                                          $item['id']               = $item->series_id ;
                                          $item['image_url']        = (!is_null($item->image) && $item->image != 'default_image.jpg')  ? URL::to('public/uploads/images/'.$item->image) : default_vertical_image() ;
                                          $item['Player_image_url'] = (!is_null($item->player_image) && $item->player_image != 'default_image.jpg')  ? URL::to('public/uploads/images/'.$item->player_image )  :  default_horizontal_image_url() ;
                                          $item['upload_on']        = Carbon::parse($item->created_at)->isoFormat('MMMM Do YYYY'); 
                                          $item['duration_format']  =  !is_null($item->duration) ?  Carbon::parse( $item->duration)->format('G\H i\M'): null ;
                                          $item['source'] = 'Series';
                                          return $item;
                                      });

          $response = array(
            'status'  => 'true',
            'Message' => 'Retrieved Network depends sereis Successfully',
            'Series_depends_Networks'  => $Networks_depends_series,
          );

    } catch (\Throwable $th) {

        $response = array(
          'status'  => 'false',
          'Message' => $th->getMessage(),
        );
    }

    return response()->json($response, 200);
  }
  
  private static function Series_based_on_Networks_Pagelist( ){
    
    $query = SeriesNetwork::where('in_home', 1)->orderBy('order')->limit(15)->get()->map(function ($item) {

      $item['Series_depends_Networks'] = Series::where('series.active', 1)
                  ->whereJsonContains('network_id', [(string)$item->id])
  
                  ->latest('series.created_at')->limit(15)->get()->map(function ($item) { 
          
          $item['image_url']        = (!is_null($item->image) && $item->image != 'default_image.jpg')  ? URL::to('public/uploads/images/'.$item->image) : default_vertical_image() ;
          $item['Player_image_url'] = (!is_null($item->player_image) && $item->player_image != 'default_image.jpg')  ? URL::to('public/uploads/images/'.$item->player_image )  :  default_horizontal_image_url() ;
  
          $item['upload_on'] = Carbon::parse($item->created_at)->isoFormat('MMMM Do YYYY'); 
  
          $item['duration_format'] =  !is_null($item->duration) ?  Carbon::parse( $item->duration)->format('G\H i\M'): null ;
    
          $item['source'] = 'Series';
          return $item;
                                                              
      });
      return $item;
    });

    return $query;
    
  }

  private static function Series_based_on_genre_Pagelist(){

      $data = SeriesGenre::query()->whereHas('category_series', function ($query) {})
                    ->with([
                        'category_series' => function ($series) {
                            $series->select('series.*')->where('series.active', 1)->latest('series.created_at');
                        },
                    ])
                    ->select('series_genre.id', 'series_genre.name', 'series_genre.slug', 'series_genre.order')
                    ->orderBy('series_genre.order')
                    ->limit(15)
                    ->get();
  
      $data->each(function ($category) {
          $category->category_series->transform(function ($item) {
  
              $item['image_url']        = !is_null($item->image)  ? URL::to('public/uploads/images/'.$item->image) : default_vertical_image() ;
              $item['Player_image_url'] = !is_null($item->player_image)  ? URL::to('public/uploads/images/'.$item->player_image ) : default_horizontal_image_url() ;
  
              $item['upload_on'] =  Carbon::parse($item->created_at)->isoFormat('MMMM Do YYYY'); 
  
              $item['duration_format'] =  !is_null($item->duration) ?  Carbon::parse( $item->duration)->format('G\H i\M'): null ;
  
              $item['Series_depends_episodes'] = Series::find($item->id)->Series_depends_episodes
                                                      ->map(function ($item) {
                                                          $item['image_url']  = !is_null($item->image) ? URL::to('public/uploads/images/'.$item->image) : default_vertical_image() ;
                                                          return $item;
                                                  });
  
              $item['source'] = 'Series';
              return $item;
          });
          return $category;
      });

    return $data ;
  }

  private static function Document_Pagelist(){

    $query = Document::query();

    $data = $query->latest()->get();

    $data->transform(function ($item) {
      $item['image_url'] = !is_null($item->image )? URL::to('public/uploads/Document/'.$item->image) : default_vertical_image_url() ;
      $item['document_url'] = !is_null($item->document )? URL::to('public/uploads/Document/'.$item->document) : default_vertical_image_url() ;
      $item['source']    = "Document";
      return $item;
    });

    return $data;
  }

  private static function Audio_Genre_Pagelist(){

    $query = AudioCategory::query();

    $data = $query->latest()->get();

    $data->transform(function ($item) {
      $item['image_url'] = URL::to('public/uploads/images/'.$item->image) ;
      $item['Player_image_url'] = URL::to('public/uploads/images/'.$item->player_image) ;
      $item['source']    = "Audios";
      return $item;
    });

    return $data;
  }

  private static function Series_Genre_Pagelist(){

    $query = SeriesGenre::query();

    $data = $query->latest()->get();

    $data->transform(function ($item) {
      $item['image_url'] = URL::to('public/uploads/videocategory/'.$item->image) ;
      $item['Player_image_url'] = URL::to('public/uploads/videocategory/'.$item->image) ;
      $item['source']    = "series";
      return $item;
    });

    return $data;
  }

  private static function video_schedule_Pagelist(){

    $query = VideoSchedules::query()->where('in_home',1);

    $data = $query->latest()->get();

    $data->transform(function ($item) {
      $item['image_url'] = $item->image;
      $item['Player_image_url'] = $item->player_image; 
      $item['source']    = "Videos";
      return $item;
    });

    return $data;

  }

  private static function videoCategories_Pagelist(){

    $query = VideoCategory::query()->where('in_home', 1)->orderBy('order');

    $data = $query->latest()->get();

    $data->transform(function ($item) {
      $item['image_url'] = asset('public/uploads/videocategory/'.$item->image);
      $item['Player_image_url'] = asset('public/uploads/videocategory/'.$item->banner_image);
      $item['source'] = "VideoCategories";
      return $item;
    });

    return $data;

  }

  private static function live_category_Pagelist(){

    $query =  LiveCategory::query()->where('in_menu',1)->orderBy('order');
    
    $data = $query->latest()->get();
        
    $data->transform(function ($item) {
      $item['image_url'] = URL::to('public/uploads/livecategory/'.$item->image);
      $item['Player_image_url'] = URL::to('public/uploads/livecategory/'.$item->image); // Note - No Player Image for LiveCategory
      $item['source']    = "LiveCategory";
      return $item;
    });

    return $data;

  }

  private static function Latest_videos_Pagelist(){

      $check_Kidmode = 0;

      $query = Video::query()
            ->select('id', 'title', 'slug', 'year', 'rating', 'access', 'publish_type', 'global_ppv', 'publish_time', 'ppv_price', 'duration', 'rating', 'image', 'featured', 'age_restrict', 'player_image')
            ->where('active', 1)
            ->where('status', 1)
            ->where('draft', 1);
        
      if (Geofencing() !== null && Geofencing()->geofencing === 'ON') {
          $query->whereNotIn('videos.id', Block_videos());
      }
        
      if ($check_Kidmode == 1) {
          $query->whereBetween('age_restrict', [0, 12]);
      }
        
      $data = $query->latest()->get();
        
      $data->transform(function ($item) {
            $item->image_url = URL::to('/public/uploads/images/'.$item->image);
            $item->player_image_url = URL::to('/public/uploads/images/'.$item->player_image);
            $item->source = "Videos";
            return $item;
      });
        
      return $data;
  }

  private static function Featured_videos_Pagelist(){

      $check_Kidmode = 0;

      $query = Video::query()
            ->select('id', 'title', 'slug', 'year', 'rating', 'access', 'publish_type', 'global_ppv', 'publish_time', 'ppv_price', 'duration', 'rating', 'image', 'featured', 'age_restrict', 'player_image')
            ->where('active', 1)
            ->where('status', 1)
            ->where('draft', 1)
            ->where('featured',1);

      if (Geofencing() !== null && Geofencing()->geofencing === 'ON') {
          $query->whereNotIn('videos.id', Block_videos());
      }
        
      if ($check_Kidmode == 1) {
          $query->whereBetween('age_restrict', [0, 12]);
      }
        
      $data = $query->latest()->get();
        
      $data->transform(function ($item) {
            $item->image_url = URL::to('/public/uploads/images/'.$item->image);
            $item->player_image_url = URL::to('/public/uploads/images/'.$item->player_image);
            $item->source = "Videos";
            return $item;
      });
        
      return $data;
  }

  private static function Livestream_Pagelist(){

    $current_timezone = Setting::pluck('default_time_zone')->first();

    $livestreams = LiveStream::select('id', 'title', 'slug', 'year', 'rating', 'access', 'publish_type', 'publish_time', 'publish_status', 'ppv_price',
                                              'duration', 'rating', 'image', 'featured', 'Tv_live_image', 'player_image', 'details', 'description', 'free_duration',
                                              'recurring_program', 'program_start_time', 'program_end_time', 'custom_start_program_time', 'custom_end_program_time',
                                              'recurring_timezone', 'recurring_program_week_day', 'recurring_program_month_day')
                                      ->where('active', '1')
                                      ->where('status', 1)
                                        ->get()->map(function ($item)  {
                                          $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : default_vertical_image_url() ;
                                          $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : default_horizontal_image_url() ;
                                          $item['tv_image_url'] = !is_null($item->Tv_live_image) ? URL::to('/public/uploads/images/'.$item->Tv_live_image) : default_horizontal_image_url()  ;
                                          $item['description'] = $item->description ;
                                          $item['source']    = "Livestream";
                                          return $item;
                                      });

    $livestreams_filter = $livestreams->filter(function ($livestream) use ($current_timezone) {

        $livestream->live_animation = 'true' ;

        if ($livestream->publish_type === 'recurring_program') {

            $Current_time = Carbon::now($current_timezone);
                  
            $recurring_timezone = TimeZone::where('id', $livestream->recurring_timezone)->value('time_zone');
            $convert_time = $Current_time->copy()->timezone($recurring_timezone);
            $midnight = $convert_time->copy()->startOfDay();
            $endmidnight = $convert_time->copy()->endOfDay();

            $custom_start_midnight = new \DateTime($livestream->custom_start_program_time);
            $custom_start_midnight = clone $custom_start_midnight;
            $custom_start_midnight->setTime(0, 0, 0);
            
            // dd($custom_start_midnight->format('Y-m-d\TH:i'));
            
            $live_end_date = new \DateTime($livestream->custom_end_program_time);
            $program_end_date = clone $live_end_date;
            $program_end_date->modify('+1 day');
            $program_end_date->setTime(0, 0, 0);

            // dd($convert_time->format('d') );

            switch ($livestream->recurring_program) {
                case 'custom':
                    $recurring_program_Status =  ($livestream->custom_start_program_time >= $custom_start_midnight->format('Y-m-d\TH:i') && $livestream->custom_start_program_time <= $endmidnight->format('Y-m-d\TH:i')) && ($livestream->custom_end_program_time > $convert_time->format('Y-m-d\TH:i')) ;
                    $recurring_program_live_animation =  ($livestream->custom_start_program_time <= $convert_time->format('Y-m-d\TH:i') && $livestream->custom_end_program_time >= $convert_time->format('Y-m-d\TH:i')) ;
                    // $recurring_program_Status = $convert_time->greaterThanOrEqualTo($midnight) && $livestream->custom_end_program_time >=  Carbon::parse($convert_time)->format('Y-m-d\TH:i') ;
                    // $recurring_program_live_animation = $livestream->custom_start_program_time <= $convert_time && $livestream->custom_end_program_time >= $convert_time;
                    break;
                case 'daily':
                    $recurring_program_Status = $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                    $recurring_program_live_animation = $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                break;
                case 'weekly':
                    $recurring_program_Status =  ( $livestream->recurring_program_week_day == $convert_time->format('N') ) && $convert_time->greaterThanOrEqualTo($midnight)  && ( $livestream->program_end_time >= $convert_time->format('H:i') );
                    $recurring_program_live_animation = $livestream->recurring_program_week_day == $convert_time->format('N') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                break;

                case 'monthly':
                    $recurring_program_Status = $livestream->recurring_program_month_day == $convert_time->format('d') && $convert_time->greaterThanOrEqualTo($midnight) && $livestream->program_end_time >= $convert_time->format('H:i');
                    $recurring_program_live_animation = $livestream->recurring_program_month_day == $convert_time->format('d') && $livestream->program_start_time <= $convert_time->format('H:i') && $livestream->program_end_time >= $convert_time->format('H:i');
                break;
                default:
                    $recurring_program_Status = false;
                    $recurring_program_live_animation = false;
                break;
            }

            $livestream->recurring_program_live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;

            $livestream->live_animation = $recurring_program_live_animation == true ? 'true' : 'false' ;
    
            return $recurring_program_Status;
        }

        if ($livestream->publish_type === 'publish_later') {

            $Current_time = Carbon::now($current_timezone);
            
            $publish_later_Status = Carbon::parse($livestream->publish_time)->startOfDay()->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;
            $publish_later_live_animation = Carbon::parse($livestream->publish_time)->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i') ;

            $livestream->publish_later_live_animation = $publish_later_live_animation;
            
            $livestream->recurring_program_live_animation_mobile = $publish_later_live_animation  == true ? 'true' : 'false' ;

            $livestream->live_animation = $publish_later_live_animation  == true ? 'true' : 'false' ;

            return $publish_later_Status;
        }
  
        return $livestream->publish_type === 'publish_now' || $livestream->publish_type === 'publish_later' && $livestream->publish_later_Status || ($livestream->publish_type === 'recurring_program' && $recurring_program_Status);
    });

    $livestreams_sort = $livestreams_filter->sortBy(function ($livestream) {
          // Assign priority
          if ($livestream->publish_type === 'publish_now') {
              $priority = 1;
              $time = Carbon::parse($livestream->created_at)->timestamp;
          } elseif ($livestream->publish_type === 'publish_later') {
              $priority = 2;
              $time = Carbon::parse($livestream->publish_time)->timestamp;
          } elseif ($livestream->publish_type === 'recurring_program') {
              $priority = 2; // same as publish_later so time will decide order
      
              // Use custom start time if available, otherwise construct today's start time
              if (!empty($livestream->custom_start_program_time)) {
                  $time = Carbon::parse($livestream->custom_start_program_time)->timestamp;
              } else {
                  $time = Carbon::parse(Carbon::today()->format('Y-m-d') . ' ' . $livestream->program_start_time)->timestamp;
              }
          } else {
              $priority = 3;
              $time = 0;
          }
      
          return [$priority, $time];
      })->values();
        
    return $livestreams_sort->values();
  }


  private static function Radiostation_Pagelist(){

    $livestreams = LiveStream::select('id', 'title', 'slug', 'year', 'rating', 'access', 'publish_type', 'publish_time', 'publish_status', 'ppv_price',
                                      'duration', 'rating', 'image', 'featured', 'Tv_live_image', 'player_image', 'details', 'description', 'free_duration',
                                      'recurring_program', 'program_start_time', 'program_end_time', 'custom_start_program_time', 'custom_end_program_time',
                                      'scheduler_program_days','scheduler_program_title','scheduler_program_start_time', 'scheduler_program_end_time',
                                      'recurring_timezone', 'recurring_program_week_day', 'recurring_program_month_day')
                                      ->where('active', '1')
                                      ->where('stream_upload_via','radio_station')
                                      ->where('status', 1)
                                        ->get()->map(function ($item)  {
                                          $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : default_vertical_image_url() ;
                                          $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : default_horizontal_image_url() ;
                                          $item['tv_image_url'] = !is_null($item->Tv_live_image) ? URL::to('/public/uploads/images/'.$item->Tv_live_image) : default_horizontal_image_url()  ;
                                          $item['description'] = $item->description ;
                                          $item['source']    = "RadioStation";
                                          return $item;
                                      });
    return $livestreams->values();
  }



  private static function Channel_Pagelist(){

      $query = Channel::query()
        ->where('status',1);
        
      $data = $query->latest()->get();

      $data->transform(function ($item) {
        $item['image_url'] = $item->channel_image ;
        $item['Player_image_url'] = $item->channel_banner ; 
        $item['source']    = "Channel_Partner";
        return $item;
      });

      return $data;
  }

    private static function UGC_Pagelist(){

      $query = UGCVideo::query()
            ->select('id', 'title', 'slug', 'duration', 'image', 'player_image','type','description')
            ->where('active', 1)
            ->where('status', 1)
            ->where('draft', 1);
        
      $data = $query->latest()->get();
        
      $data->transform(function ($item) {
            $item->image_url = URL::to('/public/uploads/images/'.$item->image);
            $item->player_image_url = URL::to('/public/uploads/images/'.$item->player_image);
            $item->source = "User Generated Content";
            return $item;
      });
        
      return $data;
  }

  private static function Content_Pagelist(){

      $query = ModeratorsUser::query()
        ->where('status',1);
        
      $data = $query->latest()->get();

      $data->transform(function ($item) {
        $item['image_url'] =  URL::to('public/uploads/picture/'.$item->picture)  ;
        $item['Player_image_url'] = URL::to('public/uploads/picture/'.$item->banner) ; 
        $item['source']    = "Content_Partner";
        return $item;
      });

      return $data;
  }

  private static function Series_Pagelist(){

      $query = Series::query()
        ->select('id','title','slug','access','active','ppv_status','featured','duration','image','embed_code','mp4_url','webm_url','ogg_url','url','player_image')
        ->where('active', '=', '1');

        $data = $query->latest()->get();

        $data->transform(function ($item) {
            $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
            $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
            $item['season_count'] = SeriesSeason::where('series_id',$item->id)->count();
            $item['episode_count'] = Episode::where('series_id',$item->id)->count();
            $item['source']    = "series";
            return $item;
        });

      return $data;
  }

  private static function Audios_Pagelist(){

      $query = Audio::query()
        ->select('id','title','slug','year','rating','access','ppv_price','duration','rating','image','player_image','featured','mp3_url')
        ->where('active',1)->where('status', 1);

        $data = $query->latest()->get();

        $data->transform(function ($item) {
          $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
          $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
          $item['source']    = "Audios";
          return $item;
        });

      return $data;
  }

  private static function Audios_albums_Pagelist(){

    $data = AudioAlbums::query()->latest()->get()->map(function ($item) {
        $item['image_url'] = URL::to('/public/uploads/albums/'.$item->album);
        $item['Player_image_url'] = URL::to('/public/uploads/albums/'.$item->album);
        $item['source']    = "albums";
        return $item;
      });

    return $data;
  }

  private static function Recommended_videos_site_Pagelist(){

    $check_Kidmode = 0 ;

    $query = RecentView::query()
      ->select('video_id', 'videos.id', 'videos.title', 'videos.slug', 'videos.year', 'videos.rating', 'videos.access', 'videos.publish_type', 'videos.global_ppv', 'videos.publish_time', 'videos.ppv_price', 'videos.duration', 'videos.image', 'videos.featured', 'videos.age_restrict', 'videos.player_image', DB::raw('COUNT(video_id) AS count'))
      ->join('videos', 'videos.id', '=', 'recent_views.video_id');

      if (Geofencing() !== null && Geofencing()->geofencing === 'ON') {
          $query->whereNotIn('videos.id', Block_videos());
      }

      if ($check_Kidmode == 1) {
          $query->whereBetween('videos.age_restrict', [0, 12]);
      }

      $data = $query->groupBy('video_id')
          ->orderByDesc('count')
          ->latest('videos.created_at')
          ->get();

      $data->transform(function ($item) {
          $item->image_url = URL::to('public/uploads/images/'.$item->image);
          $item->player_image_url = URL::to('public/uploads/images/'.$item->player_image);
          $item->source = "Videos";
          return $item;
      });
      
     return $data;
  }

  private static function Recommended_videos_users_Pagelist($user_id){

    $check_Kidmode = 0 ;

    $query = RecentView::query()
        ->select('video_id', 'videos.id', 'videos.title', 'videos.slug', 'videos.year', 'videos.rating', 'videos.access', 'videos.publish_type', 'videos.global_ppv', 'videos.publish_time', 'videos.ppv_price', 'videos.duration', 'videos.image', 'videos.featured', 'videos.age_restrict', 'videos.player_image', DB::raw('COUNT(video_id) AS count'))
        ->join('videos', 'videos.id', '=', 'recent_views.video_id')
        ->groupBy('video_id')->where('recent_views.user_id',$user_id)
        ->orderByRaw('count DESC' );
    
        if(Geofencing() !=null && Geofencing()->geofencing == 'ON')
        {
          $query->whereNotIn('videos.id',Block_videos());
        }

        if( $check_Kidmode == 1 )
        {
          $query->whereBetween('videos.age_restrict', [ 0, 12 ]);
        }

    $data = $query->groupBy('video_id')
      ->orderByDesc('count')
      ->latest('videos.created_at')
      ->get();

    $data->transform(function ($item) {
        $item->image_url = URL::to('public/uploads/images/'.$item->image);
        $item->player_image_url = URL::to('public/uploads/images/'.$item->player_image);
        $item->source = "Videos";
        return $item;
    });

    return $data;

  }

  private static function Recommended_videos_Country_Pagelist(){

    $check_Kidmode = 0;
    
    $query = RecentView::query()
      ->select('video_id', 'videos.id', 'videos.title', 'videos.slug', 'videos.year', 'videos.rating', 'videos.access', 'videos.publish_type', 'videos.global_ppv', 'videos.publish_time', 'videos.ppv_price', 'videos.duration', 'videos.image', 'videos.featured', 'videos.age_restrict', 'videos.player_image', DB::raw('COUNT(video_id) AS count'))
      ->join('videos', 'videos.id', '=', 'recent_views.video_id')->groupBy('video_id')->orderByRaw('count DESC' )
      ->where('country_name', Country_name());
    
      if(Geofencing() !=null && Geofencing()->geofencing == 'ON')
      {
        $query->whereNotIn('videos.id',Block_videos());
      }

      if( $check_Kidmode == 1 )
      {
        $query->whereBetween('videos.age_restrict', [ 0, 12 ]);
      }

    $data = $query->groupBy('video_id')
                  ->orderByDesc('count')
                  ->latest('videos.created_at')
                  ->get();

    $data->transform(function ($item) {
        $item['image_url'] = URL::to('public/uploads/images/'.$item->image) ;
        $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
        $item['source']    = "Videos"; 
      return $item;

    });

    return $data;
  }

  private static function Specific_Audio_Playlist_Pagelist( $user_id ){
    
    $data =  MyPlaylist::where('user_id',$user_id)->get()->map(function ($item) {
      $item['image_url'] = $item->image ;
      $item['description'] = null ;
      $item['source']    = "my_play_list";
      return $item;
    });
  
    return $data;
    
  }

  
  private static function Video_Playlist_Pagelist(){
    

    $data =  AdminVideoPlaylist::get()->map(function ($item) {
      $item['image_url'] = URL::to('public/uploads/images/'.$item->image) ;
      $item['description'] = null ;
      $item['source']    = "video_play_list";
      return $item;
    });  
    
    return $data;
    
  }

  private static function EPG_Pagelist( $Pagelist_default_image_url ){

    $current_timezone = current_timezone();
    $carbon_now = Carbon::now($current_timezone);
    $carbon_current_time =  $carbon_now->format('H:i:s');
    $carbon_today =  $carbon_now->format('n-j-Y');

    $data =  AdminEPGChannel::where('status',1)->get()->map(function ($item) use ($Pagelist_default_image_url , $carbon_now , $carbon_today , $current_timezone) {
                
      $item['image_url'] = $item->image != null ? URL::to('public/uploads/EPG-Channel/'.$item->image ) : $Pagelist_default_image_url['default_vertical_image_url'] ;
      $item['Player_image_url'] = $item->player_image != null ?  URL::to('public/uploads/EPG-Channel/'.$item->player_image ) : $Pagelist_default_image_url['default_horizontal_image_url'] ;
      $item['tv_image_url']     = $item->player_image != null ?  URL::to('public/uploads/EPG-Channel/'.$item->player_image ) : $Pagelist_default_image_url['default_horizontal_image_url'] ;
      $item['Logo_url'] = $item->logo != null ?  URL::to('public/uploads/EPG-Channel/'.$item->logo ) : $Pagelist_default_image_url['default_vertical_image_url'] ;
                                          
      $item['ChannelVideoScheduler_current_video_details']  =  ChannelVideoScheduler::where('channe_id',$item->id)->where('choosed_date' , $carbon_today )
                                                                  ->get()->map(function ($item) use ($carbon_now , $current_timezone) {

                                                                      $TimeZone   = TimeZone::where('id',$item->time_zone)->first();

                                                                      $converted_start_time =Carbon::createFromFormat('m-d-Y H:i:s', $item->choosed_date . $item->start_time, $TimeZone->time_zone )
                                                                                                                      ->copy()->tz( $current_timezone );

                                                                      $converted_end_time =Carbon::createFromFormat('m-d-Y H:i:s', $item->choosed_date . $item->end_time, $TimeZone->time_zone )
                                                                                                                      ->copy()->tz( $current_timezone );

                                                                      if ($carbon_now->between($converted_start_time, $converted_end_time)) {
                                                                          $item['video_image_url'] = URL::to('public/uploads/images/'.$item->image ) ;
                                                                          $item['converted_start_time'] = $converted_start_time->format('h:i A');
                                                                          $item['converted_end_time']   =   $converted_end_time->format('h:i A');
                                                                          return $item ;
                                                                      }

                                                                  })->filter()->first();
      $item['source'] = 'EPG';
      return $item;
    });
    
    return $data;
  }

  public function website_baseurl()
  {
    try {

        $response = array(
          'status'  => 'true',
          'Message' => 'Retrieved Base-URL Successfully',
          'baseurl'  => URL::to('/') ,
        );

    } catch (\Throwable $th) {

      $response = array(
        'status'  => 'false',
        'Message' => $th->getMessage(),
      );
    }

    return response()->json($response, 200);

  }

          // Only for Nemisha - Learn function
  public function learn()
  {
    try {

          $series_categories = SeriesGenre::where('category_list_active',1)->pluck('id');

          $series = SeriesGenre::query()->with(['category_series' => function ($series) {
                    $series->select('series.id','series.slug', 'series.image', 'series.title', 'series.duration', 'series.rating', 'series.featured')
                        ->where('series.active', '1')
                        ->latest('series.created_at');
                }])
                ->select('series_genre.id', 'series_genre.name', 'series_genre.in_home', 'series_genre.slug', 'series_genre.order')
                ->orderBy('series_genre.order')
                ->whereIn('series_genre.id', $series_categories)
                ->get();
            
          $series = $series->map(function ($genre) {
                $genre->category_series = $genre->category_series->map(function ($item) {
                    $item->image_url     = URL::to('/public/uploads/images/'.$item->image);
                    $item->redirect_url  = URL::to('play_series/'. $item->slug);
                    $item->season_count  = SeriesSeason::where('series_id',$item->id)->count();
                    $item->Episode_count = Episode::where('series_id',$item->id)->count();
                    return $item;
                });
                return $genre;
          });

          $series_sliders = Series::join('series_categories', 'series_categories.series_id', '=', 'series.id')
                                ->whereIn('series_categories.category_id', $series_categories)
                                ->where('series.active', 1 )
                                ->where('banner',1)
                                ->get();


            $Series_videos_data[] = $series ;

            return response()->json([
              'status'  => 'true',
              'Message' => 'Learn videos Retrieved Successfully',
              'series'    => $series,
              'series_sliders' => $series_sliders,
              'series_categories' => $series_categories ,
              'ppv_gobal_price'  => $this->ppv_gobal_price,
              'Series_videos_andriod' => $Series_videos_data ,
              'currency'         => CurrencySetting::first(),
              'ThumbnailSetting' => ThumbnailSetting::first(),
            ], 200);

    } catch (\Throwable $th) {

            return response()->json([
              'status'  => 'false',
              'Message' => $th->getMessage(),
          ], 200);

    }
  }

  public function series_image_details(Request $request)
  {
    try {

        $series = Series::select('id','image','player_image','tv_image')->findOrFail($request->series_id);

        $series['image_url'] = URL::to('public/uploads/images/' . $series->image);
        $series['banner_image_url'] = URL::to('public/uploads/images/' . $series->player_image);
        $series['Tv_image_url'] = URL::to('public/uploads/images/' . $series->tv_image);
        $series['source'] = "Series";

       return response()->json([
        'status'  => 'true',
        'Message' => 'series Image Retrieved Successfully',
        'Series_image' => $series,
      ], 200);

    } catch (\Throwable $th) {

        return response()->json([
          'status'  => 'false',
          'Message' => $th->getMessage(),
        ], 200);
    }

  }
  

  public function Category_Videos(Request $request)
  {

    $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
    $countryName =  $geoip->getCountry();
    $getfeching = Geofencing::first();

    $block_videos=BlockVideo::where('country_id',$countryName)->get();

        if(!$block_videos->isEmpty()){
          foreach($block_videos as $block_video){
              $blockvideos[]=$block_video->video_id;
          }
      }
      $blockvideos[]='';

    $videocategories = VideoCategory::select('id','image')->orderBy('order', 'ASC')->get()->toArray();
    $myData = array();
    foreach ($videocategories as $key => $videocategory) {
      $videocategoryid = $videocategory['id'];
      $genre_image = $videocategory['image'];

      $videos= Video::Join('categoryvideos','categoryvideos.video_id','=','videos.id')->where('categoryvideos.category_id',$videocategoryid)
      ->where('active','=',1)->where('status','=',1)->where('draft','=',1)->orderBy('videos.created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        $item['category_name'] = VideoCategory::where('id',$item->category_id)->pluck('slug')->first();

        return $item;
      });

      $main_genre = CategoryVideo::Join('video_categories','video_categories.id','=','categoryvideos.category_id')
      ->get('name');
      foreach($main_genre as $value){
        $category[] = $value['name'];
      }
      if(!empty($category)){
      $main_genre = implode(",",$category);
      }else{
        $main_genre = "";
      }
      if(count($videos) > 0){
        $msg = 'success';
      }else{
        $msg = 'nodata';
      }
      $myData[] = array(

        "message" => $msg,
        'gener_name' =>  VideoCategory::where('id',$videocategoryid)->pluck('name')->first(),
        'home_genre' =>  VideoCategory::where('id',$videocategoryid)->pluck('home_genre')->first(),
        'gener_id' =>  VideoCategory::where('id',$videocategoryid)->pluck('id')->first(),
        "videos" => $videos
      );
    }


    $response = array(
      'status' => 'true',
      'genre_movies' => $myData,
      'main_genre' => $msg,
      'main_genre' => $main_genre,

    );
    return response()->json($response, 200);
  }

  
  public function relatedtvvideos(Request $request) {

    try {

      $this->validate($request, [
        'videoid'  => 'required|integer' ,
      ]);
      
      $videoid = $request->videoid;
   
      // Recomendeds
                
      $recomendeds = Video::select('videos.*', 'video_categories.name as categories_name', 'categoryvideos.category_id as categories_id')
      ->Join('categoryvideos', 'videos.id', '=', 'categoryvideos.video_id')
      ->Join('video_categories', 'categoryvideos.category_id', '=', 'video_categories.id')
      ->where('videos.id', '!=', $videoid)
      ->where('videos.active', 1)
      ->where('videos.status', 1)
      ->where('videos.draft', 1)
      ->limit(20)
      ->groupBy('videos.id')
      ->inRandomOrder()
      ->get()
      ->map(function ($item) {
          $item['image_url'] = URL::to('public/uploads/images/' . $item->image);
          $item['player_image_url'] = URL::to('public/uploads/images/' . $item->player_image);
          return $item;
      });

      $response = array(
        'status'=>'true',
        'message' => 'Retrieved related tvvideos Successfully',
        'channelrecomended' => $recomendeds
      );

    } catch (\Throwable $th) {

        $response = array(
          'status'=>'false',
          'message' => $th->getMessage(),
        );

    }
    
    return response()->json($response, 200);
  }

  public function LoggedUserDeviceDelete (Request $request)
  {
      
    LoggedDevice::where("id",  $request->user_id)->delete();
      $response = array(
        'status'=>'true',
        'message' => 'Deleted User successfully'
      );
    return response()->json($response, 200);

  }

  

  public function android_continue_watchings(Request $request)
  {
    if($Homesetting->continue_watching == 0){
      $response = array(
          'status'=>'false',
      );
    }else{

      $user_id = $request->user_id;
      $current_duration = $request->current_duration;
      $watch_percentage = $request->watch_percentage;
      $andriodId = $request->andriodId;
      $UserType = $request->UserType;
      if(!empty($request->skip_time)){
      $skip_time = $request->skip_time;
      }else{
        $skip_time = 0;
      }
      if($request->video_id != ''){
          $video_id = $request->video_id;
          $count = ContinueWatching::where('user_id', '=', $user_id)->where('videoid', '=', $video_id)->count();
          $andriodId_count = ContinueWatching::where('andriodId', '=', $andriodId)->where('videoid', '=', $video_id)->count();
          if ( $count > 0 ) {
            ContinueWatching::where('user_id', '=', $user_id)->where('videoid', '=', $video_id)->update(['currentTime' => $current_duration,'watch_percentage' => $watch_percentage,'skip_time' => $skip_time]);
            $response = array(
              'status'=>'true',
              'message'=>'Current Time updated'
          );
        }else if ( $andriodId_count > 0 ) {
          ContinueWatching::where('andriodId', '=', $andriodId)->where('videoid', '=', $video_id)
          ->update(['currentTime' => $current_duration,'watch_percentage' => $watch_percentage,
          'skip_time' => $skip_time]);
          $response = array(
            'status'=>'true',
            'message'=>'Current Time updated'
        );
       } else {
            $data = array('user_id' => $user_id,'andriodId' => $andriodId,'UserType'=> $UserType, 'videoid' => $video_id,'currentTime' => $current_duration,'watch_percentage' => $watch_percentage,'skip_time' => $skip_time );
            ContinueWatching::insert($data);
            $response = array(
              'status'=>'true',
              'message'=>'Added  to  Continue Watching List'
          );

        }
      } else if($request->episode_id != ''){
              $episode_id = $request->episode_id;
              $count = ContinueWatching::where('user_id', '=', $user_id)->where('episodeid', '=', $episode_id)->count();
              $andriodId_count = ContinueWatching::where('andriodId', '=', $andriodId)->where('episodeid', '=', $episode_id)->count();
              if ( $count > 0 ) {
                ContinueWatching::where('user_id', '=', $user_id)->where('episodeid', '=', $episode_id)->update(['currentTime' => $current_duration,'watch_percentage' => $watch_percentage,'skip_time' => $skip_time]);
                $response = array(
                  'status'=>'true',
                  'message'=>'Current Time updated'
              );
            }else if ( $andriodId_count > 0 ) {
              ContinueWatching::where('andriodId', '=', $andriodId)->where('episodeid', '=', $episode_id)
              ->update(['currentTime' => $current_duration,'watch_percentage' => $watch_percentage,
              'skip_time' => $skip_time]);
              $response = array(
                'status'=>'true',
                'message'=>'Current Time updated'
            );
          } else {
                $data = array('user_id' => $user_id,'andriodId' => $andriodId,'UserType'=> $UserType, 'episodeid' => $episode_id,'currentTime' => $current_duration,'watch_percentage' => $watch_percentage,'skip_time' => $skip_time );
                ContinueWatching::insert($data);
                $response = array(
                  'status'=>'true',
                  'message'=>'Added  to  Continue Watching List'
              );

            }
          }

        }

      return response()->json($response, 200);
  }

  public function android_ContinueWatching(Request $request)
  {
    $HomeSetting = MobileHomeSetting::first();
    if($HomeSetting->continue_watching == 0){
      $response = array(
          'status'=>'false',
      );
    }else{
      $user_id = $request->user_id;
      $andriodId = $request->andriodId;
      // print_r($andriodId);exit;

      if(!empty($andriodId) ){
        $andriodId = $request->andriodId;
        $andrio_video_ids = ContinueWatching::where('videoid','!=',NULL)->where('andriodId','=',$andriodId)->get();
        $andrio_video_ids_count = ContinueWatching::where('videoid','!=',NULL)->where('andriodId','=',$andriodId)->count();    
        $andrio_episode_ids = ContinueWatching::where('episodeid','!=',NULL)->where('andriodId','=',$andriodId)->get();
        $andrio_episode_ids_count = ContinueWatching::where('episodeid','!=',NULL)->where('andriodId','=',$andriodId)->count();  
      }else{
        $andriodId = 0;
        $andrio_video_ids = [];
        $andrio_video_ids_count = 0;
        $andrio_episode_ids = [];
        $andrio_episode_ids_count = 0;
      }
      if(!empty($user_id) ){
          /*channel videos*/
          $user_id = $request->user_id;
          $video_ids = ContinueWatching::where('videoid','!=',NULL)->where('user_id','=',$user_id)->get();
          $video_ids_count = ContinueWatching::where('videoid','!=',NULL)->where('user_id','=',$user_id)->count();
          $episode_ids = ContinueWatching::where('episodeid','!=',NULL)->where('user_id','=',$user_id)->get();
          $episode_ids_count = ContinueWatching::where('episodeid','!=',NULL)->where('user_id','=',$user_id)->count();  
      }else{
          /*channel videos*/
          $user_id = $request->user_id;
          $video_ids = [];
          $video_ids_count = 0;
          $episode_ids = [];
          $episode_ids_count = 0;
      }

      $k2 = [];
      $k1 = [];


       if ( $andrio_video_ids_count  > 0 && $video_ids_count  > 0 || $andrio_episode_ids_count  > 0 && $episode_ids_count  > 0) {
        $ContinueWatching         = array_merge($video_ids->toArray(), $andrio_video_ids->toArray()/*, $arrayN, $arrayN*/);
        $EpisodeContinueWatching  = array_merge($episode_ids->toArray(), $andrio_episode_ids->toArray());

      foreach ($ContinueWatching as $key => $value1) {
        $k2[] = $value1['videoid'];
      }

      $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$andriodId) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('watch_percentage')->min();
        $item['skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('skip_time')->min();
        $item['andriod_watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('andriodId','=',$andriodId)->pluck('watch_percentage')->min();
        $item['andriod_skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('andriodId','=',$andriodId)->pluck('skip_time')->min();
        return $item;
      });


      foreach ($EpisodeContinueWatching as $key => $Episodevalue1) {
        $k1[] = $Episodevalue1['episodeid'];
      }

      $episode_videos = Episode::whereIn('id',$k1)->orderBy('episode_order')->get()->map(function ($item)  use ($user_id,$andriodId) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['watch_percentage'] = ContinueWatching::where('episodeid','=',$item->id)->where('user_id','=',$user_id)->pluck('watch_percentage')->min();
        $item['skip_time'] = ContinueWatching::where('episodeid','=',$item->id)->where('user_id','=',$user_id)->pluck('skip_time')->min();
        $item['andriod_watch_percentage'] = ContinueWatching::where('episodeid','=',$item->id)->where('andriodId','=',$andriodId)->pluck('watch_percentage')->min();
        $item['andriod_skip_time'] = ContinueWatching::where('episodeid','=',$item->id)->where('andriodId','=',$andriodId)->pluck('skip_time')->min();
        $item['source'] = 'episode';
        return $item;
      });

      
      $response = array(
        'status' => "true",
        'videos'=> $videos,
        'episodes'=> $episode_videos,
      );
    }else if ( $video_ids_count  > 0 || $episode_ids_count  > 0) {

      foreach ($video_ids as $key => $value1) {
        $k2[] = $value1->videoid;
      }
      $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('watch_percentage')->min();
        $item['skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('skip_time')->min();
        return $item;
      });

      foreach ($episode_ids as $key => $Episodevalue1) {
        $k1[] = $Episodevalue1['episodeid'];
      }

      $episode_videos = Episode::whereIn('id',$k1)->orderBy('episode_order')->get()->map(function ($item)  use ($user_id,$andriodId) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['watch_percentage'] = ContinueWatching::where('episodeid','=',$item->id)->where('user_id','=',$user_id)->pluck('watch_percentage')->min();
        $item['skip_time'] = ContinueWatching::where('episodeid','=',$item->id)->where('user_id','=',$user_id)->pluck('skip_time')->min();
        $item['source'] = 'episode';
        return $item;
      });

      $response = array(
        'status' => "true",
        'videos'=> $videos,
        'episodes'=> $episode_videos,
      );
    }elseif ( $andrio_video_ids_count  > 0  || $andrio_episode_ids_count  > 0 ) {

      foreach ($andrio_video_ids as $key => $value1) {
        $k2[] = $value1->videoid;
      }
      $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$andriodId) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['andriod_watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('andriodId','=',$andriodId)->pluck('watch_percentage')->min();
        $item['andriod_skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('andriodId','=',$andriodId)->pluck('skip_time')->min();
         return $item;
      });


      foreach ($andrio_episode_ids as $key => $Episodevalue1) {
        $k1[] = $Episodevalue1['episodeid'];
      }

      $episode_videos = Episode::whereIn('id',$k1)->orderBy('episode_order')->get()->map(function ($item)  use ($user_id,$andriodId) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['andriod_watch_percentage'] = ContinueWatching::where('episodeid','=',$item->id)->where('andriodId','=',$andriodId)->pluck('watch_percentage')->min();
        $item['andriod_skip_time'] = ContinueWatching::where('episodeid','=',$item->id)->where('andriodId','=',$andriodId)->pluck('skip_time')->min();
        $item['source'] = 'episode';
        return $item;
      });

      $response = array(
        'status' => "true",
        'videos'=> $videos,
        'episodes'=> $episode_videos,
      );
    }else{
      $response = array(
        'status' => "false",
        'videos'=> [],
        'episodes'=> [],
      );
    }
  }

    // $response = array(
    //     'status'=>$status,
    //     'videos'=> $videos
    //   );
    return response()->json($response, 200);



  }

  public function Ios_continue_watchings(Request $request)
  {
      $user_id = $request->user_id;
      $current_duration = $request->current_duration;
      $watch_percentage = $request->watch_percentage;
      $IOSId = $request->IOSId;
      $UserType = $request->UserType;
      if(!empty($request->skip_time)){
      $skip_time = $request->skip_time;
      }else{
        $skip_time = 0;
      }
      if($request->video_id){
          $video_id = $request->video_id;
          $count = ContinueWatching::where('IOSId', '=', $IOSId)->where('videoid', '=', $video_id)->count();
          $IOSId_count = ContinueWatching::where('IOSId', '=', $IOSId)->where('videoid', '=', $video_id)->count();
          // print_r($count);exit;
          if ( $count > 0 ) {
            ContinueWatching::where('IOSId', '=', $IOSId)->where('videoid', '=', $video_id)->update(['currentTime' => $current_duration,'watch_percentage' => $watch_percentage,'skip_time' => $skip_time]);
            $response = array(
              'status'=>'true',
              'message'=>'Current Time updated'
          );
        }else if ( $IOSId_count > 0 ) {
          ContinueWatching::where('IOSId', '=', $IOSId)->where('videoid', '=', $video_id)
          ->update(['currentTime' => $current_duration,'watch_percentage' => $watch_percentage,
          'skip_time' => $skip_time]);
          $response = array(
            'status'=>'true',
            'message'=>'Current Time updated'
        );
       } else {
            $data = array('user_id' => $user_id,'IOSId' => $IOSId,'UserType'=> $UserType, 'videoid' => $video_id,'currentTime' => $current_duration,'watch_percentage' => $watch_percentage,'skip_time' => $skip_time );
            ContinueWatching::insert($data);
            $response = array(
              'status'=>'true',
              'message'=>'Added  to  Continue Watching List'
          );

        }
      }


      return response()->json($response, 200);
  }

  public function Ios_ContinueWatching(Request $request)
  {

      $user_id = $request->user_id;
      $IOSId = $request->IOSId;
      // print_r($IOSId);exit;

      if(!empty($IOSId) ){
        $IOSId = $request->IOSId;
      }else{
        $IOSId = 0;
      }
      if(!empty($user_id) ){
        $user_id = $request->user_id;
      }else{
        $user_id = 0;
      }
    /*channel videos*/
    $video_ids = ContinueWatching::where('videoid','!=',NULL)->where('user_id','=',$user_id)->get();
    $video_ids_count = ContinueWatching::where('videoid','!=',NULL)->where('user_id','=',$user_id)->count();

    $ios_video_ids = ContinueWatching::where('videoid','!=',NULL)->where('IOSId','=',$IOSId)->get();
    $ios_video_ids_count = ContinueWatching::where('videoid','!=',NULL)->where('IOSId','=',$IOSId)->count();
    if ( $ios_video_ids_count  > 0 && $video_ids_count  > 0) {
    $ContinueWatching = array_merge($video_ids->toArray(), $ios_video_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($ContinueWatching as $key => $value1) {
        $k2[] = $value1['videoid'];
      }
      // print_r($k2);exit;

      $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$IOSId) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('watch_percentage')->min();
        $item['skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('skip_time')->min();
        $item['Ios_watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('IOSId','=',$IOSId)->pluck('watch_percentage')->min();
        $item['Ios_skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('IOSId','=',$IOSId)->pluck('skip_time')->min();
       return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $videos,
      );
    }else if ( $video_ids_count  > 0) {

      foreach ($video_ids as $key => $value1) {
        $k2[] = $value1->videoid;
      }
      $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('watch_percentage')->min();
        $item['skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('skip_time')->min();
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $videos,
      );
    }elseif ( $ios_video_ids_count  > 0) {

      foreach ($ios_video_ids as $key => $value1) {
        $k2[] = $value1->videoid;
      }
      $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$IOSId) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['Ios_watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('IOSId','=',$IOSId)->pluck('watch_percentage')->min();
        $item['Ios_skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('IOSId','=',$IOSId)->pluck('skip_time')->min();
     return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $videos,
      );
    }else{
      $response = array(
        'status' => "false",
        'videos'=> [],
      );
    }

    return response()->json($response, 200);

  }


  
  public function android_add_video_wishlist(Request $request) {

    $andriodId = $request->andriodId;
    $video_id = $request->video_id;

    if (!empty($video_id)) {
        $count = Wishlist::where('andriodId', $andriodId)->where('video_id', $video_id)->count();

        if ($count > 0) {
            Wishlist::where('andriodId', $andriodId)->where('video_id', $video_id)->delete();

            $response = [
                'status' => 'false',
                'message' => 'Removed From Your Wishlist'
            ];
        } else {
            $data = ['andriodId' => $andriodId, 'video_id' => $video_id];
            Wishlist::insert($data);

            $response = [
                'status' => 'true',
                'message' => 'Added to Your Wishlist'
            ];
        }
    }
    return response()->json($response, 200);

  }

  public function android_add_video_favorite(Request $request) {

    try {
      
      $andriodId = $request->andriodId;
      $video_id = $request->video_id;

      if (!empty($video_id)) {
          $count = Favorite::where('andriodId', $andriodId)->where('video_id', $video_id)->count();

          if ($count > 0) {
              Favorite::where('andriodId', $andriodId)->where('video_id', $video_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Favorite'
              ];
          } else {
              $data = ['andriodId' => $andriodId, 'video_id' => $video_id];
              Favorite::insert($data);

              $response = [
                    'status' => 'true',
                    'message' => 'Added to Your Favorite'
                ];
            }
      }
    } catch (\Throwable $th) {
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];
    }

    return response()->json($response, 200);

  }

  
  public function android_add_video_watchlater(Request $request) {

    $andriodId = $request->andriodId;
    $video_id = $request->video_id;
    if($request->video_id != ''){
      $count = Watchlater::where('andriodId', '=', $andriodId)->where('video_id', '=', $video_id)->count();
      if ( $count > 0 ) {
        Watchlater::where('andriodId', '=', $andriodId)->where('video_id', '=', $video_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Watch Later'
        );
      } else {
        $data = array('andriodId' => $andriodId, 'video_id' => $video_id );
        Watchlater::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added to Your Watch Later'
        );

      }
    }

    return response()->json($response, 200);

  }


  public function Android_DisLikeVideo(Request $request)
  {
    $andriodId = $request->andriodId;
    $video_id = $request->video_id;
    $dislike = $request->dislike;
    $d_like = Likedislike::where("video_id",$video_id)->where("andriodId",$andriodId)->count();

    if($d_like > 0){
      $new_vide_dislike = Likedislike::where("video_id",$video_id)->where("andriodId",$andriodId)->first();
      if($dislike == 1){
        $new_vide_dislike->andriodId = $request->andriodId;
        $new_vide_dislike->video_id = $request->video_id;
        $new_vide_dislike->liked = 0;
        $new_vide_dislike->disliked = 1;
        $new_vide_dislike->save();
      }else{
        $new_vide_dislike->andriodId = $request->andriodId;
        $new_vide_dislike->video_id = $request->video_id;
        $new_vide_dislike->disliked = 0;
        $new_vide_dislike->save();
      }
    }else{
      $new_vide_dislike = new Likedislike;
      $new_vide_dislike->andriodId = $request->andriodId;
      $new_vide_dislike->video_id = $request->video_id;
      $new_vide_dislike->liked = 0;
      $new_vide_dislike->disliked = 1;
      $new_vide_dislike->save();
    }

     $response = array(
      'status'=>'true',
      'liked' => $new_vide_dislike->liked,
      'disliked' => $new_vide_dislike->disliked,
      'message'=>'success'
    );

     return response()->json($response, 200);
  }

  

  public function Android_LikeVideo(Request $request)
  {
    $andriodId = $request->andriodId;
    $video_id = $request->video_id;
    $like = $request->like;
    $d_like = Likedislike::where("video_id",$video_id)->where("andriodId",$andriodId)->count();
    if($d_like > 0){
      $new_vide_like = Likedislike::where("video_id",$video_id)->where("andriodId",$andriodId)->first();
      if($like == 1){
        $new_vide_like->andriodId = $request->andriodId;
        $new_vide_like->video_id = $request->video_id;
        $new_vide_like->liked = 1;
        $new_vide_like->disliked = 0;
        $new_vide_like->save();
      }else{
        $new_vide_like->andriodId = $request->andriodId;
        $new_vide_like->video_id = $request->video_id;
        $new_vide_like->liked = 0;
        $new_vide_like->save();
      }
    }else{
      $new_vide_like = new Likedislike;
      $new_vide_like->andriodId = $request->andriodId;
      $new_vide_like->video_id = $request->video_id;
      $new_vide_like->liked = 1;
      $new_vide_like->disliked = 0;
      $new_vide_like->save();
    }

     $response = array(
      'status'=>'true',
      'liked' => $new_vide_like->liked,
      'disliked' => $new_vide_like->disliked,
      'message'=>'success'
    );

     return response()->json($response, 200);

  }


  public function Android_Audiolike(Request $request)
  {
    $andriodId = $request->andriodId;
    $audio_id = $request->audio_id;

    $like_count = Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->count();
    $like_counts = Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->where('liked','=' ,'1')->count();
    $unlike_count = Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->where('liked', 0)->count();

    if($like_count > 0){

      if($like_counts > 0){
        Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->where('liked','=' ,'1')
        ->update([
                'andriodId'  => $andriodId ,
                'audio_id' => $audio_id ,
                'liked'    => '0' ,
                'disliked'    => '0',
              ]);

      }elseif( $unlike_count > 0){
          Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->where('liked',0)
          ->update([
                  'andriodId'  => $andriodId ,
                  'audio_id' => $audio_id ,
                  'liked'    => '1' ,
                  'disliked'    => '0',
                ]);
      }

    }
    else{
        Likedislike::create([
          'andriodId'  => $andriodId ,
          'audio_id' => $audio_id ,
          'liked'    => '1' ,
          'disliked'    => '0' ,
        ]);
    }

    $response = array(
      'status'=>'true',
      'like'  =>  Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->pluck('liked')->first(),
      'dislike'  =>   Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->pluck('disliked')->first(),
    );

    return response()->json($response, 200);

  }

  public function Android_Audiodislike(Request $request)
  {
      $andriodId = $request->andriodId;
      $audio_id = $request->audio_id;

      $dislike_count = Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->count();
      $dislike_counts = Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->where('disliked',1)->count();
      $undislike_count = Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->where('disliked', 0)->count();

      if($dislike_count > 0){

        if($dislike_counts > 0){
          Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->where('disliked','=' ,'1')
          ->update([
                  'andriodId'  => $andriodId ,
                  'audio_id' => $audio_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $undislike_count > 0){
            Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->where('disliked',0)
            ->update([
                    'andriodId'  => $andriodId ,
                    'audio_id' => $audio_id ,
                    'liked'    => '0' ,
                    'disliked'    => '1',
                  ]);
        }


      }else{
          Likedislike::create([
            'andriodId'  => $andriodId ,
            'audio_id' => $audio_id ,
            'liked'    => '0',
            'disliked'    => '1',
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("audio_id",$audio_id)->where("andriodId",$andriodId)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }
 
  
  
  public function Android_live_like(Request $request)
  {
      $andriodId = $request->andriodId;
      $live_id = $request->live_id;

      $like_count = Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->count();
      $like_counts = Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->where('liked','=' ,'1')->count();
      $unlike_count = Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->where('liked', 0)->count();

      if($like_count > 0){

        if($like_counts > 0){
          Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->where('liked','=' ,'1')
          ->update([
                  'andriodId'  => $andriodId ,
                  'live_id' => $live_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $unlike_count > 0){
            Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->where('liked',0)
            ->update([
                    'andriodId'  => $andriodId ,
                    'live_id' => $live_id ,
                    'liked'    => '1' ,
                    'disliked'    => '0',
                  ]);
        }

      }
      else{
          Likedislike::create([
            'andriodId'  => $andriodId ,
            'live_id' => $live_id ,
            'liked'    => '1' ,
            'disliked'    => '0' ,
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }

  public function Android_live_dislike(Request $request)

  {
      $andriodId = $request->andriodId;
      $live_id = $request->live_id;

      $dislike_count = Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->count();
      $dislike_counts = Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->where('disliked',1)->count();
      $undislike_count = Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->where('disliked', 0)->count();

      if($dislike_count > 0){

        if($dislike_counts > 0){
          Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->where('disliked','=' ,'1')
          ->update([
                  'andriodId'  => $andriodId ,
                  'live_id' => $live_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $undislike_count > 0){
            Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->where('disliked',0)
            ->update([
                    'andriodId'  => $andriodId ,
                    'live_id' => $live_id ,
                    'liked'    => '0' ,
                    'disliked'    => '1',
                  ]);
        }


      }else{
          Likedislike::create([
            'andriodId'  => $andriodId ,
            'live_id' => $live_id ,
            'liked'    => '0',
            'disliked'    => '1',
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("live_id",$live_id)->where("andriodId",$andriodId)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }

  

  public function Android_Episodelike(Request $request)
  {
    $andriodId = $request->andriodId;
    $episode_id = $request->episode_id;

    $like_count = Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->where("andriodId",'!=',null)->count();
    $like_counts = Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->where("andriodId",'!=',null)->where('liked','=' ,'1')->count();
    $unlike_count = Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->where("andriodId",'!=',null)->where('liked', 0)->count();
    if($like_count > 0){

      if($like_counts > 0){
        Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->where('liked','=' ,'1')
        ->update([
                'andriodId'  => $andriodId ,
                'episode_id' => $episode_id ,
                'liked'    => '0' ,
                'disliked'    => '0',
              ]);

      }elseif( $unlike_count > 0){
          Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->where('liked',0)
          ->update([
                  'andriodId'  => $andriodId ,
                  'episode_id' => $episode_id ,
                  'liked'    => '1' ,
                  'disliked'    => '0',
                ]);
      }

    }
    else{
        Likedislike::create([
          'andriodId'  => $andriodId ,
          'episode_id' => $episode_id ,
          'liked'    => '1' ,
          'disliked'    => '0' ,
        ]);
    }

    $response = array(
      'status'=>'true',
      'liked'  =>  Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->pluck('liked')->first(),
      'disliked'  =>   Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->pluck('disliked')->first(),
    );

    return response()->json($response, 200);

  }

  public function Android_Episodedislike(Request $request)
  {
      $andriodId = $request->andriodId;
      $episode_id = $request->episode_id;

      $dislike_count = Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->where("andriodId",'!=',null)->count();
      $dislike_counts = Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->where("andriodId",'!=',null)->where('disliked',1)->count();
      $undislike_count = Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->where("andriodId",'!=',null)->where('disliked', 0)->count();

      if($dislike_count > 0){

        if($dislike_counts > 0){
          Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->where('disliked','=' ,'1')
          ->update([
                  'andriodId'  => $andriodId ,
                  'episode_id' => $episode_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $undislike_count > 0){
            Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->where('disliked',0)
            ->update([
                    'andriodId'  => $andriodId ,
                    'episode_id' => $episode_id ,
                    'liked'    => '0' ,
                    'disliked'    => '1',
                  ]);
        }


      }else{
          Likedislike::create([
            'andriodId'  => $andriodId ,
            'episode_id' => $episode_id ,
            'liked'    => '0',
            'disliked'    => '1',
          ]);
      }

      $response = array(
        'status'=>'true',
        'liked'  =>  Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->pluck('liked')->first(),
        'disliked'  =>   Likedislike::where("episode_id",$episode_id)->where("andriodId",$andriodId)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }



  // like dislike guest IOS

  public function IOS_DisLikeVideo(Request $request)
  {
    $IOSId = $request->IOSId;
    $video_id = $request->video_id;
    $dislike = $request->dislike;
    $d_like = Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->count();

    if($d_like > 0){
      $new_vide_dislike = Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->first();
      if($dislike == 1){
        $new_vide_dislike->IOSId = $request->IOSId;
        $new_vide_dislike->video_id = $request->video_id;
        $new_vide_dislike->liked = 0;
        $new_vide_dislike->disliked = 1;
        $new_vide_dislike->save();
      }else{
        $new_vide_dislike->IOSId = $request->IOSId;
        $new_vide_dislike->video_id = $request->video_id;
        $new_vide_dislike->disliked = 0;
        $new_vide_dislike->save();
      }
    }else{
      $new_vide_dislike = new Likedislike;
      $new_vide_dislike->IOSId = $request->IOSId;
      $new_vide_dislike->video_id = $request->video_id;
      $new_vide_dislike->liked = 0;
      $new_vide_dislike->disliked = 1;
      $new_vide_dislike->save();
    }

     $response = array(
      'status'=>'true',
      'liked' => $new_vide_dislike->liked,
      'disliked' => $new_vide_dislike->disliked,
      'message'=>'success'
    );

     return response()->json($response, 200);
  }

  

  public function IOS_LikeVideo(Request $request)
  {
    $IOSId = $request->IOSId;
    $video_id = $request->video_id;
    $like = $request->like;
    $d_like = Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->count();
    if($d_like > 0){
      $new_vide_like = Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->first();
      if($like == 1){
        $new_vide_like->IOSId = $request->IOSId;
        $new_vide_like->video_id = $request->video_id;
        $new_vide_like->liked = 1;
        $new_vide_like->disliked = 0;
        $new_vide_like->save();
      }else{
        $new_vide_like->IOSId = $request->IOSId;
        $new_vide_like->video_id = $request->video_id;
        $new_vide_like->liked = 0;
        $new_vide_like->save();
      }
    }else{
      $new_vide_like = new Likedislike;
      $new_vide_like->IOSId = $request->IOSId;
      $new_vide_like->video_id = $request->video_id;
      $new_vide_like->liked = 1;
      $new_vide_like->disliked = 0;
      $new_vide_like->save();
    }

     $response = array(
      'status'=>'true',
      'likes' => $new_vide_like->liked,
      'dislike' => $new_vide_like->disliked,
      'message'=>'success'
    );

     return response()->json($response, 200);

  }

  public function IOS_Video_Like(Request $request)
  {
    $IOSId = $request->IOSId;
    $video_id = $request->video_id;

    $like_count = Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->count();
    $like_counts = Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->where('liked','=' ,'1')->count();
    $unlike_count = Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->where('liked', 0)->count();

    if($like_count > 0){

      if($like_counts > 0){
        Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->where('liked','=' ,'1')
        ->update([
                'IOSId'  => $IOSId ,
                'video_id' => $video_id ,
                'liked'    => '0' ,
                'disliked'    => '0',
              ]);

      }elseif( $unlike_count > 0){
          Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->where('liked',0)
          ->update([
                  'IOSId'  => $IOSId ,
                  'video_id' => $video_id ,
                  'liked'    => '1' ,
                  'disliked'    => '0',
                ]);
      }

    }
    else{
        Likedislike::create([
          'IOSId'  => $IOSId ,
          'video_id' => $video_id ,
          'liked'    => '1' ,
          'disliked'    => '0' ,
        ]);
    }

    $response = array(
      'status'=>'true',
      'like'  =>  Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->pluck('liked')->first(),
      'dislike'  =>   Likedislike::where("video_id",$video_id)->where("IOSId",$IOSId)->pluck('disliked')->first(),
    );

    return response()->json($response, 200);

  }


  public function IOS_Audiolike(Request $request)
  {
    $IOSId = $request->IOSId;
    $audio_id = $request->audio_id;

    $like_count = Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->count();
    $like_counts = Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->where('liked','=' ,'1')->count();
    $unlike_count = Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->where('liked', 0)->count();

    if($like_count > 0){

      if($like_counts > 0){
        Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->where('liked','=' ,'1')
        ->update([
                'IOSId'  => $IOSId ,
                'audio_id' => $audio_id ,
                'liked'    => '0' ,
                'disliked'    => '0',
              ]);

      }elseif( $unlike_count > 0){
          Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->where('liked',0)
          ->update([
                  'IOSId'  => $IOSId ,
                  'audio_id' => $audio_id ,
                  'liked'    => '1' ,
                  'disliked'    => '0',
                ]);
      }

    }
    else{
        Likedislike::create([
          'IOSId'  => $IOSId ,
          'audio_id' => $audio_id ,
          'liked'    => '1' ,
          'disliked'    => '0' ,
        ]);
    }

    $response = array(
      'status'=>'true',
      'like'  =>  Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->pluck('liked')->first(),
      'dislike'  =>   Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->pluck('disliked')->first(),
    );

    return response()->json($response, 200);

  }

  public function IOS_Audiodislike(Request $request)
  {
      $IOSId = $request->IOSId;
      $audio_id = $request->audio_id;

      $dislike_count = Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->count();
      $dislike_counts = Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->where('disliked',1)->count();
      $undislike_count = Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->where('disliked', 0)->count();

      if($dislike_count > 0){

        if($dislike_counts > 0){
          Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->where('disliked','=' ,'1')
          ->update([
                  'IOSId'  => $IOSId ,
                  'audio_id' => $audio_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $undislike_count > 0){
            Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->where('disliked',0)
            ->update([
                    'IOSId'  => $IOSId ,
                    'audio_id' => $audio_id ,
                    'liked'    => '0' ,
                    'disliked'    => '1',
                  ]);
        }


      }else{
          Likedislike::create([
            'IOSId'  => $IOSId ,
            'audio_id' => $audio_id ,
            'liked'    => '0',
            'disliked'    => '1',
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("audio_id",$audio_id)->where("IOSId",$IOSId)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }
 
  
  
  public function IOS_live_like(Request $request)
  {
      $IOSId = $request->IOSId;
      $live_id = $request->live_id;

      $like_count = Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->count();
      $like_counts = Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->where('liked','=' ,'1')->count();
      $unlike_count = Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->where('liked', 0)->count();

      if($like_count > 0){

        if($like_counts > 0){
          Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->where('liked','=' ,'1')
          ->update([
                  'IOSId'  => $IOSId ,
                  'live_id' => $live_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $unlike_count > 0){
            Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->where('liked',0)
            ->update([
                    'IOSId'  => $IOSId ,
                    'live_id' => $live_id ,
                    'liked'    => '1' ,
                    'disliked'    => '0',
                  ]);
        }

      }
      else{
          Likedislike::create([
            'IOSId'  => $IOSId ,
            'live_id' => $live_id ,
            'liked'    => '1' ,
            'disliked'    => '0' ,
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }

  public function IOS_live_dislike(Request $request)

  {
      $IOSId = $request->IOSId;
      $live_id = $request->live_id;

      $dislike_count = Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->count();
      $dislike_counts = Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->where('disliked',1)->count();
      $undislike_count = Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->where('disliked', 0)->count();

      if($dislike_count > 0){

        if($dislike_counts > 0){
          Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->where('disliked','=' ,'1')
          ->update([
                  'IOSId'  => $IOSId ,
                  'live_id' => $live_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $undislike_count > 0){
            Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->where('disliked',0)
            ->update([
                    'IOSId'  => $IOSId ,
                    'live_id' => $live_id ,
                    'liked'    => '0' ,
                    'disliked'    => '1',
                  ]);
        }


      }else{
          Likedislike::create([
            'IOSId'  => $IOSId ,
            'live_id' => $live_id ,
            'liked'    => '0',
            'disliked'    => '1',
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("live_id",$live_id)->where("IOSId",$IOSId)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }

  

  public function IOS_Episodelike(Request $request)
  {
    $IOSId = $request->IOSId;
    $episode_id = $request->episode_id;

    $like_count = Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->count();
    $like_counts = Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->where('liked','=' ,'1')->count();
    $unlike_count = Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->where('liked', 0)->count();

    if($like_count > 0){

      if($like_counts > 0){
        Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->where('liked','=' ,'1')
        ->update([
                'IOSId'  => $IOSId ,
                'episode_id' => $episode_id ,
                'liked'    => '0' ,
                'disliked'    => '0',
              ]);

      }elseif( $unlike_count > 0){
          Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->where('liked',0)
          ->update([
                  'IOSId'  => $IOSId ,
                  'episode_id' => $episode_id ,
                  'liked'    => '1' ,
                  'disliked'    => '0',
                ]);
      }

    }
    else{
        Likedislike::create([
          'IOSId'  => $IOSId ,
          'episode_id' => $episode_id ,
          'liked'    => '1' ,
          'disliked'    => '0' ,
        ]);
    }

    $response = array(
      'status'=>'true',
      'like'  =>  Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->pluck('liked')->first(),
      'dislike'  =>   Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->pluck('disliked')->first(),
    );

    return response()->json($response, 200);

  }

  public function IOS_Episodedislike(Request $request)
  {
      $IOSId = $request->IOSId;
      $episode_id = $request->episode_id;

      $dislike_count = Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->count();
      $dislike_counts = Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->where('disliked',1)->count();
      $undislike_count = Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->where('disliked', 0)->count();

      if($dislike_count > 0){

        if($dislike_counts > 0){
          Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->where('disliked','=' ,'1')
          ->update([
                  'IOSId'  => $IOSId ,
                  'episode_id' => $episode_id ,
                  'liked'    => '0' ,
                  'disliked'    => '0',
                ]);

        }elseif( $undislike_count > 0){
            Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->where('disliked',0)
            ->update([
                    'IOSId'  => $IOSId ,
                    'episode_id' => $episode_id ,
                    'liked'    => '0' ,
                    'disliked'    => '1',
                  ]);
        }


      }else{
          Likedislike::create([
            'IOSId'  => $IOSId ,
            'episode_id' => $episode_id ,
            'liked'    => '0',
            'disliked'    => '1',
          ]);
      }

      $response = array(
        'status'=>'true',
        'like'  =>  Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->pluck('liked')->first(),
        'dislike'  =>   Likedislike::where("episode_id",$episode_id)->where("IOSId",$IOSId)->pluck('disliked')->first(),
      );

      return response()->json($response, 200);
  }

  public function Android_liked_disliked(Request $request) {

    $video_id = $request->video_id;
    $episode_id = $request->episode_id;
    $audio_id = $request->audio_id;
    $live_id = $request->live_id;
    $andriodId = $request->andriodId;
    $user_id = $request->user_id;


    if (!empty($video_id)) {
        
        $user_like_data = LikeDisLike::where("video_id","=",$video_id)->where("user_id","=",$user_id)->where("liked","=",1)->count();
        $andriod_like_data = LikeDisLike::where("video_id","=",$video_id)->where("andriodId","=",$andriodId)->where("liked","=",1)->count();

        $user_dislike_data = LikeDisLike::where("video_id","=",$video_id)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
        $andriod_dislike_data = LikeDisLike::where("video_id","=",$video_id)->where("andriodId","=",$andriodId)->where("disliked","=",1)->count();
      
        $user_like = ($user_like_data == 1) ? "true" : "false";
        $user_dislike = ($user_dislike_data == 1) ? "true" : "false";

        $andriod_like = ($andriod_like_data == 1) ? "true" : "false";
        $andriod_dislike = ($andriod_dislike_data == 1) ? "true" : "false";

        $response = [
          'status' => 'false',
          'message' => 'Removed From Your Wishlist',
          'user_like' => $user_like,
          'user_dislike' => $user_dislike,
          'andriod_like' => $andriod_like,
          'andriod_dislike' => $andriod_dislike,

      ];
      
    }

    // Add Episode wishlist 

    if (!empty($episode_id)) {
      
          $user_like_data = LikeDisLike::where("episode_id","=",$episode_id)->where("user_id","=",$user_id)->where("liked","=",1)->count();
          $andriod_like_data = LikeDisLike::where("episode_id","=",$episode_id)->where("andriodId","=",$andriodId)->where("liked","=",1)->count();

          $user_dislike_data = LikeDisLike::where("episode_id","=",$episode_id)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
          $andriod_dislike_data = LikeDisLike::where("episode_id","=",$episode_id)->where("andriodId","=",$andriodId)->where("disliked","=",1)->count();
        
          $user_like = ($user_like_data == 1) ? "true" : "false";
          $user_dislike = ($user_dislike_data == 1) ? "true" : "false";

          $andriod_like = ($andriod_like_data == 1) ? "true" : "false";
          $andriod_dislike = ($andriod_dislike_data == 1) ? "true" : "false";

          $response = [
            'status' => 'false',
            'message' => 'Removed From Your Wishlist',
            'user_like' => $user_like,
            'user_dislike' => $user_dislike,
            'andriod_like' => $andriod_like,
            'andriod_dislike' => $andriod_dislike,

        ];
    
      }

    // Add Audio wishlist 

      if (!empty($audio_id)) {

        $user_like_data = LikeDisLike::where("audio_id","=",$audio_id)->where("user_id","=",$user_id)->where("liked","=",1)->count();
        $andriod_like_data = LikeDisLike::where("audio_id","=",$audio_id)->where("andriodId","=",$andriodId)->where("liked","=",1)->count();

        $user_dislike_data = LikeDisLike::where("audio_id","=",$audio_id)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
        $andriod_dislike_data = LikeDisLike::where("audio_id","=",$audio_id)->where("andriodId","=",$andriodId)->where("disliked","=",1)->count();
      
        $user_like = ($user_like_data == 1) ? "true" : "false";
        $user_dislike = ($user_dislike_data == 1) ? "true" : "false";

        $andriod_like = ($andriod_like_data == 1) ? "true" : "false";
        $andriod_dislike = ($andriod_dislike_data == 1) ? "true" : "false";

        $response = [
          'status' => 'false',
          'message' => 'Removed From Your Wishlist',
          'user_like' => $user_like,
          'user_dislike' => $user_dislike,
          'andriod_like' => $andriod_like,
          'andriod_dislike' => $andriod_dislike,

      ];
      
    }

    // Add Livestream wishlist 

    if (!empty($live_id)) {
     
      $user_like_data = LikeDisLike::where("live_id","=",$live_id)->where("user_id","=",$user_id)->where("liked","=",1)->count();
      $andriod_like_data = LikeDisLike::where("live_id","=",$live_id)->where("andriodId","=",$andriodId)->where("liked","=",1)->count();

      $user_dislike_data = LikeDisLike::where("live_id","=",$live_id)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
      $andriod_dislike_data = LikeDisLike::where("live_id","=",$live_id)->where("andriodId","=",$andriodId)->where("disliked","=",1)->count();
    
      $user_like = ($user_like_data == 1) ? "true" : "false";
      $user_dislike = ($user_dislike_data == 1) ? "true" : "false";

      $andriod_like = ($andriod_like_data == 1) ? "true" : "false";
      $andriod_dislike = ($andriod_dislike_data == 1) ? "true" : "false";

      $response = [
        'status' => 'false',
        'message' => 'Removed From Your Wishlist',
        'user_like' => $user_like,
        'user_dislike' => $user_dislike,
        'andriod_like' => $andriod_like,
        'andriod_dislike' => $andriod_dislike,

    ];
    
    }
    return response()->json($response, 200);

  }

  
  public function Android_addwishlist(Request $request) {

    $andriodId = $request->andriodId;
    $video_id = $request->video_id;
    $episode_id = $request->episode_id;
    $audio_id = $request->audio_id;
    $livestream_id = $request->livestream_id;

    if (!empty($video_id)) {
        $count = Wishlist::where('andriodId', $andriodId)->where('video_id', $video_id)->count();

        if ($count > 0) {
            Wishlist::where('andriodId', $andriodId)->where('video_id', $video_id)->delete();

            $response = [
                'status' => 'false',
                'message' => 'Removed From Your Wishlist'
            ];
        } else {
            $data = ['andriodId' => $andriodId, 'video_id' => $video_id];
            Wishlist::insert($data);

            $response = [
                'status' => 'true',
                'message' => 'Added to Your Wishlist'
            ];
        }
    }

    // Add Episode wishlist 

    if (!empty($episode_id)) {
      $count = Wishlist::where('andriodId', $andriodId)->where('episode_id', $episode_id)->count();

      if ($count > 0) {
              Wishlist::where('andriodId', $andriodId)->where('episode_id', $episode_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Wishlist'
              ];
          } else {
              $data = ['andriodId' => $andriodId, 'episode_id' => $episode_id];
              Wishlist::insert($data);

              $response = [
                  'status' => 'true',
                  'message' => 'Added to Your Wishlist'
              ];
          }
      }

    // Add Audio wishlist 

      if (!empty($audio_id)) {
        $count = Wishlist::where('andriodId', $andriodId)->where('audio_id', $audio_id)->count();

        if ($count > 0) {
            Wishlist::where('andriodId', $andriodId)->where('audio_id', $audio_id)->delete();

            $response = [
                'status' => 'false',
                'message' => 'Removed From Your Wishlist'
            ];
        } else {
            $data = ['andriodId' => $andriodId, 'audio_id' => $audio_id];
            Wishlist::insert($data);

            $response = [
                'status' => 'true',
                'message' => 'Added to Your Wishlist'
            ];
        }
    }

    // Add Livestream wishlist 

    if (!empty($livestream_id)) {
      $count = Wishlist::where('andriodId', $andriodId)->where('livestream_id', $livestream_id)->count();

      if ($count > 0) {
          Wishlist::where('andriodId', $andriodId)->where('livestream_id', $livestream_id)->delete();

          $response = [
              'status' => 'false',
              'message' => 'Removed From Your Wishlist'
          ];
      } else {
          $data = ['andriodId' => $andriodId, 'livestream_id' => $livestream_id];
          Wishlist::insert($data);

          $response = [
              'status' => 'true',
              'message' => 'Added to Your Wishlist'
          ];
      }
    }
    return response()->json($response, 200);

  }


  
  public function Android_Video_wishlist(Request $request) {

    $user_id = $request->user_id;
    $andriodId = $request->andriodId;
   
    if(!empty($andriodId) ){
      $andriodId = $request->andriodId;
    }else{
      $andriodId = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

        /*channel videos*/
        $video_Wishlist_ids = Wishlist::select('video_id')->where('user_id','=',$user_id)->get();
        $video_ids_count = Wishlist::select('video_id')->where('user_id','=',$user_id)->count();
    
        $andriod_Wishlist_ids = Wishlist::select('video_id')->where('andriodId','=',$andriodId)->get();
        $andriod_ids_count = Wishlist::select('video_id')->where('andriodId','=',$andriodId)->count();
    
    if ( $andriod_ids_count  > 0 && $video_ids_count  > 0) {
    $Wishlist = array_merge($video_Wishlist_ids->toArray(), $andriod_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $k2[] = $value1['video_id'];
      }
      // print_r($k2);exit;

      $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $channel_videos,
      );
    }else if ( $video_ids_count  > 0) {

      foreach ($video_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['video_id'];
      }
      $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $channel_videos,
      );
    }elseif ( $andriod_ids_count  > 0) {

      foreach ($andriod_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['video_id'];
      }
      $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $channel_videos,
      );
    }else{
      $response = array(
        'status' => "false",
        'videos'=> [],
      );
    }

    return response()->json($response, 200);

  }


  
  public function Android_Episode_wishlist(Request $request) {

    $user_id = $request->user_id;
    $andriodId = $request->andriodId;
   
    if(!empty($andriodId) ){
      $andriodId = $request->andriodId;
    }else{
      $andriodId = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

          /*Episode videos*/
        $episode_Wishlist_ids = Wishlist::select('episode_id')->where('user_id','=',$user_id)->get();
        $episode_ids_count = Wishlist::select('episode_id')->where('user_id','=',$user_id)->count();
    
        $andriod_episode_Wishlist_ids = Wishlist::select('episode_id')->where('andriodId','=',$andriodId)->get();
        $andriod_episode_ids_count = Wishlist::select('episode_id')->where('andriodId','=',$andriodId)->count();
    
    if ( $andriod_episode_ids_count  > 0 && $episode_ids_count  > 0) {
    $Wishlist = array_merge($episode_Wishlist_ids->toArray(), $andriod_episode_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $k2[] = $value1['episode_id'];
      }

      $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['source'] = 'episode';
        return $item;
      });
      $response = array(
        'status' => "true",
        'episode'=> $episode,
      );
    }else if ( $episode_ids_count  > 0) {

      foreach ($episode_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['episode_id'];
      }
      $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['source'] = 'episode';
        return $item;
      });
      $response = array(
        'status' => "true",
        'episode'=> $episode,
      );
    }elseif ( $andriod_episode_ids_count  > 0) {

      foreach ($andriod_episode_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['episode_id'];
      }
      $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['source'] = 'episode';
        return $item;
      });
      $response = array(
        'status' => "true",
        'episode'=> $episode,
      );
    }else{
      $response = array(
        'status' => "false",
        'episode'=> [],
      );
    }

    return response()->json($response, 200);

  }



  public function Android_Audio_wishlist(Request $request) {

    $user_id = $request->user_id;
    $andriodId = $request->andriodId;
   
    if(!empty($andriodId) ){
      $andriodId = $request->andriodId;
    }else{
      $andriodId = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

        /*Audio videos*/
        $audio_Wishlist_ids = Wishlist::select('audio_id')->where('user_id','=',$user_id)->get();
        $audio_ids_count = Wishlist::select('audio_id')->where('user_id','=',$user_id)->count();
    
        $andriod_audio_Wishlist_ids = Wishlist::select('audio_id')->where('andriodId','=',$andriodId)->get();
        $andriod_audio_ids_count = Wishlist::select('audio_id')->where('andriodId','=',$andriodId)->count();
    
    if ( $andriod_audio_ids_count  > 0 && $audio_ids_count  > 0) {
    $Wishlist = array_merge($audio_Wishlist_ids->toArray(), $andriod_audio_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $audio_id[] = $value1['audio_id'];
      }

      $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'audio';
        return $item;
      });

      $response = array(
        'status' => "true",
        'audios'=> $audios,
      );
    }else if ( $audio_ids_count  > 0) {

      foreach ($audio_Wishlist_ids as $key => $value1) {
        $audio_id[] = $value1['audio_id'];
      }
      $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'audio';
        return $item;
      });

      $response = array(
        'status' => "true",
        'audios'=> $audios,
      );
    }elseif ( $andriod_audio_ids_count  > 0) {

      foreach ($andriod_audio_Wishlist_ids as $key => $value1) {
        $audio_id[] = $value1['audio_id'];
      }
      $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'audio';
        return $item;
      });

      $response = array(
        'status' => "true",
        'audios'=> $audios,
      );
    }else{
      $response = array(
        'status' => "false",
        'audios'=> [],
      );
    }

    return response()->json($response, 200);

  }


  
  public function Android_LiveStream_wishlist(Request $request) {

    $user_id = $request->user_id;
    $andriodId = $request->andriodId;
   
    if(!empty($andriodId) ){
      $andriodId = $request->andriodId;
    }else{
      $andriodId = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

          /*Audio videos*/
        $livestream_Wishlist_ids = Wishlist::select('livestream_id')->where('user_id','=',$user_id)->get();
        $livestream_ids_count = Wishlist::select('livestream_id')->where('user_id','=',$user_id)->count();
    
        $andriod_livestream_Wishlist_ids = Wishlist::select('livestream_id')->where('andriodId','=',$andriodId)->get();
        $andriod_livestream_ids_count = Wishlist::select('livestream_id')->where('andriodId','=',$andriodId)->count();
    
    if ( $andriod_livestream_ids_count  > 0 && $livestream_ids_count  > 0) {
    $Wishlist = array_merge($livestream_Wishlist_ids->toArray(), $andriod_livestream_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $livestream_id[] = $value1['livestream_id'];
      }

      $LiveStream= LiveStream::whereIn('id',$livestream_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      $response = array(
        'status' => "true",
        'LiveStream'=> $LiveStream,
      );
    }else if ( $livestream_ids_count  > 0) {

      foreach ($livestream_Wishlist_ids as $key => $value1) {
        $livestream_id[] = $value1['livestream_id'];
      }
      $LiveStream= LiveStream::whereIn('id',$livestream_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      $response = array(
        'status' => "true",
        'LiveStream'=> $LiveStream,
      );
    }elseif ( $andriod_livestream_ids_count  > 0) {

      foreach ($andriod_livestream_Wishlist_ids as $key => $value1) {
        $livestream_id[] = $value1['livestream_id'];
      }
      $LiveStream= LiveStream::whereIn('id',$livestream_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      $response = array(
        'status' => "true",
        'LiveStream'=> $LiveStream,
      );
    }else{
      $response = array(
        'status' => "false",
        'LiveStream'=> [],
      );
    }

    return response()->json($response, 200);

  }



  // IOS Added Wishlist 

  
  public function IOS_addwishlist(Request $request) {

    $IOSId = $request->IOSId;
    $video_id = $request->video_id;
    $episode_id = $request->episode_id;
    $audio_id = $request->audio_id;
    $livestream_id = $request->livestream_id;

    if (!empty($video_id)) {
        $count = Wishlist::where('IOSId', $IOSId)->where('video_id', $video_id)->count();

        if ($count > 0) {
            Wishlist::where('IOSId', $IOSId)->where('video_id', $video_id)->delete();

            $response = [
                'status' => 'false',
                'message' => 'Removed From Your Wishlist'
            ];
        } else {
            $data = ['IOSId' => $IOSId, 'video_id' => $video_id];
            Wishlist::insert($data);

            $response = [
                'status' => 'true',
                'message' => 'Added to Your Wishlist'
            ];
        }
    }

    // Add Episode wishlist 

    if (!empty($episode_id)) {
      $count = Wishlist::where('IOSId', $IOSId)->where('episode_id', $episode_id)->count();

      if ($count > 0) {
              Wishlist::where('IOSId', $IOSId)->where('episode_id', $episode_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Wishlist'
              ];
          } else {
              $data = ['IOSId' => $IOSId, 'episode_id' => $episode_id];
              Wishlist::insert($data);

              $response = [
                  'status' => 'true',
                  'message' => 'Added to Your Wishlist'
              ];
          }
      }

    // Add Audio wishlist 

      if (!empty($audio_id)) {
        $count = Wishlist::where('IOSId', $IOSId)->where('audio_id', $audio_id)->count();

        if ($count > 0) {
            Wishlist::where('IOSId', $IOSId)->where('audio_id', $audio_id)->delete();

            $response = [
                'status' => 'false',
                'message' => 'Removed From Your Wishlist'
            ];
        } else {
            $data = ['IOSId' => $IOSId, 'audio_id' => $audio_id];
            Wishlist::insert($data);

            $response = [
                'status' => 'true',
                'message' => 'Added to Your Wishlist'
            ];
        }
    }

    // Add Livestream wishlist 

    if (!empty($livestream_id)) {
      $count = Wishlist::where('IOSId', $IOSId)->where('livestream_id', $livestream_id)->count();

      if ($count > 0) {
          Wishlist::where('IOSId', $IOSId)->where('livestream_id', $livestream_id)->delete();

          $response = [
              'status' => 'false',
              'message' => 'Removed From Your Wishlist'
          ];
      } else {
          $data = ['IOSId' => $IOSId, 'livestream_id' => $livestream_id];
          Wishlist::insert($data);

          $response = [
              'status' => 'true',
              'message' => 'Added to Your Wishlist'
          ];
      }
    }
    return response()->json($response, 200);

  }


  
  public function IOS_Video_wishlist(Request $request) {

    $user_id = $request->user_id;
    $IOSId = $request->IOSId;
   
    if(!empty($IOSId) ){
      $IOS_ids = $request->IOSId;
    }else{
      $IOSId = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

        /*channel videos*/
        $video_Wishlist_ids = Wishlist::select('video_id')->where('user_id','=',$user_id)->get();
        $video_ids_count = Wishlist::select('video_id')->where('user_id','=',$user_id)->count();
    
        $IOS_Wishlist_ids = Wishlist::select('video_id')->where('IOSId','=',$IOSId)->get();
        $IOS_ids_count = Wishlist::select('video_id')->where('IOSId','=',$IOSId)->count();
    
    if ( $IOS_ids_count  > 0 && $video_ids_count  > 0) {
    $Wishlist = array_merge($video_Wishlist_ids->toArray(), $IOS_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $k2[] = $value1['video_id'];
      }
      // print_r($k2);exit;

      $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $channel_videos,
      );
    }else if ( $video_ids_count  > 0) {

      foreach ($video_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['video_id'];
      }
      $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $channel_videos,
      );
    }elseif ( $IOS_ids_count  > 0) {

      foreach ($IOS_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['video_id'];
      }
      $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $channel_videos,
      );
    }else{
      $response = array(
        'status' => "false",
        'videos'=> [],
      );
    }

    return response()->json($response, 200);

  }


  
  public function IOS_Episode_wishlist(Request $request) {

    $user_id = $request->user_id;
    $IOSId = $request->IOSId;
   
   
    if(!empty($IOSId) ){
      $IOS_ids = $request->IOSId;
    }else{
      $IOSId = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

          /*Episode videos*/
        $episode_Wishlist_ids = Wishlist::select('episode_id')->where('user_id','=',$user_id)->get();
        $episode_ids_count = Wishlist::select('episode_id')->where('user_id','=',$user_id)->count();
    
        $IOS_episode_Wishlist_ids = Wishlist::select('episode_id')->where('IOSId','=',$IOSId)->get();
        $IOS_episode_ids_count = Wishlist::select('episode_id')->where('IOSId','=',$IOSId)->count();
    
    if ( $IOS_episode_ids_count  > 0 && $episode_ids_count  > 0) {
    $Wishlist = array_merge($episode_Wishlist_ids->toArray(), $IOS_episode_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $k2[] = $value1['episode_id'];
      }

      $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['source'] = 'episode';
        return $item;
      });
      $response = array(
        'status' => "true",
        'episode'=> $episode,
      );
    }else if ( $episode_ids_count  > 0) {

      foreach ($episode_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['episode_id'];
      }
      $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['source'] = 'episode';
        return $item;
      });
      $response = array(
        'status' => "true",
        'episode'=> $episode,
      );
    }elseif ( $IOS_episode_ids_count  > 0) {

      foreach ($IOS_episode_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['episode_id'];
      }
      $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['source'] = 'episode';
        return $item;
      });
      $response = array(
        'status' => "true",
        'episode'=> $episode,
      );
    }else{
      $response = array(
        'status' => "false",
        'episode'=> [],
      );
    }

    return response()->json($response, 200);

  }



  public function IOS_Audio_wishlist(Request $request) {

    $user_id = $request->user_id;
    $IOSId = $request->IOSId;
   
   
    if(!empty($IOSId) ){
      $IOS_ids = $request->IOSId;
    }else{
      $IOSId = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

        /*Audio videos*/
        $audio_Wishlist_ids = Wishlist::select('audio_id')->where('user_id','=',$user_id)->get();
        $audio_ids_count = Wishlist::select('audio_id')->where('user_id','=',$user_id)->count();
    
        $IOS_audio_Wishlist_ids = Wishlist::select('audio_id')->where('IOSId','=',$IOSId)->get();
        $IOS_audio_ids_count = Wishlist::select('audio_id')->where('IOSId','=',$IOSId)->count();
    
    if ( $IOS_audio_ids_count  > 0 && $audio_ids_count  > 0) {
    $Wishlist = array_merge($audio_Wishlist_ids->toArray(), $IOS_audio_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $audio_id[] = $value1['audio_id'];
      }

      $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'audio';
        return $item;
      });

      $response = array(
        'status' => "true",
        'audios'=> $audios,
      );
    }else if ( $audio_ids_count  > 0) {

      foreach ($audio_Wishlist_ids as $key => $value1) {
        $audio_id[] = $value1['audio_id'];
      }
      $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'audio';
        return $item;
      });

      $response = array(
        'status' => "true",
        'audios'=> $audios,
      );
    }elseif ( $IOS_audio_ids_count  > 0) {

      foreach ($IOS_audio_Wishlist_ids as $key => $value1) {
        $audio_id[] = $value1['audio_id'];
      }
      $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'audio';
        return $item;
      });

      $response = array(
        'status' => "true",
        'audios'=> $audios,
      );
    }else{
      $response = array(
        'status' => "false",
        'audios'=> [],
      );
    }

    return response()->json($response, 200);

  }


  
  public function IOS_LiveStream_wishlist(Request $request) {

    $user_id = $request->user_id;
    $IOSId = $request->IOSId;
   
   
    if(!empty($IOSId) ){
      $IOS_ids = $request->IOSId;
    }else{
      $IOSId = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

          /*Audio videos*/
        $livestream_Wishlist_ids = Wishlist::select('livestream_id')->where('user_id','=',$user_id)->get();
        $livestream_ids_count = Wishlist::select('livestream_id')->where('user_id','=',$user_id)->count();
    
        $IOS_livestream_Wishlist_ids = Wishlist::select('livestream_id')->where('IOSId','=',$IOSId)->get();
        $IOS_livestream_ids_count = Wishlist::select('livestream_id')->where('IOSId','=',$IOSId)->count();
    
    if ( $IOS_livestream_ids_count  > 0 && $livestream_ids_count  > 0) {
    $Wishlist = array_merge($livestream_Wishlist_ids->toArray(), $IOS_livestream_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $livestream_id[] = $value1['livestream_id'];
      }

      $LiveStream= LiveStream::whereIn('id',$livestream_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      $response = array(
        'status' => "true",
        'LiveStream'=> $LiveStream,
      );
    }else if ( $livestream_ids_count  > 0) {

      foreach ($livestream_Wishlist_ids as $key => $value1) {
        $livestream_id[] = $value1['livestream_id'];
      }
      $LiveStream= LiveStream::whereIn('id',$livestream_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      $response = array(
        'status' => "true",
        'LiveStream'=> $LiveStream,
      );
    }elseif ( $IOS_livestream_ids_count  > 0) {

      foreach ($IOS_livestream_Wishlist_ids as $key => $value1) {
        $livestream_id[] = $value1['livestream_id'];
      }
      $LiveStream= LiveStream::whereIn('id',$livestream_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      $response = array(
        'status' => "true",
        'LiveStream'=> $LiveStream,
      );
    }else{
      $response = array(
        'status' => "false",
        'LiveStream'=> [],
      );
    }

    return response()->json($response, 200);

  }


  
  public function IOS_liked_disliked(Request $request) {

    $video_id = $request->video_id;
    $episode_id = $request->episode_id;
    $audio_id = $request->audio_id;
    $live_id = $request->live_id;
    $IOSId = $request->IOSId;
    $user_id = $request->user_id;


    if (!empty($video_id)) {
        
        $user_like_data = LikeDisLike::where("video_id","=",$video_id)->where("user_id","=",$user_id)->where("liked","=",1)->count();
        $andriod_like_data = LikeDisLike::where("video_id","=",$video_id)->where("IOSId","=",$IOSId)->where("liked","=",1)->count();

        $user_dislike_data = LikeDisLike::where("video_id","=",$video_id)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
        $andriod_dislike_data = LikeDisLike::where("video_id","=",$video_id)->where("IOSId","=",$IOSId)->where("disliked","=",1)->count();
      
        $user_like = ($user_like_data == 1) ? "true" : "false";
        $user_dislike = ($user_dislike_data == 1) ? "true" : "false";

        $andriod_like = ($andriod_like_data == 1) ? "true" : "false";
        $andriod_dislike = ($andriod_dislike_data == 1) ? "true" : "false";

        $response = [
          'status' => 'false',
          'message' => 'Removed From Your Wishlist',
          'user_like' => $user_like,
          'user_dislike' => $user_dislike,
          'andriod_like' => $andriod_like,
          'andriod_dislike' => $andriod_dislike,

      ];
      
    }

    // Add Episode wishlist 

    if (!empty($episode_id)) {
      
          $user_like_data = LikeDisLike::where("episode_id","=",$episode_id)->where("user_id","=",$user_id)->where("liked","=",1)->count();
          $andriod_like_data = LikeDisLike::where("episode_id","=",$episode_id)->where("IOSId","=",$IOSId)->where("liked","=",1)->count();

          $user_dislike_data = LikeDisLike::where("episode_id","=",$episode_id)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
          $andriod_dislike_data = LikeDisLike::where("episode_id","=",$episode_id)->where("IOSId","=",$IOSId)->where("disliked","=",1)->count();
        
          $user_like = ($user_like_data == 1) ? "true" : "false";
          $user_dislike = ($user_dislike_data == 1) ? "true" : "false";

          $andriod_like = ($andriod_like_data == 1) ? "true" : "false";
          $andriod_dislike = ($andriod_dislike_data == 1) ? "true" : "false";

          $response = [
            'status' => 'false',
            'message' => 'Removed From Your Wishlist',
            'user_like' => $user_like,
            'user_dislike' => $user_dislike,
            'andriod_like' => $andriod_like,
            'andriod_dislike' => $andriod_dislike,

        ];
    
      }

    // Add Audio wishlist 

      if (!empty($audio_id)) {

        $user_like_data = LikeDisLike::where("audio_id","=",$audio_id)->where("user_id","=",$user_id)->where("liked","=",1)->count();
        $andriod_like_data = LikeDisLike::where("audio_id","=",$audio_id)->where("IOSId","=",$IOSId)->where("liked","=",1)->count();

        $user_dislike_data = LikeDisLike::where("audio_id","=",$audio_id)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
        $andriod_dislike_data = LikeDisLike::where("audio_id","=",$audio_id)->where("IOSId","=",$IOSId)->where("disliked","=",1)->count();
      
        $user_like = ($user_like_data == 1) ? "true" : "false";
        $user_dislike = ($user_dislike_data == 1) ? "true" : "false";

        $andriod_like = ($andriod_like_data == 1) ? "true" : "false";
        $andriod_dislike = ($andriod_dislike_data == 1) ? "true" : "false";

        $response = [
          'status' => 'false',
          'message' => 'Removed From Your Wishlist',
          'user_like' => $user_like,
          'user_dislike' => $user_dislike,
          'andriod_like' => $andriod_like,
          'andriod_dislike' => $andriod_dislike,

      ];
      
    }

    // Add Livestream wishlist 

    if (!empty($live_id)) {
     
      $user_like_data = LikeDisLike::where("live_id","=",$live_id)->where("user_id","=",$user_id)->where("liked","=",1)->count();
      $andriod_like_data = LikeDisLike::where("live_id","=",$live_id)->where("IOSId","=",$IOSId)->where("liked","=",1)->count();

      $user_dislike_data = LikeDisLike::where("live_id","=",$live_id)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
      $andriod_dislike_data = LikeDisLike::where("live_id","=",$live_id)->where("IOSId","=",$IOSId)->where("disliked","=",1)->count();
    
      $user_like = ($user_like_data == 1) ? "true" : "false";
      $user_dislike = ($user_dislike_data == 1) ? "true" : "false";

      $andriod_like = ($andriod_like_data == 1) ? "true" : "false";
      $andriod_dislike = ($andriod_dislike_data == 1) ? "true" : "false";

      $response = [
        'status' => 'false',
        'message' => 'Removed From Your Wishlist',
        'user_like' => $user_like,
        'user_dislike' => $user_dislike,
        'andriod_like' => $andriod_like,
        'andriod_dislike' => $andriod_dislike,

    ];
    
    }
    return response()->json($response, 200);

  }

  
  public function series_genre_list(Request $request){

    try{

      $series = SeriesGenre::query()->with(['category_series' => function ($series) {
        $series->select('series.id','series.slug', 'series.image', 'series.title', 'series.duration', 'series.rating', 'series.featured')
            ->where('series.active', '1')
            ->latest('series.created_at');
            }])
            ->select('series_genre.id', 'series_genre.name', 'series_genre.in_home', 'series_genre.slug', 'series_genre.order')
            ->orderBy('series_genre.order')
            ->get();
            $series = $series->map(function ($genre) {
              $genre->category_series = $genre->category_series->map(function ($item) {
                  $item->image_url     = URL::to('/public/uploads/images/'.$item->image);
                  $item->redirect_url  = URL::to('play_series/'. $item->slug);
                  $item->season_count  = SeriesSeason::where('series_id',$item->id)->count();
                  $item->Episode_count = Episode::where('series_id',$item->id)->count();
                  return $item;
              });
              return $genre;
        });

        $response = array(
            'status'=>'true',
            'series' => $series,
        );
      

    } catch (\Throwable $th) {
      $response = array(
        'status'=>'false',
        'message'=>$th->getMessage(),
        'nodata' => [],
      );
  }
  return response()->json($response, 200);

  }

  
  public function series_genre(Request $request){

    try{
      $series_categories = $request->series_category;
      $series = SeriesGenre::query()->with(['category_series' => function ($series) {
        $series->select('series.id','series.slug', 'series.image', 'series.title', 'series.duration', 'series.rating', 'series.featured')
            ->where('series.active', '1')
            ->latest('series.created_at');
            }])
            ->select('series_genre.id', 'series_genre.name', 'series_genre.in_home', 'series_genre.slug', 'series_genre.order')
            ->orderBy('series_genre.order')
            ->where('series_genre.id', $series_categories)
            ->get();
            $series = $series->map(function ($genre) {
              $genre->category_series = $genre->category_series->map(function ($item) {
                  $item->image_url     = URL::to('/public/uploads/images/'.$item->image);
                  $item->redirect_url  = URL::to('play_series/'. $item->slug);
                  $item->season_count  = SeriesSeason::where('series_id',$item->id)->count();
                  $item->Episode_count = Episode::where('series_id',$item->id)->count();
                  return $item;
              });
              return $genre;
        });

        $response = array(
            'status'=>'true',
            'series' => $series,
        );
      

    } catch (\Throwable $th) {
      $response = array(
        'status'=>'false',
        'message'=>$th->getMessage(),
        'nodata' => [],
      );
  }
  return response()->json($response, 200);

}

public function Interest_Genre_list()
{
  
  try {

        $VideoCategory = VideoCategory::select('id', 'name', 'slug', 'in_home')->where('in_home', '=', 1)
                              ->get()->map(function ($item) {
                                  $item['source'] = "VideoCategory";
                                  return $item;
                              });

        $LiveCategory = LiveCategory::select('id', 'name', 'slug', 'in_menu')->where('in_menu', 1)->orderBy('order')
                            ->get()->map(function ($item) {
                                $item['source'] = "LiveCategory";
                                return $item;
                            });

        $SeriesGenre = SeriesGenre::select('id', 'name', 'slug', 'in_menu')->where('in_menu', 1)->orderBy('order')
                            ->get()->map(function ($item) {
                                $item['source'] = "SeriesGenre";
                                return $item;
                            });

        $AudioCategory = AudioCategory::select('id', 'name', 'slug')->latest()->get()->map(function ($item) {
                              $item['source'] = "AudioCategory";
                              return $item;
                          });

        $mergedData = $VideoCategory->concat($LiveCategory)->concat($SeriesGenre)->concat($AudioCategory);

        $combinedData = $mergedData->groupBy('name')->map(function ($items) {
            return $items->unique('slug')->first();
        })->values();

        $response = array(
            'status'=>'true',
            'message'=> " Retreived Interest Genres list",
            'data' => $combinedData,
        );

  } catch (\Throwable $th) {
        $response = array(
          'status'=>'false',
          'message'=>$th->getMessage(),
        );
  }

  return response()->json($response, 200);

}

public function users_interest_genres(Request $request)
{
  try {

    $source_genres_id = array_map(function ($item1, $item2) {
        return $item1 . '-' . $item2;
    }, $request->genres_id , $request->source );

    $Users_Interest_Genres  = Users_Interest_Genres::create([
        'user_id' => $request->user_id,
        'source_genres_id' => json_encode($source_genres_id),
        'genres_slug' => $request->genres_slug,
    ]);
    
    $response = array(
      'status'=>'true',
      'message'=> 'users interest genres updated successfully',
      'Users_Interest_Genres' => Users_Interest_Genres::find($Users_Interest_Genres->id),
      'user_id'  => $request->user_id ,
    );


  } catch (\Throwable $th) {

      $response = array(
        'status'=>'false',
        'message'=>$th->getMessage(),
      );
  }

  return response()->json($response, 200);

}

public function Users_Password_Pin_Update(Request $request)
{
  try {
    
    User::find($request->user_id)->update([
      'Password_Pin'  => Hash::make($request->Password_Pin),
    ]);

    $response = array(
      'status'=>'true',
      'message'=> "Users Password Pin Update Successfully",
      $users = User::find($request->user_id) ,
  );

  } catch (\Throwable $th) {
      $response = array(
        'status'=>'false',
        'message'=>$th->getMessage(),
      );
  }

  return response()->json($response, 200);

}


public function Android_ContinueWatchingExits(Request $request)
{
  $video_id = $request->video_id;
  $user_id = $request->user_id;
  $andriodId = $request->andriodId;
  $episodeid = $request->episode_id;
  if(!empty($user_id)){
    $ContinueWatchingVideoCount = ContinueWatching::where('videoid',$video_id)->where('videoid','!=','')->where('user_id',$user_id)->orderBy('created_at', 'desc')->count();
    $ContinueWatchingEpisodeCount = ContinueWatching::where('episodeid',$episodeid)->where('episodeid','!=','')->where('user_id',$user_id)->orderBy('created_at', 'desc')->count();

  }else{
    $ContinueWatchingVideoCount = 0;
    $ContinueWatchingEpisodeCount = 0;
  }

  if(!empty($andriodId)){
    $Android_ContinueWatchingVideoCount = ContinueWatching::where('videoid',$video_id)->where('videoid','!=','')->where('andriodId',$andriodId)->orderBy('created_at', 'desc')->count();
    $Android_ContinueWatchingEpisodeCount = ContinueWatching::where('episodeid',$episodeid)->where('episodeid','!=','')->where('andriodId',$andriodId)->orderBy('created_at', 'desc')->count();

  }else{
    $Android_ContinueWatchingVideoCount = 0;
    $Android_ContinueWatchingEpisodeCount = 0;
  }

  if($Android_ContinueWatchingVideoCount > 0 && $ContinueWatchingVideoCount > 0 || $Android_ContinueWatchingEpisodeCount > 0 && $ContinueWatchingEpisodeCount > 0){
    $Android_ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('videoid','!=','')->where('andriodId',$andriodId)->orderBy('created_at', 'desc')->get();
    $ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('videoid','!=','')->where('user_id',$user_id)->get();

    $ContinueWatchingEpisode = ContinueWatching::where('episodeid',$episodeid)->where('episodeid','!=','')->where('user_id',$user_id)->orderBy('created_at', 'desc')->get();
    $Android_ContinueWatchingEpisode = ContinueWatching::where('episodeid',$episodeid)->where('episodeid','!=','')->where('andriodId',$andriodId)->orderBy('created_at', 'desc')->get();

    $response = array(
      'status' => 'true',
      'User_Video_status' => $ContinueWatchingVideoCount,
      'Android_Video_status' => $Android_ContinueWatchingVideoCount,
      'Android_ContinueWatching' => $Android_ContinueWatching,
      'ContinueWatching' => $ContinueWatching,
      'User_Episode_status' => $ContinueWatchingEpisodeCount,
      'Android_Episode_status' => $Android_ContinueWatchingEpisodeCount,
      'Android_ContinueWatchingEpisode' => $Android_ContinueWatchingEpisode,
      'ContinueWatchingEpisode' => $ContinueWatchingEpisode,
    );
  }elseif($Android_ContinueWatchingVideoCount > 0 || $Android_ContinueWatchingEpisodeCount > 0 ){
    $Android_ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('videoid','!=','')->where('andriodId',$andriodId)->orderBy('created_at', 'desc')->get();
    $Android_ContinueWatchingEpisode = ContinueWatching::where('episodeid',$episodeid)->where('episodeid','!=','')->where('andriodId',$andriodId)->orderBy('created_at', 'desc')->get();
    $response = array(
      'status' => 'true',
      'User_Video_status' => $ContinueWatchingVideoCount,
      'Android_Video_status' => $Android_ContinueWatchingVideoCount,
      'Android_ContinueWatching' => $Android_ContinueWatching,
      'ContinueWatching' => [],
      'User_Episode_status' => $ContinueWatchingEpisodeCount,
      'Android_Episode_status' => $Android_ContinueWatchingEpisodeCount,
      'Android_ContinueWatchingEpisode' => $Android_ContinueWatchingEpisode,
      'ContinueWatchingEpisode' => [],
    );
  }elseif($ContinueWatchingVideoCount > 0 || $ContinueWatchingEpisodeCount > 0){
    $ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('videoid','!=','')->where('user_id',$user_id)->orderBy('created_at', 'desc')->get();
    $ContinueWatchingEpisode = ContinueWatching::where('episodeid',$episodeid)->where('episodeid','!=','')->where('user_id',$user_id)->orderBy('created_at', 'desc')->get();
    $response = array(
      'status' => 'true',
      'User_Video_status' => $ContinueWatchingVideoCount,
      'Android_Video_status' => $Android_ContinueWatchingVideoCount,
      'Android_ContinueWatching' => [],
      'ContinueWatching' => $ContinueWatching,
      'User_Episode_status' => $ContinueWatchingEpisodeCount,
      'Android_Episode_status' => $Android_ContinueWatchingEpisodeCount,
      'Android_ContinueWatchingEpisode' => [],
      'ContinueWatchingEpisode' => $ContinueWatchingEpisode,
    );
  }else{
    $response = array(
      'status' => 'false',
      'User_Video_status' => 0,
      'Android_Video_status' => 0,
      'User_Episode_status' => 0,
      'Android_Episode_status' => 0,
      // 'ContinueWatching' => "video has been added"
    );
  }

  return response()->json($response, 200);

}

public function Channel_Audios_list(Request $request)
    {
        try {

            $channel = Channel::where('channel_slug',$request->channel_slug)->first(); 

            $data = Audio::where('active', '1')->where('user_id', $channel->id)
                    ->where('uploaded_by','Channel')
                    ->latest()
                    ->get() ;

            $response = array(
                'status'=>'true',
                'message' => 'Retrived data successfully',
                'data' => $data ,
                'settings' => Setting::first(),
                'currency' => CurrencySetting::first(),
                'ThumbnailSetting' => ThumbnailSetting::first(),
            );

        } catch (\Throwable $th) {

          $response = array(
            'status' => 'false',
            'message' => $th->getMessage(),          
          );
          
            return $th->getMessage();
        }

        return response()->json($response, 200);

    }

    public function Channel_livevideos_list(Request $request)
    {
        try {

            $channel = Channel::where('channel_slug',$request->channel_slug)->first(); 

            $data = LiveStream::where('active','1')->where('status',1)->where('user_id',$channel->id)
                                ->where('uploaded_by','Channel')
                                ->latest()
                                ->get();

            $response = array(
                'status'=>'true',
                'message' => 'Retrived data successfully',
                'data' => $data ,
                'settings' => Setting::first(),
                'currency' => CurrencySetting::first(),
                'ThumbnailSetting' => ThumbnailSetting::first(),
            );

        } catch (\Throwable $th) {

            $response = array(
              'status' => 'false',
              'message' => $th->getMessage(),          
            );
        }

        return response()->json($response, 200);
       
    }

    public function Channel_series_list(Request $request)
    {
        try {

            $channel = Channel::where('channel_slug',$request->channel_slug)->first(); 
           
            $data = Series::where('active','1')->where('user_id', $channel->id)
                            ->where('uploaded_by', 'Channel')
                            ->latest()
                            ->get();

            $response = array(
                'status'=>'true',
                'message' => 'Retrived data successfully',
                'data' => $data ,
                'settings' => Setting::first(),
                'currency' => CurrencySetting::first(),
                'ThumbnailSetting' => ThumbnailSetting::first(),
            );

        } catch (\Throwable $th) {
            $response = array(
              'status' => 'false',
              'message' => $th->getMessage(),          
            );
        }

        return response()->json($response, 200);

    }
    
    public function Channel_videos_list(Request $request)
    {
        try {

            $channel = Channel::where('channel_slug',$request->channel_slug)->first(); 

            $data = Video::where('active', '=', '1')->where('status', '=', '1')
                            ->where('user_id', '=', $channel->id)
                            ->where('uploaded_by', '=', 'Channel')->where('draft', '=', '1')
                            ->get();

            $response = array(
                'status'=>'true',
                'message' => 'Retrived data successfully',
                'data' => $data ,
                'settings' => Setting::first(),
                'currency' => CurrencySetting::first(),
                'ThumbnailSetting' => ThumbnailSetting::first(),
            );

        } catch (\Throwable $th) {

          $response = array(
            'status' => 'false',
            'message' => $th->getMessage(),          
          );

        }

        return response()->json($response, 200);

    }

    
  public function Android_Video_favorite(Request $request) {

    try {
      
      $andriodId = $request->andriodId;
      $video_id = $request->video_id;

      if (!empty($video_id)) {
          $count = Favorite::where('andriodId', $andriodId)->where('video_id', $video_id)->count();

          if ($count > 0) {
              Favorite::where('andriodId', $andriodId)->where('video_id', $video_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Favorite'
              ];
          } else {
              $data = ['andriodId' => $andriodId, 'video_id' => $video_id];
              Favorite::insert($data);

              $response = [
                    'status' => 'true',
                    'message' => 'Added to Your Favorite'
                ];
            }
      }
    } catch (\Throwable $th) {
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];
    }

    return response()->json($response, 200);

  }

  
  public function Android_Episode_favorite(Request $request) {

    try {
      
      $andriodId = $request->andriodId;
      $episode_id = $request->episode_id;

      if (!empty($episode_id)) {
          $count = Favorite::where('andriodId', $andriodId)->where('episode_id', $episode_id)->count();

          if ($count > 0) {
              Favorite::where('andriodId', $andriodId)->where('episode_id', $episode_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Favorite'
              ];
          } else {
              $data = ['andriodId' => $andriodId, 'episode_id' => $episode_id];
              Favorite::insert($data);

              $response = [
                    'status' => 'true',
                    'message' => 'Added to Your Favorite'
                ];
            }
      }
    } catch (\Throwable $th) {
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];
    }

    return response()->json($response, 200);

  }

  
  public function Android_Audio_favorite(Request $request) {

    try {
      
      $andriodId = $request->andriodId;
      $audio_id = $request->audio_id;

      if (!empty($audio_id)) {
          $count = Favorite::where('andriodId', $andriodId)->where('audio_id', $audio_id)->count();

          if ($count > 0) {
              Favorite::where('andriodId', $andriodId)->where('audio_id', $audio_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Favorite'
              ];
          } else {
              $data = ['andriodId' => $andriodId, 'audio_id' => $audio_id];
              Favorite::insert($data);

              $response = [
                    'status' => 'true',
                    'message' => 'Added to Your Favorite'
                ];
            }
      }
    } catch (\Throwable $th) {
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];
    }

    return response()->json($response, 200);

  }

  
  public function Android_LiveStream_favorite(Request $request) {

    try {
      
      $andriodId = $request->andriodId;
      $live_id = $request->live_id;

      if (!empty($live_id)) {
          $count = Favorite::where('andriodId', $andriodId)->where('live_id', $live_id)->count();

          if ($count > 0) {
              Favorite::where('andriodId', $andriodId)->where('live_id', $live_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Favorite'
              ];
          } else {
              $data = ['andriodId' => $andriodId, 'live_id' => $live_id];
              Favorite::insert($data);

              $response = [
                    'status' => 'true',
                    'message' => 'Added to Your Favorite'
                ];
            }
      }
    } catch (\Throwable $th) {
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];
    }

    return response()->json($response, 200);

  }


  // IOS Favorite Add audio,video,episode,livestream 


  public function IOS_Video_favorite(Request $request) {

    try {
      
      $IOSId = $request->IOSId;
      $video_id = $request->video_id;

      if (!empty($video_id)) {
          $count = Favorite::where('IOSId', $IOSId)->where('video_id', $video_id)->count();

          if ($count > 0) {
              Favorite::where('IOSId', $IOSId)->where('video_id', $video_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Favorite'
              ];
          } else {
              $data = ['IOSId' => $IOSId, 'video_id' => $video_id];
              Favorite::insert($data);

              $response = [
                    'status' => 'true',
                    'message' => 'Added to Your Favorite'
                ];
            }
      }
    } catch (\Throwable $th) {
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];
    }

    return response()->json($response, 200);

  }

  
  public function IOS_Episode_favorite(Request $request) {

    try {
      
      $IOSId = $request->IOSId;
      $episode_id = $request->episode_id;

      if (!empty($episode_id)) {
          $count = Favorite::where('IOSId', $IOSId)->where('episode_id', $episode_id)->count();

          if ($count > 0) {
              Favorite::where('IOSId', $IOSId)->where('episode_id', $episode_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Favorite'
              ];
          } else {
              $data = ['IOSId' => $IOSId, 'episode_id' => $episode_id];
              Favorite::insert($data);

              $response = [
                    'status' => 'true',
                    'message' => 'Added to Your Favorite'
                ];
            }
      }
    } catch (\Throwable $th) {
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];
    }

    return response()->json($response, 200);

  }

  
  public function IOS_Audio_favorite(Request $request) {

    try {
      
      $IOSId = $request->IOSId;
      $audio_id = $request->audio_id;

      if (!empty($audio_id)) {
          $count = Favorite::where('IOSId', $IOSId)->where('audio_id', $audio_id)->count();

          if ($count > 0) {
              Favorite::where('IOSId', $IOSId)->where('audio_id', $audio_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Favorite'
              ];
          } else {
              $data = ['IOSId' => $IOSId, 'audio_id' => $audio_id];
              Favorite::insert($data);

              $response = [
                    'status' => 'true',
                    'message' => 'Added to Your Favorite'
                ];
            }
      }
    } catch (\Throwable $th) {
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];
    }

    return response()->json($response, 200);

  }

  
  public function IOS_LiveStream_favorite(Request $request) {

    try {
      
      $IOSId = $request->IOSId;
      $live_id = $request->live_id;

      if (!empty($live_id)) {
          $count = Favorite::where('IOSId', $IOSId)->where('live_id', $live_id)->count();

          if ($count > 0) {
              Favorite::where('IOSId', $IOSId)->where('live_id', $live_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Favorite'
              ];
          } else {
              $data = ['IOSId' => $IOSId, 'live_id' => $live_id];
              Favorite::insert($data);

              $response = [
                    'status' => 'true',
                    'message' => 'Added to Your Favorite'
                ];
            }
      }
    } catch (\Throwable $th) {
        $response = [
          'status' => 'false',
          'message' => $th->getMessage(),
        ];
    }

    return response()->json($response, 200);

  }
    // watchlater audio,videos,live,episode Android

  public function Android_Video_watchlater(Request $request) {

    $andriodId = $request->andriodId;
    $video_id = $request->video_id;
    if($request->video_id != ''){
      $count = Watchlater::where('andriodId', '=', $andriodId)->where('video_id', '=', $video_id)->count();
      if ( $count > 0 ) {
        Watchlater::where('andriodId', '=', $andriodId)->where('video_id', '=', $video_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Watch Later'
        );
      } else {
        $data = array('andriodId' => $andriodId, 'video_id' => $video_id );
        Watchlater::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added to Your Watch Later'
        );

      }
    }

    return response()->json($response, 200);

  }

  
  public function Android_Episode_watchlater(Request $request) {

    $andriodId = $request->andriodId;
    $episode_id = $request->episode_id;
    if($request->episode_id != ''){
      $count = Watchlater::where('andriodId', '=', $andriodId)->where('episode_id', '=', $episode_id)->count();
      if ( $count > 0 ) {
        Watchlater::where('andriodId', '=', $andriodId)->where('episode_id', '=', $episode_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Watch Later'
        );
      } else {
        $data = array('andriodId' => $andriodId, 'episode_id' => $episode_id );
        Watchlater::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added to Your Watch Later'
        );

      }
    }

    return response()->json($response, 200);

  }


  
  public function Android_Audio_watchlater(Request $request) {

    $andriodId = $request->andriodId;
    $audio_id = $request->audio_id;
    if($request->audio_id != ''){
      $count = Watchlater::where('andriodId', '=', $andriodId)->where('audio_id', '=', $audio_id)->count();
      if ( $count > 0 ) {
        Watchlater::where('andriodId', '=', $andriodId)->where('audio_id', '=', $audio_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Watch Later'
        );
      } else {
        $data = array('andriodId' => $andriodId, 'audio_id' => $audio_id );
        Watchlater::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added to Your Watch Later'
        );

      }
    }

    return response()->json($response, 200);

  }


  
  public function Android_LiveStream_watchlater(Request $request) {

    $andriodId = $request->andriodId;
    $live_id = $request->live_id;
    if($request->live_id != ''){
      $count = Watchlater::where('andriodId', '=', $andriodId)->where('live_id', '=', $live_id)->count();
      if ( $count > 0 ) {
        Watchlater::where('andriodId', '=', $andriodId)->where('live_id', '=', $live_id)->delete();
        $response = array(
          'status'=>'false',
          'message'=>'Removed From Your Watch Later'
        );
      } else {
        $data = array('andriodId' => $andriodId, 'live_id' => $live_id );
        Watchlater::insert($data);
        $response = array(
          'status'=>'true',
          'message'=>'Added to Your Watch Later'
        );

      }
    }

    return response()->json($response, 200);

  }


      // watchlater audio,videos,live,episode IOS

      public function IOS_Video_watchlater(Request $request) {

        $IOSId = $request->IOSId;
        $video_id = $request->video_id;
        if($request->video_id != ''){
          $count = Watchlater::where('IOSId', '=', $IOSId)->where('video_id', '=', $video_id)->count();
          if ( $count > 0 ) {
            Watchlater::where('IOSId', '=', $IOSId)->where('video_id', '=', $video_id)->delete();
            $response = array(
              'status'=>'false',
              'message'=>'Removed From Your Watch Later'
            );
          } else {
            $data = array('IOSId' => $IOSId, 'video_id' => $video_id );
            Watchlater::insert($data);
            $response = array(
              'status'=>'true',
              'message'=>'Added to Your Watch Later'
            );
    
          }
        }
    
        return response()->json($response, 200);
    
      }
    
      
      public function IOS_Episode_watchlater(Request $request) {
    
        $IOSId = $request->IOSId;
        $episode_id = $request->episode_id;
        if($request->episode_id != ''){
          $count = Watchlater::where('IOSId', '=', $IOSId)->where('episode_id', '=', $episode_id)->count();
          if ( $count > 0 ) {
            Watchlater::where('IOSId', '=', $IOSId)->where('episode_id', '=', $episode_id)->delete();
            $response = array(
              'status'=>'false',
              'message'=>'Removed From Your Watch Later'
            );
          } else {
            $data = array('IOSId' => $IOSId, 'episode_id' => $episode_id );
            Watchlater::insert($data);
            $response = array(
              'status'=>'true',
              'message'=>'Added to Your Watch Later'
            );
    
          }
        }
    
        return response()->json($response, 200);
    
      }
    
    
      
      public function IOS_Audio_watchlater(Request $request) {
    
        $IOSId = $request->IOSId;
        $audio_id = $request->audio_id;
        if($request->audio_id != ''){
          $count = Watchlater::where('IOSId', '=', $IOSId)->where('audio_id', '=', $audio_id)->count();
          if ( $count > 0 ) {
            Watchlater::where('IOSId', '=', $IOSId)->where('audio_id', '=', $audio_id)->delete();
            $response = array(
              'status'=>'false',
              'message'=>'Removed From Your Watch Later'
            );
          } else {
            $data = array('IOSId' => $IOSId, 'audio_id' => $audio_id );
            Watchlater::insert($data);
            $response = array(
              'status'=>'true',
              'message'=>'Added to Your Watch Later'
            );
    
          }
        }
    
        return response()->json($response, 200);
    
      }
    
    
      
      public function IOS_LiveStream_watchlater(Request $request) {
    
        $IOSId = $request->IOSId;
        $live_id = $request->live_id;
        if($request->live_id != ''){
          $count = Watchlater::where('IOSId', '=', $IOSId)->where('live_id', '=', $live_id)->count();
          if ( $count > 0 ) {
            Watchlater::where('IOSId', '=', $IOSId)->where('live_id', '=', $live_id)->delete();
            $response = array(
              'status'=>'false',
              'message'=>'Removed From Your Watch Later'
            );
          } else {
            $data = array('IOSId' => $IOSId, 'live_id' => $live_id );
            Watchlater::insert($data);
            $response = array(
              'status'=>'true',
              'message'=>'Added to Your Watch Later'
            );
    
          }
        }
    
        return response()->json($response, 200);
    
      }


      
public function IOS_ContinueWatchingExits(Request $request)
{
  $video_id = $request->video_id;
  $user_id = $request->user_id;
  $IOSId = $request->IOSId;
  if(!empty($user_id)){
    $ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('user_id',$user_id)->count();

  }else{
    $ContinueWatching = 0;
  }

  if(!empty($IOSId)){
    $IOS_ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('IOSId',$IOSId)->count();
  }else{
    $IOS_ContinueWatching = 0;
  }

  if($IOS_ContinueWatching > 0 && $ContinueWatching > 0){
    $IOS_ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('IOSId',$IOSId)->get();
    $ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('user_id',$user_id)->get();
    $response = array(
      'status' => 'true',
      'User_status' => 'true',
      'IOS_status' => 'true',
      'IOS_ContinueWatching' => $IOS_ContinueWatching,
      'ContinueWatching' => $ContinueWatching,
    );
  }elseif($IOS_ContinueWatching > 0 ){
    $IOS_ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('IOSId',$IOSId)->get();
    $ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('user_id',$user_id)->get();
    $response = array(
      'status' => 'true',
      'User_status' => 'false',
      'IOS_status' => 'true',
      'IOS_ContinueWatching' => $IOS_ContinueWatching,
      'ContinueWatching' => [],
    );
  }elseif($ContinueWatching > 0){
    $ContinueWatching = ContinueWatching::where('videoid',$video_id)->where('user_id',$user_id)->get();
    $response = array(
      'status' => 'true',
      'User_status' => 'true',
      'IOS_status' => 'false',
      'IOS_ContinueWatching' => [],
      'ContinueWatching' => $ContinueWatching,
    );
  }else{
    $response = array(
      'status' => 'false',
      'User_status' => 'false',
      'IOS_status' => 'false',
      // 'ContinueWatching' => "video has been added"
    );
  }

  return response()->json($response, 200);

}


      
public function TV_Season_Episdoe_List(Request $request)
{
  try {
    $season_id = $request->season_id;

    $episode = Episode::where('season_id',$season_id)->orderBy('episode_order')->get()->map(function ($item) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
      $item['source'] = 'episode';
      return $item;
    });
    $response = array(
      'status' => 'true',
      'episode_count' => count($episode),
      'episode' => $episode,

    );
  } catch (\Throwable $th) {
    $response = array(
      'status' => 'false',
      'episode_count' => 0,
      'episode' => [],
    );
  }
  return response()->json($response, 200);

}


public function TV_Season_Episode_Count(Request $request)
{
  // try {
    $series_id = $request->series_id;

    $season_count = SeriesSeason::where('series_id',$series_id)->count();

    $season = SeriesSeason::where('series_id',$series_id)->get();
    $myData = array();

    foreach ($season as $key => $value) {
      $season_countkey = $key+1;
      $episode_count = Episode::where('season_id',$value->id)->count();
      $season_id = $value->id;

      $myData[] = array(
        "season_countkey" => $season_countkey,
        "episode_count" => $episode_count,
        "season_id" => $season_id,

      );
    }

    $season_count = Episode::where('series_id',$series_id)->get();

    $episode_count = Episode::where('series_id',$series_id)->count();


    $response = array(
      'status' => 'true',
      // 'season_episode_count' => $episode,
      'myData' => $myData,

  
    );
  // } catch (\Throwable $th) {
  //   $response = array(
  //     'status' => 'false',
  //     'season_episode_count' => 0,
  //     'season_id' => 0,
  //   );
  // }
  return response()->json($response, 200);

}

// Android Wishlist List Page API 

public function Android_ShowVideo_wishlist(Request $request)
{

    $user_id = $request->user_id;
    $andriodId = $request->andriodId;

    if(!empty($andriodId) ){
      $andriodId = $request->andriodId;
      $andrio_video_ids = Wishlist::select('video_id')->where('andriodId','=',$andriodId)->get();
      $andrio_video_ids_count = Wishlist::select('video_id')->where('andriodId','=',$andriodId)->count();
      $andriod_episode_ids = Wishlist::select('episode_id')->where('andriodId','=',$andriodId)->get();
      $andriod_episode_ids_count = Wishlist::select('episode_id')->where('andriodId','=',$andriodId)->count();
    }else{
      $andriodId = 0;
      $andrio_video_ids = [];
      $andrio_video_ids_count = 0;
      $andriod_episode_ids = [];
      $andriod_episode_ids_count = 0;
    }

    if(!empty($user_id) ){
        /*channel videos*/
        $user_id = $request->user_id;
        /*channel videos*/
        $video_Wishlist_ids = Wishlist::select('video_id')->where('user_id','=',$user_id)->get();
        $video_Wishlist_ids_count = Wishlist::select('video_id')->where('user_id','=',$user_id)->count();
        $andriod_Wishlist_episode_ids = Wishlist::select('episode_id')->where('user_id','=',$user_id)->get();
        $andriod_Wishlist_episode_ids_count = Wishlist::select('episode_id')->where('user_id','=',$user_id)->count();
        }else{
        /*channel videos*/
        $user_id = $request->user_id;
        $video_Wishlist_ids = [];
        $video_Wishlist_ids_count = 0;
        $andriod_Wishlist_episode_ids = [];
        $andriod_Wishlist_episode_ids_count = 0;
    }

    $k2 = [];
    $k1 = [];
    
     if ( $video_Wishlist_ids_count  > 0 && $andrio_video_ids_count  > 0 || $andriod_episode_ids_count  > 0 && $andriod_Wishlist_episode_ids_count  > 0) {
      
    $Wishlist = array_merge($video_Wishlist_ids->toArray(), $andrio_video_ids->toArray()/*, $arrayN, $arrayN*/);
    $EpisodeWishlist = array_merge($andriod_Wishlist_episode_ids->toArray(), $andriod_episode_ids->toArray());

    foreach ($Wishlist as $key => $value1) {
      $k2[] = $value1['video_id'];
    }

    $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$andriodId) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
       return $item;
    });
    

    foreach ($EpisodeWishlist as $key => $Episodevalue1) {
      $k1[] = $Episodevalue1['episode_id'];
    }

    $episode_videos = Episode::whereIn('id',$k1)->orderBy('episode_order')->get()->map(function ($item)  use ($user_id,$andriodId) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
      $item['source'] = 'episode';
      return $item;
    });

    $response = array(
      'status' => "true",
      'channel_videos'=> $videos,
      'episode_videos'=> $episode_videos,
    );
  }else if ( $video_Wishlist_ids_count  > 0 || $andriod_Wishlist_episode_ids_count  > 0) {

    foreach ($video_Wishlist_ids as $key => $value1) {
      $k2[] = $value1['video_id'];
    }

    $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$andriodId) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
       return $item;
    });

    foreach ($andriod_Wishlist_episode_ids as $key => $Episodevalue1) {
      $k1[] = $Episodevalue1['episode_id'];
    }

    $episode_videos = Episode::whereIn('id',$k1)->orderBy('episode_order')->get()->map(function ($item)  use ($user_id,$andriodId) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
      $item['source'] = 'episode';
      return $item;
    });

    
    $response = array(
      'status' => "true",
      'channel_videos'=> $videos,
      'episode_videos'=> $episode_videos,
    );
  }elseif ( $andrio_video_ids_count  > 0 || $andriod_episode_ids_count  > 0) {

    foreach ($andrio_video_ids as $key => $value1) {
      $k2[] = $value1['video_id'];
    }
    $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$andriodId) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
       return $item;
    });

    foreach ($andriod_episode_ids as $key => $Episodevalue1) {
      $k1[] = $Episodevalue1['episode_id'];
    }

    $episode_videos = Episode::whereIn('id',$k1)->orderBy('episode_order')->get()->map(function ($item)  use ($user_id,$andriodId) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
      $item['source'] = 'episode';
      return $item;
    });

    $response = array(
      'status' => "true",
      'channel_videos'=> $videos,
      'episode_videos'=> $episode_videos,
    );
  }else{
    $response = array(
      'status' => "false",
      'channel_videos'=> [],
      'episode_videos'=> [],
    );
  }


  return response()->json($response, 200);

}


public function Android_ShowEpisode_wishlist(Request $request)
{

    $user_id = $request->user_id;
    $andriodId = $request->andriodId;

    if(!empty($andriodId) ){
      $andriodId = $request->andriodId;
      $andrio_wishlist_ids = Wishlist::select('episode_id')->where('andriodId','=',$andriodId)->get();
      $andrio_wishlist_ids_count = Wishlist::select('episode_id')->where('andriodId','=',$andriodId)->count();
    }else{
      $andriodId = 0;
      $andrio_wishlist_ids = 0;
      $andrio_wishlist_ids_count = 0;
    }

    if(!empty($user_id) ){
        /*channel videos*/
        $user_id = $request->user_id;
        /*channel videos*/
        $user_Wishlist_ids = Wishlist::select('episode_id')->where('user_id','=',$user_id)->get();
        $user_Wishlist_ids_count = Wishlist::select('episode_id')->where('user_id','=',$user_id)->count();
        }else{
        /*channel videos*/
        $user_id = $request->user_id;
        $user_Wishlist_ids = 0;
        $user_Wishlist_ids_count = 0;
    }

     if ( $user_Wishlist_ids_count  > 0 && $andrio_wishlist_ids_count  > 0) {
      
    $Wishlist = array_merge($user_Wishlist_ids->toArray(), $andrio_wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

    foreach ($Wishlist as $key => $value1) {
      $k2[] = $value1['episode_id'];
    }

    $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
      $item['source'] = 'episode';
      return $item;
    });
    
    $response = array(
      'status' => "true",
      'episode'=> $episode,
    );
  }else if ( $user_Wishlist_ids_count  > 0) {

    foreach ($user_Wishlist_ids as $key => $value1) {
      $k2[] = $value1['episode_id'];
    }

    $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
      $item['source'] = 'episode';
      return $item;
    });
    
    $response = array(
      'status' => "true",
      'episode'=> $episode,
    );
  }elseif ( $andrio_wishlist_ids_count  > 0) {

    foreach ($andrio_wishlist_ids as $key => $value1) {
      $k2[] = $value1['episode_id'];
    }
    $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
      $item['source'] = 'episode';
      return $item;
    });

    $response = array(
      'status' => "true",
      'episode'=> $episode,
    );
  }else{
    $response = array(
      'status' => "false",
      'episode'=> [],
    );
  }


  return response()->json($response, 200);

}



public function Android_ShowAudio_wishlist(Request $request)
{

  $user_id = $request->user_id;
  $andriodId = $request->andriodId;

  if(!empty($andriodId) ){
    $andriodId = $request->andriodId;
    $andrio_wishlist_ids = Wishlist::select('audio_id')->where('andriodId','=',$andriodId)->get();
    $andrio_wishlist_ids_count = Wishlist::select('audio_id')->where('andriodId','=',$andriodId)->count();
  }else{
    $andriodId = 0;
    $andrio_wishlist_ids = 0;
    $andrio_wishlist_ids_count = 0;
  }

  if(!empty($user_id) ){
      /*channel videos*/
      $user_id = $request->user_id;
      /*channel videos*/
      $user_Wishlist_ids = Wishlist::select('audio_id')->where('user_id','=',$user_id)->get();
      $user_Wishlist_ids_count = Wishlist::select('audio_id')->where('user_id','=',$user_id)->count();
      }else{
      /*channel videos*/
      $user_id = $request->user_id;
      $user_Wishlist_ids = 0;
      $user_Wishlist_ids_count = 0;
  }

   if ( $user_Wishlist_ids_count  > 0 && $andrio_wishlist_ids_count  > 0) {
    
  $Wishlist = array_merge($user_Wishlist_ids->toArray(), $andrio_wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

  foreach ($Wishlist as $key => $value1) {
    $k2[] = $value1['audio_id'];
  }

  $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
    $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
    $item['source'] = 'audio';
    return $item;
  });
  
  $response = array(
    'status' => "true",
    'audios'=> $audios,
  );
}else if ( $user_Wishlist_ids_count  > 0) {

  foreach ($user_Wishlist_ids as $key => $value1) {
    $k2[] = $value1['audio_id'];
  }

  $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
    $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
    $item['source'] = 'audio';
    return $item;
  });
  
  $response = array(
    'status' => "true",
    'audios'=> $audios,
  );
}elseif ( $andrio_wishlist_ids_count  > 0) {

  foreach ($andrio_wishlist_ids as $key => $value1) {
    $k2[] = $value1['audio_id'];
  }
  $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
    $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
    $item['source'] = 'audio';
    return $item;
  });

  $response = array(
    'status' => "true",
    'audios'=> $audios,
  );
}else{
  $response = array(
    'status' => "false",
    'audios'=> [],
  );
}


return response()->json($response, 200);

}



public function Android_ShowLiveStream_wishlist(Request $request)
{

  $user_id = $request->user_id;
  $andriodId = $request->andriodId;

  if(!empty($andriodId) ){
    $andriodId = $request->andriodId;
    $andrio_wishlist_ids = Wishlist::select('livestream_id')->where('andriodId','=',$andriodId)->get();
    $andrio_wishlist_ids_count = Wishlist::select('livestream_id')->where('andriodId','=',$andriodId)->count();
  }else{
    $andriodId = 0;
    $andrio_wishlist_ids = 0;
    $andrio_wishlist_ids_count = 0;
  }

  if(!empty($user_id) ){
      /*channel videos*/
      $user_id = $request->user_id;
      /*channel videos*/
      $user_Wishlist_ids = Wishlist::select('livestream_id')->where('user_id','=',$user_id)->get();
      $user_Wishlist_ids_count = Wishlist::select('livestream_id')->where('user_id','=',$user_id)->count();
      }else{
      /*channel videos*/
      $user_id = $request->user_id;
      $user_Wishlist_ids = 0;
      $user_Wishlist_ids_count = 0;
  }

   if ( $user_Wishlist_ids_count  > 0 && $andrio_wishlist_ids_count  > 0) {
    
  $Wishlist = array_merge($user_Wishlist_ids->toArray(), $andrio_wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

  foreach ($Wishlist as $key => $value1) {
    $k2[] = $value1['livestream_id'];
  }

  $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
    $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
    return $item;
  });
  
  $response = array(
    'status' => "true",
    'live_stream'=> $live_stream,
  );
}else if ( $user_Wishlist_ids_count  > 0) {

  foreach ($user_Wishlist_ids as $key => $value1) {
    $k2[] = $value1['livestream_id'];
  }

  $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
    $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
    return $item;
  });
  
  $response = array(
    'status' => "true",
    'live_stream'=> $live_stream,
  );
}elseif ( $andrio_wishlist_ids_count  > 0) {

  foreach ($andrio_wishlist_ids as $key => $value1) {
    $k2[] = $value1['livestream_id'];
  }
  $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
    $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
    return $item;
  });

  $response = array(
    'status' => "true",
    'live_stream'=> $live_stream,
  );
}else{
  $response = array(
    'status' => "false",
    'live_stream'=> [],
  );
}


return response()->json($response, 200);
}

// IOS Wishlist List Page API 

public function IOS_ShowVideo_wishlist(Request $request)
{

    $user_id = $request->user_id;
    $IOSId = $request->IOSId;

    if(!empty($IOSId) ){
      $IOSId = $request->IOSId;
      $IOS_video_ids = Wishlist::select('video_id')->where('IOSId','=',$IOSId)->get();
      $IOS_video_ids_count = Wishlist::select('video_id')->where('IOSId','=',$IOSId)->count();
    }else{
      $IOSId = 0;
      $IOS_video_ids = 0;
      $IOS_video_ids_count = 0;
    }

    if(!empty($user_id) ){
        /*channel videos*/
        $user_id = $request->user_id;
        /*channel videos*/
        $video_Wishlist_ids = Wishlist::select('video_id')->where('user_id','=',$user_id)->get();
        $video_Wishlist_ids_count = Wishlist::select('video_id')->where('user_id','=',$user_id)->count();
        }else{
        /*channel videos*/
        $user_id = $request->user_id;
        $video_Wishlist_ids = 0;
        $video_Wishlist_ids_count = 0;
    }

     if ( $video_Wishlist_ids_count  > 0 && $IOS_video_ids_count  > 0) {
      
    $Wishlist = array_merge($video_Wishlist_ids->toArray(), $IOS_video_ids->toArray()/*, $arrayN, $arrayN*/);

    foreach ($Wishlist as $key => $value1) {
      $k2[] = $value1['video_id'];
    }

    $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$IOSId) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
       return $item;
    });
    
    $response = array(
      'status' => "true",
      'videos'=> $videos,
    );
  }else if ( $video_Wishlist_ids_count  > 0) {

    foreach ($video_Wishlist_ids as $key => $value1) {
      $k2[] = $value1['video_id'];
    }

    $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$IOSId) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
       return $item;
    });
    
    $response = array(
      'status' => "true",
      'videos'=> $videos,
    );
  }elseif ( $IOS_video_ids_count  > 0) {

    foreach ($IOS_video_ids as $key => $value1) {
      $k2[] = $value1['video_id'];
    }
    $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$IOSId) {
      $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
       return $item;
    });

    $response = array(
      'status' => "true",
      'videos'=> $videos,
    );
  }else{
    $response = array(
      'status' => "false",
      'videos'=> [],
    );
  }


  return response()->json($response, 200);

}


public function IOS_ShowEpisode_wishlist(Request $request)
{

    $user_id = $request->user_id;
    $IOSId = $request->IOSId;

    if(!empty($IOSId) ){
      $IOSId = $request->IOSId;
      $IOS_wishlist_ids = Wishlist::select('episode_id')->where('IOSId','=',$IOSId)->get();
      $IOS_wishlist_ids_count = Wishlist::select('episode_id')->where('IOSId','=',$IOSId)->count();
    }else{
      $IOSId = 0;
      $IOS_wishlist_ids = 0;
      $IOS_wishlist_ids_count = 0;
    }

    if(!empty($user_id) ){
        /*channel videos*/
        $user_id = $request->user_id;
        /*channel videos*/
        $user_Wishlist_ids = Wishlist::select('episode_id')->where('user_id','=',$user_id)->get();
        $user_Wishlist_ids_count = Wishlist::select('episode_id')->where('user_id','=',$user_id)->count();
        }else{
        /*channel videos*/
        $user_id = $request->user_id;
        $user_Wishlist_ids = 0;
        $user_Wishlist_ids_count = 0;
    }

     if ( $user_Wishlist_ids_count  > 0 && $IOS_wishlist_ids_count  > 0) {
      
    $Wishlist = array_merge($user_Wishlist_ids->toArray(), $IOS_wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

    foreach ($Wishlist as $key => $value1) {
      $k2[] = $value1['episode_id'];
    }

    $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
      $item['source'] = 'episode';
      return $item;
    });
    
    $response = array(
      'status' => "true",
      'episode'=> $episode,
    );
  }else if ( $user_Wishlist_ids_count  > 0) {

    foreach ($user_Wishlist_ids as $key => $value1) {
      $k2[] = $value1['episode_id'];
    }

    $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
      $item['source'] = 'episode';
      return $item;
    });
    
    $response = array(
      'status' => "true",
      'episode'=> $episode,
    );
  }elseif ( $IOS_wishlist_ids_count  > 0) {

    foreach ($IOS_wishlist_ids as $key => $value1) {
      $k2[] = $value1['episode_id'];
    }
    $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
      $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
      $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
      $item['source'] = 'episode';
      return $item;
    });

    $response = array(
      'status' => "true",
      'episode'=> $episode,
    );
  }else{
    $response = array(
      'status' => "false",
      'episode'=> [],
    );
  }


  return response()->json($response, 200);

}



public function IOS_ShowAudio_wishlist(Request $request)
{

  $user_id = $request->user_id;
  $IOSId = $request->IOSId;

  if(!empty($IOSId) ){
    $IOSId = $request->IOSId;
    $IOS_wishlist_ids = Wishlist::select('audio_id')->where('IOSId','=',$IOSId)->get();
    $IOS_wishlist_ids_count = Wishlist::select('audio_id')->where('IOSId','=',$IOSId)->count();
  }else{
    $IOSId = 0;
    $IOS_wishlist_ids = 0;
    $IOS_wishlist_ids_count = 0;
  }

  if(!empty($user_id) ){
      /*channel videos*/
      $user_id = $request->user_id;
      /*channel videos*/
      $user_Wishlist_ids = Wishlist::select('audio_id')->where('user_id','=',$user_id)->get();
      $user_Wishlist_ids_count = Wishlist::select('audio_id')->where('user_id','=',$user_id)->count();
      }else{
      /*channel videos*/
      $user_id = $request->user_id;
      $user_Wishlist_ids = 0;
      $user_Wishlist_ids_count = 0;
  }

   if ( $user_Wishlist_ids_count  > 0 && $IOS_wishlist_ids_count  > 0) {
    
  $Wishlist = array_merge($user_Wishlist_ids->toArray(), $IOS_wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

  foreach ($Wishlist as $key => $value1) {
    $k2[] = $value1['audio_id'];
  }

  $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
    $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
    $item['source'] = 'audio';
    return $item;
  });
  
  $response = array(
    'status' => "true",
    'audios'=> $audios,
  );
}else if ( $user_Wishlist_ids_count  > 0) {

  foreach ($user_Wishlist_ids as $key => $value1) {
    $k2[] = $value1['audio_id'];
  }

  $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
    $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
    $item['source'] = 'audio';
    return $item;
  });
  
  $response = array(
    'status' => "true",
    'audios'=> $audios,
  );
}elseif ( $IOS_wishlist_ids_count  > 0) {

  foreach ($IOS_wishlist_ids as $key => $value1) {
    $k2[] = $value1['audio_id'];
  }
  $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
    $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
    $item['source'] = 'audio';
    return $item;
  });

  $response = array(
    'status' => "true",
    'audios'=> $audios,
  );
}else{
  $response = array(
    'status' => "false",
    'audios'=> [],
  );
}


return response()->json($response, 200);

}



public function IOS_ShowLiveStream_wishlist(Request $request)
{

  $user_id = $request->user_id;
  $IOSId = $request->IOSId;

  if(!empty($IOSId) ){
    $IOSId = $request->IOSId;
    $IOS_wishlist_ids = Wishlist::select('livestream_id')->where('IOSId','=',$IOSId)->get();
    $IOS_wishlist_ids_count = Wishlist::select('livestream_id')->where('IOSId','=',$IOSId)->count();
  }else{
    $IOSId = 0;
    $IOS_wishlist_ids = 0;
    $IOS_wishlist_ids_count = 0;
  }

  if(!empty($user_id) ){
      /*channel videos*/
      $user_id = $request->user_id;
      /*channel videos*/
      $user_Wishlist_ids = Wishlist::select('livestream_id')->where('user_id','=',$user_id)->get();
      $user_Wishlist_ids_count = Wishlist::select('livestream_id')->where('user_id','=',$user_id)->count();
      }else{
      /*channel videos*/
      $user_id = $request->user_id;
      $user_Wishlist_ids = 0;
      $user_Wishlist_ids_count = 0;
  }

   if ( $user_Wishlist_ids_count  > 0 && $IOS_wishlist_ids_count  > 0) {
    
  $Wishlist = array_merge($user_Wishlist_ids->toArray(), $IOS_wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

  foreach ($Wishlist as $key => $value1) {
    $k2[] = $value1['livestream_id'];
  }

  $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
    $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
    return $item;
  });
  
  $response = array(
    'status' => "true",
    'live_stream'=> $live_stream,
  );
}else if ( $user_Wishlist_ids_count  > 0) {

  foreach ($user_Wishlist_ids as $key => $value1) {
    $k2[] = $value1['livestream_id'];
  }

  $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
    $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
    return $item;
  });
  
  $response = array(
    'status' => "true",
    'live_stream'=> $live_stream,
  );
}elseif ( $IOS_wishlist_ids_count  > 0) {

  foreach ($IOS_wishlist_ids as $key => $value1) {
    $k2[] = $value1['livestream_id'];
  }
  $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
    $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
    return $item;
  });

  $response = array(
    'status' => "true",
    'live_stream'=> $live_stream,
  );
}else{
  $response = array(
    'status' => "false",
    'live_stream'=> [],
  );
}


return response()->json($response, 200);
}


public function Android_ShowVideo_favorite(Request $request) {

  $user_id = $request->user_id;
  $andriodId = $request->andriodId;

  if(!empty($andriodId) ){
    $andriodId = $request->andriodId;
    $andriod_favorite_ids = Favorite::select('video_id')->where('andriodId','=',$andriodId)->get();
    $andriod_favorite_ids_count = Favorite::select('video_id')->where('andriodId','=',$andriodId)->count();

    $andriod_favorite_episode_ids = Favorite::select('episode_id')->where('andriodId','=',$andriodId)->get();
    $andriod_favorite_episode_ids_count = Favorite::select('episode_id')->where('andriodId','=',$andriodId)->count();

  }else{
    $andriodId = 0;
    $andriod_favorite_ids = [];
    $andriod_favorite_ids_count = 0;
    $andriod_favorite_episode_ids = [];
    $andriod_favorite_episode_ids_count = 0;
  }
  if(!empty($user_id) ){
    $user_id = $request->user_id;
    $user_favorite_ids = Favorite::select('video_id')->where('user_id',$user_id)->get();
    $user_favorite_ids_count = Favorite::select('video_id')->where('user_id',$user_id)->count();

    $user_favorite_episode_ids = Favorite::select('episode_id')->where('user_id',$user_id)->get();
    $user_favorite_episode_ids_count = Favorite::select('episode_id')->where('user_id',$user_id)->count();
    
   }else{
    $user_id = $request->user_id;
    $user_favorite_ids = [];
    $user_favorite_ids_count = 0;
    $user_favorite_episode_ids = [];
    $user_favorite_episode_ids_count = 0;
}

$k2 = [];
$k1 = [];


        if ( $user_favorite_ids_count  > 0 && $andriod_favorite_ids_count  > 0 || $user_favorite_episode_ids_count  > 0 && $user_favorite_episode_ids_count  > 0 ) {
          
        $Favorite = array_merge($user_favorite_ids->toArray(), $andriod_favorite_ids->toArray());

        $EpisodeFavorite = array_merge($user_favorite_episode_ids->toArray(), $andriod_favorite_episode_ids->toArray());


        foreach ($Favorite as $key => $value1) {
          $k2[] = $value1['video_id'];
        }

        $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['video_url'] = URL::to('/').'/storage/app/public/';
          $item['source'] = 'videos';
          return $item;
        });
        
          foreach ($EpisodeFavorite as $key => $Episodevalue1) {
            $k1[] = $Episodevalue1['episode_id'];
          }

          $episode_videos = Episode::whereIn('id',$k1)->orderBy('episode_order')->get()->map(function ($item) {
            $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
            $item['source'] = 'episode';
            return $item;
          });

        $response = array(
          'status' => "true",
          'channel_videos'=> $videos,
          'episode_videos'=> $episode_videos,
        );

      }else if ( $user_favorite_ids_count  > 0 || $user_favorite_episode_ids_count  > 0 ) {

        foreach ($user_favorite_ids as $key => $value1) {
          $k2[] = $value1['video_id'];
        }
        
        $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['video_url'] = URL::to('/').'/storage/app/public/';
          $item['source'] = 'videos';
          return $item;
        });
        
        foreach ($user_favorite_episode_ids as $key => $Episodevalue1) {
          $k1[] = $Episodevalue1['episode_id'];
        }
        
        $episode_videos = Episode::whereIn('id',$k1)->orderBy('episode_order')->get()->map(function ($item) {
          $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
          $item['source'] = 'episode';
          return $item;
        });

        $response = array(
          'status' => "true",
          'channel_videos'=> $videos,
          'episode_videos'=> $episode_videos,
        );
      }elseif ( $andriod_favorite_ids_count  > 0 ||  $andriod_favorite_episode_ids_count  > 0) {

        foreach ($andriod_favorite_ids as $key => $value1) {
          $k2[] = $value1['video_id'];
        }
        
        $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['video_url'] = URL::to('/').'/storage/app/public/';
          $item['source'] = 'videos';
          return $item;
        });
        
                
        foreach ($andriod_favorite_episode_ids as $key => $Episodevalue1) {
          $k1[] = $Episodevalue1['episode_id'];
        }
        
        $episode_videos = Episode::whereIn('id',$k1)->orderBy('episode_order')->get()->map(function ($item) {
          $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
          $item['source'] = 'episode';
          return $item;
        });

        $response = array(
          'status' => "true",
          'channel_videos'=> $videos,
          'episode_videos'=> $episode_videos,
        );
      }else{
        $response = array(
          'status' => "false",
          'channel_videos'=> [],
          'episode_videos'=> [],
        );
      }

      return response()->json($response, 200);

  }

  public function Android_ShowEpisode_favorite(Request $request) {

    $user_id = $request->user_id;
    $andriodId = $request->andriodId;
  
    if(!empty($andriodId) ){
      $andriodId = $request->andriodId;
      $andriod_favorite_ids = Favorite::select('episode_id')->where('andriodId','=',$andriodId)->get();
      $andriod_favorite_ids_count = Favorite::select('episode_id')->where('andriodId','=',$andriodId)->count();
    }else{
      $andriodId = 0;
      $andriod_favorite_ids = 0;
      $andriod_favorite_ids_count = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
      /*channel videos*/
      $user_favorite_ids = Favorite::select('episode_id')->where('user_id',$user_id)->get();
      $user_favorite_ids_count = Favorite::select('episode_id')->where('user_id',$user_id)->count();
     }else{
      $user_id = $request->user_id;
      $user_favorite_ids = 0;
      $user_favorite_ids_count = 0;
  }
   
          if ( $user_favorite_ids_count  > 0 && $andriod_favorite_ids_count  > 0) {
            
          $Favorite = array_merge($user_favorite_ids->toArray(), $andriod_favorite_ids->toArray()/*, $arrayN, $arrayN*/);
  
          foreach ($Favorite as $key => $value1) {
            $k2[] = $value1['episode_id'];
          }
  
          $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
            $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
            $item['source'] = 'episode';
            return $item;
          });
  
          $response = array(
            'status' => "true",
            'episode'=> $episode,
          );
        }else if ( $user_favorite_ids_count  > 0) {
  
          foreach ($user_favorite_ids as $key => $value1) {
            $k2[] = $value1['episode_id'];
          }
          
          $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
            $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
            $item['source'] = 'episode';
            return $item;
          });
  
          $response = array(
            'status' => "true",
            'episode'=> $episode,
          );
        }elseif ( $andriod_favorite_ids_count  > 0) {
  
          foreach ($andriod_favorite_ids as $key => $value1) {
            $k2[] = $value1['episode_id'];
          }
          
          $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
            $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
            $item['source'] = 'episode';
            return $item;
          });
  
          $response = array(
            'status' => "true",
            'episode'=> $episode,
          );
        }else{
          $response = array(
            'status' => "false",
            'episode'=> [],
          );
        }
  
        return response()->json($response, 200);
  
    }


    public function Android_ShowAudio_favorite(Request $request) {

      $user_id = $request->user_id;
      $andriodId = $request->andriodId;
    
      if(!empty($andriodId) ){
        $andriodId = $request->andriodId;
        $andriod_favorite_ids = Favorite::select('audio_id')->where('andriodId','=',$andriodId)->get();
        $andriod_favorite_ids_count = Favorite::select('audio_id')->where('andriodId','=',$andriodId)->count();
      }else{
        $andriodId = 0;
        $andriod_favorite_ids = 0;
        $andriod_favorite_ids_count = 0;
      }
      if(!empty($user_id) ){
        $user_id = $request->user_id;
        /*channel videos*/
        $user_favorite_ids = Favorite::select('audio_id')->where('user_id',$user_id)->get();
        $user_favorite_ids_count = Favorite::select('audio_id')->where('user_id',$user_id)->count();
       }else{
        $user_id = $request->user_id;
        $user_favorite_ids = 0;
        $user_favorite_ids_count = 0;
    }
     
            if ( $user_favorite_ids_count  > 0 && $andriod_favorite_ids_count  > 0) {
              
            $Favorite = array_merge($user_favorite_ids->toArray(), $andriod_favorite_ids->toArray()/*, $arrayN, $arrayN*/);
    
            foreach ($Favorite as $key => $value1) {
              $k2[] = $value1['audio_id'];
            }
    
            $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
              $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
              $item['source'] = 'audio';
              return $item;
            });
            
            $response = array(
              'status' => "true",
              'audios'=> $audios,
            );
          }else if ( $user_favorite_ids_count  > 0) {
    
            foreach ($user_favorite_ids as $key => $value1) {
              $k2[] = $value1['audio_id'];
            }
            
            $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
              $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
              $item['source'] = 'audio';
              return $item;
            });
            
            $response = array(
              'status' => "true",
              'audios'=> $audios,
            );
          }elseif ( $andriod_favorite_ids_count  > 0) {
    
            foreach ($andriod_favorite_ids as $key => $value1) {
              $k2[] = $value1['audio_id'];
            }
            
            $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
              $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
              $item['source'] = 'audio';
              return $item;
            });
            
            $response = array(
              'status' => "true",
              'audios'=> $audios,
            );
          }else{
            $response = array(
              'status' => "false",
              'audios'=> [],
            );
          }
    
          return response()->json($response, 200);
    
      }


      public function Android_ShowLiveStream_favorite(Request $request) {

        $user_id = $request->user_id;
        $andriodId = $request->andriodId;
      
        if(!empty($andriodId) ){
          $andriodId = $request->andriodId;
          $andriod_favorite_ids = Favorite::select('live_id')->where('andriodId','=',$andriodId)->get();
          $andriod_favorite_ids_count = Favorite::select('live_id')->where('andriodId','=',$andriodId)->count();
        }else{
          $andriodId = 0;
          $andriod_favorite_ids = 0;
          $andriod_favorite_ids_count = 0;
        }
        if(!empty($user_id) ){
          $user_id = $request->user_id;
          /*channel videos*/
          $user_favorite_ids = Favorite::select('live_id')->where('user_id',$user_id)->get();
          $user_favorite_ids_count = Favorite::select('live_id')->where('user_id',$user_id)->count();
         }else{
          $user_id = $request->user_id;
          $user_favorite_ids = 0;
          $user_favorite_ids_count = 0;
      }
       
              if ( $user_favorite_ids_count  > 0 && $andriod_favorite_ids_count  > 0) {
                
              $Favorite = array_merge($user_favorite_ids->toArray(), $andriod_favorite_ids->toArray()/*, $arrayN, $arrayN*/);
      
              foreach ($Favorite as $key => $value1) {
                $k2[] = $value1['live_id'];
              }
      
              $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                return $item;
              });
            
              $response = array(
                'status' => "true",
                'live_stream'=> $live_stream,
              );
            }else if ( $user_favorite_ids_count  > 0) {
      
              foreach ($user_favorite_ids as $key => $value1) {
                $k2[] = $value1['live_id'];
              }
              
              $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                return $item;
              });
            
              $response = array(
                'status' => "true",
                'live_stream'=> $live_stream,
              );
            }elseif ( $andriod_favorite_ids_count  > 0) {
      
              foreach ($andriod_favorite_ids as $key => $value1) {
                $k2[] = $value1['live_id'];
              }
              
              $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                return $item;
              });
            
              $response = array(
                'status' => "true",
                'live_stream'=> $live_stream,
              );
            }else{
              $response = array(
                'status' => "false",
                'videos'=> [],
              );
            }
      
            return response()->json($response, 200);
      
        }
      

        // IOS Page Favoruite  


        
public function IOS_ShowVideo_favorite(Request $request) {

  $user_id = $request->user_id;
  $IOSId = $request->IOSId;

  if(!empty($IOSId) ){
    $IOSId = $request->IOSId;
    $IOSfavorite_ids = Favorite::select('video_id')->where('IOSId','=',$IOSId)->get();
    $IOSfavorite_ids_count = Favorite::select('video_id')->where('IOSId','=',$IOSId)->count();
  }else{
    $IOSId = 0;
    $IOSfavorite_ids = 0;
    $IOSfavorite_ids_count = 0;
  }
  if(!empty($user_id) ){
    $user_id = $request->user_id;
    /*channel videos*/
    $user_favorite_ids = Favorite::select('video_id')->where('user_id',$user_id)->get();
    $user_favorite_ids_count = Favorite::select('video_id')->where('user_id',$user_id)->count();
   }else{
    $user_id = $request->user_id;
    $user_favorite_ids = 0;
    $user_favorite_ids_count = 0;
}
 
        if ( $user_favorite_ids_count  > 0 && $IOSfavorite_ids_count  > 0) {
          
        $Favorite = array_merge($user_favorite_ids->toArray(), $IOSfavorite_ids->toArray()/*, $arrayN, $arrayN*/);

        foreach ($Favorite as $key => $value1) {
          $k2[] = $value1['video_id'];
        }

        $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['video_url'] = URL::to('/').'/storage/app/public/';
          $item['source'] = 'videos';
          return $item;
        });
        
        $response = array(
          'status' => "true",
          'videos'=> $videos,
        );
      }else if ( $user_favorite_ids_count  > 0) {

        foreach ($user_favorite_ids as $key => $value1) {
          $k2[] = $value1['video_id'];
        }
        
        $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['video_url'] = URL::to('/').'/storage/app/public/';
          $item['source'] = 'videos';
          return $item;
        });
        
        $response = array(
          'status' => "true",
          'videos'=> $videos,
        );
      }elseif ( $IOSfavorite_ids_count  > 0) {

        foreach ($IOSfavorite_ids as $key => $value1) {
          $k2[] = $value1['video_id'];
        }
        
        $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          $item['video_url'] = URL::to('/').'/storage/app/public/';
          $item['source'] = 'videos';
          return $item;
        });
        
        $response = array(
          'status' => "true",
          'videos'=> $videos,
        );
      }else{
        $response = array(
          'status' => "false",
          'videos'=> [],
        );
      }

      return response()->json($response, 200);

  }

  public function IOS_ShowEpisode_favorite(Request $request) {

    $user_id = $request->user_id;
    $IOSId = $request->IOSId;
  
    if(!empty($IOSId) ){
      $IOSId = $request->IOSId;
      $IOSfavorite_ids = Favorite::select('episode_id')->where('IOSId','=',$IOSId)->get();
      $IOSfavorite_ids_count = Favorite::select('episode_id')->where('IOSId','=',$IOSId)->count();
    }else{
      $IOSId = 0;
      $IOSfavorite_ids = 0;
      $IOSfavorite_ids_count = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
      /*channel videos*/
      $user_favorite_ids = Favorite::select('episode_id')->where('user_id',$user_id)->get();
      $user_favorite_ids_count = Favorite::select('episode_id')->where('user_id',$user_id)->count();
     }else{
      $user_id = $request->user_id;
      $user_favorite_ids = 0;
      $user_favorite_ids_count = 0;
  }
   
          if ( $user_favorite_ids_count  > 0 && $IOSfavorite_ids_count  > 0) {
            
          $Favorite = array_merge($user_favorite_ids->toArray(), $IOSfavorite_ids->toArray()/*, $arrayN, $arrayN*/);
  
          foreach ($Favorite as $key => $value1) {
            $k2[] = $value1['episode_id'];
          }
  
          $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
            $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
            $item['source'] = 'episode';
            return $item;
          });
  
          $response = array(
            'status' => "true",
            'episode'=> $episode,
          );
        }else if ( $user_favorite_ids_count  > 0) {
  
          foreach ($user_favorite_ids as $key => $value1) {
            $k2[] = $value1['episode_id'];
          }
          
          $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
            $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
            $item['source'] = 'episode';
            return $item;
          });
  
          $response = array(
            'status' => "true",
            'episode'=> $episode,
          );
        }elseif ( $IOSfavorite_ids_count  > 0) {
  
          foreach ($IOSfavorite_ids as $key => $value1) {
            $k2[] = $value1['episode_id'];
          }
          
          $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
            $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
            $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
            $item['source'] = 'episode';
            return $item;
          });
  
          $response = array(
            'status' => "true",
            'episode'=> $episode,
          );
        }else{
          $response = array(
            'status' => "false",
            'episode'=> [],
          );
        }
  
        return response()->json($response, 200);
  
    }


    public function IOS_ShowAudio_favorite(Request $request) {

      $user_id = $request->user_id;
      $IOSId = $request->IOSId;
    
      if(!empty($IOSId) ){
        $IOSId = $request->IOSId;
        $IOSfavorite_ids = Favorite::select('audio_id')->where('IOSId','=',$IOSId)->get();
        $IOSfavorite_ids_count = Favorite::select('audio_id')->where('IOSId','=',$IOSId)->count();
      }else{
        $IOSId = 0;
        $IOSfavorite_ids = 0;
        $IOSfavorite_ids_count = 0;
      }
      if(!empty($user_id) ){
        $user_id = $request->user_id;
        /*channel videos*/
        $user_favorite_ids = Favorite::select('audio_id')->where('user_id',$user_id)->get();
        $user_favorite_ids_count = Favorite::select('audio_id')->where('user_id',$user_id)->count();
       }else{
        $user_id = $request->user_id;
        $user_favorite_ids = 0;
        $user_favorite_ids_count = 0;
    }
     
            if ( $user_favorite_ids_count  > 0 && $IOSfavorite_ids_count  > 0) {
              
            $Favorite = array_merge($user_favorite_ids->toArray(), $IOSfavorite_ids->toArray()/*, $arrayN, $arrayN*/);
    
            foreach ($Favorite as $key => $value1) {
              $k2[] = $value1['audio_id'];
            }
    
            $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
              $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
              $item['source'] = 'audio';
              return $item;
            });
            
            $response = array(
              'status' => "true",
              'audios'=> $audios,
            );
          }else if ( $user_favorite_ids_count  > 0) {
    
            foreach ($user_favorite_ids as $key => $value1) {
              $k2[] = $value1['audio_id'];
            }
            
            $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
              $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
              $item['source'] = 'audio';
              return $item;
            });
            
            $response = array(
              'status' => "true",
              'audios'=> $audios,
            );
          }elseif ( $IOSfavorite_ids_count  > 0) {
    
            foreach ($IOSfavorite_ids as $key => $value1) {
              $k2[] = $value1['audio_id'];
            }
            
            $audios = Audio::whereIn('id',$k2)->get()->map(function ($item) {
              $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
              $item['source'] = 'audio';
              return $item;
            });
            
            $response = array(
              'status' => "true",
              'audios'=> $audios,
            );
          }else{
            $response = array(
              'status' => "false",
              'audios'=> [],
            );
          }
    
          return response()->json($response, 200);
    
      }


      public function IOS_ShowLiveStream_favorite(Request $request) {

        $user_id = $request->user_id;
        $IOSId = $request->IOSId;
      
        if(!empty($IOSId) ){
          $IOSId = $request->IOSId;
          $IOSfavorite_ids = Favorite::select('live_id')->where('IOSId','=',$IOSId)->get();
          $IOSfavorite_ids_count = Favorite::select('live_id')->where('IOSId','=',$IOSId)->count();
        }else{
          $IOSId = 0;
          $IOSfavorite_ids = 0;
          $IOSfavorite_ids_count = 0;
        }
        if(!empty($user_id) ){
          $user_id = $request->user_id;
          /*channel videos*/
          $user_favorite_ids = Favorite::select('live_id')->where('user_id',$user_id)->get();
          $user_favorite_ids_count = Favorite::select('live_id')->where('user_id',$user_id)->count();
         }else{
          $user_id = $request->user_id;
          $user_favorite_ids = 0;
          $user_favorite_ids_count = 0;
      }
       
              if ( $user_favorite_ids_count  > 0 && $IOSfavorite_ids_count  > 0) {
                
              $Favorite = array_merge($user_favorite_ids->toArray(), $IOSfavorite_ids->toArray()/*, $arrayN, $arrayN*/);
      
              foreach ($Favorite as $key => $value1) {
                $k2[] = $value1['live_id'];
              }
      
              $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                return $item;
              });
            
              $response = array(
                'status' => "true",
                'live_stream'=> $live_stream,
              );
            }else if ( $user_favorite_ids_count  > 0) {
      
              foreach ($user_favorite_ids as $key => $value1) {
                $k2[] = $value1['live_id'];
              }
              
              $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                return $item;
              });
            
              $response = array(
                'status' => "true",
                'live_stream'=> $live_stream,
              );
            }elseif ( $IOSfavorite_ids_count  > 0) {
      
              foreach ($IOSfavorite_ids as $key => $value1) {
                $k2[] = $value1['live_id'];
              }
              
              $live_stream = LiveStream::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
                $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                return $item;
              });
            
              $response = array(
                'status' => "true",
                'live_stream'=> $live_stream,
              );
            }else{
              $response = array(
                'status' => "false",
                'videos'=> [],
              );
            }
      
            return response()->json($response, 200);
      
        }
        public function social_network_setting(Request $request) {

          try {
            $socail_networl_setting = Setting::select('facebook_page_id','google_page_id','twitter_page_id','instagram_page_id',
                    'linkedin_page_id','whatsapp_page_id','skype_page_id','youtube_page_id','email_page_id')->get();
            $response = array(
              'status' => "true",
              'socail_networl_setting'=> $socail_networl_setting,
            );
          } catch (\Throwable $th) {
            //throw $th;
            $response = array(
              'status' => "true",
              'socail_networl_setting'=> [],
            );
          }
          return response()->json($response, 200);

        }

        public function contact_email_setting(Request $request) {

          try {
            $contact_email_setting = Setting::select('system_email','google_tracking_id','google_oauth_key','coupon_status')->get();
            $response = array(
              'status' => "true",
              'contact_email_setting'=> $contact_email_setting,
            );
          } catch (\Throwable $th) {
            //throw $th;
            $response = array(
              'status' => "true",
              'contact_email_setting'=> [],
            );
          }
          return response()->json($response, 200);

        }

        
  public function tv_livestreams()
  {
    try {

        $check_Kidmode = 0 ;

        $data =  LiveStream::where('active','=',1)->orderBy('created_at', 'desc')->get()->map(function ($item) {
          $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
          return $item;
        });

         
        $response = array(
          'status'  => 'true',
          'Message' => 'Livestreams videos Retrieved successfully',
          'livestreams' => $data
        );

    } catch (\Throwable $th) {

      $response = array(
        'status'  => 'false',
        'Message' => $th->getMessage(),
      );
      
    }

    
        
        return response()->json($response, 200);
  }

  
  public function episodedetailsIOS(Request $request){

    $episodeid = $request->episodeid;


    $episode = Episode::where('id',$episodeid)->orderBy('episode_order')->get()->map(function ($item) use ($request){
       $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
       $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
       $item['shareurl'] = URL::to('/episode/') . '/' . Series::where('id',$item->series_id)->pluck('slug')->first() . '/' . $item->slug;
       $item['m3u8url'] = URL::to('/storage/app/public/') . '/' . $item->path . '.m3u8';
       
       $plans_ads_enable = $this->plans_ads_enable($request->user_id);

       if($plans_ads_enable == 1){

        $item['episode_ads_url'] =  AdsEvent::Join('advertisements','advertisements.id','=','ads_events.ads_id')
                                  // ->whereDate('start', '=', Carbon\Carbon::now()->format('Y-m-d'))
                                  // ->whereTime('start', '<=', $current_time)
                                  // ->whereTime('end', '>=', $current_time)
                                  ->where('ads_events.status',1)
                                  ->where('advertisements.status',1)
                                  ->where('advertisements.id',$item->episode_ads)
                                  ->pluck('ads_path')->first();
                        
      }else{
        $item['episode_ads_url'] = " ";
      }
      return $item;
      
     });

    if($request->user_id != ''){
      $user_id = $request->user_id;
      $cnt = Wishlist::select('episode_id')->where('user_id','=',$user_id)->where('episode_id','=',$request->episodeid)->count();
      $wishliststatus =  ($cnt == 1) ? "true" : "false";
    }else{
      $wishliststatus = 'false';
    }
    if(!empty($request->user_id) && $request->user_id != '' ){
      $user_id = $request->user_id;
      $cnt = Watchlater::select('episode_id')->where('user_id','=',$user_id)->where('episode_id','=',$request->episodeid)->count();
      $watchlaterstatus =  ($cnt == 1) ? "true" : "false";
    }else{
      $watchlaterstatus = 'false';
    }


    if($request->andriodId != ''){
      $andriodId = $request->andriodId;
      $cnt = Wishlist::select('episode_id')->where('andriodId','=',$andriodId)->where('episode_id','=',$request->episodeid)->count();
      $andriod_wishliststatus =  ($cnt == 1) ? "true" : "false";
    }else{
      $andriod_wishliststatus = 'false';
      // $userrole = '';
    }
    if(!empty($request->andriodId) && $request->andriodId != '' ){
      $andriodId = $request->andriodId;
      $cnt = Watchlater::select('episode_id')->where('andriodId','=',$andriodId)->where('episode_id','=',$request->episodeid)->count();
      $andriod_watchlaterstatus =  ($cnt == 1) ? "true" : "false";
    }else{
      $andriod_watchlaterstatus = 'false';
    }
    if($request->user_id != ''){
    $like_data = LikeDisLike::where("episode_id","=",$episodeid)->where("user_id","=",$user_id)->where("liked","=",1)->count();
    $dislike_data = LikeDisLike::where("episode_id","=",$episodeid)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
    $favoritestatus = Favorite::where("episode_id","=",$episodeid)->where("user_id","=",$user_id)->count();
    $like = ($like_data == 1) ? "true" : "false";
    $dislike = ($dislike_data == 1) ? "true" : "false";
    $favorite = ($favoritestatus > 0) ? "true" : "false";

  }else{
    $like = 'false';
    $dislike = 'false';
    $favorite = 'false';
  }

  if($request->IOSId != ''){
    $like_data = LikeDisLike::where("episode_id","=",$episodeid)->where("IOSId","=",$IOSId)->where("liked","=",1)->count();
    $dislike_data = LikeDisLike::where("episode_id","=",$episodeid)->where("IOSId","=",$IOSId)->where("disliked","=",1)->count();
    $IOS_favoritestatus = Favorite::where("episode_id","=",$episodeid)->where("IOSId","=",$IOSId)->count();
    $IOS_like = ($like_data == 1) ? "true" : "false";
    $IOS_dislike = ($dislike_data == 1) ? "true" : "false";
    $IOS_favorite = ($IOS_favoritestatus > 0) ? "true" : "false";
    // $userrole = User::find($user_id)->pluck('role');

  }else{
    $IOS_like = 'false';
    $IOS_dislike = 'false';
    $IOS_favorite = 'false';
    // $userrole = '';
  }
  if(!empty($request->user_id)){

  if(!empty($request->user_id)){
    $user_id = $request->user_id;
    $users = User::where('id','=',$user_id)->first();
    $userrole = @$users->role;
  }else{
    $userrole = '';
  }

  $series_id = Episode::where('id','=',$episodeid)->pluck('series_id');

  $season_id = Episode::where('id','=',$episodeid)->pluck('season_id');



  if(!empty($series_id) && count($series_id) > 0){
    $series_id = $series_id[0];

  $main_genre = SeriesCategory::Join('genres','genres.id','=','series_categories.category_id')
  ->where('series_categories.series_id',$series_id)->get('name');

  $languages = SeriesLanguage::Join('languages','languages.id','=','series_languages.language_id')
  ->where('series_languages.series_id',$series_id)->get('name');
  }

  if(!empty($series_id) && !empty($main_genre)){
  foreach($main_genre as $value){
    $category[] = $value['name'];
  }
}else{
  $category = [];
}
  if(!empty($category)){
  $main_genre = implode(",",$category);
  }else{
    $main_genre = "";
  }

  if(!empty($series_id) && !empty($languages)){
  foreach($languages as $value){
    $language[] = $value['name'];
  }
}else{
  $language = "";
}

  if(!empty($language)){
  $languages = implode(",",$language);
  }else{
    $languages = "";
  }
    if (!empty($episode) && count($episode) > 0) {
        $season = SeriesSeason::where('id',$episode[0]->season_id)->first();
        $ppv_exist = PpvPurchase::where('user_id',$user_id)
        ->where('series_id',$episode[0]->series_id)
        ->count();
  } else {
      $ppv_exist = 0;
      $season = null;
  }
  if ($ppv_exist > 0) {

        $ppv_video_status = "can_view";

    } else if (!empty(@$season) && @$season->access != "ppv" || @$season->access == "free") {
      $ppv_video_status = "can_view";
    }
    else {
          $ppv_video_status = "pay_now";
    }

    if(!empty($season_id) ){
      $Season = SeriesSeason::where('series_id',$series_id)->where('id',$season_id)->get();
    }

  }else{
    $series_id = Episode::where('id','=',$episodeid)->pluck('series_id');

    $season_id = Episode::where('id','=',$episodeid)->pluck('season_id');

    $season = SeriesSeason::where('id',$season_id)->first();

    if (!empty(@$season) && @$season->access != "ppv" || @$season->access == "free") {
      $ppv_video_status = "can_view";
    }
    else {
          $ppv_video_status = "pay_now";
    }

    if(!empty($season_id) ){
      $Season = SeriesSeason::where('series_id',$series_id)->where('id',$season_id)->get();
    }
    $userrole = 'guest';

    if(!empty($series_id) && count($series_id) > 0){
      $series_id = $series_id[0];
  
    $main_genre = SeriesCategory::Join('genres','genres.id','=','series_categories.category_id')
    ->where('series_categories.series_id',$series_id)->get('name');
  
    $languages = SeriesLanguage::Join('languages','languages.id','=','series_languages.language_id')
    ->where('series_languages.series_id',$series_id)->get('name');
    }
  
    if(!empty($series_id) && !empty($main_genre)){
    foreach($main_genre as $value){
      $category[] = $value['name'];
    }
  }else{
    $category = [];
  }
    if(!empty($category)){
    $main_genre = implode(",",$category);
    }else{
      $main_genre = "";
    }
  
    if(!empty($series_id) && !empty($languages)){
    foreach($languages as $value){
      $language[] = $value['name'];
    }
  }else{
    $language = "";
  }
  
    if(!empty($language)){
    $languages = implode(",",$language);
    }else{
      $languages = "";
    }
  }

    $response = array(
      'status'=>'true',
      'message'=>'success',
      'episode' => $episode,
      // 'Season_Name' => $Season_Name,
      'season' => $Season,
      'ppv_video_status' => $ppv_video_status,
      'wishlist' => $wishliststatus,
      'watchlater' => $watchlaterstatus,
      'userrole' => $userrole,
      'favorite' => $favorite,
      'like' => $like,
      'dislike' => $dislike,
      'main_genre' =>preg_replace( "/\r|\n/", "", $main_genre ),
      'languages' => $languages,
      'IOS_watchlaterstatus' => $IOS_watchlaterstatus,
      'IOS_wishliststatus' => $IOS_wishliststatus,
      'IOS_favorite' => $IOS_favorite,
      'IOS_dislike' => $IOS_dislike,
      'IOS_like' => $IOS_like,

    );
    return response()->json($response, 200);
  }


  public function enable_dark_light_mode(Request $request){

      try {
        //code...
        $SiteTheme  = SiteTheme::first();
        $SiteTheme->theme_mode = $request->theme_mode;
        $SiteTheme->save();

        $Site_theme_setting = SiteTheme::get()->map(function ($item) {
          $item['dark_mode_logo_url'] = URL::to('/public/uploads/settings/'.$item->dark_mode_logo);
          $item['light_mode_logo_url'] = URL::to('/public/uploads/settings/'.$item->light_mode_logo);
          return $item;
        });
        // print_r($SiteTheme);exit;

        $response = array(
          'status'=>'true',
          'SiteTheme' => $SiteTheme,
          'Site_theme_setting' => $Site_theme_setting,
        );

      } catch (\Throwable $th) {
        throw $th;

        $response = array(
          'status'=>'false',
        );
      }

    return response()->json($response, 200);

  }

  
  public function AudioMYPlaylist(Request $request){

    try {
      $Setting = Setting::first();
            
      $path = URL::to('/').'/public/uploads/images/';
      $image = $request->image;

      if($image != '') {
          if($image != ''  && $image != null){
              $file_old = $path.$image;
              if (file_exists($file_old)){
                    unlink($file_old);
              }
          }
          $file = $image;
          $file->move(public_path()."/uploads/images/", $file->getClientOriginalName());
          $image  = URL::to('/').'/public/uploads/images/'.$file->getClientOriginalName();

      } else {
          $image  = URL::to('/').'/public/uploads/images/'.$Setting->default_video_image;
      }

      $MyPlaylist  = new MyPlaylist();
      $MyPlaylist->user_id = $request->user_id;
      $MyPlaylist->title = $request->title;
      $MyPlaylist->slug = str_replace(" ", "-", $request->title);
      $MyPlaylist->image = $image;
      $MyPlaylist->save();
      $id = $MyPlaylist->id;
      // print_r($id);exit;
      $response = array(
        'status'=>'true',
        'message' => 'Created Audio Playlist',
        'MyPlaylist_id' => $id ,
        'Playlist' => MyPlaylist::where('id',$id)->first() ,

      );

    } catch (\Throwable $th) {
      throw $th;

      $response = array(
        'status'=>'false',
        'message' => 'Not Created Audio Playlist',
      );
    }

  return response()->json($response, 200);

}



public function AddAudioPlaylist(Request $request){

  try {
    $Setting = Setting::first();
    $AudioUserPlaylist_count = AudioUserPlaylist::where('user_id',$request->user_id)
    ->where('playlist_id',$request->playlist_id)->where('audio_id',$request->audio_id)->count();
    if($AudioUserPlaylist_count == 0){
      $AudioUserPlaylist  = new AudioUserPlaylist();
      $AudioUserPlaylist->user_id = $request->user_id;
      $AudioUserPlaylist->playlist_id = $request->playlist_id;
      $AudioUserPlaylist->audio_id = $request->audio_id ;
      $AudioUserPlaylist->save();
      $response = array(
        'status'=>'true',
        'message' => 'Added Audio to Playlist',
      );
    }else{
      $response = array(
        'status'=>'false',
        'message' => 'This is already in your playlist',
      );
    }

  } catch (\Throwable $th) {
    throw $th;

    $response = array(
      'status'=>'false',
      'message' => 'Not Added Audio to Playlist',
    );
  }

return response()->json($response, 200);

}


public function MyAudioPlaylist(Request $request){

  try {

    $Setting = Setting::first();

    $MyPlaylist  = MyPlaylist::where('user_id',$request->user_id)->get();

    $response = array(
      'status'=>'true',
      'MyPlaylist' => $MyPlaylist,
      'setting' => $Setting,

    );

  } catch (\Throwable $th) {
    throw $th;

    $response = array(
      'status'=>'false',
      'MyPlaylist' => [],
      'setting' => [],

    );
  }

return response()->json($response, 200);

}



public function PlaylistAudio(Request $request){

  try {

    $Setting = Setting::first();

    $MyPlaylist  = MyPlaylist::where('id',$request->playlist_id)->where('user_id',$request->user_id)->get();

    $playlist_audio =
    Audio::Join('audio_user_playlist','audio_user_playlist.audio_id','=','audio.id')
   ->where('audio_user_playlist.user_id',$request->user_id)
   ->where('audio_user_playlist.playlist_id',$request->playlist_id)
   ->orderBy('audio_user_playlist.created_at', 'desc')->get()->map(function ($item) {
    $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
    $item['source'] = 'audio';
    return $item;
  });

    $response = array(
      'status'=>'true',
      'playlist_name' => MyPlaylist::where('id',$request->playlist_id)->where('user_id',$request->user_id)->pluck('title')->first(),
      'playlist_audio' => $playlist_audio,
      'MyPlaylist' => $MyPlaylist,
    );

  } catch (\Throwable $th) {
    throw $th;

    $response = array(
      'status'=>'false',
      'playlist_audio' => [],
    );
  }

return response()->json($response, 200);

}


public function VideoPlaylist(Request $request){

  try {

    $Setting = Setting::first();

    $VideoPlaylist  = AdminVideoPlaylist::where('id',$request->playlist_id)->get();

    $playlist_Video =
    Video::Join('video_playlist','video_playlist.video_id','=','videos.id')
   ->where('video_playlist.playlist_id',$request->playlist_id)
   ->orderBy('video_playlist.created_at', 'desc')->get() ;

    $response = array(
      'status'=>'true',
      'playlist_Video' => $playlist_Video,
      'VideoPlaylist' => $VideoPlaylist,

    );

  } catch (\Throwable $th) {
    throw $th;

    $response = array(
      'status'=>'false',
      'playlist_Video' => [],
      'VideoPlaylist' => [],

    );
  }

return response()->json($response, 200);

}


public function RemoveAudioPlaylist(Request $request){

  try {

    $Setting = Setting::first();

    AudioUserPlaylist::where('user_id',$request->user_id)->where('playlist_id',$request->playlist_id)
    ->where('audio_id',$request->audio_id)->delete();

    $response = array(
      'status'=>'true',
      'message' => 'Removed Audio to Playlist',
    );

  } catch (\Throwable $th) {
    throw $th;

    $response = array(
      'status'=>'false',
      'message' => 'Not Added Audio to Playlist',
    );
  }

return response()->json($response, 200);

}

public function Remove_Playlist(Request $request){
  try {

      $MyPlaylist = MyPlaylist::where('user_id',$request->user_id)->get();
      AudioUserPlaylist::where('user_id',$request->user_id)->where('playlist_id',$request->playlist_id)->delete();
      $MyPlaylist = MyPlaylist::where('user_id',$request->user_id)->where('id', $request->playlist_id)->delete();

      $response = array(
        'status'=>'true',
        'message' => 'Removed  Playlist',
      );

  } catch (\Throwable $th) {
      throw $th;
      $data = [];

      $response = array(
        'status'=>'false',
        'message' => 'Not Removed  Playlist',
      );
    }

return response()->json($response, 200);

}


public function IOSSocialUser(Request $request) {
  /*Parameters*/
  $input = $request->all();
  $username = $input['username'];
  $email = $input['email'];
  $user_url = $input['user_url'];
  $login_type = $input['login_type'];//Facebook or Google


  /*Parameters*/
  /*Profile image move to avatar folder*/
  if($user_url != ''){
    $name = $username.".jpg";
    //local site
    //$path = $_SERVER['DOCUMENT_ROOT'].'/flicknexs/public/uploads/avatars'.$name;
    //live site
    $path = $_SERVER['DOCUMENT_ROOT'].'/public/uploads/avatars/'.$name;
        $arrContextOptions=array(
      "ssl"=>array(
        "verify_peer"=>false,
        "verify_peer_name"=>false,
      ),
    );
    $contents = file_get_contents($user_url, false, stream_context_create($arrContextOptions));
       file_put_contents($path, $contents);

  }else{
    $name = '';
  }

  if($login_type == 'facebook'){ //Facebook
    // $check_exists = User::where('email', '=', $email)->where('user_type', '=', $login_type)->count();
    $check_exists = User::where('email', '=', $email)->count();
    if($check_exists > 0){//Login
      $user_details = User::where('email', '=', $email)->get();
      $response = array(
        'status'      =>'true',
        'message'     =>'Login Success',
        'user_details'=>$user_details
      );
    }else{//Signup
      $data = array(
        'username' =>$username,
        'email'    =>$email,
        'user_type'=>$login_type,
        'avatar'   =>$name,
        'active'   => 1 ,
        'role'     =>'registered',
        'password' =>'null'
      );

      $user = new User;
      $user->insert($data);
      $user_details = User::where('username', '=', $username)->get();
      $response = array(
        'status'       =>'true',
        'message'      =>'Account Created ',
        'user_details' => $user_details
      );
    }
  }
  if($login_type == 'google'){ //Google
    // $check_exists = User::where('email', '=', $email)->where('user_type', '=', $login_type)->count();
    $check_exists = User::where('email', '=', $email)->count();
    if($check_exists > 0) {//Login
      $user_details = User::where('email', '=', $email)->get();
      $response = array(
        'status'      =>'true',
        'message'     =>'Login Success',
        'user_details'=>$user_details
      );
    }else{//Signup
      $data = array(
        'username' =>$username,
        'email'    =>$email,
        'user_type'=>$login_type,
        'avatar'   =>$name,
        'active'   => 1 ,
        'role'     =>'registered',
        'password' =>'null'
      );

      $user = new User;
      $user->insert($data);
      $user_details = User::where('username', '=', $username)->get();
      $response = array(
        'status'       =>'true',
        'message'      =>'Account Created ',
        'user_details' => $user_details
      );
    }
  }

  if($login_type == 'apple'){ //Apple
    // $check_exists = User::where('email', '=', $email)->where('user_type', '=', $login_type)->count();
    $check_exists = User::where('email', '=', $email)->count();
    if($check_exists > 0){//Login
      $user_details = User::where('email', '=', $email)->get();
      $response = array(
        'status'      =>'true',
        'message'     =>'Login Success',
        'user_details'=>$user_details
      );
    }else{//Signup
      $data = array(
        'username' =>$username,
        'email'    =>$email,
        'user_type'=>$login_type,
        'avatar'   =>$name,
        'active'   => 1 ,
        'role'     =>'registered',
        'password' =>'null'
      );

      $user = new User;
      $user->insert($data);
      $user_details = User::where('username', '=', $username)->get();
      $response = array(
        'status'       =>'true',
        'message'      =>'Account Created ',
        'user_details' => $user_details
      );
    }
  }

  if($username == null || $login_type == null){
    $response = array(
        'status'       =>'false',
        'message'      =>'Empty Request'
      );
  }

  return response()->json($response, 200);
}

public function TV_login(Request $request)
{

  $settings = Setting::first();
  $userIp = $request->user_ip;
  $device_name = $request->device_name;
  $email = $request->email;
  $token = $request->token;
  $users = User::where('email',$email)->first();


  $email_login = array(
    'email' => $request->get('email'),
    'password' => $request->get('password')
  );
  $username_login = array(
    'username' => $request->get('username'),
    'password' => $request->get('password')
  );
  $mobile_login = array(
    'mobile' => $request->get('mobile'),
    'otp' => $request->get('otp'),
    'password' => $request->get('password')
  );


  if(!empty($users)){
    $user_id = $users->id;
    $adddevice = new LoggedDevice;
    $adddevice->user_id = $user_id;
    $adddevice->user_ip = $userIp;
    $adddevice->device_name = $device_name;
    $adddevice->save();
  }

  if ( !empty($users) && Auth::attempt($email_login) || !empty($users) && Auth::attempt($username_login) || !empty($users) && Auth::attempt($mobile_login)  ){

    Paystack_Andriod_UserId::truncate();
    Paystack_Andriod_UserId::create([ 'user_id' => Auth::user()->id ]);

    if($settings->free_registration && !Auth::user()->stripe_active){

      if(Auth::user()->role == 'registered'){
        $user = User::find(Auth::user()->id);
        $user->role = 'registered';
        $user->token = $token;
        $user->save();

      }else if(Auth::user()->role == 'admin'){

        $user = User::find(Auth::user()->id);
        $user->role = 'admin';
        $user->token = $token;
        $user->save();

      }else if(Auth::user()->role == 'subscriber'){
        $user = User::find(Auth::user()->id);
        $user->role = 'subscriber';
        $user->token = $token;
        $user->save();
      }
    }

    if(Auth::user()->role == 'subscriber' || (Auth::user()->role == 'admin' || Auth::user()->role == 'demo') || (Auth::user()->role == 'registered') ):

      $id   = Auth::user()->id;
      $role = Auth::user()->role;
      $username = Auth::user()->username;
      $password = Auth::user()->password;
      $email  = Auth::user()->email;
      $mobile = Auth::user()->mobile;
      $avatar = Auth::user()->avatar;

      if(Auth::user()->role == 'subscriber'){

        $Subscription = Subscription::where('user_id',Auth::user()->id)->orderBy('created_at', 'DESC')->first();
        $Subscription = Subscription::Join('subscription_plans','subscription_plans.plan_id','=','subscriptions.stripe_plan')
        ->where('subscriptions.user_id',Auth::user()->id)
        ->orderBy('subscriptions.created_at', 'desc')->first();

        $plans_name = $Subscription->plans_name;
        $plan_ends_at = $Subscription->ends_at;

      }else{
        $plans_name = '';
        $plan_ends_at = '';
      }
      $userdetail = User::where('id',$id)->first();

      $user_details = array([
        'user_id'=>$id,
        'role'=>$role,
        'username'=>$username,
        'email'=>$email,
        'mobile'=>$mobile,
        'plans_name'=>$plans_name,
        'plan_ends_at'=>$plan_ends_at,
        'avatar'=>URL::to('/').'/public/uploads/avatars/'.$avatar
      ] );

    $redirect = ($request->get('redirect', 'false')) ? $request->get('redirect') : '/';
    if(Auth::user()->role == 'demo' && Setting::first()->demo_mode != 1){
      Auth::logout();

      $response = array('message' => 'Sorry, demo mode has been disabled', 'note_type' => 'error');
      return response()->json($response, 200);
    } elseif($settings->free_registration && $settings->activation_email && Auth::user()->active == 0) {
      Auth::logout();

      $response = array('message' => 'Please make sure to activate your account in your email before logging in.', 'note_type' => 'error','status'=>'verifyemail');
      return response()->json($response, 200);
    } else {

      $response = array('message' => 'You have been successfully logged in.', 'note_type' => 'success','status'=>'true','userdetail'=> $userdetail,
      'plans_name'=> $plans_name,'plan_ends_at'=> $plan_ends_at,'avatar'=> URL::to('/').'/public/uploads/avatars/'.$avatar,'user_details'=> $user_details);
      return response()->json($response, 200);
    }
  else:
    $username = Auth::user()->username;

    $response = array('message' => 'Uh oh, looks like you don\'t have an active subscription, please renew to gain access to all content', 'note_type' => 'error');
    return response()->json($response, 200);
  endif;

} else {
  $count = User::where('email', '=', $request->get('email'))->count();
  if($count > 0){
    $response = array('status_code' => 200 ,'message' => 'Password Mismatch.', 'note_type' => 'error','status'=>'mismatch');
    return response()->json($response, 200);
  }else{
    $response = array('status_code' => 200 ,'message' => 'Invalid Email, please try again.', 'note_type' => 'error','status'=>'false');
    return response()->json($response, 200);
  }
}
}

    public function Master_list_videos()
    {
   
        $videos = Video::latest()->get()->map(function ($item) {
   
                        switch (true) {

                            case $item['type'] == "mp4_url":
                            $item['videos_url'] =  $item->mp4_url ;
                            break;
                
                            case $item['type'] == "m3u8_url":
                            $item['videos_url'] =  $item->m3u8_url ;
                            break;
                
                            case $item['type'] == "embed":
                            $item['videos_url'] =  $item->embed_code ;
                            break;
                            
                            case $item['type'] == null &&  pathinfo($item['mp4_url'], PATHINFO_EXTENSION) == "mp4" :
                            $item['videos_url']    = URL::to('/storage/app/public/'.$item->path.'.m3u8');
                            break;
                
                            default:
                            $item['videos_url']    = null ;
                            break;
                        }

                        switch (true) {

                            case $item['publish_type'] == "mp4_url" && $item['publish_status'] == 1 :
                            $item['releaseDate'] =  $item->publish_time ;
                            break;
                
                            default:
                            $item['releaseDate']    = $item->created_at  ;
                            break;
                        }
                    
                        return [
                            'id'    => $item->id,
                            'title' => $item->title,
                            'shortDescription' => $item->description,
                            'thumbnail'  => URL::to('public/uploads/images/' . $item->image),
                            'releaseDate' => $item['releaseDate'] ,

                            "genres" => CategoryVideo::join('video_categories','video_categories.id','=','categoryvideos.category_id')->where('video_id', $item->id)->get()
                                ->pluck('name')->map(function ($name) {
                                    return $name ;
                                })->toArray(),
                            'content'      => array(
                            'dateAdded' => $item->created_at ,
                            'duration' =>  $item->duration ,
                            'videos' => array( 
                                array(
                                    "url" => $item->videos_url,
                                    "quality" => "HD",
                                    "videoType" => $item->type,
                                )
                            ),
                            ),
                        ];
                    });
   
                    $playlists = AdminVideoPlaylist::latest()->get()->map(function ($item) {
                        return [
                            "name" => $item->title,
                            "itemIds" => VideoPlaylist::where('playlist_id', $item->id)
                                ->pluck('video_id')
                                ->map(function ($videoId) {
                                    return $videoId ;
                                })
                                ->toArray(),
                        ];
                    });
                
                    $VideoCategory = VideoCategory::latest()->get()->map(function ($item) {
                        return [
                            "name" =>  $item->name,
                            "order" => $item->order
                        ];
                    });

                $response = array(
                "providerName" => GetWebsiteName(),
                "language" => "en-US",
                "lastUpdated"=> Video::latest()->pluck('updated_at')->first() ,
                "movies"  =>  $videos ,
                "playlists" => $playlists ,
                "categories"  => $VideoCategory ,
                );
   
                return response()->json($response, 200);
    }

    
    public function RegisterDropdownData()
    {
   

      $Artists = \App\Artist::get();
      $jsonString = file_get_contents(base_path('assets/country_code.json'));   

      $jsondata = json_decode($jsonString, true);

        $response = array(
        "Artists" => $Artists ,
        "country"  => $jsondata ,
        );
   
        return response()->json($response, 200);
    }


    public function Related_Audios_LikeDisLike(Request $request)
    {
   
      $slug = $request->slug;
     
      try {
        
      $source_id = Audio::where('slug',$slug)->pluck('id')->first();
      $category_name = CategoryAudio::select('audio_categories.id as category_id','audio_categories.name as categories_name','audio_categories.slug as categories_slug','category_audios.audio_id')
      ->Join('audio_categories', 'category_audios.category_id', '=', 'audio_categories.id')
      ->where('category_audios.audio_id', $source_id)
      ->get();

      if(count($category_name) > 0){
        foreach($category_name as $category){

            $CategoryAudio = CategoryAudio::Join('audio_categories', 'category_audios.category_id', '=', 'audio_categories.id')
                ->where('category_audios.category_id', @$category->category_id)
                ->pluck('category_audios.audio_id');
        }

      }else{
        $CategoryAudio = [];        
      }
      $related_category_Audios = Audio::whereIn('id', $CategoryAudio)->get();

      if(!Auth::guest()){
        $user_id = Auth::user()->id ;
        if(Auth::user()->support_username != null){
            $artist_id = Artist::where('artist_name',Auth::user()->support_username)->pluck('id')->first();
            
        }else{
            $artist_id = null;
        }
        if($artist_id != null ){
            $Audioartist = Audioartist::where('artist_id' ,$artist_id)->pluck('audio_id');
            if(count($Audioartist) > 0){
                    $related_Audioartist = Audio::whereIn('id', $Audioartist)->get();
              }else{
                $related_Audioartist = [];        
              }
        }else{
          $related_Audioartist = [];        
        }

      }else{
        $Audioartist = [];
        $related_Audioartist = [];
      }

      $merged_related_Audioartist = $related_category_Audios->merge($related_Audioartist)->all();

      if(count($merged_related_Audioartist) > 0 ){
        foreach($merged_related_Audioartist as $value){
                    $liked_related_Audioartist = Audio::Join('like_dislikes', 'audio.id', '=', 'like_dislikes.audio_id')
                    ->where('like_dislikes.liked',1)->get();
                    $dislikes_related_Audio = Likedislike::where('audio_id','!=',null)->where('disliked',1)->pluck('audio_id');
                }
            }else{
                $liked_related_Audioartist = [];
                $dislikes_related_Audio = [];
            }

        if(count($dislikes_related_Audio) > 0 ){
            foreach($merged_related_Audioartist as $value){  
                foreach($dislikes_related_Audio as $value_id){
                    // $liked_related_Audioartist = Audio::where('like_dislikes.liked',1)->get();
                    if($value->id == $value_id){
                        // $mergedArrayAudios[] = '';
                    }else{
                        $mergedArrayAudios[] =  $value;
                    }
                }              
            }
        }

        $response = array(
          "status"  => true ,
          "mergedArrayAudios" => $mergedArrayAudios ,
          );

      } catch (\Throwable $th) {
        throw $th;
        $response = array(
          "status"  => false ,
          "mergedArrayAudios" => [] ,
          );
      }
        return response()->json($response, 200);
    }

    
  public function FeaturedVideos()
  {
    try {

        $check_Kidmode = 0 ;

        $data = Video::where('active',1)->where('status', 1)->where('draft',1)->where('featured',1);

              if( Geofencing() !=null && Geofencing()->geofencing == 'ON')
              {
                $data = $data->whereNotIn('videos.id',Block_videos());
              }

              if( $check_Kidmode == 1 )
              {
                $data = $data->whereBetween('age_restrict', [ 0, 12 ]);
              }

          $data = $data->get()->map(function ($item) {
            $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
            $item['player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
            $item['source']    = "Featured Videos";
            return $item;
          });

        $response = array(
          'status'  => 'true',
          'Message' => 'Featured Retrieved successfully',
          'featured_videos' => $data
        );

    } catch (\Throwable $th) {

      $response = array(
        'status'  => 'false',
        'Message' => $th->getMessage(),
      );
      
    }

    
        
        return response()->json($response, 200);
  }


  
  public function MusicStation()
  {

    try {

        // $data = MusicStation::get();

        $MusicStation = MusicStation::get()->map(function ($item) {
          $item['image']    = 'https://via.placeholder.com/128/fe669e/ffcbde.png?text='. ucfirst(substr($item->station_name,0,1));
          return $item;
        });

        $response = array(
          'status'  => 'true',
          'Message' => 'Music Station Retrieved successfully',
          'music_station' => $MusicStation,
        );

    } catch (\Throwable $th) {

      $response = array(
        'status'  => 'false',
        'Message' => $th->getMessage(),
      );
      
    }
        return response()->json($response, 200);
  }

  
  public function MyMusicSation(Request $request)
  {

    try {
      
      $MusicStation = MusicStation::where('user_id',$request->user_id)->get()->map(function ($item) {
        $item['image']    = 'https://via.placeholder.com/128/fe669e/ffcbde.png?text='. ucfirst(substr($item->station_name,0,1));
        return $item;
      });

        $response = array(
          'status'  => 'true',
          'Message' => 'My Music Station Retrieved successfully',
          'my_music_station' => $MusicStation,
        );

    } catch (\Throwable $th) {

      $response = array(
        'status'  => 'false',
        'Message' => $th->getMessage(),
      );
      
    }
        return response()->json($response, 200);
  }

  
  public function StoreMusicSation(Request $request)
  {

    try {
      
      $Setting = Setting::first();
            
      $path = URL::to('/').'/public/uploads/images/';

      $image = $request->image;

      if($image != '') {
          if($image != ''  && $image != null){
              $file_old = $path.$image;
              if (file_exists($file_old)){
                    unlink($file_old);
              }
          }
          $file = $image;
          $file->move(public_path()."/uploads/images/", $file->getClientOriginalName());
          $image  = URL::to('/').'/public/uploads/images/'.$file->getClientOriginalName();

      } else {
          $image  = URL::to('/').'/public/uploads/images/'.$Setting->default_video_image;
      }

      $station_based_artists = json_encode($request->station_based_artists);

      $artist_audios = [];

      if(!empty($request->station_based_artists) && count($request->station_based_artists) > 0){

          foreach($request->station_based_artists as $value){

              $artist_audios = Audioartist::select('audio.id')->join('audio', 'audio.id', '=', 'audio_artists.audio_id')
              ->where('artist_id',$value)->groupBy('audio_artists.audio_id')->get();

          }
          
      }

      $category_audios = [];

      if(!empty($request->station_based_keywords) && count($request->station_based_keywords) > 0){

          foreach($request->station_based_keywords as $value){

              $category_audios = CategoryAudio::select('audio.id')->join('audio', 'audio.id', '=', 'category_audios.audio_id')
              ->where('category_id',$value)->groupBy('category_audios.audio_id')->get();

          }

      }

          $MusicStation = new MusicStation();
          $MusicStation->station_name = $request->station_name;
          $MusicStation->station_slug = str_replace(" ", "-", $request->station_name);
          $MusicStation->station_type = $request->station_type;
          $MusicStation->station_based_artists = json_encode($request->station_based_artists);
          $MusicStation->station_based_keywords = json_encode($request->station_based_keywords);
          $MusicStation->image = $image;
          $MusicStation->user_id = $request->user_id;
          $MusicStation->save();

          $station_id = $MusicStation->id;

           if(count($artist_audios) > 0){

              foreach($artist_audios as $value){
  
                  $UserMusicStation = new UserMusicStation();
                  $UserMusicStation->user_id = $request->user_id;
                  $UserMusicStation->station_id = $station_id;
                  $UserMusicStation->audio_id = $value->id;
                  $UserMusicStation->save();

              }

          }

          if(count($category_audios) > 0){

              foreach($category_audios as $value){
  
                  $UserMusicStation = new UserMusicStation();
                  $UserMusicStation->user_id = $request->user_id;
                  $UserMusicStation->station_id = $station_id;
                  $UserMusicStation->audio_id = $value->id;
                  $UserMusicStation->save();

              }

          }

        $response = array(
          'status'  => 'true',
          'Message' => 'Music Station successfully Created',
          'music_station' => MusicStation::where('station_slug',$MusicStation->station_slug)->get(),
        );

    } catch (\Throwable $th) {

      $response = array(
        'status'  => 'false',
        'Message' => $th->getMessage(),
      );
      
    }
        return response()->json($response, 200);
  }

  public function PlayerMusicStation(Request $request)
  {

    try {

      $MusicStation_id = MusicStation::where('station_slug', $request->station_slug)->first()->id;
      $MusicStation = MusicStation::where('id', $MusicStation_id)->first();
      $UserMusicStation = UserMusicStation::where('station_id', $MusicStation_id)->pluck('audio_id');
      $station_music = Audio::whereIn('id', $UserMusicStation)->where('active',1)->get();
        $response = array(
          'status'  => 'true',
          'Message' => 'My Music Station Retrieved successfully',
          'station_music' => $station_music,
        );

    } catch (\Throwable $th) {

      $response = array(
        'status'  => 'false',
        'Message' => $th->getMessage(),
      );
      
    }
        return response()->json($response, 200);
  }

  
  public function DeleteStation(Request $request){
    try {
        // dd($id);
       MusicStation::where('id',$request->id)->delete();
       UserMusicStation::where('station_id',$request->id)->delete();
       $response = array(
        'status'  => 'true',
        'Message' => 'Music Station Deleted successfully',
      );
    } catch (\Throwable $th) {
        throw $th;
        $response = array(
          'status'  => 'false',
          'Message' => $th->getMessage(),
        );
    }
    return response()->json($response, 200);
  }

  public function StationCreate(Request $request){
    try {
       $response = array(
        'status'  => 'true',
        'Message' => 'Music Station Create successfully',
        'station_artist' => Artist::get(),
        'station_key_word' => AudioCategory::get(),
      );
    } catch (\Throwable $th) {
        throw $th;
        $response = array(
          'status'  => 'false',
          'Message' => $th->getMessage(),
        );
    }
    return response()->json($response, 200);
  }

  public function CheckUserLoggedIn(Request $request){
    try {
      $device_name = $request->device_name;
      $user_id = $request->user_id;

      if($device_name == 'android'){

        $android_user_check = LoggedDevice::where('user_id', '=', Auth::User()->id)
            ->where('device_name', '=', $device_name)
        ->count();
        if($android_user_check == 0){
            $status = 'false' ;
            $message = 'Not Logged IN' ;
            $user_check = 0 ;
        }elseif($android_user_check > 0){
            $status = 'true' ;
            $message = 'Logged IN' ;
            $user_check = 1 ;
        }else{
            $status = 'false' ;
            $message = 'Not Logged IN' ;
            $user_check = 0 ;
        }
      }else if($device_name == 'ios'){
        $ios_user_check = LoggedDevice::where('user_id', '=', Auth::User()->id)
            ->where('device_name', '=', $device_name)
        ->count();
        if($ios_user_check == 0){
            $status = 'false' ;
            $message = 'Not Logged IN' ;
            $user_check = 0 ;
        }elseif($ios_user_check > 0){
            $status = 'true' ;
            $message = 'Logged IN' ;
            $user_check = 1 ;
        }else{
            $status = 'false' ;
            $message = 'Not Logged IN' ;
            $user_check = 0 ;
        }
      }else{
            $status = 'false' ;
            $message = 'Not Logged IN' ;
            $user_check = 0 ;
      }
       $response = array(
        'status'  => $status,
        'Message' => $message,
        'user_check' => $user_check,
      );
    } catch (\Throwable $th) {
        throw $th;
        $response = array(
          'status'  => 'false',
          'Message' => $th->getMessage(),
        );
    }
    return response()->json($response, 200);
  }

  public function TVSetting(Request $request){
    try {
      $TVSetting = TVSetting::where('enable_id',1)->count();
      $TVSetting = TVSetting::Select('tv_settings.*','pages.body')
      ->leftJoin('pages','pages.id','=','tv_settings.page_id')
      ->where('tv_settings.enable_id',1)
      ->get();
 
      $response = array(
        'status'  => 'true',
        'TVSetting' => $TVSetting,
      );
      // print_r($TVSetting);exit;
    } catch (\Throwable $th) {
      throw $th;
      $response = array(
        'status'  => 'false',
        'Message' => $th->getMessage(),
      );
    }
  return response()->json($response, 200);

  }


  

  public function TV_continue_watchings(Request $request)
  {
      $user_id = $request->user_id;
      $current_duration = $request->current_duration;
      $watch_percentage = $request->watch_percentage;
      $tv_id = $request->tv_id;
      $UserType = 'tv';
      if(!empty($request->skip_time)){
      $skip_time = $request->skip_time;
      }else{
        $skip_time = 0;
      }
      if($request->video_id){
          $video_id = $request->video_id;
          $count = ContinueWatching::where('user_id', '=', $user_id)->where('videoid', '=', $video_id)->count();
          $tv_id_count = ContinueWatching::where('tv_id', '=', $tv_id)->where('videoid', '=', $video_id)->count();
          if ( $count > 0 ) {
            ContinueWatching::where('user_id', '=', $user_id)->where('videoid', '=', $video_id)->update(['currentTime' => $current_duration,'watch_percentage' => $watch_percentage,'skip_time' => $skip_time]);
            $response = array(
              'status'=>'true',
              'message'=>'Current Time updated'
          );
        }else if ( $tv_id_count > 0 ) {
          ContinueWatching::where('tv_id', '=', $tv_id)->where('videoid', '=', $video_id)
          ->update(['currentTime' => $current_duration,'watch_percentage' => $watch_percentage,
          'skip_time' => $skip_time]);
          $response = array(
            'status'=>'true',
            'message'=>'Current Time updated'
        );
       } else {
            $data = array('user_id' => $user_id,'tv_id' => $tv_id,'UserType'=> $UserType, 'videoid' => $video_id,'currentTime' => $current_duration,'watch_percentage' => $watch_percentage,'skip_time' => $skip_time );
            ContinueWatching::insert($data);
            $response = array(
              'status'=>'true',
              'message'=>'Added  to  Continue Watching List'
          );

        }
      }


      return response()->json($response, 200);
  }

  public function TV_ContinueWatching(Request $request)
  {

      $user_id = $request->user_id;
      $tv_id = $request->tv_id;
      // print_r($tv_id);exit;

      if(!empty($tv_id) ){
        $tv_id = $request->tv_id;
        $tv_video_ids = ContinueWatching::where('videoid','!=',NULL)->where('tv_id','=',$tv_id)->get();
        $tv_video_ids_count = ContinueWatching::where('videoid','!=',NULL)->where('tv_id','=',$tv_id)->count();    
      }else{
        $tv_id = 0;
        $tv_video_ids = 0;
        $tv_video_ids_count = 0;
      }
      if(!empty($user_id) ){
          /*channel videos*/
          $user_id = $request->user_id;
          $video_ids = ContinueWatching::where('videoid','!=',NULL)->where('user_id','=',$user_id)->get();
          $video_ids_count = ContinueWatching::where('videoid','!=',NULL)->where('user_id','=',$user_id)->count();
      }else{
          /*channel videos*/
          $user_id = $request->user_id;
          $video_ids = 0;
          $video_ids_count = 0;
      }

       if ( $tv_video_ids_count  > 0 && $video_ids_count  > 0) {
        $ContinueWatching = array_merge($video_ids->toArray(), $tv_video_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($ContinueWatching as $key => $value1) {
        $k2[] = $value1['videoid'];
      }

      $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$tv_id) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('watch_percentage')->min();
        $item['skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('skip_time')->min();
        $item['tv_watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('tv_id','=',$tv_id)->pluck('watch_percentage')->min();
        $item['tv_skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('tv_id','=',$tv_id)->pluck('skip_time')->min();
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $videos,
      );
    }else if ( $video_ids_count  > 0) {

      foreach ($video_ids as $key => $value1) {
        $k2[] = $value1->videoid;
      }
      $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('watch_percentage')->min();
        $item['skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('user_id','=',$user_id)->pluck('skip_time')->min();
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $videos,
      );
    }elseif ( $tv_video_ids_count > 0) {

      foreach ($tv_video_ids as $key => $value1) {
        $k2[] = $value1->videoid;
      }
      $videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) use ($user_id,$tv_id) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['tv_watch_percentage'] = ContinueWatching::where('videoid','=',$item->id)->where('tv_id','=',$tv_id)->pluck('watch_percentage')->min();
        $item['tv_skip_time'] = ContinueWatching::where('videoid','=',$item->id)->where('tv_id','=',$tv_id)->pluck('skip_time')->min();
         return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $videos,
      );
    }else{
      $response = array(
        'status' => "false",
        'videos'=> [],
      );
    }

    return response()->json($response, 200);

  }


  public function TV_Addwishlist(Request $request) {

    $tv_id = $request->tv_id;
    $video_id = $request->video_id;
    $episode_id = $request->episode_id;
    $audio_id = $request->audio_id;
    $livestream_id = $request->livestream_id;

    if (!empty($video_id)) {
        $count = Wishlist::where('tv_id', $tv_id)->where('video_id', $video_id)->count();

        if ($count > 0) {
            Wishlist::where('tv_id', $tv_id)->where('video_id', $video_id)->delete();

            $response = [
                'status' => 'false',
                'message' => 'Removed From Your Wishlist'
            ];
        } else {
            $data = ['tv_id' => $tv_id, 'video_id' => $video_id];
            Wishlist::insert($data);

            $response = [
                'status' => 'true',
                'message' => 'Added to Your Wishlist'
            ];
        }
    }

    // Add Episode wishlist 

    if (!empty($episode_id)) {
      $count = Wishlist::where('tv_id', $tv_id)->where('episode_id', $episode_id)->count();

      if ($count > 0) {
              Wishlist::where('tv_id', $tv_id)->where('episode_id', $episode_id)->delete();

              $response = [
                  'status' => 'false',
                  'message' => 'Removed From Your Wishlist'
              ];
          } else {
              $data = ['tv_id' => $tv_id, 'episode_id' => $episode_id];
              Wishlist::insert($data);

              $response = [
                  'status' => 'true',
                  'message' => 'Added to Your Wishlist'
              ];
          }
      }

    // Add Audio wishlist 

      if (!empty($audio_id)) {
        $count = Wishlist::where('tv_id', $tv_id)->where('audio_id', $audio_id)->count();

        if ($count > 0) {
            Wishlist::where('tv_id', $tv_id)->where('audio_id', $audio_id)->delete();

            $response = [
                'status' => 'false',
                'message' => 'Removed From Your Wishlist'
            ];
        } else {
            $data = ['tv_id' => $tv_id, 'audio_id' => $audio_id];
            Wishlist::insert($data);

            $response = [
                'status' => 'true',
                'message' => 'Added to Your Wishlist'
            ];
        }
    }

    // Add Livestream wishlist 

    if (!empty($livestream_id)) {
      $count = Wishlist::where('tv_id', $tv_id)->where('livestream_id', $livestream_id)->count();

      if ($count > 0) {
          Wishlist::where('tv_id', $tv_id)->where('livestream_id', $livestream_id)->delete();

          $response = [
              'status' => 'false',
              'message' => 'Removed From Your Wishlist'
          ];
      } else {
          $data = ['tv_id' => $tv_id, 'livestream_id' => $livestream_id];
          Wishlist::insert($data);

          $response = [
              'status' => 'true',
              'message' => 'Added to Your Wishlist'
          ];
      }
    }
    return response()->json($response, 200);

  }


  
  public function TV_ShowVideo_wishlist(Request $request) {

    $user_id = $request->user_id;
    $tv_id = $request->tv_id;
   
    if(!empty($tv_id) ){
      $tv_id = $request->tv_id;
    }else{
      $tv_id = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

        /*channel videos*/
        $video_Wishlist_ids = Wishlist::select('video_id')->where('user_id','=',$user_id)->get();
        $video_ids_count = Wishlist::select('video_id')->where('user_id','=',$user_id)->count();
    
        $tv_Wishlist_ids = Wishlist::select('video_id')->where('tv_id','=',$tv_id)->get();
        $tv_ids_count = Wishlist::select('video_id')->where('tv_id','=',$tv_id)->count();
    
    if ( $tv_ids_count  > 0 && $video_ids_count  > 0) {
    $Wishlist = array_merge($video_Wishlist_ids->toArray(), $tv_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $k2[] = $value1['video_id'];
      }
      // print_r($k2);exit;

      $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $channel_videos,
      );
    }else if ( $video_ids_count  > 0) {

      foreach ($video_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['video_id'];
      }
      $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $channel_videos,
      );
    }elseif ( $tv_ids_count  > 0) {

      foreach ($tv_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['video_id'];
      }
      $channel_videos = Video::whereIn('id', $k2)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['video_url'] = URL::to('/').'/storage/app/public/';
        return $item;
      });
      $response = array(
        'status' => "true",
        'videos'=> $channel_videos,
      );
    }else{
      $response = array(
        'status' => "false",
        'videos'=> [],
      );
    }

    return response()->json($response, 200);

  }


  
  public function TV_ShowEpisode_wishlist(Request $request) {

    $user_id = $request->user_id;
    $tv_id = $request->tv_id;
   
    if(!empty($tv_id) ){
      $tv_id = $request->tv_id;
    }else{
      $tv_id = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

          /*Episode videos*/
        $episode_Wishlist_ids = Wishlist::select('episode_id')->where('user_id','=',$user_id)->get();
        $episode_ids_count = Wishlist::select('episode_id')->where('user_id','=',$user_id)->count();
    
        $tv_episode_Wishlist_ids = Wishlist::select('episode_id')->where('tv_id','=',$tv_id)->get();
        $tv_episode_ids_count = Wishlist::select('episode_id')->where('tv_id','=',$tv_id)->count();
    
    if ( $tv_episode_ids_count  > 0 && $episode_ids_count  > 0) {
    $Wishlist = array_merge($episode_Wishlist_ids->toArray(), $tv_episode_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $k2[] = $value1['episode_id'];
      }

      $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['source'] = 'episode';
        return $item;
      });
      $response = array(
        'status' => "true",
        'episode'=> $episode,
      );
    }else if ( $episode_ids_count  > 0) {

      foreach ($episode_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['episode_id'];
      }
      $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['source'] = 'episode';
        return $item;
      });
      $response = array(
        'status' => "true",
        'episode'=> $episode,
      );
    }elseif ( $tv_episode_ids_count  > 0) {

      foreach ($tv_episode_Wishlist_ids as $key => $value1) {
        $k2[] = $value1['episode_id'];
      }
      $episode = Episode::whereIn('id',$k2)->orderBy('episode_order')->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['series_name'] = Series::where('id',$item->series_id)->pluck('title')->first();
        $item['source'] = 'episode';
        return $item;
      });
      $response = array(
        'status' => "true",
        'episode'=> $episode,
      );
    }else{
      $response = array(
        'status' => "false",
        'episode'=> [],
      );
    }

    return response()->json($response, 200);

  }



  public function TV_ShowAudio_wishlist(Request $request) {

    $user_id = $request->user_id;
    $tv_id = $request->tv_id;
   
    if(!empty($tv_id) ){
      $tv_id = $request->tv_id;
    }else{
      $tv_id = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

        /*Audio videos*/
        $audio_Wishlist_ids = Wishlist::select('audio_id')->where('user_id','=',$user_id)->get();
        $audio_ids_count = Wishlist::select('audio_id')->where('user_id','=',$user_id)->count();
    
        $tv_audio_Wishlist_ids = Wishlist::select('audio_id')->where('tv_id','=',$tv_id)->get();
        $tv_audio_ids_count = Wishlist::select('audio_id')->where('tv_id','=',$tv_id)->count();
    
    if ( $tv_audio_ids_count  > 0 && $audio_ids_count  > 0) {
    $Wishlist = array_merge($audio_Wishlist_ids->toArray(), $tv_audio_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $audio_id[] = $value1['audio_id'];
      }

      $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'audio';
        return $item;
      });

      $response = array(
        'status' => "true",
        'audios'=> $audios,
      );
    }else if ( $audio_ids_count  > 0) {

      foreach ($audio_Wishlist_ids as $key => $value1) {
        $audio_id[] = $value1['audio_id'];
      }
      $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'audio';
        return $item;
      });

      $response = array(
        'status' => "true",
        'audios'=> $audios,
      );
    }elseif ( $tv_audio_ids_count  > 0) {

      foreach ($tv_audio_Wishlist_ids as $key => $value1) {
        $audio_id[] = $value1['audio_id'];
      }
      $audios = Audio::whereIn('id',$audio_id)->get()->map(function ($item) {
        $item['image'] = URL::to('/').'/public/uploads/images/'.$item->image;
        $item['source'] = 'audio';
        return $item;
      });

      $response = array(
        'status' => "true",
        'audios'=> $audios,
      );
    }else{
      $response = array(
        'status' => "false",
        'audios'=> [],
      );
    }

    return response()->json($response, 200);

  }
  
  public function TV_ShowLiveStream_wishlist(Request $request) {

    $user_id = $request->user_id;
    $tv_id = $request->tv_id;
   
    if(!empty($tv_id) ){
      $tv_id = $request->tv_id;
    }else{
      $tv_id = 0;
    }
    if(!empty($user_id) ){
      $user_id = $request->user_id;
    }else{
      $user_id = 0;
    }

          /*Audio videos*/
        $livestream_Wishlist_ids = Wishlist::select('livestream_id')->where('user_id','=',$user_id)->get();
        $livestream_ids_count = Wishlist::select('livestream_id')->where('user_id','=',$user_id)->count();
    
        $tv_livestream_Wishlist_ids = Wishlist::select('livestream_id')->where('tv_id','=',$tv_id)->get();
        $tv_livestream_ids_count = Wishlist::select('livestream_id')->where('tv_id','=',$tv_id)->count();
    
    if ( $tv_livestream_ids_count  > 0 && $livestream_ids_count  > 0) {
    $Wishlist = array_merge($livestream_Wishlist_ids->toArray(), $tv_livestream_Wishlist_ids->toArray()/*, $arrayN, $arrayN*/);

      foreach ($Wishlist as $key => $value1) {
        $livestream_id[] = $value1['livestream_id'];
      }

      $LiveStream= LiveStream::whereIn('id',$livestream_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      $response = array(
        'status' => "true",
        'LiveStream'=> $LiveStream,
      );
    }else if ( $livestream_ids_count  > 0) {

      foreach ($livestream_Wishlist_ids as $key => $value1) {
        $livestream_id[] = $value1['livestream_id'];
      }
      $LiveStream= LiveStream::whereIn('id',$livestream_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      $response = array(
        'status' => "true",
        'LiveStream'=> $LiveStream,
      );
    }elseif ( $tv_livestream_ids_count  > 0) {

      foreach ($tv_livestream_Wishlist_ids as $key => $value1) {
        $livestream_id[] = $value1['livestream_id'];
      }
      $LiveStream= LiveStream::whereIn('id',$livestream_id)->orderBy('created_at', 'desc')->get()->map(function ($item) {
        $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
        return $item;
      });

      $response = array(
        'status' => "true",
        'LiveStream'=> $LiveStream,
      );
    }else{
      $response = array(
        'status' => "false",
        'LiveStream'=> [],
      );
    }

    return response()->json($response, 200);

  }

  public function tv_retrieve_search_data(Request $request)
  {
    try {

        $TvSearchData = TvSearchData::pluck('search_data')->first();

        $response = array(
          'status' => "true",
          "TvSearchData" => $TvSearchData ,
        );

    } catch (\Throwable $th) {
      
      $response = array(
        'status' => "false",
        'message'=> $th->getMessage(),
      );
      
    }

    return response()->json($response, 200);
  }

  public function tv_search_data_update(Request $request)
  {
    try {

      $TvSearchData = TvSearchData::first();

      $TvSearchData  == null ? TvSearchData::create($request->all()) : TvSearchData::first()->update($request->all()) ;
      
      $response = array(
        'status'  => "true",
        'message' => "Tv Search Data Stored Successfully",
        'data'    => TvSearchData::first(),
      );

    } catch (\Throwable $th) {

        $response = array(
          'status' => "false",
          'message'=> $th->getMessage(),
        );
    }

    return response()->json($response, 200);
  }

  
  public function AutoStoreStation(Request $request){

    try {

        $audio_id = $request->audio_id ;

        $station_based_artists = Audioartist::where('audio_id',$audio_id)->pluck('artist_id')->toArray();
        $station_based_keywords = CategoryAudio::where('audio_id',$audio_id)->pluck('category_id')->toArray();

        $Setting = Setting::first();
        
        $image  = URL::to('/').'/public/uploads/images/'.$Setting->default_video_image;


        $artist_audios = [];

    if(count($station_based_artists) > 0){

        foreach($station_based_artists as $value){

            $artist_audios = Audioartist::select('audio.id')->join('audio', 'audio.id', '=', 'audio_artists.audio_id')
            ->where('artist_id',$value)->groupBy('audio_artists.audio_id')->get();

        }
        
    }

    $category_audios = [];

    if(count($station_based_keywords) > 0){

        foreach($station_based_keywords as $value){

            $category_audios = CategoryAudio::select('audio.id')->join('audio', 'audio.id', '=', 'category_audios.audio_id')
            ->where('category_id',$value)->groupBy('category_audios.audio_id')->get();

        }

    }
    $station_name = Audio::where('id',$audio_id)->pluck('title')->first();

        $MusicStation = new MusicStation();
        $MusicStation->station_name = $request->station_name;
        $MusicStation->station_slug = str_replace(" ", "-", $request->station_name);
        $MusicStation->station_type = 'both';
        $MusicStation->station_based_artists = json_encode($station_based_artists);
        $MusicStation->station_based_keywords = json_encode($station_based_keywords);
        $MusicStation->image = $image;
        $MusicStation->user_id = $request->user_id;
        $MusicStation->save();

        $station_id = $MusicStation->id;

         if(count($artist_audios) > 0){

            foreach($artist_audios as $value){

                $UserMusicStation = new UserMusicStation();
                $UserMusicStation->user_id = $request->user_id;
                $UserMusicStation->station_id = $station_id;
                $UserMusicStation->audio_id = $value->id;
                $UserMusicStation->save();

            }

        }

        if(count($category_audios) > 0){

            foreach($category_audios as $value){

                $UserMusicStation = new UserMusicStation();
                $UserMusicStation->user_id = $request->user_id;
                $UserMusicStation->station_id = $station_id;
                $UserMusicStation->audio_id = $value->id;
                $UserMusicStation->save();

            }

        }
        $response = array(
          'status'  => 'true',
          'Message' => 'Music Station successfully Created',
          'music_station' => MusicStation::where('id',$station_id)->get(),
        );

    } catch (\Throwable $th) {
      $response = array(
        'status' => "false",
        'message'=> $th->getMessage(),
      );
    }
    return response()->json($response, 200);
    
}

  public function Series_details(Request $request)
  {
    try {
      
        $this->validate($request, [
          'series_id'  => 'required|integer' ,
        ]);

        $series = Series::findorfail( $request->series_id );
            
        $series_details = collect([$series])->map(function ($item) use ( $request ) {
            $item['image_url'] = URL::to('/public/uploads/images/'.$item->image);
            $item['Player_image_url'] = URL::to('/public/uploads/images/'.$item->player_image);
            $item['season_count'] = SeriesSeason::where('series_id',$item->id)->count();
            $item['episode_count'] = Episode::where('series_id',$item->id)->count();
            $item['tv_episodes_url'] = Episode::where('series_id',$item->id)->pluck('mp4_url')->first();
            if($item->access == 'ppv' || $item->access == 'subscriber'){
              $item['rent_url']   = URL::to('play_series').'/'.$item->slug;
              $item['become_subscriber_url']   = URL::to('becomesubscriber');
            }
            return $item;
        })->first();

        $response = array(
          'status'  => 'true',
          'Message' => 'Retrieve the Series data details',
          'series_details' => $series_details ,
        );

    } catch (\Throwable $th) {
      
        $response = array(
          'status' => "false",
          'message'=> $th->getMessage(),
        );
    }
    return response()->json($response, 200);

  }


  function Currency_Convert(Request $request){

    try {

      $amount = $request->amount;

      $Country_name = $request->Country_name;

      $To_Currency_symbol = Currency::where('country',$Country_name)->pluck('code')->first();

      $Currency_symbol = Currency::where('country',$Country_name)->pluck('symbol')->first();
      $allCurrency = CurrencySetting::first();

      $From_Currency_symbol = Currency::where('country',@$allCurrency->country)->pluck('code')->first();

      // $Currency_Converter = \AmrShawky\LaravelCurrency\Facade\Currency::convert()
      // ->from($From_Currency_symbol)
      // ->to($To_Currency_symbol)
      // ->amount($amount)
      // ->get();  

      $api_url = "https://open.er-api.com/v6/latest/$From_Currency_symbol";

      // Make a GET request to the API
      $ch = curl_init($api_url);
      curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
      curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
      curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
  
      $response = curl_exec($ch);
  
      if (curl_errno($ch)) {
          // Handle cURL error here
          echo "cURL error: " . curl_error($ch);
      } else {
          // Decode the API response into a JSON object
          $exchangeRates = json_decode($response, true);
  
          // Check if the conversion rates are available
          if (isset($exchangeRates['rates'])) {
              // Replace 'USD' with the currency code you want to convert to
              $targetCurrency = $To_Currency_symbol;
  
              // Replace 'amount' with the amount you want to convert
              // $amount = 100; // For example, 100 INR
  
              if (isset($exchangeRates['rates'][$targetCurrency])) {
                  $conversionRate = $exchangeRates['rates'][$targetCurrency];
                  $convertedAmount = $amount * $conversionRate;
                  $formattedAmount = number_format($convertedAmount, 2);

                  // echo "Converted amount: " . $convertedAmount . ' ' . $targetCurrency;
              } else {
                  // echo "Conversion rate for {$targetCurrency} not available.";
                  $convertedAmount = '';
                  $formattedAmount = '';
              }
          } else {
              // echo "Exchange rates data not found in the API response.";
              $convertedAmount = '';
              $formattedAmount = '';
            }
      }
      curl_close($ch);

      $response = array(

        'status'  => true,
        'Message' => 'Retrieve the Currency Converter',
        'Currency_Converted' => $Currency_symbol.' '.$formattedAmount ,

      );

    } catch (\Throwable $th) {

        $response = array(
          'status' => false,
          'message'=> $th->getMessage(),
        );

    }

    return response()->json($response, 200);

  }

    public function QRScannerCode(Request $request){

      try {

        $qr_code = $request->qr_code ;

        TVLoginCode::create([
          'tv_code'  => $request->qr_code,
          'tv_name'  => $request->tv_type,
          'tv_type'  => $request->tv_type,
          'status'   => 0,
       ]);
    
        $response = array(
            'status'=> 'true',
            'message' => 'Added verfication code',
            'qr_code' => $request->qr_code,
            'quick_response_url' => URL::to('mytv/quick-response'),
        );

      } catch (\Throwable $th) {

        $response = array(
          'status' => false,
          'message'=> $th->getMessage(),
        );

      }
      return response()->json($response, 200);

    }


    public function QRMobilePair(Request $request){

      try {

        $qr_code = $request->qr_code;
        $email = $request->email ;

        $MobilePairCodecount = TVLoginCode::where('tv_code',$request->qr_code)->where('tv_type',$request->tv_type)->count();

          if($MobilePairCodecount > 0){
            
            TVLoginCode::where('tv_code',$request->qr_code)->where('tv_type',$request->tv_type)->update([
                'email'                   =>  $request->email,
                'status'                  =>  1,
            ]);

            $user_details = User::where('email',$request->email)->first();

              $response = array(
                  'status'=> true,
                  'message' => 'Verfication Successfully Done',
                  'MobilePairCode_details' => TVLoginCode::where('tv_code',$request->qr_code)->where('tv_type',$request->tv_type)->first(),
                  'user_details' => $user_details,
              );

          }else{
                $response = array(
                  'status'=> false,
                  'message' => 'Invaild Pair QrCode',
              );
          }


      } catch (\Throwable $th) {

        $response = array(
          'status' => false,
          'message'=> $th->getMessage(),
        );

      }
      return response()->json($response, 200);

    }


    public function TvSignUp(Request $request){

      try {

        $this->validate($request, [
          'email' => 'required|email|unique:users,email'
        ]);

        User::create([
            'name'          => $request->name,
            'username'      => $request->name,
            'gender'        => $request->gender,
            'email '        => $request->email ,
            'password'      => Hash::make($request->password),
            'DOB'           => $request->DOB,
        ]);

        $settings = Setting::first();

        if($settings->free_registration == 0 && $settings->activation_email == 1){

          try {

            $activation_code   = Str::random(60);

            User::create([
              'name'              => $request->name,
              'username'          => $request->name,
              'gender'            => $request->gender,
              'email'             => $request->email ,
              'password'          => Hash::make($request->password),
              'activation_code'   => $activation_code,
          ]);
            
              $email = $request->email;

              $uname = $request->name;

              Mail::send('emails.verify', array('activation_code' => $activation_code, 'website_name' => $settings->website_name), function($message) use ($email,$uname) {
                  $message->from(AdminMail(),GetWebsiteName());
                  $message->to($email,$uname)->subject('Verify your email address');

              });

              
            $response = array(

              'status'  => true,
              'Message' => 'User Registered Successfully',
              'User_Details' => User::where('email',$request->email)->first(),
            );
    
          } catch (\Throwable $th) {

            $response = array(
              'status' => false,
              'message'=> $th->getMessage(),
            );

          }
  

        }else{

          User::create([
            'name'          => $request->name,
            'username'      => $request->name,
            'gender'        => $request->gender,
            'email'         => $request->email ,
            'password'      => Hash::make($request->password),
            'active'        => 1 ,
          ]);

          $response = array(

            'status'  => true,
            'Message' => 'User Registered Successfully',
            'User_Details' => User::where('email',$request->email)->first(),
          );

        }
        
      } catch (\Throwable $th) {

        $response = array(
          'status' => false,
          'message'=> $th->getMessage(),
        );

      }

      return response()->json($response, 200);

    }

    
    public function verifytokenCode(Request $request){

      try {

        $tvcode = $request->qr_code ;
        $verifytoken = $request->verifytoken ;

        $verifytoken = TVLoginCode::where('tv_code',$tvcode)->where('verifytoken',$verifytoken)->count();
       
        if($verifytoken == 1){
            
          $TVLoginCode = TVLoginCode::where('tv_code',$request->qr_code)->where('verifytoken',$request->verifytoken)->update([
              'email'                   =>  $request->email,
              'status'                  =>  1,
          ]);

          $user_details = User::where('email',$request->email)->first();

            $response = array(
                'status'=> true,
                'message' => 'Verfication Successfully Done',
                'user_details' => $user_details,
                'TVLoginCode' => $TVLoginCode,
            );

        }else{
              $response = array(
                'status'=> false,
                'message' => 'Invaild Pair QrCode',
            );
        }

      } catch (\Throwable $th) {

        $response = array(
          'status' => false,
          'message'=> $th->getMessage(),
        );

      }
      return response()->json($response, 200);

    }


    
    public function CinetPaySubscription(Request $request)
    {

        try{

          $data = $request->all();
          $email = User::where('id',$request->user_id)->pluck('email')->first();
          $userdetail = User::where('id',$request->user_id)->first();
  
          $plandetail = SubscriptionPlan::where('plan_id',$request->plan_id)->first();
          $current_date = date('Y-m-d h:i:s');    
          $next_date = $plandetail->days;
          $ends_at = Carbon::now()->addDays($plandetail->days);
          
            Subscription::create([
                'user_id'        =>  $userdetail->id,
                'name'           =>  $userdetail->username,
                'price'          =>  $request->amount ,   // Amount Paise to Rupees
                'stripe_id'      =>  $request->plan_id ,
                'stripe_status'  =>  'active' ,
                'stripe_plan'    =>  $request->plan_id,
                'quantity'       =>  null,
                'countryname'    =>  $request->country,
                'regionname'     =>  $request->state,
                'cityname'       =>  $request->city,
                'PaymentGateway' =>  'CinetPay',
                'trial_ends_at'  =>  $ends_at,
                'ends_at'        =>  $ends_at,
            ]);

            User::where('id',$request->user_id)->update([
                'role'                 =>  'subscriber',
                'stripe_id'            =>  $request->plan_id ,
                'subscription_start'   =>  Carbon::now(),
                'subscription_ends_at' =>  $ends_at,
                'payment_gateway'      =>  'CinetPay',
            ]);

            // Success 
            $response = array(
                "status"  => true ,
                "message" => "Payment done! Successfully", 
            );
       
    

    } catch (\Exception $e) {

        $response = array(
            "status"  => false , 
            "message" => $e->getMessage(), 
       );
    }
        try {
            $user = User::where('id',$request->user_id)->first();
            $email_subject = EmailTemplate::where('id',23)->pluck('heading')->first() ;

            \Mail::send('emails.subscriptionmail', array(
                'name' => ucwords($user->username),
                'uname' => $user->username,
                'paymentMethod' => 'CinetPay',
                'plan' => ucfirst($plandetail->plans_name),
                'price' => $plandetail->price,
                'plan_id' => $plandetail->plan_id,
                'billing_interval' => $plandetail->billing_interval,
                'next_billing' => $ends_at,
                'subscription_type' => 'One Time',

            ), function($message) use ($request,$user,$email_subject){
                $message->from(AdminMail(),GetWebsiteName());
                $message->to($user->email, $user->username)->subject($email_subject);
            });

            $email_log      = 'Mail Sent Successfully from Register Subscription';
            $email_template = "23";
            $user_id = $user->id;

            Email_sent_log($user_id,$email_log,$email_template);

        } catch (\Throwable $th) {

            $user = User::where('id',$request->user_id)->first();

            $email_log      = $th->getMessage();
            $email_template = "23";
            $user_id = $user->id;

            Email_notsent_log($user_id,$email_log,$email_template);
        }
    
    return response()->json($response, 200);

    }


    
    public function PayPalSubscription(Request $request)
    {

        try{

          $data = $request->all();
          $email = User::where('id',$request->user_id)->pluck('email')->first();
          $userdetail = User::where('id',$request->user_id)->first();
  
          $plandetail = SubscriptionPlan::where('plan_id',$request->plan_id)->first();
          $current_date = date('Y-m-d h:i:s');    
          $next_date = $plandetail->days;
          $ends_at = Carbon::now()->addDays($plandetail->days);
          $amount = $plandetail->price;
            Subscription::create([
                'user_id'        =>  $userdetail->id,
                'name'           =>  $userdetail->username,
                'price'          =>  $amount ,   // Amount Paise to Rupees
                'stripe_id'      =>  $request->plan_id ,
                'stripe_status'  =>  'active' ,
                'stripe_plan'    =>  $request->plan_id,
                'quantity'       =>  null,
                'countryname'    =>  $request->country,
                'regionname'     =>  $request->state,
                'cityname'       =>  $request->city,
                'PaymentGateway' =>  'PayPal',
                'trial_ends_at'  =>  $ends_at,
                'ends_at'        =>  $ends_at,
            ]);

            User::where('id',$request->user_id)->update([
                'role'                 =>  'subscriber',
                'stripe_id'            =>  $request->plan_id ,
                'subscription_start'   =>  Carbon::now(),
                'subscription_ends_at' =>  $ends_at,
                'payment_gateway'      =>  'PayPal',
            ]);

            // Success 
            $response = array(
                "status"  => true ,
                "message" => "Payment done! Successfully", 
            );
       
    

    } catch (\Exception $e) {

        $response = array(
            "status"  => false , 
            "message" => $e->getMessage(), 
       );
    }
        try {
            $user = User::where('id',$request->user_id)->first();
            $email_subject = EmailTemplate::where('id',23)->pluck('heading')->first() ;

            \Mail::send('emails.subscriptionmail', array(
                'name' => ucwords($user->username),
                'uname' => $user->username,
                'paymentMethod' => 'PayPal',
                'plan' => ucfirst($plandetail->plans_name),
                'price' => $plandetail->price,
                'plan_id' => $plandetail->plan_id,
                'billing_interval' => $plandetail->billing_interval,
                'next_billing' => $ends_at,
                'subscription_type' => 'One Time',

            ), function($message) use ($request,$user,$email_subject){
                $message->from(AdminMail(),GetWebsiteName());
                $message->to($user->email, $user->username)->subject($email_subject);
            });

            $email_log      = 'Mail Sent Successfully from Register Subscription';
            $email_template = "23";
            $user_id = $user->id;

            Email_sent_log($user_id,$email_log,$email_template);

        } catch (\Throwable $th) {

            $user = User::where('id',$request->user_id)->first();

            $email_log      = $th->getMessage();
            $email_template = "23";
            $user_id = $user->id;

            Email_notsent_log($user_id,$email_log,$email_template);
        }
    
    return response()->json($response, 200);

    }


    public function Paystack_SeriesRentRent_Paymentverify( Request $request )
    {
        try {
  
            $setting = Setting::first();
            $ppv_hours = $setting->ppv_hours;
  
            $to_time = ppv_expirytime_started();
  
                 // Verify Payment
  
            $reference_code = $request->reference_id;
  
            $curl = curl_init();
  
            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://api.paystack.co/transaction/verify/$reference_code",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_SSL_VERIFYHOST => 0,
                CURLOPT_SSL_VERIFYPEER => 0,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "GET",
                CURLOPT_HTTPHEADER => $this->SecretKey_array,
            ));
  
            $result = curl_exec($curl);
            $payment_result = json_decode($result, true);
            $err = curl_error($curl);
            curl_close($curl);
  
            $Series = Series::where('id','=',$request->series_id)->first();
  
            if(!empty($Series)){
            $moderators_id = $Series->user_id;
            }
  
            if(!empty($moderators_id)){
                $moderator        = ModeratorsUser::where('id','=',$moderators_id)->first();
                $total_amount     = $setting->ppv_price;
                $title            =  $Series->title;
                $commssion        = VideoCommission::first();
                $percentage       = $commssion->percentage;
                $ppv_price        = $setting->ppv_price;
                $admin_commssion  = ($percentage/100) * $ppv_price ;
                $moderator_commssion = $ppv_price - $percentage;
                $moderator_id = $moderators_id;
            }
            else
            {
                $total_amount   = $setting->ppv_price;
                $title          =  $Series->title;
                $commssion      = VideoCommission::first();
                $percentage     = null;
                $ppv_price       = $setting->ppv_price;
                $admin_commssion =  null;
                $moderator_commssion = null;
                $moderator_id = null;
            }
  
            $purchase = new PpvPurchase;
            $purchase->user_id       =  $request->user_id ;
            $purchase->series_id       =  $request->series_id ;
            $purchase->total_amount  =  $payment_result['data']['amount'] ;
            $purchase->admin_commssion = $admin_commssion;
            $purchase->moderator_commssion = $moderator_commssion;
            $purchase->status = 'active';
            $purchase->to_time = $to_time;
            $purchase->moderator_id = $moderator_id;
            $purchase->save();
  
            if ($err) {                 // Error
                $response = array(
                    "status"  => 'false' ,
                    "message" => $err
                );
            }
            else {                      // Success
                $response = array(
                    "status"  => 'true' ,
                    "message" => "Payment done! Successfully" ,
                );
            }
  
        } catch (\Exception $e) {
  
            $response = array(
                "status"  => 'false' ,
                "message" => $e->getMessage(),
           );
        }
        return response()->json($response, 200);
    }

    public function Paystack_SerieSeasonRentRent_Paymentverify( Request $request )
    {
        try {
  
            $setting = Setting::first();
            $ppv_hours = $setting->ppv_hours;
  
            $to_time = ppv_expirytime_started();
  
                 // Verify Payment
  
            $reference_code = $request->reference_id;
  
            $curl = curl_init();
  
            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://api.paystack.co/transaction/verify/$reference_code",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_SSL_VERIFYHOST => 0,
                CURLOPT_SSL_VERIFYPEER => 0,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "GET",
                CURLOPT_HTTPHEADER => $this->SecretKey_array,
            ));
  
            $result = curl_exec($curl);
            $payment_result = json_decode($result, true);
            $err = curl_error($curl);
            curl_close($curl);
  
            $SeriesSeason = SeriesSeason::where('id','=',$request->season_id)->first();
  
            if(!empty($SeriesSeason)){
            $moderators_id = $SeriesSeason->user_id;
            }
  
            if(!empty($moderators_id)){
                $moderator        = ModeratorsUser::where('id','=',$moderators_id)->first();
                $total_amount     = $SeriesSeason->ppv_price;
                $title            =  $SeriesSeason->series_seasons_name;
                $commssion        = VideoCommission::first();
                $percentage       = $commssion->percentage;
                $ppv_price        = $SeriesSeason->ppv_price;
                $admin_commssion  = ($percentage/100) * $ppv_price ;
                $moderator_commssion = $ppv_price - $percentage;
                $moderator_id = $moderators_id;
            }
            else
            {
                $total_amount   = $SeriesSeason->ppv_price;
                $title          =  $SeriesSeason->series_seasons_name;
                $commssion      = VideoCommission::first();
                $percentage     = null;
                $ppv_price       = $SeriesSeason->ppv_price;
                $admin_commssion =  null;
                $moderator_commssion = null;
                $moderator_id = null;
            }
  
            $purchase = new PpvPurchase;
            $purchase->user_id       =  $request->user_id ;
            $purchase->series_id       =  $request->series_id ;
            $purchase->season_id       =  $request->season_id ;
            $purchase->total_amount  =  $payment_result['data']['amount'] ;
            $purchase->admin_commssion = $admin_commssion;
            $purchase->moderator_commssion = $moderator_commssion;
            $purchase->status = 'active';
            $purchase->to_time = $to_time;
            $purchase->moderator_id = $moderator_id;
            $purchase->save();

  
            if ($err) {                 // Error
                $response = array(
                    "status"  => 'false' ,
                    "message" => $err
                );
            }
            else {                      // Success
                $response = array(
                    "status"  => 'true' ,
                    "message" => "Payment done! Successfully" ,
                );
            }
  
        } catch (\Exception $e) {
  
            $response = array(
                "status"  => 'false' ,
                "message" => $e->getMessage(),
           );
        }
        return response()->json($response, 200);
    }
  
    
    public function Paystack_AudioRent_Paymentverify( Request $request )
    {
        try {
  
            $setting = Setting::first();
            $ppv_hours = $setting->ppv_hours;
  
            $to_time = ppv_expirytime_started();
  
                 // Verify Payment
  
            $reference_code = $request->reference_id;
  
            $curl = curl_init();
  
            curl_setopt_array($curl, array(
                CURLOPT_URL => "https://api.paystack.co/transaction/verify/$reference_code",
                CURLOPT_RETURNTRANSFER => true,
                CURLOPT_ENCODING => "",
                CURLOPT_MAXREDIRS => 10,
                CURLOPT_TIMEOUT => 30,
                CURLOPT_SSL_VERIFYHOST => 0,
                CURLOPT_SSL_VERIFYPEER => 0,
                CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
                CURLOPT_CUSTOMREQUEST => "GET",
                CURLOPT_HTTPHEADER => $this->SecretKey_array,
            ));
  
            $result = curl_exec($curl);
            $payment_result = json_decode($result, true);
            $err = curl_error($curl);
            curl_close($curl);
  
            $Audio = Audio::where('id','=',$request->audio_id)->first();
  
            if(!empty($Audio)){
            $moderators_id = $Audio->user_id;
            }
  
            if(!empty($moderators_id)){
                $moderator        = ModeratorsUser::where('id','=',$moderators_id)->first();
                $total_amount     = $Audio->ppv_price;
                $title            =  $Audio->title;
                $commssion        = VideoCommission::first();
                $percentage       = $commssion->percentage;
                $ppv_price        = $Audio->ppv_price;
                $admin_commssion  = ($percentage/100) * $ppv_price ;
                $moderator_commssion = $ppv_price - $percentage;
                $moderator_id = $moderators_id;
            }
            else
            {
                $total_amount   = $Audio->ppv_price;
                $title          =  $Audio->title;
                $commssion      = VideoCommission::first();
                $percentage     = null;
                $ppv_price       = $Audio->ppv_price;
                $admin_commssion =  null;
                $moderator_commssion = null;
                $moderator_id = null;
            }
  
            $purchase = new PpvPurchase;
            $purchase->user_id       =  $request->user_id ;
            $purchase->audio_id       =  $request->audio_id ;
            $purchase->total_amount  =  $payment_result['data']['amount'] ;
            $purchase->admin_commssion = $admin_commssion;
            $purchase->moderator_commssion = $moderator_commssion;
            $purchase->status = 'active';
            $purchase->to_time = $to_time;
            $purchase->moderator_id = $moderator_id;
            $purchase->save();

            if ($err) {                 // Error
                $response = array(
                    "status"  => 'false' ,
                    "message" => $err
                );
            }
            else {                      // Success
                $response = array(
                    "status"  => 'true' ,
                    "message" => "Payment done! Successfully" ,
                );
            }
  
        } catch (\Exception $e) {
  
            $response = array(
                "status"  => 'false' ,
                "message" => $e->getMessage(),
           );
        }
        return response()->json($response, 200);
    }

    
    public function Channels( Request $request ){
      
      try {
        
        $Admin_EPG_Channel =  AdminEPGChannel::get()->map(function ($item) {
              $item['image_url'] = $item->image != null ? URL::to('public/uploads/EPG-Channel/'.$item->image ) : default_vertical_image_url() ;
              $item['Player_image_url'] = $item->player_image != null ?  URL::to('public/uploads/EPG-Channel/'.$item->player_image ) : default_horizontal_image_url();
              $item['Logo_url'] = $item->logo != null ?  URL::to('public/uploads/EPG-Channel/'.$item->logo ) : default_vertical_image_url();
              return $item;
          });

        $response = array(
          "status"  => 'true' ,
          "Channels" => $Admin_EPG_Channel ,
          "message" => "Retrieved Channels Successfully" ,
        );
        
      } catch (\Throwable $th) {
          $response = array(
            "status"  => 'false' ,
            "message" => $th->getMessage(),
        );
      }
        return response()->json($response, 200);

    }

    public function ChannelScheduledVideos( Request $request ){

      try {

        $channe_id = $request->channe_id;
        $date = !empty($request->date) ? $request->date : date('m-d-Y');
        $time_zone = $request->time_zone;
        $carbonDate = \Carbon\Carbon::createFromFormat('m-d-Y', $date);
        $choosed_date = $carbonDate->format('n-j-Y');
        $Channel_videos =  AdminEPGChannel::get()->map(function ($item) use ($request,$choosed_date) {
            $item['image_url'] = $item->image != null ? URL::to('public/uploads/EPG-Channel/'.$item->image ) : default_vertical_image_url() ;
            $item['Player_image_url'] = $item->player_image != null ?  URL::to('public/uploads/EPG-Channel/'.$item->player_image ) : default_horizontal_image_url();
            $item['Logo_url'] = $item->logo != null ?  URL::to('public/uploads/EPG-Channel/'.$item->logo ) : default_vertical_image_url();
            // $item['scheduled_videos'] = ChannelVideoScheduler::where('channe_id',$item->id)->where('choosed_date',$choosed_date)->get();
  
            $scheduled_videos = ChannelVideoScheduler::where('channe_id', $item->id)->where('time_zone', $request->time_zone)->where('choosed_date', $choosed_date)->get();
            $scheduled_videos->each(function ($video, $index) use ($scheduled_videos, $item,$request) {
                $nextVideoTitle = $index + 1 < $scheduled_videos->count() ? $scheduled_videos[$index + 1]->socure_title : null;
                $video->channel_name = $nextVideoTitle ? $item->name : $item->name;
                $video->up_next = $nextVideoTitle ? $nextVideoTitle : 0;
                $item['time_zone_name'] = TimeZone::where('id', $request->time_zone)->pluck('time_zone')->first();
              });

            $item['scheduled_videos'] = $scheduled_videos;
          return $item;
        });
       
        $response = array(
          "status"  => 'true' ,
          "Channel_videos" => $Channel_videos ,
          "message" => "Retrieved Channels Videos Successfully" ,
        );
        
      } catch (\Throwable $th) {
          $response = array(
            "status"  => 'false' ,
            "message" => $th->getMessage(),
        );
      }
        return response()->json($response, 200);

    }
    

    
    public function ChannelScheduledDataVideos( Request $request ){

      try {

        $channe_id = $request->channe_id;
        $date = !empty($request->date) ? $request->date : date('m-d-Y');
        $time_zone = $request->time_zone;
        $carbonDate = \Carbon\Carbon::createFromFormat('m-d-Y', $date);
        $choosed_date = $carbonDate->format('n-j-Y');

        $ChannelVideoScheduler = ChannelVideoScheduler::where('channe_id',$channe_id)
            ->where('choosed_date',$choosed_date)->get()->map(function ($item) use ($request,$choosed_date) {
            $item['image_url'] = $item->image != null ? URL::to('public/uploads/images/'.$item->image ) : default_vertical_image_url() ;
          return $item;
        });

       
        $response = array(
          "status"  => 'true' ,
          "Channel_videos" => $ChannelVideoScheduler ,
          "message" => "Retrieved Channels Videos Successfully" ,
        );
        
      } catch (\Throwable $th) {
          $response = array(
            "status"  => 'false' ,
            "message" => $th->getMessage(),
        );
      }
        return response()->json($response, 200);

    }
 
    
    public function ChooseTranslation( Request $request ){

      try {


            $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
            $userIp = $geoip->getip();
            $user_id = $request->user_id;
            $subuser_id = $request->subuser_id;
            $languageCode = $request->languageCode;
            $mobile_address = $request->mobile_address;

            if(!empty($user_id) || !empty($subuser_id)){

                $Setting =  Setting::first();
                $data = Session::all();
                $subuser_id = (!empty($request->subuser_id)) ? $request->subuser_id : null ;
                $Subuserranslation = UserTranslation::where('multiuser_id',$subuser_id)->first();
                $UserTranslation = UserTranslation::where('user_id',$user_id)->first();

                if($subuser_id != null){
                    $Subuserranslation = UserTranslation::where('multiuser_id',$subuser_id)->first();
                    if(!empty($Subuserranslation)){
                        UserTranslation::where('multiuser_id',$subuser_id)->first()->update([
                        'translate_language'  => $request->languageCode ,
                    ]);
                    }else{
                        UserTranslation::create([
                            'multiuser_id'        =>  $subuser_id,
                            'translate_language'  => $request->languageCode ,
                        ]);
                    }
                }else if(!empty($UserTranslation)){
                    UserTranslation::where('user_id',$user_id)->first()->update([
                        'translate_language'  => $request->languageCode ,
                    ]);
                }else{
                    UserTranslation::create([
                        'user_id'               =>  $user_id,
                        'translate_language'    => $request->languageCode ,
                    ]);
                }
            }else{

                $UserTranslation = UserTranslation::where('ip_address',$mobile_address)->first();

                if(!empty($UserTranslation)){
                    UserTranslation::where('ip_address',$mobile_address)->first()->update([
                    'translate_language'  => $request->languageCode ,
                ]);
                }else{
                    UserTranslation::create([
                        'ip_address'        =>  $mobile_address,
                        'translate_language'  => $request->languageCode ,
                    ]);
                }

            }

            $response = array(
              "status"  => 'true' ,
              "message" => "Successfully Added Choosed Translation" ,
            );

          }catch (\Throwable $th) {
            $response = array(
              "status"  => 'false' ,
              "message" => $th->getMessage(),
          );
        }
          return response()->json($response, 200);
    }

    public function UserTranslation( Request $request ){

      try {

            $user_id = $request->user_id;
            $subuser_id = $request->subuser_id;
            $mobile_address = $request->mobile_address;
            $website_default_language = Setting::pluck('website_default_language')->first() ? Setting::pluck('website_default_language')->first() : 'en';

            if(!empty($mobile_address)){

              $UserTranslation = UserTranslation::where('ip_address',$mobile_address)->first();
     
              if(!empty($UserTranslation)){
                  $translate_language = GetWebsiteName().$UserTranslation->translate_language;
                  $language_code = $UserTranslation->translate_language;
              }else{
                  $translate_language = GetWebsiteName().$website_default_language;
                  $language_code = $website_default_language;

              }

          }else if(!empty($user_id) && !empty($subuser_id)){
     
              if($subuser_id != ''){
                  $Subuserranslation = UserTranslation::where('multiuser_id',$subuser_id)->first();
                  if(!empty($Subuserranslation)){
                      $translate_language = GetWebsiteName().$Subuserranslation->translate_language;
                      $language_code = $Subuserranslation->translate_language;

                  }else{
                      $translate_language = GetWebsiteName().$website_default_language;
                      $language_code = $website_default_language;
  
                    }
              }else{
                  $translate_language = GetWebsiteName().$website_default_language;
                  $language_code = $website_default_language;

              }
     
          }else if(!empty($user_id)){
     
            if($user_id != ''){
              $UserTranslation = UserTranslation::where('user_id',$user_id)->where('multiuser_id',null)->first();
              if(!empty($UserTranslation)){
                    $translate_language = GetWebsiteName().$UserTranslation->translate_language;
                    $language_code = $UserTranslation->translate_language;

                }else{
                    $translate_language = GetWebsiteName().$website_default_language;
                    $language_code = $website_default_language;
              }
            }else{
                $translate_language = GetWebsiteName().$website_default_language;
                $language_code = $website_default_language;
            }
   
          }else{
                $translate_language = GetWebsiteName().$website_default_language;
                $language_code = $website_default_language;
          }
          $translationFilePath = URL::to('resources/lang/' . $translate_language . '.json');
          $context = stream_context_create(['ssl' => ['verify_peer' => false, 'verify_peer_name' => false]]);
          
          // Use the @ symbol to suppress warnings/errors and handle the situation yourself
          $jsonContent = @file_get_contents($translationFilePath, false, $context);
          
          if ($jsonContent === false) {
              // File not found or error occurred, handle accordingly
              $translationData = []; // Set default value to an empty array or any other default data
          } else {
              // File successfully loaded, decode the JSON content
              $translationData = json_decode($jsonContent, true); // Set the second parameter to true for an associative array
          }
            // Decode the JSON content into a PHP array or object
            $translationData = json_decode($jsonContent, true); // Set the second parameter to true for an associative array
  
            $response = array(
              "status"  => 'true' ,
              'language_code' => $language_code,
              'User_language_code' => $translate_language,
              'translationData' => $translationFilePath,
              'translationFileURL' => $translationData,
              "message" => "Successfully Retrived Data" ,
            );

          }catch (\Throwable $th) {
            $response = array(
              "status"  => 'false' ,
              "message" => $th->getMessage(),
          );
        }
          return response()->json($response, 200);
    }
    public function LanguageTranslation( Request $request ){
      try{

        $TranslationLanguage  = TranslationLanguage::where('status',1)->get(); 

        $response = array(
          "status"  => 'true' ,
          'TranslationLanguage' => $TranslationLanguage,
          "message" => "Successfully Retrived Data" ,
        );

        }catch (\Throwable $th) {
          $response = array(
            "status"  => 'false' ,
            "message" => $th->getMessage(),
        );
      }
        return response()->json($response, 200);
    }

    public function TranslationEnable( Request $request ){
      try{

        $TranslateCheckout    = SiteTheme::pluck('translate_checkout')->first(); 

        $response = array(
          "status"  => 'true' ,
          'TranslateCheckout' => $TranslateCheckout,
          "message" => "Successfully Retrived Data" ,
        );

        }catch (\Throwable $th) {
          $response = array(
            "status"  => 'false' ,
            "message" => $th->getMessage(),
        );
      }
        return response()->json($response, 200);
    }

    // OTP

    public function Mobile_exists_verify(Request $request)
    {
      try {
          
        $validator = Validator::make($request->all(), [
          'mobile_number' => 'required|numeric',
          'ccode'         => 'required',
        ]);
    
        if ($validator->fails()) {

          $response = [
              'status'    => 'false',
              'message'    => $validator->errors()->first(),
          ];
  
          return response()->json($response, 422); 
        }

        $user = User::where('mobile',$request->mobile_number)->where('ccode',$request->ccode)->first();

        if(!is_null($user)  ){

          if ($user->active != 1 ) {
            $mobile_number_status = "mobile_number_exists";
            $message = Str::title('this mobile number in inactive status !!');
            $redirect_api     = URL::to('api/auth/login');
  
            $user_detail = null ;

          }else{

            $mobile_number_status = "mobile_number_exists";
            $message = Str::title('this mobile number already exists !!');
            $redirect_api     = URL::to('api/auth/login');
  
            $user_detail = $user ;
          }

        }else{

          $mobile_number_status = "mobile_number_not_exists";
          $message = Str::title('this mobile number not exists exists !!');
          $redirect_api     = URL::to('api/auth/signup');

          $user_detail = User::create([
            'mobile' => $request->mobile_number,
            'ccode'  => $request->ccode,
            'email'  => random_int(100000, 999999) ,
            'role'   => 'registered',
          ]);
        }

        $response = array(
          'status'   => 'true',
          'status_code' => 200,
          'mobile_number_status' => $mobile_number_status ,
          'redirect_api' => $redirect_api ,
          'message'      => $message,
          'user_detail'  => $user_detail ,
        );

      } catch (\Throwable $th) {

        $response = array(
          'status'  => 'false',
          'status_code' => 400,
          'message' => $th->getMessage(),
        );

      }

      return response()->json($response, 200);
    }

    public function Sending_OTP(Request $request)
    {
      try {

        $validator = Validator::make($request->all(), [ 'user_id' => 'required|numeric' ,]);

        if ($validator->fails()) {
            return response()->json(['status' => 'false', 'message' => $validator->errors()->first(),], 422); 
        }
        
        $AdminOTPCredentials =  AdminOTPCredentials::where('status',1)->first();

        if(is_null($AdminOTPCredentials))
           return response()->json( array( "status" => 'false' , "message" => 'Please, Check the Admin OTP Credentials', ) , 422);
        
        $random_otp_number = random_int(1000, 9999);
        $user_id           = $request->user_id;

        $user = User::find($user_id);

        if (is_null($user->ccode) ||  (empty($user->ccode)) )
          return response()->json( array( "status" => 'false' , "message" => 'Ccode Missing', ) , 422);

        $ccode = str_replace('+','',$user->ccode );
        $mobile          = $user->mobile;
        $Mobile_number   = $ccode.$mobile ;

        if( !is_null($user) && ( $user->role ==  "admin" || $user->free_otp_status == 1 ) ){

          $user = User::Where('id',$user_id)->where('mobile',$mobile)->update([ "otp" => "1234", "password" => Hash::make("1234"),]);         

          return response()->json( [
            "status"     => 'true' ,
            "message"    => 'SMS Send Successfully' ,
            "user_details" => User::where('id',$user_id)->get() 
          ], 200); 

        }

        if( $AdminOTPCredentials->otp_vai == "fast2sms" ){

          $fast2sms_API_key  = $AdminOTPCredentials->otp_fast2sms_api_key ;

          $response = Http::withOptions(['verify' => false, ])  
          ->get('https://www.fast2sms.com/dev/bulkV2', [
                'authorization'    => $fast2sms_API_key ,
                'variables_values' => $random_otp_number,
                'route'   => 'otp',
                'numbers' => $user->mobile ,
                'flash'   => 1 ,
            ]);

          if ($response->failed()) {
              
              OTPLog::create([
                'status' => 'false' ,
                'message'=> 'SMS Not Sent' ,
                'request_id' => null,
                'Mobile_number' =>  $Mobile_number,
                'User_id'       =>  $user->id, 
                'otp_vai'       => 'fast2sms'
              ]);

              $response = array( "status"  => 'false' , "status_code" => 400,"message" => $response['message'] ,);

          } else {

              User::find($user_id)->update([
                'otp' => $random_otp_number ,
                'otp_request_id' => $response['request_id'] ,
                'otp_through' => $AdminOTPCredentials->otp_vai ,
                'password'    => Hash::make($random_otp_number),
                'email'       => 'No email for this id - '.$user_id,
                'active'      => 1,
              ]);

              OTPLog::create([
                'status' => "true" ,
                'message'=>'SMS Send Successfully' ,
                'request_id' => $response['request_id'],
                'Mobile_number' =>  $Mobile_number,
                'User_id'       =>  $user->id, 
                'otp_vai'       => 'fast2sms'
              ]);

              $response = array(
                "status"     => 'true' ,
                "status_code" => 200,
                "request_id" => $response['request_id'] ,
                "message"    => 'SMS Send Successfully' ,
                "user_details" => User::where('id',$user_id)->get() ,
              );
          }
        }
        
        if( $AdminOTPCredentials->otp_vai == "24x7sms" ){

            $API_key_24x7sms  = $AdminOTPCredentials->otp_24x7sms_api_key ;

              // For Indian Numbers
            if ($ccode == "91" ) {

                $ServiceName = "TEMPLATE_BASED";
                $DLTTemplateID = $AdminOTPCredentials->DLTTemplateID;
                $message = Str_replace('{#var#}', $random_otp_number, $AdminOTPCredentials->template_message);
                $SenderID = $AdminOTPCredentials->otp_24x7sms_sender_id ;
                
                $inputs = array(
                    'APIKEY' => $API_key_24x7sms,
                    'MobileNo' => $Mobile_number,
                    'SenderID' => $SenderID,
                    'ServiceName' => $ServiceName,
                    'DLTTemplateID' => $DLTTemplateID, 
                    'Message' => $message,
                );
            } else {
                // For international Numbers
                $ServiceName = "INTL_TEMPLATE";
                $message = Str_replace('{#var#}', $random_otp_number, $AdminOTPCredentials->INTL_template_message);
                $SenderID = $AdminOTPCredentials->otp_24x7sms_INTL_sender_id ;
                
                $inputs = array(
                    'APIKEY' => $API_key_24x7sms,
                    'MobileNo' => $Mobile_number,
                    'SenderID' => $SenderID,
                    'ServiceName' => $ServiceName,
                    'Message' => $message,
                );
            }
           
            $response = Http::withOptions(['verify' => false, ])->get('https://smsapi.24x7sms.com/api_2.0/SendSMS.aspx', $inputs);

            if (str_contains($response->body(), 'success')) {

                $parts = explode(':', $response->body());
                $msgId = $parts[1];

                User::find($user_id)->update([
                  'otp' => $random_otp_number ,
                  'otp_request_id' => $msgId ,
                  'otp_through' => $AdminOTPCredentials->otp_vai ,
                  'password'    => Hash::make($random_otp_number),
                  'active'      => 1,
                  // 'email'       => 'No email for this id - '.$user_id,
                ]);

                OTPLog::create([
                  'status' => 'true' ,
                  'message' =>'SMS Send Successfully' ,
                  'request_id' => $msgId,
                  'Mobile_number' =>  $Mobile_number,
                  'User_id'       =>  $user->id, 
                  'otp_vai'       => '24x7sms'
                ]);

                $response = array(
                  "status"     => 'true' ,
                  "status_code" => 200,
                  "request_id" => $response['request_id'] ,
                  "message"    => 'OTP Sent Successfully' ,
                  "user_details" => User::where('id',$user_id)->get() ,
                );

            }else {

                OTPLog::create([
                  'status' => 'false' ,
                  'message'=> $response->body() ,
                  'request_id' => null,
                  'Mobile_number' =>  $Mobile_number,
                  'User_id'       =>  $user->id, 
                  'otp_vai'       => '24x7sms'
                ]);

                $response = array( "status"  => 'false' , "status_code" => 400, "message" => 'OTP Not Sent' , );
            }      
        }

      } catch (\Throwable $th) {

          $response = array(
            "status"  => 'false' ,
            "status_code" => 400,
            "message" => $th->getMessage(),
          );
      }

      return response()->json($response, $response['status_code']);
    }

    public function Verify_OTP(Request $request)
    {
      try {
           
        $validator = Validator::make($request->all(), [
          'mobile_number' => 'required|numeric',
          'ccode' => 'required',
          'user_id' => 'required|numeric',
          'otp' => 'required|numeric',
        ]);
    
        if ($validator->fails()) {

          return response()->json( [
                    'status'    => 'false',
                    'message'    => $validator->errors()->first(),
                ], 422); 
        }

        $user_verify = User::find($request->user_id);

        if( !is_null($user_verify) && ( $user_verify->role ==  "admin" || $user_verify->free_otp_status == 1 ) ){

          $user_verify->update(["otp" => "1234", "password" => Hash::make("1234") ]);         

          return response()->json( [
            'status'    => 'true',
            'otp_status' => 'true',
            'message'    => Str::title('Otp verify successfully !!'),
          ], 200); 

        }

        $user = User::where('id',$request->user_id)->where('mobile',$request->mobile_number)->where('otp',$request->otp)->first();

        if(!is_null($user)  ){

          $otp_status = "true";
          $message = Str::title('Otp verify successfully!');

          // User::find($request->user_id)->update([
          //   'otp' => null ,
          //   'otp_request_id' => null ,
          //   'otp_through' => null ,
          // ]);

        }else{

          $otp_status = "false";
          $message = Str::title('invalid otp');
        }

        $response = array(
          'status'  => 'true' ,
          'message' => $message,
          'otp_status' => $otp_status ,
          'status_code' => 200,
        );
        
      } catch (\Throwable $th) {

        $response = array(
          'status'  => 'false' ,
          'status_code' => 400,
          'message' => $th->getMessage(),
        );

      }
      return response()->json($response, $response['status_code']);
    }


public function SendVideoPushNotification(Request $request)
  {
    
    $user_id = $request->user_id;
    $userId = $request->user_id;

    $currentDate = Carbon::now();
    $threeDaysAgo = $currentDate->subDays(5);

    $videos = Video::where('publish_time', '>', $threeDaysAgo)
    ->get();

    $videos = Video::where('publish_time', '>', $threeDaysAgo)
    ->whereNotIn('id', function($query) use ($userId) {
         $query->select('socure_id')
               ->from('notifications')
               ->where('user_id', $userId)
               ->where('socure_type', 'Video');
     })
    ->get();
      if(count($videos) > 0){
        foreach($videos as $key => $video){
          $video_img = URL::to('/public/uploads/images/'.$video->player_image);
          send_video_push_notifications('Notification From '. GetWebsiteName(),'Latest Video Available',$video->title,$video->id,$userId,$video_img);
        }
        $response = array(
          'status'=>'true',
          'message'=>'Notification Latest Video Available.',
          // 'videos' => $videos
        );

      }else{
        $response = array(
          'status'=>'false',
          'message'=>'Notification No Latest Video Available.',
          // 'videos' => $videos
        );
      }
    return response()->json($response, 200);
  }


  public function TimeZone( Request $request ){

    try {

        
      $response = array(
        "status"  => 'true' ,
        "TimeZone_ID" => TimeZone::where('time_zone', $request->time_zone)->pluck('id')->first() ,
        "TimeZone" => TimeZone::where('time_zone', $request->time_zone)->first() ,
        "message" => "Retrieved Channels Videos Successfully" ,
      );
      
    } catch (\Throwable $th) {
        $response = array(
          "status"  => 'false' ,
          "message" => $th->getMessage(),
      );
    }
      return response()->json($response, 200);

  }

  public function channel_epg(Request $request)
  {
    try {
          $this->validate($request, [
            'current_timezone'  => 'required' ,
            'date' => 'required'
          ]);

          $default_vertical_image_url = default_vertical_image_url() ;
          $default_horizontal_image_url = default_horizontal_image_url();
          $current_timezone = $request->current_timezone;

          $epg_channel_data =  AdminEPGChannel::where('status',1)->limit(15)->get()->each(function ($item )  use( $default_horizontal_image_url, $default_vertical_image_url ,$request ) {

              $item['image_url'] = $item->image != null ? URL::to('public/uploads/EPG-Channel/'.$item->image ) : $default_vertical_image_url ;
              $item['Player_image_url'] = $item->player_image != null ?  URL::to('public/uploads/EPG-Channel/'.$item->player_image ) : $default_horizontal_image_url ;
              $item['Logo_url'] = $item->logo != null ?  URL::to('public/uploads/EPG-Channel/'.$item->logo ) : $default_vertical_image_url;

              $item['ChannelVideoScheduler']  =  ChannelVideoScheduler::query()
                                                  
                                                  ->when( !is_null($request->date), function ($query) use ($request) {
                                                      return $query->Where('choosed_date', $request->date);
                                                  })

                                                  ->orderBy('start_time','asc')->where('channe_id',$item->id)->limit(30)->get()->map(function ($item) use ($request) {

                                                      $item['TimeZone']   = TimeZone::where('id',$item->time_zone)->first();

                                                      $converted_start_time = Carbon::createFromFormat('m-d-Y H:i:s', $item->choosed_date . $item->start_time, $item['TimeZone']->time_zone )
                                                                                                      ->copy()->tz( $request->current_timezone );

                                                      $converted_end_time = Carbon::createFromFormat('m-d-Y H:i:s', $item->choosed_date . $item->end_time, $item['TimeZone']->time_zone )
                                                                                                      ->copy()->tz( $request->current_timezone );

                                                      $item['converted_start_time'] = $converted_start_time->format('h:i');
                                                      $item['converted_end_time'] = $converted_end_time->format('h:i');

                                                      $item['converted_start_time_AM_PM'] = $converted_start_time->format('A');
                                                      $item['converted_end_time_AM_PM'] = $converted_end_time->format('A');

                                                      $item['channel_name'] = AdminEPGChannel::where('id',$item->channe_id)->pluck('name')->first();
                                                      return $item;
                                                  });

                                                  $item['ChannelVideoScheduler']->each(function ($scheduleItem, $key) use ($item) {

                                                      if ($key < $item['ChannelVideoScheduler']->count() - 1) {
                                                          $scheduleItem['up_next']  = $item['ChannelVideoScheduler'][$key + 1]->socure_title;
                                                      }else{
                                                          $scheduleItem['up_next'] = null;
                                                      }
                                                  });

              return $item;
          });

          $response = array(
            "status"  => 'true' ,
            "message" => "Retrieved Channels EPG Successfully" ,
            "epg_channel_data" => $epg_channel_data,
          );

    } catch (\Throwable $th) {

      $response = array(
        "status"  => 'false' ,
        "message" => $th->getMessage(),
      );
    }

    return response()->json($response, 200);

  }

  public function unique_channel_epg(Request $request)
  {
    try {
          $this->validate($request, [
            'epg_channel_id' => 'required',
          ]);

          $current_timezone = current_timezone();
          $carbon_now = Carbon::now($current_timezone);
          $carbon_current_time =  $carbon_now->format('H:i:s');
          $carbon_today =  $carbon_now->format('n-j-Y');
          $default_vertical_image_url = default_vertical_image_url() ;
          $default_horizontal_image_url = default_horizontal_image_url();
  
          $epg_channel_data =  AdminEPGChannel::where('id',$request->epg_channel_id)->where('status',1)->get()->map(function ($item) use ($default_vertical_image_url ,$default_horizontal_image_url , $carbon_now , $carbon_today , $current_timezone) {
                      
                      $item['image_url'] = $item->image != null ? URL::to('public/uploads/EPG-Channel/'.$item->image ) : $default_vertical_image_url ;
                      $item['Player_image_url'] = $item->player_image != null ?  URL::to('public/uploads/EPG-Channel/'.$item->player_image ) : $default_horizontal_image_url;
                      $item['Logo_url'] = $item->logo != null ?  URL::to('public/uploads/EPG-Channel/'.$item->logo ) : $default_vertical_image_url;
                                                          
                      $item['ChannelVideoScheduler_current_video_details']  =  ChannelVideoScheduler::where('channe_id',$item->id)->where('choosed_date' , $carbon_today )
                                                                                  ->get()->map(function ($scheduler_item) use ($carbon_now , $current_timezone) {
  
                                                                                      $TimeZone   = TimeZone::where('id',$scheduler_item->time_zone)->first();
  
                                                                                      $converted_start_time =Carbon::createFromFormat('m-d-Y H:i:s', $scheduler_item->choosed_date . $scheduler_item->start_time, $TimeZone->time_zone )
                                                                                                                                      ->copy()->tz( $current_timezone );
  
                                                                                      $converted_end_time =Carbon::createFromFormat('m-d-Y H:i:s', $scheduler_item->choosed_date . $scheduler_item->end_time, $TimeZone->time_zone )
                                                                                                                                      ->copy()->tz( $current_timezone );
  
                                                                                      $scheduler_item['converted_start_time'] = $converted_start_time->format('h:i');
                                                                                      $scheduler_item['converted_end_time'] = $converted_end_time->format('h:i');
                                                                                      
                                                                                      $scheduler_item['current_time_now'] = $carbon_now->format('h:i A');
                                
                                                                                      if ($carbon_now->between($converted_start_time, $converted_end_time)) {
                                                                                          $scheduler_item['video_image_url'] = URL::to('public/uploads/images/'.$scheduler_item->image ) ;
                                                                                          $scheduler_item['converted_start_time'] = $converted_start_time->format('h:i A');
                                                                                          $scheduler_item['converted_end_time']   =   $converted_end_time->format('h:i A');
                                                                                              
                                                                                          $scheduler_item['converted_start_time_AM_PM'] = $converted_start_time->format('A');
                                                                                          $scheduler_item['converted_end_time_AM_PM'] = $converted_end_time->format('A');
                                                                                          return $scheduler_item ;
                                                                                      }
  
                                                                                  })->filter() 
                                                                                  ->values(); 
  
                      return $item;
          });

          $response = array(
            "status"  => 'true' ,
            "message" => "Retrieved Channels EPG Successfully" ,
            "epg_channel_data" => $epg_channel_data,
          );

    } catch (\Throwable $th) {

      $response = array(
        "status"  => 'false' ,
        "message" => $th->getMessage(),
      );
    }

    return response()->json($response, 200);

  }


  public function StorageSetting(Request $request)
  {
    try {
    
      $response = array(
        "status"  => 'true' ,
        "message" => "Retrieved Storage Setting Successfully" ,
        "StorageSetting" => StorageSetting::first(),
      );

    } catch (\Throwable $th) {

      $response = array(
          "status"  => 'false' ,
          "message" => $th->getMessage(),
        );
    }

      return response()->json($response, 200);

    }


    public function GeoIPLocation( Request $request ){

      try {

            $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
            $userIp = $geoip->getip();

            $response = array(
              "status"  => 'true' ,
              "message" => "GeoIP Location" ,
              'userIp'  => $userIp ,
            );

          }catch (\Throwable $th) {
            $response = array(
              "status"  => 'false' ,
              "message" => $th->getMessage(),
          );
        }
          return response()->json($response, 200);
    }

    public function Ads_variables( ){

      try {

        $response = array(
          "status"  => 'true' ,
          "message" => "Retrieved Ads Variables" ,
          'ads_variables'  => Adsvariables::all() ,
        );

      } catch (\Throwable $th) {

        $response = array(
            "status"  => 'false' ,
            "message" => $th->getMessage(),
        );
      }

      return response()->json($response, 200);
    }


    public function tv_splash_screen()
    {
        try {

            $splash_screen = TVSplashScreen::latest()->get()->map(function ($item) {
                    $item['AndroidTv_splash_screen'] = $item->AndroidTv_splash_screen != null ? URL::to('public/uploads/settings/'.$item->AndroidTv_splash_screen ) : default_vertical_image_url()  ;
                    $item['LG_splash_screen'] = $item->LG_splash_screen != null ? URL::to('public/uploads/settings/'.$item->LG_splash_screen ) : default_vertical_image_url()  ;
                    $item['RokuTV_splash_screen'] = $item->RokuTV_splash_screen != null ? URL::to('public/uploads/settings/'.$item->RokuTV_splash_screen ) : default_vertical_image_url()  ;
                    $item['Samsung_splash_screen'] = $item->Samsung_splash_screen != null ? URL::to('public/uploads/settings/'.$item->Samsung_splash_screen ) : default_vertical_image_url()  ;
                    $item['Firetv_splash_screen'] = $item->Firetv_splash_screen != null ? URL::to('public/uploads/settings/'.$item->Firetv_splash_screen ) : default_vertical_image_url()  ;

                    return $item;
           });

            $data = array(
                'status'  => true,
                'message' => "Splash Screen data Retrieved Successfully" ,
                'Total_count' => TVSplashScreen::count() ,
                'splash_Screen' => $splash_screen,
            );
        }
        catch (\Throwable $th) {

            $data = array(
                'status'  => false,
                'message' => $th->getMessage() ,
            );
        }

        return response()->json($data, 200);
    }

    public function Cancel_Subscriptions(Request $request)
    {

      $validator = Validator::make($request->all(), [
        'user_id' => 'required',
      ]);
      
      if ($validator->fails()) {

        return response()->json([
            'status' => 'false',
            'Message'=> $validator->errors()->first(),
          ], 400);
      }

      try {
        
          // Check subscription user exists

          $subscription_user = User::query()->wherenotNull('stripe_id')->where('id',$request->user_id)
          ->where('role','subscriber')
          ->first();

        if(is_null($subscription_user)){

              return response()->json([
                'status' => 'false',
                'message'=> 'Unauthorized User',
                'subscription_user' => $subscription_user,
              ], 400);
        }

          // Check payment gateway 

        switch ($subscription_user->payment_gateway) {

          case 'Razorpay':

            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);
            $api->subscription->fetch($subscription_user->stripe_id)->cancel(array('cancel_at_cycle_end'  => 0));
            break;
            
          case 'Stripe':

            $stripe = new \Stripe\StripeClient( env('STRIPE_SECRET') );
            $stripe->subscriptions->cancel( $subscription_user->stripe_id,[] );
            break;

          case 'Recurly':
                
            $recurly_PaymentSetting = PaymentSetting::where('payment_type','Recurly')->where('recurly_status',1)->first();

            if($recurly_PaymentSetting != null){

                if($recurly_PaymentSetting->live_mode == 0){
                    $recurly_public_key = $recurly_PaymentSetting->recurly_test_public_key;
                    $recurly_private_key = $recurly_PaymentSetting->recurly_test_private_key;
                }else{
                    $recurly_public_key = $recurly_PaymentSetting->recurly_live_public_key;
                    $recurly_private_key = $recurly_PaymentSetting->recurly_live_private_key;
                }
            }else{
               
              return response()->json([
                'status' => 'false',
                'Message'=> 'Invalid Recurly payment gateway,pls contact admin',
              ], 400);

            }

            $client = new RecurlyClient($recurly_private_key);
            $subscription = $client->cancelSubscription($subscription_id->stripe_id);
            break;
          
          default:
              
              return response()->json([
                'status' => 'false',
                'Message'=> 'Invalid payment gateway',
                'subscription_user' => $subscription_user,
              ], 400);

            break;
        }
        
        Subscription::where('stripe_id',$subscription_user->stripe_id)->update([
          'stripe_status' =>  'Cancelled',
        ]);

        User::where('id',$subscription_user->id )->update([
          'role'                  =>  'registered',
          'stripe_id'             =>  null,
          'subscription_start'    =>  null,
          'subscription_ends_at'  =>  null,
          'payment_type'          =>  null,
          'payment_status'        => 'Cancel',
          'payment_gateway'       =>  null,
          'coupon_used'           =>  null ,
        ]);

        $response = array(
          'status'  => 'true',
          'status_code'  => 200,
          'message' => "Subscription has been Cancelled Successfully" ,
          'user'    => User::find($request->user_id),
        );

      } catch (\Throwable $th) {
        
        $response = array(
          'status'  => 'false',
          'status_code'  => 400,
          'message' => $th->getMessage() ,
        );
      }

      return response()->json($response, $response['status_code']);
    }




    public function cancelsubscription(Request $request)
    {
      $user_id = $request->user_id;
      $device_type = $request->device_type;
      $Razorpay = User::where('users.id',$user_id)
      ->Join("subscriptions", "subscriptions.user_id", "=", "users.id")
      ->whereColumn('users.stripe_id', '=', 'subscriptions.stripe_id')
      ->first();

      if($Razorpay != null && $Razorpay->PaymentGateway  ==  "Razorpay"){
        return redirect::to('RazorpayCancelSubscriptions');
      }
      else{
                  // Subscription Cancel
          try {

            if($device_type == 'IOS'){
                  User::where('id',$user_id )->update([
                    'payment_gateway' =>  null ,
                    'role'            => 'registered',
                    'stripe_id'       =>  null ,  
                    'payment_status'  =>   'Cancel' ,
                ]);
            }else{

                $user = User::where('id',$user_id)->first();

                $stripe_plan = User::where('id',$user_id)->where('payment_gateway','Stripe')->pluck('stripe_id')->first();
                $stripe = new \Stripe\StripeClient( env('STRIPE_SECRET') );
                $stripe->subscriptions->cancel( $stripe_plan,[] );


                User::where('id',$user_id )->update([
                  'payment_gateway' =>  null ,
                  'role'            => 'registered',
                  'stripe_id'       =>  null ,  
                  'payment_status'  =>   'Cancel' ,
              ]);

                Subscription::where('stripe_id',$stripe_plan)->update([
                  'stripe_status' =>  'Cancelled',
              ]);
          }
                
          } catch (\Throwable $th) {

            $response = array(
              'status'  => 'false',
              'status_code'  => 501,
              'message' => 'There was a failure to terminate the subscription !' ."\r\n". $th->getMessage() ,
            );


          }
                // Email 

        $plan_name =  CurrentSubPlanName($user_id);
        $start_date =  SubStartDate($user_id);
        $ends_at =  SubEndDate($user_id);
        $template = EmailTemplate::where('id','=', 27)->first(); 
        $heading = $template->heading;

        try {
            \Mail::send('emails.cancelsubscription', array(
              'name' => $user->username,
              'plan_name' => $plan_name,
              'start_date' => $start_date,
              'ends_at' => $ends_at,
          
          ), function($message) use ($user,$heading,$plan_name){
              $message->from(AdminMail(),GetWebsiteName());
              $message->to($user->email, $user->username)->subject(str_replace('Name', $plan_name, $heading));
          });
         
            $email_log      = 'Mail Sent Successfully from cancel subscription';
            $email_template = "27";
            $user_id = Auth::user()->id;

            Email_sent_log($user_id,$email_log,$email_template);

        }
         catch (\Throwable $th) {

            $email_log      = $th->getMessage();
            $email_template = "27";
            $user_id = Auth::user()->id;

            Email_notsent_log($user_id,$email_log,$email_template);
        }
        
      

        Subscription::where('stripe_id',$stripe_plan)->update([
          'stripe_status' =>  'Cancel',
          'updated_at'    =>  Carbon::now()->toDateTimeString(),
        ]);

        $response = array(
          'status'  => 'true',
          'status_code'  => 201,
          'message' => 'Your subscription was successfully terminated!',
        );
      }
   }

   public function radiostationdetail(Request $request)
   { 
     try {
       
        $validator = Validator::make($request->all(), [
                      'liveid' => 'required', 
                      // 'user_id' => 'required'
                    ],
                      [
                        'liveid.required'  => 'Please enter your liveid',
                        // 'user_id.required' => 'Please enter your user_id',
                      ]);
  
        if ($validator->fails()) {
  
          return response()->json([
              'status' => 'false',
              'message'=> $validator->errors()->first(),
            ], 400);
        }
  
        $liveid = $request->liveid;
        $user_id = $request->user_id;
  
        // Live Language
  
          $languages = LiveLanguage::Join('languages','languages.id','=','live_languages.language_id')->where('live_languages.live_id',$liveid)->get('name');
  
          foreach($languages as $value){
            $language[] = $value['name'];
          }
  
          $languages = !empty($language) ? implode(",",$language) : " ";
          
        // Category Live
  
          $categorys = CategoryLive::join('live_categories','live_categories.id','=','livecategories.category_id')->where('live_id',$liveid)->get('name');
  
          foreach($categorys as $value){
            $category[] = $value['name'];
          }
  
          $categories = !empty($category) ? implode(",",$category) : ' ' ;
  
        // PPV 
  
          $current_date = date('Y-m-d h:i:s a', time());
  
          $ppv_exist = LivePurchase::where('video_id',$liveid)->where('user_id',$user_id)->count();
  
          if ($ppv_exist > 0) {
  
                $ppv_time_expire = LivePurchase::where('user_id','=',$user_id)->where('video_id','=',$liveid)->orderBy('created_at', 'desc')->pluck('to_time')->first();
  
                $ppv_video_status = $ppv_time_expire > $current_date ? "can_view" :  "expired" ;
  
          } else {
                $ppv_video_status = "pay_now";
          }
  
          //  Like & Dislike
  
          if($request->user_id != ''){
            $like_data = LikeDisLike::where("live_id","=",$liveid)->where("user_id","=",$user_id)->where("liked","=",1)->count();
            $dislike_data = LikeDisLike::where("live_id","=",$liveid)->where("user_id","=",$user_id)->where("disliked","=",1)->count();
            $like = ($like_data == 1) ? "true" : "false";
            $dislike = ($dislike_data == 1) ? "true" : "false";
          }
          else{
  
            $like = 'false';
            $dislike = 'false';
          }
  
          $radiostaion_details = LiveStream::where('id',$request->liveid)->where('active',1)
                        ->where('status',1)
                        ->where('stream_upload_via', 'radio_station')
                        ->get()
                        ->map(function ($item) use ($user_id) {
                            $item['image_url'] = URL::to('/').'/public/uploads/images/'.$item->image;
                            $item['player_image'] = URL::to('/').'/public/uploads/images/'.$item->player_image;
                            $item['live_description'] = $item->description ? $item->description : "" ;
                            $item['trailer'] = null ;
                            $item['livestream_format'] =  $item->url_type ;
  
                            $item['Share_URL'] = URL::to('radio-station/'.$item->slug);
  
                            $item['recurring_timezone_details'] = TimeZone::where('id', $item->recurring_timezone)->get();

                            $programDays = json_decode($item->scheduler_program_days);
                            $programTitles = json_decode($item->scheduler_program_title);
                            $programStartTimes = json_decode($item->scheduler_program_start_time);
                            $programEndTimes = json_decode($item->scheduler_program_end_time);
          
                            $daysOfWeek = [
                              0 => "Sunday",
                              1 => "Monday",
                              2 => "Tuesday",
                              3 => "Wednesday",
                              4 => "Thursday",
                              5 => "Friday",
                              6 => "Saturday",
                          ];

                        switch ($item->publish_type) {
                            case 'publish_now':
                                $daywisePrograms = array_map(function () use ($item) {
                                    return [[
                                        'title' => $item->title,
                                        'start_time' => '00:00',
                                        'end_time' => '23:59',
                                    ]];
                                }, array_flip($daysOfWeek));
                                $item['program_schedule_daywise'] = $daywisePrograms;
                                break;

                                case 'publish_later':
                                  $publishTime = $item->publish_time 
                                      ? Carbon::parse($item->publish_time)->format('H:i') 
                                      : '00:00';
                              
                                  $daywisePrograms = array_map(function () use ($publishTime, $item) {
                                      return [[
                                          'title' => $item->title,
                                          'start_time' => $publishTime,
                                          'end_time' => '23:59',
                                      ]];
                                  }, array_flip($daysOfWeek));
                              
                                  $item['program_schedule_daywise'] = $daywisePrograms;
                                  break;

                                case 'schedule_program':
                                    $programDays = json_decode($item->scheduler_program_days, true) ?? [];
                                    $programTitles = json_decode($item->scheduler_program_title, true) ?? [];
                                    $programStartTimes = json_decode($item->scheduler_program_start_time, true) ?? [];
                                    $programEndTimes = json_decode($item->scheduler_program_end_time, true) ?? [];

                                    $daywisePrograms = array_fill_keys($daysOfWeek, []);
                                    foreach ($programDays as $dayIndex) {
                                        $dayName = $daysOfWeek[$dayIndex] ?? null;
                                        if ($dayName) {
                                            foreach ($programTitles as $i => $title) {
                                                $daywisePrograms[$dayName][] = [
                                                    'title' => $title,
                                                    'start_time' => $programStartTimes[$i] ?? '',
                                                    'end_time' => $programEndTimes[$i] ?? '',
                                                ];
                                            }
                                        }
                                    }
                                    $item['program_schedule_daywise'] = $daywisePrograms;
                                    break;

                                default:
                                    $item['program_schedule_daywise'] = array_fill_keys($daysOfWeek, []);
                                    break;
                            }


                            if( $item['livestream_format'] == "mp4"){
                              $item['livestream_url'] =  $item->mp4_url ;
                            }
  
                            elseif( $item['livestream_format'] == "embed"){
                              $item['livestream_url'] =  $item->embed_url ;
                            }
  
                            elseif( $item['livestream_format'] == "live_stream_video"){
                              $item['livestream_url'] =  $item->live_stream_video ;
                            }
  
                            elseif( $item['livestream_format'] == "acc_audio_url"){
                              $item['livestream_url'] =  $item->acc_audio_url ;
                            }
  
                            elseif( $item['livestream_format'] == "acc_audio_file"){
                              $item['livestream_url'] =  $item->acc_audio_file ;
                            }
  
                            elseif( $item['livestream_format'] == "Encode_video"){
                              $item['livestream_url'] =  $item->hls_url ;
                            }
  
                            else{
                              $item['livestream_url'] =  null ;
                            }
  
                          // M3U_channels
                          $parser       = new M3UFileParser( $item->m3u_url);
                          $item['M3U_channel'] =   $parser->getGroup()  ;
  
            $plans_ads_enable = $this->plans_ads_enable($user_id);
  
            if( $plans_ads_enable == 1){
  
              $item['live_ads_url'] =  AdsEvent::Join('advertisements','advertisements.id','=','ads_events.ads_id')
                                        // ->whereDate('start', '=', Carbon\Carbon::now()->format('Y-m-d'))
                                        // ->whereTime('start', '<=', $current_time)
                                        // ->whereTime('end', '>=', $current_time)
                                        ->where('ads_events.status',1)
                                        ->where('advertisements.status',1)
                                        ->where('advertisements.id',$item->live_ads)
                                        ->pluck('ads_path')->first();
                              
            }else{
              $item['live_ads_url'] = null;
            }
           
            return $item;
          });
  
        $radiostationSlug = LiveStream::where('user_id','=',$liveid)->pluck('slug')->first();
  
        // Reccuring Program 
  
        $current_timezone = current_timezone();
  
        $default_vertical_image_url = default_vertical_image_url();
        $default_horizontal_image_url = default_horizontal_image_url();
  
        $radiostations = LiveStream::query()->where('active', 1)->where('status', 1)
                                        ->where('id', $request->liveid)
                                        ->get()->map(function ($item) use ($default_vertical_image_url,$default_horizontal_image_url,$user_id) {
                                          
                                          $item['image_url'] = !is_null($item->image) ? URL::to('/public/uploads/images/'.$item->image) : $default_vertical_image_url ;
                                          $item['Player_image_url'] = !is_null($item->player_image) ?  URL::to('/public/uploads/images/'.$item->player_image) : $default_horizontal_image_url ;
                                          $item['tv_image_url'] = !is_null($item->Tv_live_image) ? URL::to('/public/uploads/images/'.$item->Tv_live_image) : $default_horizontal_image_url  ;
                                          $item['description'] = $item->description ;
                                          $item['source']    = "Livestream";
  
                                          $item['live_description'] = $item->description ? $item->description : "" ;
                                          $item['trailer'] = null ;
                                          $item['livestream_format'] =  $item->url_type ;
                                          $item['recurring_timezone_details'] = TimeZone::where('id', $item->recurring_timezone)->get();
                
                                          $item['Share_URL'] = URL::to('radio-station/'.$item->slug);

                                          switch (true) {
  
                                            case $item['url_type'] == "mp4" &&  pathinfo($item['mp4_url'], PATHINFO_EXTENSION) == "mp4" :
                                                $item['livestream_URL'] =  $item->mp4_url ;
                                                $item['livestream_player_type'] =  'video/mp4' ;
                                            break;
  
                                            case $item['url_type'] == "mp4" &&  pathinfo($item['mp4_url'], PATHINFO_EXTENSION) == "m3u8" :
                                              $item['livestream_URL'] =  $item->mp4_url; ;
                                              $item['livestream_player_type'] =  'application/x-mpegURL' ;
                                            break;
  
                                            case $item['url_type'] == "embed":
                                                $item['livestream_URL'] =  $item->embed_url ;
                                                $item['livestream_player_type'] =  'video/mp4' ;
                                            break;
  
                                            case $item['url_type'] == "live_stream_video":
                                                $item['livestream_URL'] = $item->live_stream_video; ;
                                                $item['livestream_player_type'] =  'application/x-mpegURL' ;
                                            break;
  
                                            case $item['url_type'] == "m3u_url":
                                                $item['livestream_URL'] =  $item->m3u_url ;
                                                $item['livestream_player_type'] =  'application/x-mpegURL' ;
                                            break;
  
                                            case $item['url_type'] == "Encode_video":
                                                $item['livestream_URL'] =  $item->hls_url; ;
                                                $item['livestream_player_type'] =  'application/x-mpegURL'  ;
                                            break;
  
                                            case $item['url_type'] == "acc_audio_url":
                                              $item['livestream_URL'] =  $item->acc_audio_url ;
                                              $item['livestream_player_type'] =  'audio/aac' ;
                                            break;
  
                                            case $item['url_type'] == "acc_audio_file":
                                                $item['livestream_URL'] =  $item->acc_audio_file ;
                                                $item['livestream_player_type'] =  'audio/aac' ;
                                            break;
  
                                            case $item['url_type'] == "aws_m3u8":
                                              $item['livestream_URL'] =  $item->hls_url ;
                                              $item['livestream_player_type'] =  'application/x-mpegURL' ;
                                            break;
  
                                            default:
                                                $item['livestream_URL'] =  null ;
                                                $item['livestream_player_type'] =  null ;
                                            break;
                                        }
                
                                          // M3U Channels
  
                                          $parser  = new M3UFileParser( $item->m3u_url);
                                          $item['M3U_channel'] =   $parser->getGroup()  ;
                  
                                          // Live Ads
                                          $item['live_ads_url'] = null;
  
                                          $plans_ads_enable = $this->plans_ads_enable($user_id);
  
                                          if( $plans_ads_enable == 1){
                                
                                            $item['live_ads_url'] =  AdsEvent::Join('advertisements','advertisements.id','=','ads_events.ads_id')
                                                                      // ->whereDate('start', '=', Carbon\Carbon::now()->format('Y-m-d'))
                                                                      // ->whereTime('start', '<=', $current_time)
                                                                      // ->whereTime('end', '>=', $current_time)
                                                                      ->where('ads_events.status',1)
                                                                      ->where('advertisements.status',1)
                                                                      ->where('advertisements.id',$item->live_ads)
                                                                      ->pluck('ads_path')->first();
                                          }
  
                                        return $item;
                                      });
    
             $radiostations = $radiostations->filter(function ($livestream) use ($current_timezone) {
             $livestream->live_animation = 'true';
       
             if ($livestream->publish_type === 'publish_later') {
         
                 $Current_time = Carbon::now($current_timezone);
                
                 $publish_later_Status = Carbon::parse($livestream->publish_time)->startOfDay()->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i');
                 $publish_later_live_animation = Carbon::parse($livestream->publish_time)->format('Y-m-d\TH:i')  <=  $Current_time->format('Y-m-d\TH:i');
                 $livestream->publish_later_live_animation = $publish_later_live_animation  == true ? 'true' : 'false';
                 $livestream->live_animation = $publish_later_live_animation  == true ? 'true' : 'false';
                 return $publish_later_Status;
             }
         
             if ($livestream->publish_type === 'schedule_program') {
                 
                 $Current_time = Carbon::now($current_timezone);
         
                 $program_start_times = json_decode($livestream->scheduler_program_start_time);
                 $program_end_times = json_decode($livestream->scheduler_program_end_time);
         
                 $program_is_active = false;
         
                 if ($program_start_times && $program_end_times) {
                     foreach ($program_start_times as $index => $start_time) {
                         $end_time = $program_end_times[$index] ?? '';
           
                         $start_time = Carbon::parse($start_time);
                         $end_time = Carbon::parse($end_time);
         
                         if ($Current_time->between($start_time, $end_time)) {
                             $program_is_active = true;
                             break;
                         }
                     }
                 }
                 $livestream->live_animation = $program_is_active ? 'true' : 'false';
         
                 return $program_is_active;
             }
             return $livestream->publish_type === 'publish_now' || $livestream->publish_type === 'publish_later' && $livestream->publish_later_Status || $livestream->publish_type === 'schedule_program';
         });
         if ($radiostaion_details->isEmpty()) {
           $response = [
               'status' => 'false',
               'message' => 'The livestream is not uploaded via radio station.',
           ];
       } else {
           $response = [
               'status' => 'true',
               'shareurl' => URL::to('radio-station') . '/' . $request->liveid,
               'radiostationdetail' => $radiostaion_details,
               'like' => $like,
               'dislike' => $dislike,
               'ppv_video_status' => $ppv_video_status,
               'languages' => $languages,
               'categories' => $categories,
               'current_timezone' => current_timezone(),
               'RentURL' => URL::to('radio-station') . '/' . $radiostationSlug,
               'radiostations' => $radiostations,
               'program_schedule_daywise' => $radiostaion_details->pluck('program_schedule_daywise'), 
           ];
       }
       
      } catch (\Throwable $th) {
  
          $response = array(
            'status' => 'false',
            'message' => $th->getMessage() ,
          );
      }
      return response()->json($response, 200);
     
     }

     public function roku_login(Request $request)
     {
        try{
            $email = $request->email;
            $pass  = $request->password;
      
            $user = User::where('email',$email)->first();
            
            if($user){
              if ($user && Hash::check($pass, $user->password)) {
                  return response()->json([
                      'status' => true,
                      'user'   => $user
                  ], 200);
              } else {
                  return response()->json([
                      'status'  => false,
                      'message' => 'Invalid password.'
                  ], 401);
              }
            }else{
              return response()->json([
                'status'  => false,
                'message' => 'Invalid email.'
            ], 401);
            }

        }catch(\Throwable $th){
          return response()->json([
              'status'  => false,
              'message' => 'Something went wrong',
              'error'   => $th->getMessage() // For debugging, remove in production
          ], 500);
        }
     }

     public function recommended_videos(Request $request)
     {
         try {
             $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
             $countryName = $geoip->getCountry();
             $getfeching = Geofencing::first();
             $video_id = $request->videoid;
             $user_id = $request->user_id;
             $subuser_id = $request->subuser_id;
      
             if (!empty($user_id)) {
                 $view = new RecentView();
                 $view->video_id = $video_id;
                 $view->user_id = $user_id;
                 $view->country_name = $countryName;
     
                 if (!empty($subuser_id)) {
                     $view->sub_user = $subuser_id;
                 }
                 $view->visited_at = now();
                 $view->save();
              }
     
             return response()->json([
                 'status' => 'success',
                 'message' => 'Recommended video saved successfully.'
             ], 200);
             
         } catch (\Exception $e) {
             return response()->json([
                 'status' => 'error',
                 'message' => 'Recommended video not saved',
                 'error' => $e->getMessage(),
             ], 500);
         }
    }

    public function Payment_Transaction_logs(Request $request)
    {
        try {

            $validator = Validator::make($request->all(), [
              'user_id'          => 'required|integer',
              'total_amount'     => 'required',
              'payment_for'      => 'required|string|in:ppv,Subscription',
              'platform'         => 'required|in:android,Inapp',
              'payment_gateway'  => 'required|in:razoray,Stripe,Paypal,Paystack,Applepay',
            ], [
              'user_id.required'         => 'User ID is required.',
              'user_id.integer'          => 'User ID must be an integer.',
              'total_amount.required'    => 'Total amount is required.',
              'payment_for.required'     => 'Payment type is required.',
              'payment_for.in'           => 'Payment type must be either PPV or Subscription.',
              'platform.required'        => 'Platform is required.',
              'payment_gateway.required' => 'Payment gateway is required.',
              'payment_gateway.in'       => 'Payment gateway must be one of: razoray, Stripe, Paypal, Paystack.',
            ]);
            
            if ($validator->fails()) {
              return response()->json([
                  'status' => 'false',
                  'message'=> $validator->errors()->first(),
                ], 400);
            }
        
            $data = null;
            $amount = $request->total_amount;
    
            if ($request->payment_for === 'ppv') {
                $data = PpvPurchase::create([
                    'user_id'         => $request->user_id,
                    'video_id'        => $request->video_id,
                    'live_id'         => $request->live_id,
                    'season_id'       => $request->SeriesSeason_id,
                    'series_id'       => null,
                    'total_amount'    => $amount,
                    'platform'        => $request->platform,
                    'payment_gateway' => $request->payment_gateway,
                    'status'          => 'hold',
                ]);
            }

            if ($request->payment_for === 'ppv' && $data) {
              $moderators_id = null;
              $admin_commssion = null;
              $moderator_commssion = null;
              $commission_percentage_value = null;
          
              $setting = Setting::first();
              $commission_btn = $setting->CPP_Commission_Status;
              $commssion = VideoCommission::where('type', 'Cpp')->first();
        
              if (!is_null($request->video_id)) {
                  $video = Video::find($request->video_id);
                  if ($video) {
                      $moderators_id = $video->user_id;
                      $CppUser_details = ModeratorsUser::find($moderators_id);
                      $default_percentage = $commssion->percentage ?? 0;
                      $commission_percentage_value = $video->CPP_commission_percentage;
          
                      if ($commission_btn === 0) {
                          $commission_percentage_value = $CppUser_details->commission_percentage ?? $default_percentage;
                      }
          
                      $moderator_commssion = ($amount * $commission_percentage_value) / 100;
                      $admin_commssion = $amount - $moderator_commssion;
                  }
              }
          
              else if (!is_null($request->live_id)) {
                  $video = LiveStream::find($request->live_id);
                  if ($video) {
                      $moderators_id = $video->user_id;
                      $moderator = ModeratorsUser::find($moderators_id);
                      $percentage = $moderator->commission_percentage ?? 0;
                      $moderator_commssion = ($percentage / 100) * $video->ppv_price;
                      $admin_commssion = $video->ppv_price - $moderator_commssion;
                  }
              }
          
              else if (!is_null($request->SeriesSeason_id)) {
                  $SeriesSeason = SeriesSeason::find($request->SeriesSeason_id);
                  $series_id = $SeriesSeason->series_id ?? null;
                  $Series = Series::find($series_id);
          
                  if ($Series) {
                      $moderators_id = $Series->user_id;
                      $moderator = ModeratorsUser::find($moderators_id);
                      $percentage = $moderator->commission_percentage ?? 0;
                      $moderator_commssion = ($percentage / 100) * $SeriesSeason->ppv_price;
                      $admin_commssion = $SeriesSeason->ppv_price - $moderator_commssion;
                  }
              }
          
              $data->moderator_id = $moderators_id;
              $data->admin_commssion = $admin_commssion;
              $data->moderator_commssion = $moderator_commssion;
              $data->ppv_plan = $request->ppv_plan ?? null;
              $data->save();
          }

            if (!is_null($request->live_id)) {
                $data = LivePurchase::create([
                    'user_id'         => Auth::id(),
                    'video_id'        => $request->live_id,
                    'amount'          => $request->total_amount,
                    'platform'        => 'website',
                    'payment_gateway' => 'razoray',
                    'status'          => 0,
                    'payment_status'  => 'hold',
                ]);
            }
    
            if ($request->payment_for === 'Subscription') {
                $data = Subscription::create([
                    'user_id'         => $request['user_id'],
                    'stripe_plan'     => $request->Plan_Id,
                    'PaymentGateway'  => $request['payment_gateway'],
                    'platform'        => $request['platform'],
                    'stripe_status'   => 'hold',
                ]);
            }
    
            return response()->json([
                'status'  => 'success',
                'message' => 'Transaction logged successfully.',
                'data'    => $data,
            ]);
        } catch (\Throwable $e) {
            return response()->json([
                'status'  => 'error',
                'message' => $e->getMessage(),
            ], 500);
        }
    }

    public function LiveStream_based_categories(){

      try {

        $homepage_input_array = ['limit' => 30, 'MobileHomeSetting' => MobileHomeSetting::first(),  'Geofencing' => Geofencing() , 'default_vertical_image_url' => default_vertical_image_url() , 'default_horizontal_image_url' => default_horizontal_image_url() , "LiveStream_based_categories_status" => 1 ];

        $data = $this->All_Homepage_category_livestream($homepage_input_array);

        return response()->json([
          'status'  => 'success',
          'message' => 'Retreived LiveStream based categories.',
          'data'    => $data,
        ]);

        } catch (\Throwable $th) {
          return response()->json([
            'status'  => 'error',
            'message' => $th->getMessage(),
          ], 500);
        }
    }
}