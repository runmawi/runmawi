<?php

namespace App\Http\Controllers;

use URL;
use Auth;
use Theme;
use Session;
use App\User;
use App\Video;
use App\Series;
use App\Channel;
use App\Setting;
use App\SiteLogs;
use Carbon\Carbon;
use App\LiveStream;
use App\HomeSetting;
use App\PpvPurchase;
use App\LivePurchase;
use App\SeriesSeason;
use App\Subscription;
use Razorpay\Api\Api;
use App\ChannelPayout;
use App\ModeratorsUser;
use App\PaymentSetting;
use App\ModeratorPayout;
use App\VideoCommission;
use App\ThemeIntegration;
use \Redirect as Redirect;
use Illuminate\Support\Str;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;
use App\Http\Controllers\Controller;
use Illuminate\Support\Facades\Crypt;
use Illuminate\Support\Facades\Notification;
use Illuminate\Contracts\Auth\Authenticatable;
use Illuminate\Contracts\Encryption\DecryptException;
use AmrShawky\LaravelCurrency\Facade\Currency as PaymentCurreny;

class RazorpayController extends Controller
{
    protected $razorpaykeyId;
    protected $razorpaykeysecret;
    protected $Theme;

    public function __construct()
    {
        $PaymentSetting = PaymentSetting::where('payment_type', 'Razorpay')->first();

        if ($PaymentSetting != null) {

            if ($PaymentSetting->live_mode == 0) {
                $this->razorpaykeyId = $PaymentSetting->test_publishable_key;
                $this->razorpaykeysecret = $PaymentSetting->test_secret_key;
            } else {
                $this->razorpaykeyId = $PaymentSetting->live_publishable_key;
                $this->razorpaykeysecret = $PaymentSetting->live_secret_key;
            }
        } else {
            $Error_msg = "Razorpay Key is Missing";
            $url = URL::to('/home');
            echo "<script type='text/javascript'>alert('$Error_msg'); window.location.href = '$url' </script>";
        }

        $this->Theme = HomeSetting::pluck('theme_choosen')->first();
        Theme::uses($this->Theme);
    }

    public function Razorpay(Request $request)
    {
        return Theme::view('Razorpay.create');
    }

    public function Razorpay_authorization_url(Request $request)
    {

        try {

            $Crypt_Razorpay_plan_id = Crypt::encryptString($request->Razorpay_plan_id);
            $authorization_url = URL::to('RazorpayIntegration/' . $Crypt_Razorpay_plan_id);

            $response = array(
                'status' => true,
                'message' => "Authorization url Successfully Created !",
                'Razorpay_plan_id' => $request->Razorpay_plan_id,
                'authorization_url' => $authorization_url,
            );
        } catch (\Throwable $th) {

            $response = array(
                "status" => false,
                "message" => $th->getMessage(),
            );
        }

        return response()->json($response, 200);
    }

    public function RazorpayIntegration(Request $request, $Plan_Id)
    {
        try {

            $Subscription = Subscription::create([
                'user_id' => Auth::user()->id,
                'stripe_plan' => $Plan_Id,
                'PaymentGateway' => 'Razorpay',
                'platform' => 'WebSite',
                'stripe_status' => 'hold',
            ]);

            $Subscription_primary_id = $Subscription->id;

            $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
            $countryName = $geoip->getCountry();
            $regionName = $geoip->getregion();
            $cityName = $geoip->getcity();

            $users_details = Auth::User();

            if ($users_details != null) {
                $user_details = Auth::User();
                $redirection_back = URL::to('/becomesubscriber');
            } else {
                $userEmailId = $request->session()->get('register.email');
                $user_details = User::where('email', $userEmailId)->first();
                $redirection_back = URL::to('/register2');
            }

            $plan_Id = Crypt::decryptString($Plan_Id);
            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);
            $planId = $api->plan->fetch($plan_Id);

            $subscription = $api->subscription->create(array(
                'plan_id' => $planId->id,
                'customer_notify' => 1,
                'total_count' => 6,
            ));

            $respond = array(
                'razorpaykeyId' => $this->razorpaykeyId,
                'name' => $planId['item']->name,
                'subscriptionId' => $subscription->id,
                'short_url' => $subscription->short_url,
                'currency' => 'INR',
                'email' => $user_details['email'],
                'contactNumber' => $user_details['mobile'],
                'user_id' => $user_details->id,
                'user_name' => $user_details->name,
                'address' => $cityName,
                'description' => null,
                'countryName' => $countryName,
                'regionName' => $regionName,
                'cityName' => $cityName,
                'PaymentGateway' => 'razorpay',
                'redirection_back' => $redirection_back,
                'Subscription_primary_id' => $Subscription_primary_id
            );

            return Theme::view('Razorpay.checkout', compact('respond'));

        } catch (\Throwable $th) {
            // dd($th->getMessage());

            return abort(404);
        }
    }

    public function RazorpayCompleted(Request $request)
    {
        $SignatureStatus = $this->RazorpaySignatureVerfiy(
            $request->razorpay_payment_id,
            $request->razorpay_subscription_id,
            $request->razorpay_signature
        );

        if ($SignatureStatus == true) {
            $userId = $request->user_id;
            $RazorpaySubscription = $request->razorpay_subscription_id;
            $RazorpayPayment_ID = $request->razorpay_payment_id;
            $Subscription_primary_id = $request->Subscription_primary_id;
            return Redirect::route('RazorpaySubscriptionStore', ['RazorpaySubscription' => $RazorpaySubscription, 'userId' => $userId, 'RazorpayPayment_ID' => $RazorpayPayment_ID, 'Subscription_primary_id' => $Subscription_primary_id]);
        } else {
            echo 'fails';
        }
    }

    private function RazorpaySignatureVerfiy($razorpay_payment_id, $razorpay_subscription_id, $razorpay_signature)
    {
        try {
            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);
            $attributes = array('razorpay_signature' => $razorpay_signature, 'razorpay_payment_id' => $razorpay_payment_id, 'razorpay_subscription_id' => $razorpay_subscription_id);
            $order = $api->utility->verifyPaymentSignature($attributes);
            return true;

        } catch (\Exception $e) {
            return false;
        }
    }

    public function RazorpaySubscriptionStore(Request $request)
    {

        $razorpay_subscription_id = $request->RazorpaySubscription;
        $razorpaypayment_id = $request->RazorpayPayment_ID;

        $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);
        $subscription = $api->subscription->fetch($razorpay_subscription_id);
        $plan_id = $api->plan->fetch($subscription['plan_id']);

        $Sub_Startday = Carbon::createFromTimestamp($subscription['current_start'])->toDateTimeString();
        $Sub_Endday = Carbon::createFromTimestamp($subscription['current_end'])->toDateTimeString();
        $trial_ends_at = Carbon::createFromTimestamp($subscription['current_end'])->toDateTimeString();

        Subscription::find($request->Subscription_primary_id)->update([
            'user_id' => $request->userId,
            'name' => $plan_id['item']->name,
            // 'days'        =>  $fileName_zip,
            'price' => $plan_id['item']->amount / 100,   // Amount Paise to Rupees
            'stripe_id' => $subscription['id'],
            'stripe_status' => $subscription['status'],
            'stripe_plan' => $subscription['plan_id'],
            'quantity' => $subscription['quantity'],
            'countryname' => $request->countryName,
            'regionname' => $request->cityName,
            'cityname' => $request->regionName,
            'PaymentGateway' => 'Razorpay',
            'trial_ends_at' => $trial_ends_at,
            'ends_at' => $trial_ends_at,
            'platform' => 'WebSite',
            'payment_id' => $razorpaypayment_id,
        ]);

        User::where('id', $request->userId)->update([
            'role' => 'subscriber',
            'stripe_id' => $subscription['id'],
            'subscription_start' => $Sub_Startday,
            'subscription_ends_at' => $Sub_Endday,
            'payment_gateway' => 'Razorpay',
            'payment_type' => 'recurring',
            'payment_status' => 'active',
        ]);

        return Redirect::route('home');
    }

    public function RazorpaySubscriptionUpdate(Request $request, $planId)
    {

        $geoip = new \Victorybiz\GeoIPLocation\GeoIPLocation();
        $countryName = $geoip->getCountry();
        $regionName = $geoip->getregion();
        $cityName = $geoip->getcity();

        $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);
        $plan_Id = $api->plan->fetch($planId);
        $user_id = Auth::User()->id;

        $subscriptionId = Subscription::where('user_id', $user_id)->latest()->pluck('stripe_id')->first();

        $subscription = $api->subscription->fetch($subscriptionId);
        $remaining_count = $subscription['remaining_count'];

        $Sub_Startday = Carbon::createFromTimestamp($subscription['current_start'])->toDateTimeString();
        $Sub_Endday = Carbon::createFromTimestamp($subscription['current_end'])->toDateTimeString();
        $trial_ends_at = Carbon::createFromTimestamp($subscription['current_end'])->toDateTimeString();

        if ($subscription->payment_method != "upi") {

            $options = array('plan_id' => $plan_Id['id'], 'remaining_count' => $remaining_count);
            $api->subscription->fetch($subscriptionId)->update($options);

            $UpdatedSubscription = $api->subscription->fetch($subscriptionId);
            $updatedPlan = $api->plan->fetch($UpdatedSubscription['plan_id']);
            if (is_null($subscriptionId)) {
                return false;
            } else {
                Subscription::where('user_id', $user_id)->latest()->update([
                    'price' => $updatedPlan['item']->amount,
                    'stripe_id' => $UpdatedSubscription['id'],
                    'stripe_status' => $UpdatedSubscription['status'],
                    'stripe_plan' => $UpdatedSubscription['plan_id'],
                    'quantity' => $UpdatedSubscription['quantity'],
                    'countryname' => $countryName,
                    'regionname' => $regionName,
                    'cityname' => $cityName,
                    'trial_ends_at' => $trial_ends_at,
                    'ends_at' => $trial_ends_at,
                    'PaymentGateway' => 'Razorpay',
                ]);

                User::where('id', $user_id)->update([
                    'role' => 'subscriber',
                    'stripe_id' => $UpdatedSubscription['id'],
                    'subscription_start' => $Sub_Startday,
                    'subscription_ends_at' => $Sub_Endday,
                    'payment_gateway' => 'Razorpay',
                    'payment_type' => 'recurring',
                    'payment_status' => 'active',
                ]);
            }
            return Redirect::route('home');
        } else {
            return Theme::view('Razorpay.UPI');
        }
    }

    public function RazorpayCancelSubscriptions(Request $request)
    {
        try {

            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

            $subscriptionId = User::where('id', Auth::user()->id)->where('payment_gateway', 'Razorpay')->pluck('stripe_id')->first();

            $options = array('cancel_at_cycle_end' => 0);

            $api->subscription->fetch($subscriptionId)->cancel($options);

            Subscription::where('stripe_id', $subscriptionId)->update([
                'stripe_status' => 'Cancelled',
            ]);

            User::where('id', Auth::user()->id)->update([
                'payment_status' => 'Cancel',
                'role' => 'registered',
            ]);

            $Error_msg = "Subscription has been Cancel Successfully";
            $url = URL::to('/myprofile');
            echo "<script type='text/javascript'>alert('$Error_msg'); window.location.href = '$url' </script>";


        } catch (\Throwable $th) {
            $msg = 'Some Error occuring while Cancelling the Subscription, Please check this query with admin..';
            $url = URL::to('myprofile/');
            echo "<script type='text/javascript'>alert('$msg'); window.location.href = '$url' </script>";
        }

    }

    public function RazorpayVideoRent(Request $request, $video_id)
    {


        $video = Video::where('id', '=', $video_id)->first();
        $amount = $video->ppv_price;

        $setting = Setting::first();
        $PpvPurchase = PpvPurchase::create([
            'user_id' => Auth::user()->id,
            'video_id' => $video_id,
            'total_amount' => $amount,
            'platform' => 'website',
            'payment_gateway' => 'razoray',
            'status' => 'hold',
        ]);

        $PpvPurchase_id = $PpvPurchase->id;

        if (!empty($video)) {
            $moderators_id = $video->user_id;
        }
        $commission_btn = $setting->CPP_Commission_Status;
        $CppUser_details = ModeratorsUser::where('id', $moderators_id)->first();
        $video_commission_percentage = VideoCommission::where('type', 'Cpp')->pluck('percentage')->first();
        $commission_percentage_value = $video->CPP_commission_percentage;
        if ($commission_btn === 0) {
            $commission_percentage_value = !empty($CppUser_details->commission_percentage) ? $CppUser_details->commission_percentage : $video_commission_percentage;
        }
        if (!empty($moderators_id)) {
            $moderator = ModeratorsUser::where('id', $moderators_id)->first();
            if ($moderator) {
                $percentage = $moderator->commission_percentage ? $moderator->commission_percentage : 0;
            } else {
                $percentage = 0;
            }
            $total_amount = $video->ppv_price;
            $title = $video->title;
            $commssion = VideoCommission::where('type', 'CPP')->first();
            $ppv_price = $amount;
            $moderator_commssion = ($ppv_price * $commission_percentage_value) / 100;
            $admin_commssion = $ppv_price - $moderator_commssion;
            $moderator_id = $moderators_id;
        } else {
            $total_amount = $video->ppv_price;
            $title = $video->title;
            $commssion = VideoCommission::where('type', 'CPP')->first();
            $percentage = null;
            $ppv_price = $video->ppv_price;
            $admin_commssion = null;
            $moderator_commssion = null;
            $moderator_id = null;
        }
        $purchase = PpvPurchase::find($PpvPurchase_id);
        $purchase->total_amount = $amount;
        $purchase->moderator_id = $moderators_id;
        $purchase->admin_commssion = $admin_commssion;
        $purchase->moderator_commssion = $moderator_commssion;
        $purchase->ppv_plan = $request->ppv_plan;
        $purchase->save();

        $recept_id = Str::random(10);
        $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

        $orderData = [
            'receipt' => $recept_id,
            'amount' => $amount * 100,
            'currency' => 'INR',
            'payment_capture' => 1,
            'notes' => [
                'video_id' => $request->video_id,
                'ppv_plan' => $request->ppv_plan,
                'PpvPurchase_id' => $request->PpvPurchase_id,
                'user_id' => Auth::user()->id,
            ],
        ];

        $razorpayOrder = $api->order->create($orderData);
        $plainAmount = $amount * 100;
        $encryptedAmount = encrypt($plainAmount);

        $response = array(
            'razorpaykeyId' => $this->razorpaykeyId,
            'name' => Auth::user()->name ? Auth::user()->name : null,
            'user_id' => Auth::user()->id ? Auth::user()->id : null,
            'currency' => 'INR',
            'amount' => $plainAmount,
            'encrypted_amount' => $encryptedAmount,
            'orderId' => $razorpayOrder['id'],
            'video_id' => $request->video_id,
            'description' => null,
            'address' => null,
            'Video_slug' => $video->slug,
            'ppv_plan' => null,
            'PpvPurchase_id' => $PpvPurchase_id,
        );

        return Theme::view('Razorpay.video_rent_checkout', compact('response'));
    }

    public function RazorpayVideoRent_Payment(Request $request)
    {
        DB::beginTransaction();
        try {
            $decryptedAmount = decrypt($request->amount);
            $setting = Setting::first();
            $ppv_hours = $setting->ppv_hours;
            $d = new \DateTime('now');
            $d->setTimezone(new \DateTimeZone(config('app.timezone', 'Asia/Kolkata'))); // Use configured timezone
            $now = $d->format('Y-m-d h:i:s a');
            $time = date('h:i:s', strtotime($now));
            $to_time = date('Y-m-d h:i:s a', strtotime('+' . $ppv_hours . ' hour', strtotime($now)));

            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

            $attributes = array(
                'razorpay_signature' => $request->rzp_signature,
                'razorpay_payment_id' => $request->rzp_paymentid,
                'razorpay_order_id' => $request->rzp_orderid
            );
            $api->utility->verifyPaymentSignature($attributes); // Verification, result not explicitly used further, assuming it throws exception on failure.

            $payment = $api->payment->fetch($request->rzp_paymentid);

            if ($payment->status !== 'captured') {
                // Attempt to capture the payment if it hasn't been already.
                $payment->capture(['amount' => $payment->amount, 'currency' => $payment->currency]); // Added currency as it's often required/good practice
            }
            // Refresh payment status after capture attempt
            $payment = $api->payment->fetch($request->rzp_paymentid);
            $payment_status = $payment->status;

            $purchase = PpvPurchase::find($request->PpvPurchase_id);
            if (!$purchase) {
                // This case should ideally not happen if PpvPurchase_id is always valid and passed correctly.
                // Consider how to handle if the initial purchase record to update is not found.
                Log::error('RazorpayVideoRent_Payment Error: PpvPurchase record not found for ID: ' . $request->PpvPurchase_id, ['request_all' => $request->all()]);
                throw new \Exception('Original purchase record not found.');
            }

            $purchase->user_id = $request->user_id;
            $purchase->video_id = $request->video_id;
            $purchase->total_amount = $decryptedAmount / 100;
            $purchase->status = $payment_status;
            // TODO: Implement state transition validation (e.g., using an isValidStatusTransition method) before updating status.
            $purchase->to_time = $to_time;
            $purchase->platform = 'website';
            $purchase->payment_id = $request->rzp_orderid; // Store Razorpay Order ID
            $purchase->razorpay_payment_id = $request->rzp_paymentid; // Store Razorpay Payment ID
            // TODO: Ensure PpvPurchase model has 'razorpay_payment_id' in its $fillable array if not using $guarded = [].
            $purchase->payment_gateway = 'razorpay';
            $purchase->save();

            // TODO: Review and implement or remove the commented-out commission logic (previously around lines 468-507, 513-516 in original structure before any refactoring).

            $respond = array(
                'status' => 'true',
            );
            SiteLogs::create([
                'level' => 'success,' . $purchase->status,
                'message' => 'Razorpay video rent payment stored successfully! Order ID: ' . $purchase->payment_id . ', Payment ID: ' . $purchase->razorpay_payment_id,
                'context' => 'RazorpayVideoRent_Payment'
            ]);

            DB::commit();
            return view('Razorpay.Rent_message', compact('respond')); // Removed redundant third argument

        } catch (\Razorpay\Api\Errors\SignatureVerificationError $e) {
            DB::rollBack();
            Log::error('Razorpay Signature Verification Failed: ' . $e->getMessage(), ['request_all' => $request->all()]);
            $respond = array(
                'status' => 'false',
                'message' => 'Payment verification failed. Invalid signature.'
            );
            // Log to SiteLogs as well for admin visibility
            SiteLogs::create([
                'level' => 'critical_error',
                'message' => 'Razorpay Signature Verification Failed: ' . $e->getMessage(),
                'context' => 'RazorpayVideoRent_Payment'
            ]);
            return Theme::view('Razorpay.Rent_message', compact('respond'));

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('RazorpayVideoRent_Payment Error: ' . $e->getMessage() . "\nStack Trace: " . $e->getTraceAsString(), ['request_all' => $request->all()]);
            $respond = array(
                'status' => 'false',
                'message' => 'Payment processing failed. Please try again later or contact support.'
            );

            SiteLogs::create([
                'level' => 'error',
                'message' => 'General Error: ' . $e->getMessage(),
                'context' => 'RazorpayVideoRent_Payment'
            ]);

            return Theme::view('Razorpay.Rent_message', compact('respond'));
        }
    }

    public function RazorpayVideoRent_Paymentfailure(Request $request)
    {

        try {
            $validatedData = $request->validate([
                'payment_id' => 'nullable|string',
                'order_id' => 'nullable|string',
                'video_id' => 'nullable|integer',
                'user_id' => 'nullable|integer',
                'amount' => 'nullable|numeric',
                'error_description' => 'nullable|string',
            ]);

            $setting = Setting::first();
            $ppv_hours = $setting->ppv_hours;

            $d = new \DateTime('now');
            $d->setTimezone(new \DateTimeZone('Asia/Kolkata'));
            $now = $d->format('Y-m-d h:i:s a');
            $time = date('h:i:s', strtotime($now));
            $to_time = date('Y-m-d h:i:s a', strtotime('+' . $ppv_hours . ' hour', strtotime($now)));

            $paymentId = $validatedData['payment_id'] ?? $validatedData['order_id'];

            $existingPurchase = PpvPurchase::where('payment_id', $paymentId)->first();

            if ($existingPurchase) {
                return response()->json(['status' => 'already_logged']);
            }

            $video = Video::where('id', '=', $validatedData['video_id'])->first();

            if (!empty($video)) {
                $moderators_id = $video->user_id;
            }

            $commission_btn = $setting->CPP_Commission_Status;
            $CppUser_details = ModeratorsUser::where('id', $moderators_id)->first();
            $video_commission_percentage = VideoCommission::where('type', 'Cpp')->pluck('percentage')->first();
            $commission_percentage_value = $video->CPP_commission_percentage;

            if ($commission_btn === 0) {
                $commission_percentage_value = !empty($CppUser_details->commission_percentage) ? $CppUser_details->commission_percentage : $video_commission_percentage;
            }
            if (!empty($moderators_id)) {
                $moderator = ModeratorsUser::where('id', $moderators_id)->first();
                if ($moderator) {
                    $percentage = $moderator->commission_percentage ? $moderator->commission_percentage : 0;
                } else {
                    $percentage = 0;
                }
                $total_amount = $video->ppv_price;
                $title = $video->title;
                $commssion = VideoCommission::where('type', 'CPP')->first();
                $ppv_price = $request->amount / 100;
                $moderator_commssion = ($ppv_price * $commission_percentage_value) / 100;
                $admin_commssion = $ppv_price - $moderator_commssion;
                $moderator_id = $moderators_id;
            } else {
                $total_amount = $video->ppv_price;
                $title = $video->title;
                $commssion = VideoCommission::where('type', 'CPP')->first();
                $percentage = null;
                $ppv_price = $video->ppv_price;
                $admin_commssion = null;
                $moderator_commssion = null;
                $moderator_id = null;
            }

            $purchase = PpvPurchase::find($request->PpvPurchase_id);
            $purchase->user_id = $validatedData['user_id'];
            $purchase->video_id = $validatedData['video_id'];
            $purchase->total_amount = $validatedData['amount'] / 100;
            $purchase->admin_commssion = null;
            $purchase->moderator_commssion = null;
            $purchase->status = 'failed';
            $purchase->payment_failure_reason = $validatedData['error_description'] ?? 'Unknown error';
            $purchase->platform = 'website';
            $purchase->to_time = null;
            $purchase->payment_id = $paymentId;
            $purchase->payment_gateway = 'razorpay';
            $purchase->save();

            SiteLogs::create([
                'level' => 'success',
                'message' => 'Razorpay video rent payment failure stored successfully! ' . $paymentId,
                'context' => 'RazorpayVideoRent_Paymentfailure'
            ]);

            return response()->json(['status' => 'failure_logged']);
        } catch (\Exception $e) {
            SiteLogs::create([
                'level' => 'fails',
                'message' => $e->getMessage(),
                'context' => 'RazorpayVideoRent_Paymentfailure'
            ]);

            return response()->json(['status' => 'error', 'message' => 'An error occurred while processing the payment failure.']);
        }
    }

    public function RazorpayLiveRent(Request $request, $live_id)
    {

        $video = LiveStream::where('id', '=', $live_id)->first();
        $amount = $video->ppv_price;

        $PpvPurchase = PpvPurchase::create([
            'user_id' => Auth::user()->id,
            'live_id' => $live_id,
            'total_amount' => $amount,
            'platform' => 'website',
            'payment_gateway' => 'razoray',
            'status' => 'hold',
        ]);

        $livepurchase = LivePurchase::create([
            'user_id' => Auth::user()->id,
            'video_id' => $live_id,
            'amount' => $amount,
            'platform' => 'website',
            'payment_gateway' => 'razoray',
            'status' => 0,
            'payment_status' => 'hold',
        ]);

        $PpvPurchase_id = $PpvPurchase->id;
        $livepurchase_id = $livepurchase->id;

        if (!empty($video)) {
            $moderators_id = $video->user_id;
        }

        if (!empty($moderators_id)) {
            $moderator = ModeratorsUser::where('id', $moderators_id)->first();
            if ($moderator) {
                $percentage = $moderator->commission_percentage ? $moderator->commission_percentage : 0;
            } else {
                $percentage = 0;
            }
            $total_amount = $video->ppv_price;
            $title = $video->title;
            $commssion = VideoCommission::where('type', 'CPP')->first();
            $ppv_price = $video->ppv_price;
            $moderator_commssion = ($percentage / 100) * $ppv_price;
            $admin_commssion = $ppv_price - $moderator_commssion;
            $moderator_id = $moderators_id;
        } else {
            $total_amount = $video->ppv_price;
            $title = $video->title;
            $commssion = VideoCommission::where('type', 'CPP')->first();
            $percentage = null;
            $ppv_price = $video->ppv_price;
            $admin_commssion = null;
            $moderator_commssion = null;
            $moderator_id = null;
        }
        $purchase = PpvPurchase::find($PpvPurchase_id);
        $purchase->total_amount = $amount;
        $purchase->moderator_id = $moderators_id;
        $purchase->admin_commssion = $admin_commssion;
        $purchase->moderator_commssion = $moderator_commssion;
        $purchase->save();
        $recept_id = Str::random(10);

        $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

        $orderData = [
            'receipt' => $recept_id,
            'amount' => $amount * 100,
            'currency' => 'INR',
            'payment_capture' => 1,
            'notes' => [
                'live_id' => $request->live_id,
                'user_id' => Auth::user()->id,
                'ppv_plan' => $request->ppv_plan,
                'PpvPurchase_id' => $PpvPurchase_id,
                'livepurchase_id' => $livepurchase_id,
            ],
        ];

        $live_slug = LiveStream::where('id', $request->live_id)->pluck('slug')->first();

        $razorpayOrder = $api->order->create($orderData);

        $response = array(
            'razorpaykeyId' => $this->razorpaykeyId,
            'name' => Auth::user()->name ? Auth::user()->name : null,
            'currency' => 'INR',
            'amount' => $amount * 100,
            'orderId' => $razorpayOrder['id'],
            'live_id' => $request->live_id,
            'user_id' => Auth::user()->id,
            'description' => null,
            'address' => null,
            'live_slug' => $live_slug,
            'PpvPurchase_id' => $PpvPurchase_id,
            'livepurchase_id' => $livepurchase_id,
        );

        return Theme::view('Razorpay.Live_rent_checkout', compact('response'));
    }

    public function RazorpayLiveRent_Payment(Request $request)
    {

        $setting = Setting::first();
        $ppv_hours = $setting->ppv_hours;

        $d = new \DateTime('now');
        $d->setTimezone(new \DateTimeZone('Asia/Kolkata'));
        $now = $d->format('Y-m-d h:i:s a');
        $time = date('h:i:s', strtotime($now));
        $to_time = date('Y-m-d h:i:s a', strtotime('+' . $ppv_hours . ' hour', strtotime($now)));

        try {
            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

            $attributes = array(
                'razorpay_signature' => $request->rzp_signature,
                'razorpay_payment_id' => $request->rzp_paymentid,
                'razorpay_order_id' => $request->rzp_orderid
            );
            $order = $api->utility->verifyPaymentSignature($attributes);

            $payment = $api->payment->fetch($request->rzp_paymentid);

            if ($payment->status !== 'captured') {
                $payment->capture(['amount' => $payment->amount]);
            }
            $payment_status = $payment->status;

            $purchase = PpvPurchase::find($request->PpvPurchase_id);
            $purchase->user_id = $request->user_id;
            $purchase->live_id = $request->live_id;
            $purchase->total_amount = $request->get('amount') / 100;
            $purchase->status = $payment_status;
            $purchase->to_time = $to_time;
            $purchase->platform = 'website';
            $purchase->payment_id = $request->rzp_paymentid;
            $purchase->payment_gateway = 'razorpay';
            $purchase->save();

            $livepurchase = LivePurchase::find($request->livepurchase_id);
            $livepurchase->user_id = $request->user_id;
            $livepurchase->video_id = $request->live_id;
            $livepurchase->to_time = $to_time;
            $livepurchase->expired_date = $to_time;
            $livepurchase->amount = $request->get('amount') / 100;
            $livepurchase->status = 1;
            $livepurchase->platform = 'website';
            $livepurchase->payment_gateway = 'razorpay';
            $livepurchase->payment_status = $payment_status;
            $livepurchase->payment_id = $request->rzp_paymentid;
            $livepurchase->save();

            $respond = array(
                'status' => 'true',
            );
            SiteLogs::create([
                'level' => 'success,' . $purchase->status,
                'message' => 'Razorpay live rent payment stored successfully!',
                'context' => 'RazorpayLiveRent_Payment'
            ]);

            return Theme::view('Razorpay.Rent_message', compact('respond'));

        } catch (\Exception $e) {

            $respond = array(
                'status' => 'false',
            );

            SiteLogs::create([
                'level' => 'fails',
                'message' => $e->getMessage(),
                'context' => 'RazorpayLiveRent_Payment'
            ]);
            return Theme::view('Razorpay.Rent_message', compact('respond'));
        }
    }

    public function RazorpayLiveRent_Paymentfailure(Request $request)
    {
        Log::info('RazorpayLiveRent_Paymentfailure: Received request', $request->all());

        $validatedData = $request->validate([
            'order_id' => 'required|string', // This should be the Razorpay Order ID
            'razorpay_payment_id' => 'nullable|string', // Actual Razorpay Payment ID, if available from client
            'live_id' => 'required|integer|exists:live_streams,id', // PK of the live_streams table
            'user_id' => 'required|integer|exists:users,id',
            'amount' => 'required|numeric', // Amount from client, assumed to be in smallest currency unit
            'error_code' => 'nullable|string',
            'error_description' => 'required|string',
            'error_source' => 'nullable|string',
            'error_step' => 'nullable|string',
            'error_reason' => 'nullable|string',
        ]);

        DB::beginTransaction();

        try {
            $razorpayOrderId = $validatedData['order_id'];
            $razorpayPaymentId = $validatedData['razorpay_payment_id'] ?? null;

            // Check if this specific failure for this order_id has already been logged
            $existingFailedPurchase = \App\LiveEventPurchase::where('payment_id', $razorpayOrderId)
                ->where('status', 'failed')
                ->first();

            if ($existingFailedPurchase) {
                Log::warning('RazorpayLiveRent_Paymentfailure: Duplicate failure log attempt.', ['order_id' => $razorpayOrderId]);
                DB::rollBack(); // Rollback as we are not proceeding
                return response()->json(['status' => 'already_logged', 'message' => 'This payment failure has already been logged.']);
            }

            // Attempt to find an existing purchase record for this order_id and user_id
            // This could be a record created by add_payperview which is pending or already exists
            $purchase = \App\LiveEventPurchase::where('payment_id', $razorpayOrderId)
                                              ->where('user_id', $validatedData['user_id'])
                                              ->first();

            if (!$purchase) {
                // If no existing record, create a new one for this failure
                $purchase = new \App\LiveEventPurchase;
                $purchase->user_id = $validatedData['user_id'];
                $purchase->live_event_id = $validatedData['live_id'];
                $purchase->payment_id = $razorpayOrderId; // Razorpay Order ID
            } else {
                // If a record exists, check its status before marking as failed
                if ($purchase->status === 'captured' || $purchase->status === 'authorized') {
                    Log::error('RazorpayLiveRent_Paymentfailure: Attempted to mark a successful/authorized payment as failed.', [
                        'order_id' => $razorpayOrderId,
                        'existing_status' => $purchase->status
                    ]);
                    DB::rollBack();
                    return response()->json(['status' => 'error', 'message' => 'Cannot mark an already successful payment as failed.'], 409); // 409 Conflict
                }
                // If it's pending or some other non-successful state, we can update it to failed
                $purchase->live_event_id = $validatedData['live_id']; // Ensure live_event_id is set if updating
            }

            $purchase->total_amount = $validatedData['amount'] / 100; // Assuming amount is in paisa/cents
            $purchase->status = 'failed';
            $purchase->payment_gateway = 'razorpay';
            $purchase->platform = 'website'; // Assuming this is from website, adjust if platform info is available
            $purchase->razorpay_payment_id = $razorpayPaymentId; // Store the actual Razorpay Payment ID if available

            // Construct detailed failure reason
            $failureReason = "Code: " . ($validatedData['error_code'] ?? 'N/A') .
                             ", Description: " . ($validatedData['error_description']) .
                             ", Source: " . ($validatedData['error_source'] ?? 'N/A') .
                             ", Step: " . ($validatedData['error_step'] ?? 'N/A') .
                             ", Reason: " . ($validatedData['error_reason'] ?? 'N/A');
            $purchase->payment_failure_reason = substr($failureReason, 0, 255); // Ensure it fits DB column size

            // Nullify fields not applicable to failed payments
            $purchase->to_time = null;
            $purchase->admin_commission = null;
            $purchase->moderator_commission = null;

            $purchase->save();

            DB::commit();

            Log::info('RazorpayLiveRent_Paymentfailure: Payment failure for Order ID ' . $razorpayOrderId . ' recorded successfully.', [
                'order_id' => $razorpayOrderId,
                'razorpay_payment_id' => $razorpayPaymentId,
                'purchase_id' => $purchase->id
            ]);
            SiteLogs::create([
                'level' => 'warning', // 'warning' is more appropriate for a logged failure
                'message' => 'Razorpay live rent payment failure stored successfully for Order ID: ' . $razorpayOrderId,
                'context' => json_encode(['order_id' => $razorpayOrderId, 'razorpay_payment_id' => $razorpayPaymentId, 'error' => $validatedData['error_description']])
            ]);

            return response()->json(['status' => 'failure_logged', 'message' => 'Payment failure recorded.']);

        } catch (\Illuminate\Validation\ValidationException $e) {
            DB::rollBack();
            Log::error('RazorpayLiveRent_Paymentfailure: Validation failed.', [
                'errors' => $e->errors(),
                'request_data' => $request->all()
            ]);
            return response()->json(['status' => 'validation_error', 'message' => 'Invalid data provided.', 'errors' => $e->errors()], 422);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('RazorpayLiveRent_Paymentfailure: An unexpected error occurred.', [
                'error_message' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'request_data' => $request->all()
            ]);
            SiteLogs::create([
                'level' => 'error', // 'error' for actual exceptions in processing
                'message' => 'Error in RazorpayLiveRent_Paymentfailure: ' . $e->getMessage(),
                'context' => json_encode(['order_id' => $request->input('order_id'), 'exception' => $e->getMessage()])
            ]);
            return response()->json(['status' => 'error', 'message' => 'An unexpected error occurred while processing the payment failure.'], 500);
        }
    }


    public function RazorpayModeratorPayouts(Request $request)
    {

        $data = $request->all();
        $recept_id = Str::random(10);
        $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

        $orderData = [
            'receipt' => $recept_id,
            'amount' => $request->commission_paid * 100,
            'currency' => 'INR',
            'payment_capture' => 1,
        ];

        $razorpayOrder = $api->order->create($orderData);

        if (!empty($data['id'])) {
            $user = ModeratorsUser::where('id', $data['id'])->first();
            $name = $user->username;
        }
        $response = array(
            'razorpaykeyId' => $this->razorpaykeyId,
            'name' => $name,
            'currency' => 'INR',
            'amount' => $request->commission_paid * 100,
            'orderId' => $razorpayOrder['id'],
            'user_id' => $data['id'] ? $data['id'] : null,
            'phone_number' => $user['upi_mobile_number'] ? $user['upi_mobile_number'] : null,
            'upi_id' => $user['upi_id'] ? $user['upi_id'] : null,
            'email' => $user['email'] ? $user['email'] : null,
            'user' => $user ? $user : null,
            'description' => null,
            'address' => null,
            'commission' => $data['commission'] ? $data['commission'] : null,
            'payment_type' => $data['payment_type'] ? $data['payment_type'] : null,


        );

        return Theme::view('Razorpay.moderator_payouts', compact('response'));

    }

    public function RazorpayModeratorPayouts_Payment(Request $request)
    {
        $data = $request->all();


        $setting = Setting::first();

        try {
            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

            $attributes = array(
                'razorpay_signature' => $request->rzp_signature,
                'razorpay_payment_id' => $request->rzp_paymentid,
                'razorpay_order_id' => $request->rzp_orderid
            );
            $order = $api->utility->verifyPaymentSignature($attributes);

            $commission_paid = $data['amount'] / 100;

            $last_paid_amount = ModeratorPayout::where('user_id', $data['user_id'])->get([
                DB::raw(
                    "sum(moderator_payouts.commission_paid) as commission_paid"
                )
            ]);
            if (count($last_paid_amount) > 0) {
                $last_paid = intval($last_paid_amount[0]->commission_paid);
            } else {
                $last_paid = 0;
            }

            if (
                !empty($data["payment_type"]) &&
                $data["payment_type"] == "Partial_amount"
            ) {

                if ($data["commission"] != $commission_paid) {

                    $paid_amount = $data["commission"] - $commission_paid - $last_paid;
                } else {
                    $paid_amount = $commission_paid;
                }
            } elseif (
                !empty($data["payment_type"]) &&
                $data["payment_type"] == "full_amount"
            ) {
                if ($commission_paid == $data["commission"]) {
                    $paid_amount = $commission_paid;
                } else {
                    $paid_amount = $data["commission"] - $commission_paid - $last_paid;
                }
            }

            // dd($paid_amount);

            $respond = array(
                'status' => 'true',
            );

            $ModeratorPayout = new ModeratorPayout();
            $ModeratorPayout->user_id = $data["user_id"];
            $ModeratorPayout->commission_paid = $commission_paid;
            $ModeratorPayout->commission_pending = $paid_amount;
            $ModeratorPayout->payment_type = $data["payment_type"];
            $ModeratorPayout->save();

            return Theme::view('Razorpay.Payout_message', compact('respond'));

        } catch (\Exception $e) {

            $respond = array(
                'status' => 'false',
            );

            return Theme::view('Razorpay.Payout_message', compact('respond'));
        }
    }



    public function RazorpayChannelPayouts(Request $request)
    {

        $data = $request->all();
        // dd($data);
        $recept_id = Str::random(10);
        $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

        $orderData = [
            'receipt' => $recept_id,
            'amount' => $request->commission_paid * 100,
            'currency' => 'INR',
            'payment_capture' => 1,
        ];

        $razorpayOrder = $api->order->create($orderData);

        if (!empty($data['id'])) {
            $user = Channel::where('id', $data['id'])->first();
            $name = $user->channel_name;
        }
        $response = array(
            'razorpaykeyId' => $this->razorpaykeyId,
            'name' => $name,
            'currency' => 'INR',
            'amount' => $request->commission_paid * 100,
            'orderId' => $razorpayOrder['id'],
            'user_id' => $data['id'] ? $data['id'] : null,
            'phone_number' => $user['upi_mobile_number'] ? $user['upi_mobile_number'] : null,
            'upi_id' => $user['upi_id'] ? $user['upi_id'] : null,
            'email' => $user['email'] ? $user['email'] : null,
            'user' => $user ? $user : null,
            'description' => null,
            'address' => null,
            'commission' => $data['commission'] ? $data['commission'] : null,
            'payment_type' => $data['payment_type'] ? $data['payment_type'] : null,


        );

        return view('Razorpay.channel_payouts', compact('response'), $response);

    }

    public function RazorpayChannelPayouts_Payment(Request $request)
    {
        $data = $request->all();


        $setting = Setting::first();

        try {
            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

            $attributes = array(
                'razorpay_signature' => $request->rzp_signature,
                'razorpay_payment_id' => $request->rzp_paymentid,
                'razorpay_order_id' => $request->rzp_orderid
            );
            $order = $api->utility->verifyPaymentSignature($attributes);

            $commission_paid = $data['amount'] / 100;

            $last_paid_amount = ChannelPayout::where('user_id', $data['user_id'])->get([
                DB::raw(
                    "sum(channel_payouts.commission_paid) as commission_paid"
                )
            ]);
            if (count($last_paid_amount) > 0) {
                $last_paid = intval($last_paid_amount[0]->commission_paid);
            } else {
                $last_paid = 0;
            }

            if (
                !empty($data["payment_type"]) &&
                $data["payment_type"] == "Partial_amount"
            ) {

                if ($data["commission"] != $commission_paid) {

                    $paid_amount = $data["commission"] - $commission_paid - $last_paid;
                } else {
                    $paid_amount = $commission_paid;
                }
            } elseif (
                !empty($data["payment_type"]) &&
                $data["payment_type"] == "full_amount"
            ) {
                if ($commission_paid == $data["commission"]) {
                    $paid_amount = $commission_paid;
                } else {
                    $paid_amount = $data["commission"] - $commission_paid - $last_paid;
                }
            }

            // dd($paid_amount);

            $respond = array(
                'status' => 'true',
            );

            $ChannelPayout = new ChannelPayout();
            $ChannelPayout->user_id = $data["user_id"];
            $ChannelPayout->commission_paid = $commission_paid;
            $ChannelPayout->commission_pending = $paid_amount;
            $ChannelPayout->payment_type = $data["payment_type"];
            $ChannelPayout->save();

            return view('Razorpay.Channel_Payout_message', compact('respond'), $respond);

        } catch (\Exception $e) {

            $respond = array(
                'status' => 'false',
            );

            return view('Razorpay.Channel_Payout_message', compact('respond'), $respond);
        }
    }



    public function RazorpayVideoRent_PPV(Request $request, $ppv_plan, $video_id)
    {
        $video = Video::where('id', '=', $video_id)->first();
        switch ($ppv_plan) {
            case '240p':
                $amount = $video->ppv_price_240p;
                break;
            case '360p':
                $amount = $video->ppv_price_360p;
                break;
            case '480p':
                $amount = $video->ppv_price_480p;
                break;
            case '720p':
                $amount = $video->ppv_price_720p;
                break;
            case '1080p':
                $amount = $video->ppv_price_1080p;
                break;
            default:
                $amount = $video->ppv_price;

        }
        $PpvPurchase = PpvPurchase::create([
            'user_id' => Auth::user()->id,
            'video_id' => $video_id,
            'total_amount' => $amount,
            'platform' => 'website',
            'ppv_plan' => $ppv_plan,
            'payment_gateway' => 'razoray',
            'status' => 'hold',
        ]);

        $setting = Setting::first();
        $PpvPurchase_id = $PpvPurchase->id;

        if (!empty($video)) {
            $moderators_id = $video->user_id;
        }
        $commission_btn = $setting->CPP_Commission_Status;
        $CppUser_details = ModeratorsUser::where('id', $moderators_id)->first();
        $video_commission_percentage = VideoCommission::where('type', 'Cpp')->pluck('percentage')->first();
        $commission_percentage_value = $video->CPP_commission_percentage;
        if ($commission_btn === 0) {
            $commission_percentage_value = !empty($CppUser_details->commission_percentage) ? $CppUser_details->commission_percentage : $video_commission_percentage;
        }
        if (!empty($moderators_id)) {
            $moderator = ModeratorsUser::where('id', $moderators_id)->first();
            if ($moderator) {
                $percentage = $moderator->commission_percentage ? $moderator->commission_percentage : 0;
            } else {
                $percentage = 0;
            }
            $total_amount = $video->ppv_price;
            $title = $video->title;
            $commssion = VideoCommission::where('type', 'CPP')->first();
            $ppv_price = $amount;
            $moderator_commssion = ($ppv_price * $commission_percentage_value) / 100;
            $admin_commssion = $ppv_price - $moderator_commssion;
            $moderator_id = $moderators_id;
        } else {
            $total_amount = $video->ppv_price;
            $title = $video->title;
            $commssion = VideoCommission::where('type', 'CPP')->first();
            $percentage = null;
            $ppv_price = $video->ppv_price;
            $admin_commssion = null;
            $moderator_commssion = null;
            $moderator_id = null;
        }

        $purchase = PpvPurchase::find($PpvPurchase_id);
        $purchase->total_amount = $amount;
        $purchase->moderator_id = $moderators_id;
        $purchase->admin_commssion = $admin_commssion;
        $purchase->moderator_commssion = $moderator_commssion;
        $purchase->ppv_plan = $request->ppv_plan;
        $purchase->save();

        $recept_id = Str::random(10);

        $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

        $orderData = [
            'receipt' => $recept_id,
            'amount' => $amount * 100,
            'currency' => 'INR',
            'payment_capture' => 1,
        ];

        $razorpayOrder = $api->order->create($orderData);

        $plainAmount = $amount * 100;
        $encryptedAmount = encrypt($plainAmount);
        $response = array(
            'razorpaykeyId' => $this->razorpaykeyId,
            'name' => Auth::user()->name ? Auth::user()->name : null,
            'currency' => 'INR',
            'amount' => $plainAmount,// for Razorpay JS
            'encrypted_amount' => $encryptedAmount, // for form/backend
            'orderId' => $razorpayOrder['id'],
            'video_id' => $request->video_id,
            'user_id' => Auth::user()->id,
            'description' => null,
            'address' => null,
            'Video_slug' => $video->slug,
            'ppv_plan' => $ppv_plan,
            'PpvPurchase_id' => $PpvPurchase_id,
        );

        return Theme::view('Razorpay.video_rent_checkout', compact('response'));
    }



    public function RazorpaySeriesSeasonRent(Request $request, $SeriesSeason_id)
    {

        $SeriesSeason = SeriesSeason::where('id', $request->SeriesSeason_id)->first();
        $amount = $SeriesSeason->ppv_price;

        $setting = Setting::first();
        $PpvPurchase = PpvPurchase::create([
            'user_id' => Auth::user()->id,
            'season_id' => $SeriesSeason_id,
            'series_id' => null,
            'total_amount' => $amount,
            'platform' => 'website',
            'ppv_plan' => null,
            'payment_gateway' => 'razoray',
            'status' => 'hold',
        ]);

        $PpvPurchase_id = $PpvPurchase->id;

        $series_id = SeriesSeason::where('id', $request->SeriesSeason_id)->pluck('series_id')->first();
        $Series_slug = Series::where('id', $series_id)->pluck('slug')->first();
        // if(!empty($SeriesSeason)){
        // $moderators_id = Auth::User()->id;
        // }

        $Series = Series::where('id', $series_id)->first();
        if (!empty($Series) && $Series->uploaded_by == 'CPP') {
            $moderators_id = $Series->user_id;
        }
        $moderators_user_id = Series::where('id', $series_id)->pluck('user_id')->first();
        $CPP_commission_percentage = Series::where('id', $series_id)->pluck('CPP_commission_percentage')->first();

        $moderators_id = null;
        if (!empty($moderators_user_id)) {
            $moderators_id = $moderators_user_id;
        }

        $commission_btn = $setting->CPP_Commission_Status;
        $CppUser_details = ModeratorsUser::where('id', $moderators_id)->first();
        $video_commission_percentage = VideoCommission::where('type', 'Cpp')->pluck('percentage')->first();
        $commission_percentage_value = $CPP_commission_percentage;
        // dd((600 * $commission_percentage_value)/100);

        if ($commission_btn === 0) {
            $commission_percentage_value = !empty($CppUser_details->commission_percentage) ? $CppUser_details->commission_percentage : $video_commission_percentage;
        }

        if (!empty($moderators_id)) {
            $moderator = ModeratorsUser::where('id', $moderators_id)->first();
            if ($moderator) {
                $percentage = $moderator->commission_percentage ? $moderator->commission_percentage : 0;
            } else {
                $percentage = 0;
            }
            $total_amount = $SeriesSeason->ppv_price;
            $title = $SeriesSeason->series_seasons_name;
            $commssion = VideoCommission::where('type', 'CPP')->first();
            $ppv_price = $amount;
            $moderator_commssion = ($ppv_price * $commission_percentage_value) / 100;
            $admin_commssion = $ppv_price - $moderator_commssion;
            $moderator_id = $moderators_id;
        } else {
            $total_amount = $amount;
            $title = $SeriesSeason->title;
            $commssion = VideoCommission::where('type', 'CPP')->first();
            $percentage = null;
            $ppv_price = $amount;
            $admin_commssion = null;
            $moderator_commssion = null;
            $moderator_id = null;
        }

        $purchase = PpvPurchase::find($PpvPurchase_id);
        $purchase->total_amount = $amount;
        $purchase->moderator_id = $moderators_id;
        $purchase->admin_commssion = $admin_commssion;
        $purchase->moderator_commssion = $moderator_commssion;
        $purchase->save();
        $recept_id = Str::random(10);

        $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

        $orderData = [
            'receipt' => $recept_id,
            'amount' => $amount * 100,
            'currency' => 'INR',
            'notes' => [
                'series_id' => $SeriesSeason_id,
                'user_id' => Auth::user()->id,
                'ppv_plan' => $request->ppv_plan,
            ],
        ];

        $razorpayOrder = $api->order->create($orderData);

        $SeriesSeason = SeriesSeason::where('id', $SeriesSeason_id)->first();
        $series_id = SeriesSeason::where('id', $SeriesSeason_id)->pluck('series_id')->first();
        $Series_slug = Series::where('id', $series_id)->pluck('slug')->first();


        $response = array(
            'razorpaykeyId' => $this->razorpaykeyId,
            'name' => Auth::user()->name ? Auth::user()->name : null,
            'currency' => 'INR',
            'amount' => $amount * 100,
            'orderId' => $razorpayOrder['id'],
            'SeriesSeason_id' => $request->SeriesSeason_id,
            'user_id' => Auth::user()->id,
            'description' => null,
            'address' => null,
            'Series_slug' => $Series_slug,
            'ppv_plan' => null,
            'PpvPurchase_id' => $PpvPurchase_id,
        );

        return Theme::view('Razorpay.SeriesSeason_rent_checkout', compact('response'));
    }

    public function RazorpaySeriesSeasonRent_Payment(Request $request)
    {
        DB::beginTransaction();
        try {
            $setting = Setting::first();
            $ppv_hours = $setting->ppv_hours;

            $d = new \DateTime('now');
            $d->setTimezone(new \DateTimeZone(config('app.timezone', 'Asia/Kolkata'))); // Use configured timezone
            $now = $d->format('Y-m-d h:i:s a');
            $to_time = date('Y-m-d h:i:s a', strtotime('+' . $ppv_hours . ' hour', strtotime($now)));

            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

            $attributes = array(
                'razorpay_signature' => $request->rzp_signature,
                'razorpay_payment_id' => $request->rzp_paymentid,
                'razorpay_order_id' => $request->rzp_orderid
            );
            $api->utility->verifyPaymentSignature($attributes); // Verification, throws exception on failure.

            $payment = $api->payment->fetch($request->rzp_paymentid);

            if ($payment->status !== 'captured') {
                $payment->capture(['amount' => $payment->amount, 'currency' => $payment->currency]); // Added currency
            }
            // Refresh payment status after capture attempt
            $payment = $api->payment->fetch($request->rzp_paymentid);
            $payment_status = $payment->status;

            $purchase = PpvPurchase::find($request->PpvPurchase_id);
            if (!$purchase) {
                Log::error('RazorpaySeriesSeasonRent_Payment Error: PpvPurchase record not found for ID: ' . $request->PpvPurchase_id, ['request_all' => $request->all()]);
                throw new \Exception('Original purchase record not found.');
            }

            $purchase->user_id = $request->user_id;
            $purchase->season_id = $request->SeriesSeason_id;
            $purchase->series_id = $request->series_id;
            $purchase->total_amount = $request->amount / 100; // Assuming $request->amount is in paisa
            $purchase->status = $payment_status;
            // TODO: Implement state transition validation before updating status.
            $purchase->to_time = $to_time;
            $purchase->platform = 'website';
            $purchase->ppv_plan = $request->ppv_plan;
            $purchase->payment_id = $request->rzp_orderid; // Store Razorpay Order ID
            $purchase->razorpay_payment_id = $request->rzp_paymentid; // Store Razorpay Payment ID
            // TODO: Ensure PpvPurchase model has 'razorpay_payment_id' and other new fields in its $fillable array.
            $purchase->payment_gateway = 'razorpay';
            $purchase->save();

            // TODO: Review and implement or remove any commission logic if applicable here.

            $respond = array(
                'status' => 'true',
            );

            SiteLogs::create([
                'level' => 'success,' . $purchase->status,
                'message' => 'Razorpay SeriesSeason rent payment stored successfully! Order ID: ' . $purchase->payment_id . ', Payment ID: ' . $purchase->razorpay_payment_id,
                'context' => 'RazorpaySeriesSeasonRent_Payment'
            ]);

            DB::commit();
            return view('Razorpay.Rent_message', compact('respond'));

        } catch (\Razorpay\Api\Errors\SignatureVerificationError $e) {
            DB::rollBack();
            Log::error('Razorpay Signature Verification Failed (SeriesSeasonRent): ' . $e->getMessage(), ['request_all' => $request->all()]);
            $respond = array(
                'status' => 'false',
                'message' => 'Payment verification failed. Invalid signature.'
            );
            SiteLogs::create([
                'level' => 'critical_error',
                'message' => 'Razorpay Signature Verification Failed (SeriesSeasonRent): ' . $e->getMessage(),
                'context' => 'RazorpaySeriesSeasonRent_Payment'
            ]);
            return Theme::view('Razorpay.Rent_message', compact('respond'));

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('RazorpaySeriesSeasonRent_Payment Error: ' . $e->getMessage() . "\nStack Trace: " . $e->getTraceAsString(), ['request_all' => $request->all()]);
            $respond = array(
                'status' => 'false',
                'message' => 'Payment processing failed. Please try again later or contact support.'
            );

            SiteLogs::create([
                'level' => 'error',
                'message' => 'General Error (SeriesSeasonRent): ' . $e->getMessage(),
                'context' => 'RazorpaySeriesSeasonRent_Payment'
            ]);

            return Theme::view('Razorpay.Rent_message', compact('respond'));
        }
    }

    public function RazorpaySeriesSeasonRent_Paymentfailure(Request $request)
    {
        Log::info('RazorpaySeriesSeasonRent_Paymentfailure: Received request', $request->all());

        $validatedData = $request->validate([
            'order_id' => 'required|string', // This should be the Razorpay Order ID
            'razorpay_payment_id' => 'nullable|string', // Actual Razorpay Payment ID, if available from client
            'SeriesSeason_id' => 'required|integer', // PK of the series_seasons table
            'user_id' => 'required|integer',
            'amount' => 'required|numeric', // Amount from client, assumed to be in smallest currency unit (e.g., paisa/cents)
            'error_code' => 'nullable|string',
            'error_description' => 'required|string',
            'error_source' => 'nullable|string',
            'error_step' => 'nullable|string',
            'error_reason' => 'nullable|string',
        ]);

        DB::beginTransaction();

        try {
            $razorpayOrderId = $validatedData['order_id'];
            $razorpayPaymentId = $validatedData['razorpay_payment_id'] ?? null;

            $existingFailedPurchase = \App\SeriesSeasonPurchase::where('payment_id', $razorpayOrderId)
                ->where('status', 'failed')
                ->first();

            if ($existingFailedPurchase) {
                Log::warning('RazorpaySeriesSeasonRent_Paymentfailure: Duplicate failure log attempt.', ['order_id' => $razorpayOrderId]);
                DB::rollBack();
                return response()->json(['status' => 'already_logged', 'message' => 'This payment failure has already been logged.']);
            }
            
            $purchase = \App\SeriesSeasonPurchase::where('payment_id', $razorpayOrderId)
                                              ->where('user_id', $validatedData['user_id'])
                                              ->first();

            if (!$purchase) {
                $purchase = new \App\SeriesSeasonPurchase;
                $purchase->user_id = $validatedData['user_id'];
                $purchase->payment_id = $razorpayOrderId; // Razorpay Order ID
                
                $seriesSeasonInfo = \App\SeriesSeason::find($validatedData['SeriesSeason_id']);
                if ($seriesSeasonInfo) {
                    $purchase->series_id = $seriesSeasonInfo->series_id;
                    $purchase->season_id = $seriesSeasonInfo->id; // SeriesSeason_id is the PK of series_seasons table
                } else {
                    Log::error('RazorpaySeriesSeasonRent_Paymentfailure: SeriesSeason record not found for SeriesSeason_id: ' . $validatedData['SeriesSeason_id'], ['order_id' => $razorpayOrderId]);
                    DB::rollBack();
                    return response()->json(['status' => 'error', 'message' => 'Invalid Series/Season ID provided.'], 400);
                }
            } else {
                if ($purchase->status === 'captured' || $purchase->status === 'authorized') {
                    Log::error('RazorpaySeriesSeasonRent_Paymentfailure: Attempted to mark a successful/authorized payment as failed.', [
                        'order_id' => $razorpayOrderId,
                        'existing_status' => $purchase->status
                    ]);
                    DB::rollBack();
                    return response()->json(['status' => 'error', 'message' => 'Cannot mark an already successful payment as failed.'], 409);
                }
            }

            $purchase->total_amount = $validatedData['amount'] / 100; 
            $purchase->status = 'failed';
            $purchase->payment_gateway = 'razorpay';
            $purchase->platform = 'website'; 
            $purchase->razorpay_payment_id = $razorpayPaymentId;

            $failureReason = "Code: " . ($validatedData['error_code'] ?? 'N/A') .
                             ", Description: " . ($validatedData['error_description']) .
                             ", Source: " . ($validatedData['error_source'] ?? 'N/A') .
                             ", Step: " . ($validatedData['error_step'] ?? 'N/A') .
                             ", Reason: " . ($validatedData['error_reason'] ?? 'N/A');
            $purchase->payment_failure_reason = substr($failureReason, 0, 255);

            $purchase->to_time = null;
            $purchase->admin_commission = null;
            $purchase->moderator_commission = null;

            $purchase->save();

            DB::commit();

            Log::info('RazorpaySeriesSeasonRent_Paymentfailure: Payment failure for Order ID ' . $razorpayOrderId . ' recorded successfully.', [
                'order_id' => $razorpayOrderId,
                'razorpay_payment_id' => $razorpayPaymentId,
                'purchase_id' => $purchase->id
            ]);
            SiteLogs::create([
                'level' => 'warning',
                'message' => 'Razorpay Series/Season rent payment failure stored successfully for Order ID: ' . $razorpayOrderId,
                'context' => json_encode(['order_id' => $razorpayOrderId, 'razorpay_payment_id' => $razorpayPaymentId, 'error' => $validatedData['error_description']])
            ]);

            return response()->json(['status' => 'failure_logged', 'message' => 'Payment failure recorded.']);

        } catch (\Illuminate\Validation\ValidationException $e) {
            DB::rollBack();
            Log::error('RazorpaySeriesSeasonRent_Paymentfailure: Validation failed.', [
                'errors' => $e->errors(),
                'request_data' => $request->all()
            ]);
            return response()->json(['status' => 'validation_error', 'message' => 'Invalid data provided.', 'errors' => $e->errors()], 422);
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('RazorpaySeriesSeasonRent_Paymentfailure: An unexpected error occurred.', [
                'error_message' => $e->getMessage(),
                'trace' => $e->getTraceAsString(), // Full trace for better debugging
                'request_data' => $request->all()
            ]);
            SiteLogs::create([
                'level' => 'error',
                'message' => 'Error in RazorpaySeriesSeasonRent_Paymentfailure: ' . $e->getMessage(),
                'context' => json_encode(['order_id' => $request->input('order_id'), 'exception' => $e->getMessage()])
            ]);
            return response()->json(['status' => 'error', 'message' => 'An unexpected error occurred while processing the payment failure.'], 500);
        }
    }

    public function RazorpaySeriesSeasonRent_PPV(Request $request, $ppv_plan, $SeriesSeason_id)
    {

        $SeriesSeason = SeriesSeason::where('id', $SeriesSeason_id)->first();

        switch ($ppv_plan) {
            case '240p':
                $amount = $SeriesSeason->ppv_price_240p;
                break;
            case '360p':
                $amount = $SeriesSeason->ppv_price_360p;
                break;
            case '480p':
                $amount = $SeriesSeason->ppv_price_480p;
                break;
            case '720p':
                $amount = $SeriesSeason->ppv_price_720p;
                break;
            case '1080p':
                $amount = $SeriesSeason->ppv_price_1080p;
                break;
            default:
                $amount = $SeriesSeason->ppv_price;

        }

        \App\PayRequestTransaction::create([
            'user_id' => Auth::user()->id,
            'ppv_plan' => $ppv_plan,
            'source_name' => $SeriesSeason_id,
            'source_id' => $SeriesSeason_id,
            'source_type' => 'series season',
            'platform' => "razorpay",
            'transform_form' => "PPV",
            'amount' => $amount,
            'date' => Carbon::now()->format('Y-m-d H:i:s a'),
            'status' => 'hold',
        ]);

        $recept_id = Str::random(10);

        $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);

        $orderData = [
            'receipt' => $recept_id,
            'amount' => $amount * 100,
            'currency' => 'INR',
            'payment_capture' => 1,
        ];

        $razorpayOrder = $api->order->create($orderData);

        $series_id = SeriesSeason::where('id', $SeriesSeason_id)->pluck('series_id')->first();
        $Series_slug = Series::where('id', $series_id)->pluck('slug')->first();


        $response = array(
            'razorpaykeyId' => $this->razorpaykeyId,
            'name' => Auth::user()->name ? Auth::user()->name : null,
            'currency' => 'INR',
            'amount' => $amount * 100,
            'orderId' => $razorpayOrder['id'],
            'SeriesSeason_id' => $request->SeriesSeason_id,
            'user_id' => Auth::user()->id,
            'description' => null,
            'address' => null,
            'Series_slug' => $Series_slug,
            'ppv_plan' => $ppv_plan,
        );

        return Theme::view('Razorpay.SeriesSeason_rent_checkout', compact('response'));
    }

    public function Razorpay_Missingtransaction()
    {
        $setting = Setting::first();
        $ppv_hours = $setting->ppv_hours;
        $d = new \DateTime('now');
        $d->setTimezone(new \DateTimeZone('Asia/Kolkata'));
        $now = $d->format('Y-m-d h:i:s a');
        $time = date('h:i:s', strtotime($now));
        $to_time = date('Y-m-d h:i:s a', strtotime('+' . $ppv_hours . ' hour', strtotime($now)));

        try {
            $api = new Api($this->razorpaykeyId, $this->razorpaykeysecret);
            $totalTransactions = 200;
            $transactionsPerRequest = 100;
            $skip = 0;
            $fetchedTransactions = 0;

            while ($fetchedTransactions < $totalTransactions) {
                $options = [
                    'count' => $transactionsPerRequest,
                    'skip' => $skip,
                ];
                $payments = $api->payment->all($options);
                if (empty($payments['items'])) {
                    break;
                }

                foreach ($payments['items'] as $payment) {
                    $paymentId = $payment['id'];
                    $existingPayment = PpvPurchase::where('payment_id', $paymentId)->first();


                    if (!$existingPayment) {
                        $amount = $payment['amount'] / 100;
                        $status = $payment['status'];
                        $userId = $payment['notes']['user_id'] ?? null;
                        $Ppv_plan = $payment['notes']['ppv_plan'] ?? null;

                        $videoId = $payment['notes']['video_id'] ?? null;
                        $liveId = $payment['notes']['live_id'] ?? null;
                        $audioId = $payment['notes']['audio_id'] ?? null;
                        $movieId = $payment['notes']['movie_id'] ?? null;
                        $seriesId = $payment['notes']['series_id'] ?? null;
                        $seasonId = $payment['notes']['season_id'] ?? null;
                        $episodeId = $payment['notes']['episode_id'] ?? null;

                        $mediaType = null;
                        $mediaId = null;


                        if ($liveId) {
                            $mediaType = 'live';
                            $mediaId = $liveId;
                        } elseif ($videoId) {
                            $mediaType = 'video';
                            $mediaId = $videoId;
                        } elseif ($audioId) {
                            $mediaType = 'audio';
                            $mediaId = $audioId;
                        } elseif ($movieId) {
                            $mediaType = 'movie';
                            $mediaId = $movieId;
                        } elseif ($seriesId) {
                            $mediaType = 'series';
                            $mediaId = $seriesId;
                        } elseif ($seasonId) {
                            $mediaType = 'season';
                            $mediaId = $seasonId;
                        } elseif ($episodeId) {
                            $mediaType = 'episode';
                            $mediaId = $episodeId;
                        }

                        if ($mediaId && $userId) {

                            $purchase = new PpvPurchase();
                            $purchase->user_id = $userId;
                            $purchase->total_amount = $amount;
                            $purchase->status = $status;
                            $purchase->to_time = $to_time;
                            $purchase->platform = 'website';
                            $purchase->payment_id = $paymentId;
                            $purchase->payment_gateway = 'razorpay';
                            $purchase->ppv_plan = $Ppv_plan;
                            if ($mediaType === 'video') {
                                $purchase->video_id = $mediaId;
                            } elseif ($mediaType === 'live') {
                                $purchase->live_id = $mediaId;
                            } elseif ($mediaType === 'audio') {
                                $purchase->audio_id = $mediaId;
                            } elseif ($mediaType === 'movie') {
                                $purchase->movie_id = $mediaId;
                            } elseif ($mediaType === 'series') {
                                $purchase->series_id = $mediaId;
                            } elseif ($mediaType === 'season') {
                                $purchase->season_id = $mediaId;
                            } elseif ($mediaType === 'episode') {
                                $purchase->episode_id = $mediaId;
                            }
                            $moderators_id = null;
                            $moderator_commssion = 0;
                            $admin_commssion = 0;
                            if ($mediaType === 'video' || $mediaType === 'live' || $mediaType === 'series') {

                                if ($mediaType === 'video') {
                                    $video = Video::where('id', $mediaId)->first();
                                    if (!empty($video)) {
                                        $moderators_id = $video->user_id;
                                    }

                                    $commission_btn = $setting->CPP_Commission_Status;
                                    $CppUser_details = ModeratorsUser::where('id', $moderators_id)->first();
                                    $video_commission_percentage = VideoCommission::where('type', 'Cpp')->pluck('percentage')->first();
                                    $commission_percentage_value = $video->CPP_commission_percentage ?? 0;
                                    if ($commission_btn === 0) {
                                        $commission_percentage_value = !empty($CppUser_details->commission_percentage) ? $CppUser_details->commission_percentage : $video_commission_percentage;
                                    }

                                    if (!empty($moderators_id)) {

                                        $moderator = ModeratorsUser::where('id', $moderators_id)->first();
                                        if ($moderator) {
                                            $percentage = $moderator->commission_percentage ? $moderator->commission_percentage : 0;
                                        } else {
                                            $percentage = 0;
                                        }
                                        $total_amount = $video->ppv_price ?? 0;
                                        $title = $video->title ?? 'unknown title';
                                        $commssion = VideoCommission::where('type', 'CPP')->first();
                                        $ppv_price = $amount;
                                        $moderator_commssion = ($ppv_price * $commission_percentage_value) / 100;
                                        $admin_commssion = $ppv_price - $moderator_commssion;
                                        $moderator_id = $moderators_id;
                                    } else {
                                        $total_amount = $video->ppv_price ?? 0;
                                        $title = $video->title ?? 'unknown title';
                                        $commssion = VideoCommission::where('type', 'CPP')->first();
                                        $percentage = null;
                                        $ppv_price = $video->ppv_price ?? 0;
                                        $admin_commssion = null;
                                        $moderator_commssion = null;
                                        $moderator_id = null;
                                    }
                                    // dd('clear');
                                    $purchase->moderator_id = $moderator_id;
                                    $purchase->admin_commssion = $admin_commssion;
                                    $purchase->moderator_commssion = $moderator_commssion;
                                    $purchase->save();

                                } elseif ($mediaType === 'live') {
                                    $liveStream = LiveStream::where('id', $mediaId)->first();
                                    if (!empty($video)) {
                                        $moderators_id = $liveStream->user_id;
                                    }

                                    if (!empty($moderators_id)) {
                                        $moderator = ModeratorsUser::where('id', $moderators_id)->first();
                                        if ($moderator) {
                                            $percentage = $moderator->commission_percentage ? $moderator->commission_percentage : 0;
                                        } else {
                                            $percentage = 0;
                                        }
                                        $total_amount = $liveStream->ppv_price ?? 0;
                                        $title = $liveStream->title ?? 'unknown title';
                                        $commssion = VideoCommission::where('type', 'CPP')->first();
                                        $ppv_price = $liveStream->ppv_price ?? 0;
                                        $moderator_commssion = ($percentage / 100) * $ppv_price;
                                        $admin_commssion = $ppv_price - $moderator_commssion;
                                        $moderator_id = $moderators_id;
                                    } else {
                                        $total_amount = $liveStream->ppv_price;
                                        $title = $liveStream->title;
                                        $commssion = VideoCommission::where('type', 'CPP')->first();
                                        $percentage = null;
                                        $ppv_price = $liveStream->ppv_price;
                                        $admin_commssion = null;
                                        $moderator_commssion = null;
                                        $moderator_id = null;
                                    }

                                    $purchase->moderator_id = $moderator_id;
                                    $purchase->admin_commssion = $admin_commssion;
                                    $purchase->moderator_commssion = $moderator_commssion;
                                    $purchase->save();

                                } elseif ($mediaType === 'series') {
                                    $SeriesSeason = SeriesSeason::where('id', $mediaId)->first();

                                    $series_id = SeriesSeason::where('id', $mediaId)->pluck('series_id')->first();
                                    $Series_slug = Series::where('id', $series_id)->pluck('slug')->first();
                                    $Series = Series::where('id', $series_id)->first();

                                    if (!empty($Series) && $Series->uploaded_by == 'CPP') {
                                        $moderators_id = $Series->user_id;
                                    }
                                    if (!empty($moderators_id)) {
                                        $moderator = ModeratorsUser::where('id', $moderators_id)->first();
                                        if ($moderator) {
                                            $percentage = $moderator->commission_percentage ? $moderator->commission_percentage : 0;
                                        } else {
                                            $percentage = 0;
                                        }
                                        $total_amount = $video->ppv_price ?? 0;
                                        $title = $video->title ?? 'unknown title';
                                        $commssion = VideoCommission::where('type', 'CPP')->first();
                                        $ppv_price = $video->ppv_price ?? 0;
                                        $moderator_commssion = ($percentage / 100) * $ppv_price;
                                        $admin_commssion = $ppv_price - $moderator_commssion;
                                        $moderator_id = $moderators_id;
                                    } else {
                                        $total_amount = $amount;
                                        $title = $SeriesSeason->title;
                                        $commssion = VideoCommission::where('type', 'CPP')->first();
                                        $percentage = null;
                                        $ppv_price = $amount;
                                        $admin_commssion = null;
                                        $moderator_commssion = null;
                                        $moderator_id = null;
                                    }
                                    $purchase->moderator_id = $moderator_id;
                                    $purchase->admin_commssion = $admin_commssion;
                                    $purchase->moderator_commssion = $moderator_commssion;
                                    $purchase->save();
                                }
                            } else {
                                \Log::warning("No valid media ID or user ID found for payment ID: " . $paymentId);
                            }
                        } elseif ($existingPayment && $existingPayment->status === 'failed') {
                            $existingPayment->status = $payment['status'];
                            $existingPayment->payment_failure_reason = $payment['error']['description'] ?? 'Unknown error';
                            $existingPayment->save();
                        }
                        $fetchedTransactions++;
                        if ($fetchedTransactions >= $totalTransactions) {
                            break;
                        }
                    }
                    $skip += $transactionsPerRequest;
                }
            }

            return redirect()->route('admin.transaction-details.index');

        } catch (\Exception $e) {
            //    dd($e->getMessage());
            return redirect()->route('admin.transaction-details.index')->with('error', 'An error occurred while processing the transactions.');
        }
    }

    /**
     * Handle Razorpay webhook events
     *
     * @param Request $request
     * @return \Illuminate\Http\Response
     */
    public function handleWebhook(Request $request)
    {
        \Log::info('Razorpay Webhook Received', ['payload' => $request->all()]);

        // Verify the webhook signature
        $webhookSignature = $request->header('X-Razorpay-Signature');
        $webhookBody = $request->getContent();

        if (!$this->verifyWebhookSignature($webhookBody, $webhookSignature)) {
            \Log::error('Razorpay Webhook: Invalid signature');
            return response()->json(['error' => 'Invalid signature'], 400);
        }

        $payload = json_decode($webhookBody, true);
        $event = $payload['event'] ?? null;

        if (!$event) {
            \Log::error('Razorpay Webhook: No event specified');
            return response()->json(['error' => 'No event specified'], 400);
        }

        \Log::info('Razorpay Webhook: Processing event', ['event' => $event]);

        try {
            // Handle different event types
            switch ($event) {
                case 'payment.authorized':
                    $this->handlePaymentAuthorized($payload);
                    break;
                case 'payment.captured':
                    $this->handlePaymentCaptured($payload);
                    break;
                case 'payment.failed':
                    $this->handlePaymentFailed($payload);
                    break;
                case 'subscription.authenticated':
                    $this->handleSubscriptionAuthenticated($payload);
                    break;
                case 'subscription.activated':
                    $this->handleSubscriptionActivated($payload);
                    break;
                case 'subscription.charged':
                    $this->handleSubscriptionCharged($payload);
                    break;
                case 'subscription.cancelled':
                    $this->handleSubscriptionCancelled($payload);
                    break;
                default:
                    \Log::info('Razorpay Webhook: Unhandled event', ['event' => $event]);
                    break;
            }

            return response()->json(['success' => true]);
        } catch (\Exception $e) {
            \Log::error('Razorpay Webhook: Error processing event', [
                'event' => $event,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            return response()->json(['error' => 'Error processing webhook'], 500);
        }
    }

    /**
     * Verify webhook signature
     *
     * @param string $webhookBody
     * @param string $webhookSignature
     * @return bool
     */
    private function verifyWebhookSignature($webhookBody, $webhookSignature)
    {
        if (empty($webhookSignature)) {
            return false;
        }

        $PaymentSetting = \App\PaymentSetting::where('payment_type', 'Razorpay')->first();
        $webhookSecret = $PaymentSetting->webhook_secret ?? env('RAZORPAY_WEBHOOK_SECRET');

        if (empty($webhookSecret)) {
            \Log::error('Razorpay Webhook: Webhook secret not configured');
            return false;
        }

        $expectedSignature = hash_hmac('sha256', $webhookBody, $webhookSecret);
        return hash_equals($expectedSignature, $webhookSignature);
    }

    private function handlePaymentAuthorized($payload)
    {
        $payment = $payload['payload']['payment']['entity'] ?? null;
        if (!$payment) {
            \Log::error('Razorpay Webhook: Invalid payment data in payload for payment.authorized');
            return response()->json(['error' => 'Invalid payload'], 400);
        }

        // IDEMPOTENCY CHECK: Start
        $razorpayPaymentId = $payment['id'] ?? null;
        if (!$razorpayPaymentId) {
            \Log::error('Razorpay Webhook: Missing payment ID in payment.authorized payload');
            return response()->json(['error' => 'Missing payment ID'], 400);
        }

        $existingWebhookRecord = DB::table('payment_webhook')
            ->where('payment_id', $razorpayPaymentId) // Check against the actual Razorpay Payment ID (pay_xxxx)
            ->where('event_type', 'payment.authorized')
            ->first();

        if ($existingWebhookRecord) {
            \Log::info('Razorpay Webhook: Duplicate payment.authorized event, skipping', [
                'razorpay_payment_id' => $razorpayPaymentId
            ]);
            return response()->json(['success' => true, 'message' => 'Duplicate event. Already processed.']);
        }
        // IDEMPOTENCY CHECK: End

        DB::beginTransaction();
        try {
            // Log the webhook event (now that we know it's not a duplicate we've already processed)
            DB::table('payment_webhook')->insert([
                'order_id' => $payment['order_id'] ?? null,
                'payment_id' => $razorpayPaymentId, // Store the actual Razorpay Payment ID (pay_xxxx)
                'amount' => ($payment['amount'] ?? 0) / 100, // Convert from paisa to rupees
                'status' => 'TXN_AUTHORIZED', // Internal status for this log
                'event_type' => 'payment.authorized',
                'payload' => json_encode($payload),
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            // For ppv_purchase table, we only want to create/update entries
            // when a payment is actually authorized by Razorpay, not when payment is initiated

            // Check if there's already a purchase record
            $purchase = \App\PpvPurchase::where('payment_id', $payment['id'])
                ->orWhere('payment_id', $payment['order_id'])
                ->first();

            if ($purchase) {
                // Update the existing purchase to 'hold'
                $purchase->status = 'hold';
                $purchase->payment_id = $payment['id']; // Ensure payment ID is set
                $purchase->save();

                \Log::info('Razorpay Webhook: Purchase marked as hold', [
                    'payment_id' => $payment['id'],
                    'purchase_id' => $purchase->id
                ]);
            } else {
                // If no purchase record exists yet, create one based on notes
                // but ONLY for authorized payments (we're already in the authorized webhook)
                $notes = $payment['notes'] ?? [];

                if (isset($notes['video_id']) && isset($notes['user_id'])) {
                    // Create a purchase record with 'hold' status
                    \App\PpvPurchase::create([
                        'user_id' => $notes['user_id'],
                        'video_id' => $notes['video_id'],
                        'payment_id' => $payment['id'],
                        'total_amount' => ($payment['amount'] ?? 0) / 100,
                        'status' => 'hold',
                        'payment_gateway' => 'razorpay',
                        'platform' => isset($notes['platform']) ? $notes['platform'] : 'website',
                        'created_at' => now(),
                        'updated_at' => now(),
                    ]);

                    \Log::info('Razorpay Webhook: Created authorized purchase record', [
                        'payment_id' => $payment['id'],
                        'user_id' => $notes['user_id'],
                        'video_id' => $notes['video_id']
                    ]);
                }
            }

            try {
                $api = new \Razorpay\Api\Api($this->razorpaykeyId, $this->razorpaykeysecret);
                $razorpayPayment = $api->payment->fetch($payment['id']);

                if ($razorpayPayment->status === 'authorized') {
                    $razorpayPayment->capture(['amount' => $razorpayPayment->amount]);
                    \Log::info('Razorpay Webhook: Payment captured from authorized webhook', [
                        'payment_id' => $payment['id']
                    ]);
                }
            } catch (\Exception $captureError) {
                \Log::warning('Razorpay Webhook: Could not capture payment', [
                    'payment_id' => $payment['id'],
                    'error' => $captureError->getMessage()
                ]);
            }

            DB::commit();
        } catch (\Exception $e) {
            DB::rollback();
            \Log::error('Razorpay Webhook: Error processing authorized payment', [
                'error' => $e->getMessage(),
                'payment_id' => $payment['id'] ?? null,
                'trace' => $e->getTraceAsString()
            ]);
        }
    }

    private function handlePaymentCaptured($payload)
    {
        $payment = $payload['payload']['payment']['entity'] ?? null;
        if (!$payment) {
            \Log::error('Razorpay Webhook: Invalid payment data in payload for payment.captured');
            return response()->json(['error' => 'Invalid payload'], 400);
        }

        $razorpayPaymentId = $payment['id'] ?? null;
        $razorpayOrderId = $payment['order_id'] ?? null; // Extract Order ID

        if (!$razorpayPaymentId) {
            \Log::error('Razorpay Webhook: Missing Razorpay Payment ID (payment.id) in payment.captured payload', ['payload' => $payload]);
            return response()->json(['error' => 'Missing Razorpay Payment ID'], 400);
        }
        if (!$razorpayOrderId) {
            \Log::warning('Razorpay Webhook: Missing Razorpay Order ID (order_id) in payment.captured payload. Linking might rely solely on payment_id.', ['razorpay_payment_id' => $razorpayPaymentId]);
            // Depending on your business logic, you might choose to return an error here if order_id is strictly required.
        }

        // IDEMPOTENCY CHECK
        $existingWebhookRecord = DB::table('payment_webhook')
            ->where('payment_id', $razorpayPaymentId) // Check against Razorpay Payment ID (pay_xxxx)
            ->where('event_type', 'payment.captured')
            ->first();

        if ($existingWebhookRecord) {
            \Log::info('Razorpay Webhook: Duplicate payment.captured event, skipping', [
                'razorpay_payment_id' => $razorpayPaymentId
            ]);
            return response()->json(['success' => true, 'message' => 'Duplicate event. Already processed.']);
        }

        DB::beginTransaction();
        try {
            // Log the webhook event
            DB::table('payment_webhook')->insert([
                'order_id' => $razorpayOrderId,
                'payment_id' => $razorpayPaymentId,
                'amount' => ($payment['amount'] ?? 0) / 100,
                'status' => 'TXN_SUCCESS', // Internal status for this log
                'event_type' => 'payment.captured',
                'payload' => json_encode($payload),
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            $notes = $payment['notes'] ?? [];
            $userId = $notes['user_id'] ?? null;

            if (!$userId && !(isset($notes['subscription_id']))) { // subscription_id might imply a system-level user or different handling
                \Log::error('Razorpay Webhook: Missing user_id in payment notes for payment.captured (and not a known subscription flow).', [
                    'razorpay_payment_id' => $razorpayPaymentId,
                    'razorpay_order_id' => $razorpayOrderId,
                    'notes' => $notes
                ]);
                DB::rollback();
                return response()->json(['error' => 'Missing user_id in payment notes'], 400);
            }

            $setting = Setting::first();
            $ppv_hours = $setting->ppv_hours ?? 24;
            $to_time = now()->addHours($ppv_hours)->toDateTimeString();

            $purchase = null;
            $purchaseModelClass = null;
            $purchaseTypeLog = 'Unknown';
            $identifierData = []; // For logging and creation

            if (isset($notes['video_id'])) {
                $purchaseModelClass = \App\PpvPurchase::class;
                $purchaseTypeLog = 'PPV';
                $identifierData = ['video_id' => $notes['video_id']];
            } elseif (isset($notes['series_id']) && isset($notes['season_id'])) {
                $purchaseModelClass = \App\SeriesSeasonPurchase::class;
                $purchaseTypeLog = 'SeriesSeason';
                $identifierData = ['series_id' => $notes['series_id'], 'season_id' => $notes['season_id']];
            } elseif (isset($notes['live_id'])) {
                $purchaseModelClass = \App\LiveEventPurchase::class;
                $purchaseTypeLog = 'LiveEvent';
                $identifierData = ['live_id' => $notes['live_id']];
            } elseif (isset($notes['subscription_id'])) {
                $purchaseModelClass = \App\Subscription::class; // Ensure this model exists and is imported
                $purchaseTypeLog = 'Subscription';
                $identifierData = ['subscription_id' => $notes['subscription_id']];
                // Subscriptions might get user_id from Razorpay's subscription entity if not in notes
                if (!$userId && isset($payload['payload']['subscription']['entity']['customer_id'])) {
                    // This is a placeholder if you map Razorpay customer_id to your user_id
                    // $userId = findUserByRazorpayCustomerId($payload['payload']['subscription']['entity']['customer_id']);
                    // For now, we'll rely on user_id from notes or fail if not present for non-subscription types
                }
            }

            if ($purchaseModelClass) {
                if ($razorpayOrderId) {
                    $purchase = $purchaseModelClass::where('payment_id', $razorpayOrderId)->first();
                }
                if (!$purchase && $razorpayPaymentId) {
                    $purchase = $purchaseModelClass::where('razorpay_payment_id', $razorpayPaymentId)->first();
                }

                if ($purchase) { // Existing purchase found
                    if ($purchase->status !== 'captured' && ($purchaseTypeLog !== 'Subscription' || $purchase->status !== 'active')) {
                        $purchase->status = ($purchaseTypeLog === 'Subscription') ? 'active' : 'captured';
                        if (is_null($purchase->razorpay_payment_id) && $razorpayPaymentId) {
                            $purchase->razorpay_payment_id = $razorpayPaymentId;
                        }
                        if (property_exists($purchase, 'to_time') && $purchaseTypeLog !== 'Subscription') {
                            $purchase->to_time = $to_time;
                        }
                        // For subscriptions, update end_date or relevant fields if applicable
                        $purchase->save();
                        \Log::info("Razorpay Webhook: Existing {$purchaseTypeLog} purchase updated to captured/active.", array_merge([
                            'razorpay_payment_id' => $razorpayPaymentId,
                            'razorpay_order_id' => $razorpayOrderId,
                            'purchase_id' => $purchase->id,
                        ], $identifierData));
                    } else {
                        \Log::info("Razorpay Webhook: Existing {$purchaseTypeLog} purchase already captured/active, no action taken.", array_merge([
                            'razorpay_payment_id' => $razorpayPaymentId,
                            'razorpay_order_id' => $razorpayOrderId,
                            'purchase_id' => $purchase->id,
                        ], $identifierData));
                    }
                } else { // No existing purchase, create new one
                    $createData = array_merge([
                        'user_id' => $userId, // userId must be valid here
                        'payment_id' => $razorpayOrderId,
                        'razorpay_payment_id' => $razorpayPaymentId,
                        'total_amount' => ($payment['amount'] ?? 0) / 100,
                        'status' => ($purchaseTypeLog === 'Subscription') ? 'active' : 'captured',
                        'payment_gateway' => 'razorpay',
                        'platform' => $notes['platform'] ?? 'website',
                        'created_at' => now(),
                        'updated_at' => now(),
                    ], $identifierData);

                    if ($purchaseTypeLog !== 'Subscription' && property_exists(new $purchaseModelClass, 'to_time')) {
                        $createData['to_time'] = $to_time;
                    }
                    // Adjust 'total_amount' to 'amount' for Subscription model if necessary
                    if ($purchaseTypeLog === 'Subscription' && property_exists(new $purchaseModelClass, 'amount') && !property_exists(new $purchaseModelClass, 'total_amount')) {
                        $createData['amount'] = $createData['total_amount'];
                        unset($createData['total_amount']);
                    }

                    $purchase = $purchaseModelClass::create($createData);
                    \Log::info("Razorpay Webhook: New {$purchaseTypeLog} purchase created and captured/activated.", array_merge([
                        'razorpay_payment_id' => $razorpayPaymentId,
                        'razorpay_order_id' => $razorpayOrderId,
                        'purchase_id' => $purchase->id,
                    ], $identifierData));
                }
            } else {
                \Log::warning('Razorpay Webhook: payment.captured event for unknown purchase type or missing identifiers in notes.', [
                    'razorpay_payment_id' => $razorpayPaymentId,
                    'razorpay_order_id' => $razorpayOrderId,
                    'notes' => $notes
                ]);
            }

            DB::commit();
            return response()->json(['success' => true, 'message' => 'Payment captured successfully.']);

        } catch (\Exception $e) {
            DB::rollback();
            \Log::error('Razorpay Webhook: Error processing payment.captured event.', [
                'error' => $e->getMessage(),
                'razorpay_payment_id' => $razorpayPaymentId ?? null,
                'razorpay_order_id' => $razorpayOrderId ?? null,
                'file' => $e->getFile(),
                'line' => $e->getLine(),
                'trace_small' => substr($e->getTraceAsString(), 0, 500) // Smaller trace for general log
            ]);
            // Log to failed_payments table
            try {
                DB::table('failed_payments')->insert([
                    'payment_id' => $razorpayPaymentId ?? 'unknown',
                    'order_id' => $razorpayOrderId ?? null,
                    'error' => $e->getMessage(),
                    'payload' => json_encode($payload),
                    'created_at' => now(),
                    'event_type' => 'payment.captured'
                ]);
            } catch (\Exception $logError) {
                \Log::error('Razorpay Webhook: Could not log to failed_payments table.', [
                    'original_error' => $e->getMessage(),
                    'log_error' => $logError->getMessage(),
                    'razorpay_payment_id' => $razorpayPaymentId ?? null
                ]);
            }
            return response()->json(['error' => 'Error processing payment'], 500);
            }
    }

    private function handlePaymentFailed($payload)
    {
        $paymentEntity = $payload['payload']['payment']['entity'] ?? null;
        if (!$paymentEntity) {
            Log::error('Razorpay Webhook (payment.failed): Invalid payment data in payload.');
            return response()->json(['status' => 'error', 'message' => 'Invalid payload structure.'], 400);
        }

        $razorpayPaymentId = $paymentEntity['id'] ?? null; // E.g., pay_xxxx
        $razorpayOrderId = $paymentEntity['order_id'] ?? null; // E.g., order_xxxx
        $notes = $paymentEntity['notes'] ?? [];

        if (!$razorpayPaymentId || !$razorpayOrderId) {
            Log::error('Razorpay Webhook (payment.failed): Missing Razorpay Payment ID or Order ID in payload.', ['payload' => $paymentEntity]);
            return response()->json(['status' => 'error', 'message' => 'Missing payment/order ID.'], 400);
        }

        // IDEMPOTENCY CHECK (using Razorpay Payment ID for this specific event)
        $existingWebhookRecord = DB::table('payment_webhook')
            ->where('payment_id', $razorpayPaymentId) // Storing pay_xxxx here
            ->where('event_type', 'payment.failed')
            ->first();

        if ($existingWebhookRecord) {
            Log::info('Razorpay Webhook (payment.failed): Duplicate event, already processed.', ['razorpay_payment_id' => $razorpayPaymentId]);
            return response()->json(['status' => 'success', 'message' => 'Duplicate event. Already processed.']);
        }

        DB::beginTransaction();
        try {
            // Log the webhook event first (after idempotency check)
            DB::table('payment_webhook')->insert([
                'order_id' => $razorpayOrderId,
                'payment_id' => $razorpayPaymentId,
                'amount' => ($paymentEntity['amount'] ?? 0) / 100,
                'status' => $paymentEntity['status'] ?? 'failed', // 'failed'
                'event_type' => 'payment.failed',
                'payload' => json_encode($payload),
                'created_at' => now(),
                'updated_at' => now(),
            ]);

            $purchase_type = $notes['purchase_type'] ?? null;
            $user_id = $notes['user_id'] ?? null;

            if (!$user_id) {
                Log::error('Razorpay Webhook (payment.failed): Missing user_id in notes.', ['order_id' => $razorpayOrderId, 'notes' => $notes]);
                DB::rollBack();
                return response()->json(['status' => 'error', 'message' => 'User ID missing in payment notes.'], 400);
            }

            $purchase = null;
            $modelClass = null;
            $contentIdField = null;
            $contentIdValue = null;

            switch ($purchase_type) {
                case 'ppv':
                    $modelClass = '\App\PpvPurchase';
                    $contentIdField = 'video_id';
                    $contentIdValue = $notes['video_id'] ?? null;
                    break;
                case 'series_season':
                    $modelClass = '\App\SeriesSeasonPurchase';
                    // Assuming notes contain series_season_id which is the PK for series_seasons table
                    // and maps to season_id in SeriesSeasonPurchase table.
                    // Or, if series_id and season_id are separate in notes, adjust accordingly.
                    $contentIdField = 'season_id'; // This is the series_season_id
                    $contentIdValue = $notes['series_season_id'] ?? ($notes['season_id'] ?? null);
                    break;
                case 'live_event':
                    $modelClass = '\App\LiveEventPurchase';
                    $contentIdField = 'live_event_id';
                    $contentIdValue = $notes['live_event_id'] ?? null;
                    break;
                default:
                    Log::error('Razorpay Webhook (payment.failed): Unknown or missing purchase_type in notes.', ['order_id' => $razorpayOrderId, 'notes' => $notes]);
                    DB::rollBack();
                    return response()->json(['status' => 'error', 'message' => 'Unknown purchase type.'], 400);
            }

            if (!$contentIdValue) {
                Log::error('Razorpay Webhook (payment.failed): Missing content ID in notes for purchase type: ' . $purchase_type, ['order_id' => $razorpayOrderId, 'notes' => $notes]);
                DB::rollBack();
                return response()->json(['status' => 'error', 'message' => 'Content ID missing.'], 400);
            }

            // Find existing purchase record by Order ID and User ID
            $purchase = $modelClass::where('payment_id', $razorpayOrderId)
                                ->where('user_id', $user_id)
                                ->first();

            $failureReason = "RZP_Error: Code: " . ($paymentEntity['error_code'] ?? 'N/A') .
                             ", Desc: " . ($paymentEntity['error_description'] ?? 'N/A') .
                             ", Source: " . ($paymentEntity['error_source'] ?? 'N/A') .
                             ", Step: " . ($paymentEntity['error_step'] ?? 'N/A') .
                             ", Reason: " . ($paymentEntity['error_reason'] ?? 'N/A');
            $failureReason = substr($failureReason, 0, 255);

            if ($purchase) {
                // Existing purchase record found
                if ($purchase->status === 'captured' || $purchase->status === 'authorized') {
                    Log::warning('Razorpay Webhook (payment.failed): Attempted to mark an already successful/authorized payment as failed. No status change.', [
                        'order_id' => $razorpayOrderId,
                        'razorpay_payment_id' => $razorpayPaymentId,
                        'purchase_id' => $purchase->id,
                        'existing_status' => $purchase->status
                    ]);
                    // Still update razorpay_payment_id and failure reason if it was missing, but don't change status
                    if (!$purchase->razorpay_payment_id) $purchase->razorpay_payment_id = $razorpayPaymentId;
                    // Optionally append failure reason if one already exists from client-side
                    // $purchase->payment_failure_reason = ($purchase->payment_failure_reason ? $purchase->payment_failure_reason . ' | ' : '') . $failureReason;
                    $purchase->save();
                } else {
                    $purchase->status = 'failed';
                    $purchase->razorpay_payment_id = $razorpayPaymentId; // Ensure this is updated
                    $purchase->payment_failure_reason = $failureReason;
                    $purchase->save();
                    Log::info('Razorpay Webhook (payment.failed): Existing purchase record updated to failed.', ['order_id' => $razorpayOrderId, 'purchase_id' => $purchase->id]);
                }
            } else {
                // No existing purchase record, create a new one
                $newPurchaseData = [
                    'user_id' => $user_id,
                    'payment_id' => $razorpayOrderId, // Razorpay Order ID
                    'razorpay_payment_id' => $razorpayPaymentId, // Razorpay Payment ID
                    'total_amount' => ($paymentEntity['amount'] ?? 0) / 100,
                    'status' => 'failed',
                    'payment_failure_reason' => $failureReason,
                    'payment_gateway' => 'razorpay',
                    'platform' => $notes['platform'] ?? 'webhook_created', // Indicate it was created via webhook
                    'to_time' => null,
                    'admin_commission' => null,
                    'moderator_commission' => null,
                ];
                $newPurchaseData[$contentIdField] = $contentIdValue;

                // For series/season, ensure series_id is also populated if available and distinct
                if ($purchase_type === 'series_season' && isset($notes['series_id'])) {
                    $newPurchaseData['series_id'] = $notes['series_id'];
                }
                // If series_season_id from notes is actually the season's PK (series_seasons.id)
                // and your SeriesSeasonPurchase model uses 'season_id' for this PK, then it's fine.
                // If 'series_id' is also needed and not directly in notes but derivable from series_season_id, fetch it.
                // For simplicity, assuming series_season_id in notes is the PK of series_seasons table and maps to 'season_id'.
                // And 'series_id' is also provided in notes if needed for SeriesSeasonPurchase.

                $createdPurchase = $modelClass::create($newPurchaseData);
                Log::info('Razorpay Webhook (payment.failed): New purchase record created for failed payment.', ['order_id' => $razorpayOrderId, 'purchase_id' => $createdPurchase->id]);
            }

            DB::commit();
            return response()->json(['status' => 'success', 'message' => 'Webhook processed.']);

        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Razorpay Webhook (payment.failed): Error processing webhook.', [
                'error_message' => $e->getMessage(),
                'razorpay_order_id' => $razorpayOrderId,
                'razorpay_payment_id' => $razorpayPaymentId,
                'trace' => $e->getTraceAsString()
            ]);
            return response()->json(['status' => 'error', 'message' => 'Internal server error.'], 500);
        }
    }

    /**
     * Handle subscription.authenticated event
    // ... (rest of the code remains the same)
     * @param array $payload
     * @return void
     */
    private function handleSubscriptionAuthenticated($payload)
    {
        $subscription = $payload['payload']['subscription']['entity'] ?? null;
        if (!$subscription) {
            \Log::error('Razorpay Webhook: Invalid subscription data in payload');
            return;
        }

        // Log the webhook event
        DB::table('payment_webhook')->insert([
            'order_id' => null,
            'payment_id' => null,
            'subscription_id' => $subscription['id'] ?? null,
            'amount' => 0, // No amount at this stage
            'status' => 'SUBSCRIPTION_AUTHENTICATED',
            'event_type' => 'subscription.authenticated',
            'payload' => json_encode($payload),
            'created_at' => now(),
            'updated_at' => now(),
        ]);

        \Log::info('Razorpay Webhook: Subscription authenticated', ['subscription_id' => $subscription['id'] ?? null]);
    }

    /**
     * Handle subscription.activated event
     *
     * @param array $payload
     * @return void
     */
    private function handleSubscriptionActivated($payload)
    {
        $subscription = $payload['payload']['subscription']['entity'] ?? null;
        if (!$subscription) {
            \Log::error('Razorpay Webhook: Invalid subscription data in payload');
            return;
        }

        // Log the webhook event
        DB::table('payment_webhook')->insert([
            'order_id' => null,
            'payment_id' => null,
            'subscription_id' => $subscription['id'] ?? null,
            'amount' => 0, // No amount at this stage
            'status' => 'SUBSCRIPTION_ACTIVATED',
            'event_type' => 'subscription.activated',
            'payload' => json_encode($payload),
            'created_at' => now(),
            'updated_at' => now(),
        ]);

        \Log::info('Razorpay Webhook: Subscription activated', ['subscription_id' => $subscription['id'] ?? null]);
    }

    /**
     * Handle subscription.charged event
     *
     * @param array $payload
     * @return void
     */
    private function handleSubscriptionCharged($payload)
    {
        $subscription = $payload['payload']['subscription']['entity'] ?? null;
        $payment = $payload['payload']['payment']['entity'] ?? null;

        if (!$subscription || !$payment) {
            \Log::error('Razorpay Webhook: Invalid subscription or payment data in payload');
            return;
        }

        // Log the webhook event
        DB::table('payment_webhook')->insert([
            'order_id' => null,
            'payment_id' => $payment['id'] ?? null,
            'subscription_id' => $subscription['id'] ?? null,
            'amount' => ($payment['amount'] ?? 0) / 100, // Convert from paisa to rupees
            'status' => 'TXN_SUCCESS',
            'event_type' => 'subscription.charged',
            'payload' => json_encode($payload),
            'created_at' => now(),
            'updated_at' => now(),
        ]);

        // Update subscription status in our database
        $subscriptionRecord = Subscription::where('razorpay_subscription_id', $subscription['id'])->first();
        if ($subscriptionRecord) {
            $subscriptionRecord->stripe_status = 'active';
            $subscriptionRecord->save();
        }

        \Log::info('Razorpay Webhook: Subscription charged', [
            'subscription_id' => $subscription['id'] ?? null,
            'payment_id' => $payment['id'] ?? null
        ]);
    }

    /**
     * Handle subscription.cancelled event
     *
     * @param array $payload
     * @return void
     */
    private function handleSubscriptionCancelled($payload)
    {
        $subscription = $payload['payload']['subscription']['entity'] ?? null;
        if (!$subscription) {
            \Log::error('Razorpay Webhook: Invalid subscription data in payload');
            return;
        }

        // Log the webhook event
        DB::table('payment_webhook')->insert([
            'order_id' => null,
            'payment_id' => null,
            'subscription_id' => $subscription['id'] ?? null,
            'amount' => 0,
            'status' => 'SUBSCRIPTION_CANCELLED',
            'event_type' => 'subscription.cancelled',
            'payload' => json_encode($payload),
            'created_at' => now(),
            'updated_at' => now(),
        ]);

        // Update subscription status in our database
        $subscriptionRecord = Subscription::where('razorpay_subscription_id', $subscription['id'])->first();
        if ($subscriptionRecord) {
            $subscriptionRecord->stripe_status = 'cancelled';
            $subscriptionRecord->save();
        }

        \Log::info('Razorpay Webhook: Subscription cancelled', ['subscription_id' => $subscription['id'] ?? null]);
    }
}
