/**
 * @file settings-menu-item.js
 */

'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _videoJs = require('video.js');

var _videoJs2 = _interopRequireDefault(_videoJs);

var MenuItem = _videoJs2['default'].getComponent('MenuItem');
var playbackRateMenuButton = _videoJs2['default'].getComponent('PlaybackRateMenuButton');
var component = _videoJs2['default'].getComponent('Component');

var toTitleCase = function toTitleCase(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

/**
 * The specific menu item type for selecting a setting
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @param {String=} entry
 * @extends MenuItem
 * @class SettingsMenuItem
 */

var SettingsMenuItem = (function (_MenuItem) {
  _inherits(SettingsMenuItem, _MenuItem);

  function SettingsMenuItem(player, options, entry) {
    _classCallCheck(this, SettingsMenuItem);

    _get(Object.getPrototypeOf(SettingsMenuItem.prototype), 'constructor', this).call(this, player, options);

    var subMenuName = toTitleCase(entry);

    var SubMenuComponent = _videoJs2['default'].getComponent(subMenuName);

    if (!SubMenuComponent) {
      throw new Error('Component ' + subMenuName + ' does not exist');
    }

    this.subMenu = new SubMenuComponent(this.player(), options);

    var update = _videoJs2['default'].bind(this, this.update);
    // To update the sub menu value on click, setTimeout is needed because
    // updating the value is not instant
    var updateAfterTimeout = function updateAfterTimeout() {
      setTimeout(update, 0);
    };

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.subMenu.menu.children()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var item = _step.value;

        if (!(item instanceof component)) {
          continue;
        }
        item.on('click', updateAfterTimeout);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator['return']) {
          _iterator['return']();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.update();
  }

  /**
   * Create the component's DOM element
   *
   * @return {Element}
   * @method createEl
   */

  _createClass(SettingsMenuItem, [{
    key: 'createEl',
    value: function createEl() {
      // Hide this component by default
      var el = _videoJs2['default'].createEl('li', {
        className: 'vjs-menu-item'
      });

      this.settingsSubMenuTitleEl_ = _videoJs2['default'].createEl('div', {
        className: 'vjs-settings-sub-menu-title'
      });

      el.appendChild(this.settingsSubMenuTitleEl_);

      this.settingsSubMenuValueEl_ = _videoJs2['default'].createEl('div', {
        className: 'vjs-settings-sub-menu-value'
      });

      el.appendChild(this.settingsSubMenuValueEl_);

      this.settingsSubMenuEl_ = _videoJs2['default'].createEl('div', {
        className: 'vjs-settings-sub-menu vjs-hidden'
      });

      el.appendChild(this.settingsSubMenuEl_);

      return el;
    }

    /**
     * Handle click on menu item
     *
     * @method handleClick
     */
  }, {
    key: 'handleClick',
    value: function handleClick() {
      // Remove open class to ensure only the open submenu gets this class
      _videoJs2['default'].removeClass(this.el_, 'open');

      _get(Object.getPrototypeOf(SettingsMenuItem.prototype), 'handleClick', this).call(this);

      // Wether to add or remove vjs-hidden class on the settingsSubMenuEl element
      if (_videoJs2['default'].hasClass(this.settingsSubMenuEl_, 'vjs-hidden')) {
        _videoJs2['default'].removeClass(this.settingsSubMenuEl_, 'vjs-hidden');
      } else {
        _videoJs2['default'].addClass(this.settingsSubMenuEl_, 'vjs-hidden');
      }
    }

    /**
     * Update the sub menus
     *
     * @method update
     */
  }, {
    key: 'update',
    value: function update() {
      this.settingsSubMenuTitleEl_.innerHTML = this.subMenu.controlText_ + ':';
      this.settingsSubMenuEl_.appendChild(this.subMenu.menu.el_);

      // Playback rate menu button doesn't get a vjs-selected class
      // or sets options_['selected'] on the selected playback rate.
      // Thus we get the submenu value based on the labelEl of playbackRateMenuButton
      if (this.subMenu instanceof playbackRateMenuButton) {
        this.settingsSubMenuValueEl_.innerHTML = this.subMenu.labelEl_.innerHTML;
      } else {
        // Loop trough the submenu items to find the selected child
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = this.subMenu.menu.children_[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var subMenuItem = _step2.value;

            if (!(subMenuItem instanceof component)) {
              continue;
            }
            // Set submenu value based on what item is selected
            if (subMenuItem.options_.selected || subMenuItem.hasClass('vjs-selected')) {
              this.settingsSubMenuValueEl_.innerHTML = subMenuItem.options_.label;
            }
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      }
    }

    /**
     * Hide the sub menu
     */
  }, {
    key: 'hideSubMenu',
    value: function hideSubMenu() {
      if (_videoJs2['default'].hasClass(this.el_, 'open')) {
        _videoJs2['default'].addClass(this.settingsSubMenuEl_, 'vjs-hidden');
        _videoJs2['default'].removeClass(this.el_, 'open');
      }
    }
  }]);

  return SettingsMenuItem;
})(MenuItem);

SettingsMenuItem.prototype.contentElType = 'button';

_videoJs2['default'].registerComponent('SettingsMenuItem', SettingsMenuItem);
exports['default'] = SettingsMenuItem;
module.exports = exports['default'];