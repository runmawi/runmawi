
/**
 * @file settings-menu-button.js
 */
'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _videoJs = require('video.js');

var _videoJs2 = _interopRequireDefault(_videoJs);

var _settingsMenuItemJs = require('./settings-menu-item.js');

var _settingsMenuItemJs2 = _interopRequireDefault(_settingsMenuItemJs);

var MenuButton = _videoJs2['default'].getComponent('MenuButton');
var Menu = _videoJs2['default'].getComponent('Menu');
var Component = _videoJs2['default'].getComponent('Component');

/**
 * The component for controlling the settings menu
 *
 * @param {Player|Object} player
 * @param {Object=} options
 * @extends MenuButton
 * @class SettingsMenuButton
 */

var SettingsMenuButton = (function (_MenuButton) {
  _inherits(SettingsMenuButton, _MenuButton);

  function SettingsMenuButton(player, options) {
    _classCallCheck(this, SettingsMenuButton);

    _get(Object.getPrototypeOf(SettingsMenuButton.prototype), 'constructor', this).call(this, player, options);

    this.el_.setAttribute('aria-label', 'Settings Menu');

    this.on('mouseleave', _videoJs2['default'].bind(this, this.hideChildren));
  }

  /**
   * Allow sub components to stack CSS class names
   *
   * @return {String} The constructed class name
   * @method buildCSSClass
   */

  _createClass(SettingsMenuButton, [{
    key: 'buildCSSClass',
    value: function buildCSSClass() {
      // vjs-icon-cog can be removed when the settings menu is integrated in video.js
      return 'vjs-settings-menu vjs-icon-cog ' + _get(Object.getPrototypeOf(SettingsMenuButton.prototype), 'buildCSSClass', this).call(this);
    }

    /**
     * Create the settings menu
     *
     * @return {Menu} Menu object populated with items
     * @method createMenu
     */
  }, {
    key: 'createMenu',
    value: function createMenu() {
      var menu = new Menu(this.player());
      var entries = this.options_.entries;

      if (entries) {

        var openSubMenu = function openSubMenu() {

          if (_videoJs2['default'].hasClass(this.el_, 'open')) {
            _videoJs2['default'].removeClass(this.el_, 'open');
          } else {
            _videoJs2['default'].addClass(this.el_, 'open');
          }
        };

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var entry = _step.value;

            var settingsMenuItem = new _settingsMenuItemJs2['default'](this.player(), this.options_, entry);

            menu.addChild(settingsMenuItem);

            // Hide children to avoid sub menus stacking on top of each other
            // or having multiple menus open
            settingsMenuItem.on('click', _videoJs2['default'].bind(this, this.hideChildren));

            // Wether to add or remove selected class on the settings sub menu element
            settingsMenuItem.on('click', openSubMenu);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator['return']) {
              _iterator['return']();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }

      return menu;
    }

    /**
     * Hide all the sub menus
     */
  }, {
    key: 'hideChildren',
    value: function hideChildren() {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = this.menu.children()[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var menuChild = _step2.value;

          menuChild.hideSubMenu();
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
            _iterator2['return']();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }
  }]);

  return SettingsMenuButton;
})(MenuButton);

SettingsMenuButton.prototype.controlText_ = 'Settings Menu';

Component.registerComponent('SettingsMenuButton', SettingsMenuButton);
exports['default'] = SettingsMenuButton;
module.exports = exports['default'];