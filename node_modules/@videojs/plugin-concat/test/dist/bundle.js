/*! @name @videojs/plugin-concat @version 1.0.0 @license Apache-2.0 */
(function (QUnit, sinon, videojs) {
  'use strict';

  QUnit = QUnit && QUnit.hasOwnProperty('default') ? QUnit['default'] : QUnit;
  sinon = sinon && sinon.hasOwnProperty('default') ? sinon['default'] : sinon;
  videojs = videojs && videojs.hasOwnProperty('default') ? videojs['default'] : videojs;

  var cov_t0jvfqpyf = function () {
    var path = '/Users/gsinger/repos/clean/plugin-concat/src/choose-playlists.js',
        hash = '3b609368edc0b402457bcb53b2c0b3fd51ba1126',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
      path: '/Users/gsinger/repos/clean/plugin-concat/src/choose-playlists.js',
      statementMap: {
        '0': {
          start: {
            line: 4,
            column: 33
          },
          end: {
            line: 4,
            column: 40
          }
        },
        '1': {
          start: {
            line: 24,
            column: 36
          },
          end: {
            line: 60,
            column: 1
          }
        },
        '2': {
          start: {
            line: 25,
            column: 2
          },
          end: {
            line: 59,
            column: 5
          }
        },
        '3': {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        '4': {
          start: {
            line: 27,
            column: 6
          },
          end: {
            line: 27,
            column: 34
          }
        },
        '5': {
          start: {
            line: 30,
            column: 4
          },
          end: {
            line: 58,
            column: 13
          }
        },
        '6': {
          start: {
            line: 31,
            column: 6
          },
          end: {
            line: 33,
            column: 7
          }
        },
        '7': {
          start: {
            line: 32,
            column: 8
          },
          end: {
            line: 32,
            column: 24
          }
        },
        '8': {
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 47,
            column: 7
          }
        },
        '9': {
          start: {
            line: 38,
            column: 8
          },
          end: {
            line: 40,
            column: 9
          }
        },
        '10': {
          start: {
            line: 39,
            column: 10
          },
          end: {
            line: 39,
            column: 26
          }
        },
        '11': {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 45,
            column: 9
          }
        },
        '12': {
          start: {
            line: 44,
            column: 10
          },
          end: {
            line: 44,
            column: 26
          }
        },
        '13': {
          start: {
            line: 46,
            column: 8
          },
          end: {
            line: 46,
            column: 19
          }
        },
        '14': {
          start: {
            line: 51,
            column: 6
          },
          end: {
            line: 53,
            column: 7
          }
        },
        '15': {
          start: {
            line: 52,
            column: 8
          },
          end: {
            line: 52,
            column: 19
          }
        },
        '16': {
          start: {
            line: 56,
            column: 6
          },
          end: {
            line: 57,
            column: 80
          }
        },
        '17': {
          start: {
            line: 81,
            column: 36
          },
          end: {
            line: 125,
            column: 1
          }
        },
        '18': {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 84,
            column: 3
          }
        },
        '19': {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 80
          }
        },
        '20': {
          start: {
            line: 86,
            column: 31
          },
          end: {
            line: 86,
            column: 53
          }
        },
        '21': {
          start: {
            line: 87,
            column: 25
          },
          end: {
            line: 87,
            column: 27
          }
        },
        '22': {
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 116,
            column: 3
          }
        },
        '23': {
          start: {
            line: 90,
            column: 27
          },
          end: {
            line: 90,
            column: 45
          }
        },
        '24': {
          start: {
            line: 91,
            column: 26
          },
          end: {
            line: 91,
            column: 43
          }
        },
        '25': {
          start: {
            line: 93,
            column: 4
          },
          end: {
            line: 97,
            column: 5
          }
        },
        '26': {
          start: {
            line: 96,
            column: 6
          },
          end: {
            line: 96,
            column: 15
          }
        },
        '27': {
          start: {
            line: 100,
            column: 6
          },
          end: {
            line: 100,
            column: 70
          }
        },
        '28': {
          start: {
            line: 101,
            column: 31
          },
          end: {
            line: 101,
            column: 66
          }
        },
        '29': {
          start: {
            line: 103,
            column: 4
          },
          end: {
            line: 115,
            column: 5
          }
        },
        '30': {
          start: {
            line: 104,
            column: 28
          },
          end: {
            line: 104,
            column: 73
          }
        },
        '31': {
          start: {
            line: 106,
            column: 6
          },
          end: {
            line: 114,
            column: 7
          }
        },
        '32': {
          start: {
            line: 111,
            column: 8
          },
          end: {
            line: 112,
            column: 54
          }
        },
        '33': {
          start: {
            line: 113,
            column: 8
          },
          end: {
            line: 113,
            column: 14
          }
        },
        '34': {
          start: {
            line: 120,
            column: 2
          },
          end: {
            line: 122,
            column: 3
          }
        },
        '35': {
          start: {
            line: 121,
            column: 4
          },
          end: {
            line: 121,
            column: 85
          }
        },
        '36': {
          start: {
            line: 124,
            column: 2
          },
          end: {
            line: 124,
            column: 24
          }
        }
      },
      fnMap: {
        '0': {
          name: '(anonymous_0)',
          decl: {
            start: {
              line: 24,
              column: 36
            },
            end: {
              line: 24,
              column: 37
            }
          },
          loc: {
            start: {
              line: 24,
              column: 86
            },
            end: {
              line: 60,
              column: 1
            }
          },
          line: 24
        },
        '1': {
          name: '(anonymous_1)',
          decl: {
            start: {
              line: 25,
              column: 32
            },
            end: {
              line: 25,
              column: 33
            }
          },
          loc: {
            start: {
              line: 25,
              column: 55
            },
            end: {
              line: 59,
              column: 3
            }
          },
          line: 25
        },
        '2': {
          name: '(anonymous_2)',
          decl: {
            start: {
              line: 30,
              column: 36
            },
            end: {
              line: 30,
              column: 37
            }
          },
          loc: {
            start: {
              line: 30,
              column: 55
            },
            end: {
              line: 58,
              column: 5
            }
          },
          line: 30
        },
        '3': {
          name: '(anonymous_3)',
          decl: {
            start: {
              line: 81,
              column: 36
            },
            end: {
              line: 81,
              column: 37
            }
          },
          loc: {
            start: {
              line: 81,
              column: 73
            },
            end: {
              line: 125,
              column: 1
            }
          },
          line: 81
        }
      },
      branchMap: {
        '0': {
          loc: {
            start: {
              line: 26,
              column: 4
            },
            end: {
              line: 28,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 26,
              column: 4
            },
            end: {
              line: 28,
              column: 5
            }
          }, {
            start: {
              line: 26,
              column: 4
            },
            end: {
              line: 28,
              column: 5
            }
          }],
          line: 26
        },
        '1': {
          loc: {
            start: {
              line: 31,
              column: 6
            },
            end: {
              line: 33,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 31,
              column: 6
            },
            end: {
              line: 33,
              column: 7
            }
          }, {
            start: {
              line: 31,
              column: 6
            },
            end: {
              line: 33,
              column: 7
            }
          }],
          line: 31
        },
        '2': {
          loc: {
            start: {
              line: 35,
              column: 6
            },
            end: {
              line: 47,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 35,
              column: 6
            },
            end: {
              line: 47,
              column: 7
            }
          }, {
            start: {
              line: 35,
              column: 6
            },
            end: {
              line: 47,
              column: 7
            }
          }],
          line: 35
        },
        '3': {
          loc: {
            start: {
              line: 38,
              column: 8
            },
            end: {
              line: 40,
              column: 9
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 38,
              column: 8
            },
            end: {
              line: 40,
              column: 9
            }
          }, {
            start: {
              line: 38,
              column: 8
            },
            end: {
              line: 40,
              column: 9
            }
          }],
          line: 38
        },
        '4': {
          loc: {
            start: {
              line: 42,
              column: 8
            },
            end: {
              line: 45,
              column: 9
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 42,
              column: 8
            },
            end: {
              line: 45,
              column: 9
            }
          }, {
            start: {
              line: 42,
              column: 8
            },
            end: {
              line: 45,
              column: 9
            }
          }],
          line: 42
        },
        '5': {
          loc: {
            start: {
              line: 51,
              column: 6
            },
            end: {
              line: 53,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 51,
              column: 6
            },
            end: {
              line: 53,
              column: 7
            }
          }, {
            start: {
              line: 51,
              column: 6
            },
            end: {
              line: 53,
              column: 7
            }
          }],
          line: 51
        },
        '6': {
          loc: {
            start: {
              line: 56,
              column: 13
            },
            end: {
              line: 57,
              column: 79
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 57,
              column: 65
            },
            end: {
              line: 57,
              column: 73
            }
          }, {
            start: {
              line: 57,
              column: 76
            },
            end: {
              line: 57,
              column: 79
            }
          }],
          line: 56
        },
        '7': {
          loc: {
            start: {
              line: 82,
              column: 2
            },
            end: {
              line: 84,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 82,
              column: 2
            },
            end: {
              line: 84,
              column: 3
            }
          }, {
            start: {
              line: 82,
              column: 2
            },
            end: {
              line: 84,
              column: 3
            }
          }],
          line: 82
        },
        '8': {
          loc: {
            start: {
              line: 93,
              column: 4
            },
            end: {
              line: 97,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 93,
              column: 4
            },
            end: {
              line: 97,
              column: 5
            }
          }, {
            start: {
              line: 93,
              column: 4
            },
            end: {
              line: 97,
              column: 5
            }
          }],
          line: 93
        },
        '9': {
          loc: {
            start: {
              line: 93,
              column: 8
            },
            end: {
              line: 94,
              column: 73
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 93,
              column: 8
            },
            end: {
              line: 93,
              column: 39
            }
          }, {
            start: {
              line: 94,
              column: 8
            },
            end: {
              line: 94,
              column: 73
            }
          }],
          line: 93
        },
        '10': {
          loc: {
            start: {
              line: 106,
              column: 6
            },
            end: {
              line: 114,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 106,
              column: 6
            },
            end: {
              line: 114,
              column: 7
            }
          }, {
            start: {
              line: 106,
              column: 6
            },
            end: {
              line: 114,
              column: 7
            }
          }],
          line: 106
        },
        '11': {
          loc: {
            start: {
              line: 106,
              column: 10
            },
            end: {
              line: 110,
              column: 64
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 106,
              column: 10
            },
            end: {
              line: 106,
              column: 31
            }
          }, {
            start: {
              line: 110,
              column: 11
            },
            end: {
              line: 110,
              column: 36
            }
          }, {
            start: {
              line: 110,
              column: 40
            },
            end: {
              line: 110,
              column: 63
            }
          }],
          line: 106
        },
        '12': {
          loc: {
            start: {
              line: 111,
              column: 28
            },
            end: {
              line: 112,
              column: 52
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 112,
              column: 10
            },
            end: {
              line: 112,
              column: 36
            }
          }, {
            start: {
              line: 112,
              column: 39
            },
            end: {
              line: 112,
              column: 52
            }
          }],
          line: 111
        },
        '13': {
          loc: {
            start: {
              line: 120,
              column: 2
            },
            end: {
              line: 122,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 120,
              column: 2
            },
            end: {
              line: 122,
              column: 3
            }
          }, {
            start: {
              line: 120,
              column: 2
            },
            end: {
              line: 122,
              column: 3
            }
          }],
          line: 120
        },
        '14': {
          loc: {
            start: {
              line: 120,
              column: 6
            },
            end: {
              line: 120,
              column: 81
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 120,
              column: 6
            },
            end: {
              line: 120,
              column: 31
            }
          }, {
            start: {
              line: 120,
              column: 35
            },
            end: {
              line: 120,
              column: 81
            }
          }],
          line: 120
        }
      },
      s: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0,
        '7': 0,
        '8': 0,
        '9': 0,
        '10': 0,
        '11': 0,
        '12': 0,
        '13': 0,
        '14': 0,
        '15': 0,
        '16': 0,
        '17': 0,
        '18': 0,
        '19': 0,
        '20': 0,
        '21': 0,
        '22': 0,
        '23': 0,
        '24': 0,
        '25': 0,
        '26': 0,
        '27': 0,
        '28': 0,
        '29': 0,
        '30': 0,
        '31': 0,
        '32': 0,
        '33': 0,
        '34': 0,
        '35': 0,
        '36': 0
      },
      f: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0
      },
      b: {
        '0': [0, 0],
        '1': [0, 0],
        '2': [0, 0],
        '3': [0, 0],
        '4': [0, 0],
        '5': [0, 0],
        '6': [0, 0],
        '7': [0, 0],
        '8': [0, 0],
        '9': [0, 0],
        '10': [0, 0],
        '11': [0, 0, 0],
        '12': [0, 0],
        '13': [0, 0],
        '14': [0, 0]
      },
      _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
      return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
  }();

  var DEFAULT_BANDWIDTH = (cov_t0jvfqpyf.s[0]++, 4194304);
  cov_t0jvfqpyf.s[1]++;
  var chooseVideoPlaylists = function chooseVideoPlaylists(manifestsPlaylists, targetVerticalResolution) {
    cov_t0jvfqpyf.f[0]++;
    cov_t0jvfqpyf.s[2]++;
    return manifestsPlaylists.map(function (manifestPlaylists) {
      cov_t0jvfqpyf.f[1]++;
      cov_t0jvfqpyf.s[3]++;

      if (manifestPlaylists.length === 1) {
        cov_t0jvfqpyf.b[0][0]++;
        cov_t0jvfqpyf.s[4]++;
        return manifestPlaylists[0];
      } else {
        cov_t0jvfqpyf.b[0][1]++;
      }

      cov_t0jvfqpyf.s[5]++;
      return manifestPlaylists.reduce(function (acc, playlist) {
        cov_t0jvfqpyf.f[2]++;
        cov_t0jvfqpyf.s[6]++;

        if (!acc) {
          cov_t0jvfqpyf.b[1][0]++;
          cov_t0jvfqpyf.s[7]++;
          return playlist;
        } else {
          cov_t0jvfqpyf.b[1][1]++;
        }

        cov_t0jvfqpyf.s[8]++;

        if (playlist.attributes.RESOLUTION) {
          cov_t0jvfqpyf.b[2][0]++;
          cov_t0jvfqpyf.s[9]++;

          if (!acc.attributes.RESOLUTION) {
            cov_t0jvfqpyf.b[3][0]++;
            cov_t0jvfqpyf.s[10]++;
            return playlist;
          } else {
            cov_t0jvfqpyf.b[3][1]++;
          }

          cov_t0jvfqpyf.s[11]++;

          if (Math.abs(playlist.attributes.RESOLUTION - targetVerticalResolution) < Math.abs(acc.attributes.RESOLUTION - targetVerticalResolution)) {
            cov_t0jvfqpyf.b[4][0]++;
            cov_t0jvfqpyf.s[12]++;
            return playlist;
          } else {
            cov_t0jvfqpyf.b[4][1]++;
          }

          cov_t0jvfqpyf.s[13]++;
          return acc;
        } else {
          cov_t0jvfqpyf.b[2][1]++;
        }

        cov_t0jvfqpyf.s[14]++;

        if (acc.attributes.RESOLUTION) {
          cov_t0jvfqpyf.b[5][0]++;
          cov_t0jvfqpyf.s[15]++;
          return acc;
        } else {
          cov_t0jvfqpyf.b[5][1]++;
        }

        cov_t0jvfqpyf.s[16]++;
        return Math.abs(playlist.attributes.BANDWIDTH - DEFAULT_BANDWIDTH) < Math.abs(acc.attributes.BANDWIDTH - DEFAULT_BANDWIDTH) ? (cov_t0jvfqpyf.b[6][0]++, playlist) : (cov_t0jvfqpyf.b[6][1]++, acc);
      }, null);
    });
  };
  cov_t0jvfqpyf.s[17]++;
  var chooseAudioPlaylists = function chooseAudioPlaylists(manifestObjects, videoPlaylists) {
    cov_t0jvfqpyf.f[3]++;
    cov_t0jvfqpyf.s[18]++;

    if (manifestObjects.length !== videoPlaylists.length) {
      cov_t0jvfqpyf.b[7][0]++;
      cov_t0jvfqpyf.s[19]++;
      throw new Error('Invalid number of video playlists for provided manifests');
    } else {
      cov_t0jvfqpyf.b[7][1]++;
    }

    var numExpectedPlaylists = (cov_t0jvfqpyf.s[20]++, manifestObjects.length);
    var audioPlaylists = (cov_t0jvfqpyf.s[21]++, []);
    cov_t0jvfqpyf.s[22]++;

    for (var i = 0; i < numExpectedPlaylists; i++) {
      var manifestObject = (cov_t0jvfqpyf.s[23]++, manifestObjects[i]);
      var videoPlaylist = (cov_t0jvfqpyf.s[24]++, videoPlaylists[i]);
      cov_t0jvfqpyf.s[25]++;

      if ((cov_t0jvfqpyf.b[9][0]++, !videoPlaylist.attributes.AUDIO) || (cov_t0jvfqpyf.b[9][1]++, !manifestObject.mediaGroups.AUDIO[videoPlaylist.attributes.AUDIO])) {
        cov_t0jvfqpyf.b[8][0]++;
        cov_t0jvfqpyf.s[26]++;
        continue;
      } else {
        cov_t0jvfqpyf.b[8][1]++;
      }

      var manifestAudioPlaylists = (cov_t0jvfqpyf.s[27]++, manifestObject.mediaGroups.AUDIO[videoPlaylist.attributes.AUDIO]);
      var audioPlaylistNames = (cov_t0jvfqpyf.s[28]++, Object.keys(manifestAudioPlaylists));
      cov_t0jvfqpyf.s[29]++;

      for (var j = 0; j < audioPlaylistNames.length; j++) {
        var audioPlaylist = (cov_t0jvfqpyf.s[30]++, manifestAudioPlaylists[audioPlaylistNames[j]]);
        cov_t0jvfqpyf.s[31]++;

        if ((cov_t0jvfqpyf.b[11][0]++, audioPlaylist.default) && ((cov_t0jvfqpyf.b[11][1]++, audioPlaylist.resolvedUri) || (cov_t0jvfqpyf.b[11][2]++, audioPlaylist.playlists))) {
          cov_t0jvfqpyf.b[10][0]++;
          cov_t0jvfqpyf.s[32]++;
          audioPlaylists.push(audioPlaylist.playlists ? (cov_t0jvfqpyf.b[12][0]++, audioPlaylist.playlists[0]) : (cov_t0jvfqpyf.b[12][1]++, audioPlaylist));
          cov_t0jvfqpyf.s[33]++;
          break;
        } else {
          cov_t0jvfqpyf.b[10][1]++;
        }
      }
    }

    cov_t0jvfqpyf.s[34]++;

    if ((cov_t0jvfqpyf.b[14][0]++, audioPlaylists.length > 0) && (cov_t0jvfqpyf.b[14][1]++, audioPlaylists.length !== numExpectedPlaylists)) {
      cov_t0jvfqpyf.b[13][0]++;
      cov_t0jvfqpyf.s[35]++;
      throw new Error('Did not find matching audio playlists for all video playlists');
    } else {
      cov_t0jvfqpyf.b[13][1]++;
    }

    cov_t0jvfqpyf.s[36]++;
    return audioPlaylists;
  };

  QUnit.module('chooseVideoPlaylists');
  QUnit.test('chooses video playlists by target vertical resolution', function (assert) {
    var playlist1 = {
      attributes: {
        RESOLUTION: 1
      }
    };
    var playlist2 = {
      attributes: {
        RESOLUTION: 719
      }
    };
    var playlist3 = {
      attributes: {
        RESOLUTION: 722
      }
    };
    assert.deepEqual(chooseVideoPlaylists([[playlist1, playlist2, playlist3], [playlist1, playlist2, playlist3], [playlist1, playlist2, playlist3]], 720), [playlist2, playlist2, playlist2], 'chose closest video playlists');
  });
  QUnit.test('when no resolution, chooses video playlists by bandwidth', function (assert) {
    var playlist1 = {
      attributes: {
        BANDWIDTH: DEFAULT_BANDWIDTH - 3
      }
    };
    var playlist2 = {
      attributes: {
        BANDWIDTH: DEFAULT_BANDWIDTH - 2
      }
    };
    var playlist3 = {
      attributes: {
        BANDWIDTH: DEFAULT_BANDWIDTH + 1
      }
    };
    assert.deepEqual(chooseVideoPlaylists([[playlist1, playlist2, playlist3], [playlist1, playlist2, playlist3], [playlist1, playlist2, playlist3]], 720), [playlist3, playlist3, playlist3], 'chose closest video playlists');
  });
  QUnit.test('when only partial resolution info, selects video playlist with info', function (assert) {
    var playlist1 = {
      attributes: {
        BANDWIDTH: DEFAULT_BANDWIDTH - 3
      }
    };
    var playlist2 = {
      attributes: {
        RESOLUTION: 1,
        BANDWIDTH: DEFAULT_BANDWIDTH - 2
      }
    };
    var playlist3 = {
      attributes: {
        BANDWIDTH: DEFAULT_BANDWIDTH + 1
      }
    };
    assert.deepEqual(chooseVideoPlaylists([[playlist3, playlist2, playlist1], [playlist2, playlist3, playlist1], [playlist1, playlist3, playlist2]], 720), [playlist2, playlist2, playlist2], 'chose video playlists with resolution info');
  });
  QUnit.module('chooseAudioPlaylists');
  QUnit.test('throws error if mismatching number of playlists', function (assert) {
    var manifestObject1 = {
      mediaGroups: {
        AUDIO: {
          audio1: {
            en: {
              default: true,
              resolvedUri: 'resolved-uri-1'
            },
            es: {
              default: false,
              resolvedUri: 'resolved-uri'
            }
          }
        }
      }
    };
    var videoPlaylist1 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    var videoPlaylist2 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    assert.throws(function () {
      return chooseAudioPlaylists([manifestObject1], [videoPlaylist1, videoPlaylist2]);
    }, /Invalid number of video playlists for provided manifests/, 'threw error for mismatched number of playlists');
  });
  QUnit.test('chooses default audio playlists for video playlists', function (assert) {
    var audioPlaylist2Resolved = {
      test: 'case'
    };
    var audioPlaylist1 = {
      default: true,
      resolvedUri: 'resolved-uri-1'
    };
    var audioPlaylist2 = {
      default: true,
      playlists: [audioPlaylist2Resolved]
    };
    var audioPlaylist3 = {
      default: true,
      resolvedUri: 'resolved-uri-3'
    };
    var manifestObject1 = {
      mediaGroups: {
        AUDIO: {
          audio1: {
            en: audioPlaylist1,
            es: {
              default: false,
              resolvedUri: 'resolved-uri'
            }
          }
        }
      }
    };
    var manifestObject2 = {
      mediaGroups: {
        AUDIO: {
          audio1: {
            en: {
              default: false,
              playlists: []
            },
            es: audioPlaylist2
          }
        }
      }
    };
    var manifestObject3 = {
      mediaGroups: {
        AUDIO: {
          audio1: {
            en: {
              default: false,
              resolvedUri: 'resolved-uri'
            },
            es: audioPlaylist3
          }
        }
      }
    };
    var videoPlaylist1 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    var videoPlaylist2 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    var videoPlaylist3 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    assert.deepEqual(chooseAudioPlaylists([manifestObject1, manifestObject2, manifestObject3], [videoPlaylist1, videoPlaylist2, videoPlaylist3]), [audioPlaylist1, audioPlaylist2Resolved, audioPlaylist3], 'chose default audio playlists');
  });
  QUnit.test('throws error when missing audio playlist', function (assert) {
    var audioPlaylist1 = {
      default: true,
      resolvedUri: 'resolved-uri-1'
    }; // missing both resolvedUri and playlists, but only for this audio playlist

    var audioPlaylist2 = {
      default: true
    };
    var audioPlaylist3 = {
      default: true,
      resolvedUri: 'resolved-uri-3'
    };
    var manifestObject1 = {
      mediaGroups: {
        AUDIO: {
          audio1: {
            en: audioPlaylist1,
            es: {
              default: false,
              resolvedUri: 'resolved-uri'
            }
          }
        }
      }
    };
    var manifestObject2 = {
      mediaGroups: {
        AUDIO: {
          audio1: {
            en: {
              default: false,
              playlists: []
            },
            es: audioPlaylist2
          }
        }
      }
    };
    var manifestObject3 = {
      mediaGroups: {
        AUDIO: {
          audio1: {
            en: {
              default: false,
              resolvedUri: 'resolved-uri'
            },
            es: audioPlaylist3
          }
        }
      }
    };
    var videoPlaylist1 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    var videoPlaylist2 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    var videoPlaylist3 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    assert.throws(function () {
      chooseAudioPlaylists([manifestObject1, manifestObject2, manifestObject3], [videoPlaylist1, videoPlaylist2, videoPlaylist3]);
    }, new Error('Did not find matching audio playlists for all video playlists'), 'throws error when missing resolvedUri and playlist in matching audio playlist');
  });
  QUnit.test('throws error when missing default audio playlist', function (assert) {
    var audioPlaylist2Resolved = {
      test: 'case'
    };
    var audioPlaylist1 = {
      default: true,
      resolvedUri: 'resolved-uri-1'
    }; // not default

    var audioPlaylist2 = {
      default: false,
      playlists: [audioPlaylist2Resolved]
    };
    var audioPlaylist3 = {
      default: true,
      resolvedUri: 'resolved-uri-3'
    };
    var manifestObject1 = {
      mediaGroups: {
        AUDIO: {
          audio1: {
            en: audioPlaylist1,
            es: {
              default: false,
              resolvedUri: 'resolved-uri'
            }
          }
        }
      }
    };
    var manifestObject2 = {
      mediaGroups: {
        AUDIO: {
          audio1: {
            en: {
              default: false,
              playlists: []
            },
            es: audioPlaylist2
          }
        }
      }
    };
    var manifestObject3 = {
      mediaGroups: {
        AUDIO: {
          audio1: {
            en: {
              default: false,
              resolvedUri: 'resolved-uri'
            },
            es: audioPlaylist3
          }
        }
      }
    };
    var videoPlaylist1 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    var videoPlaylist2 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    var videoPlaylist3 = {
      attributes: {
        AUDIO: 'audio1'
      }
    };
    assert.throws(function () {
      chooseAudioPlaylists([manifestObject1, manifestObject2, manifestObject3], [videoPlaylist1, videoPlaylist2, videoPlaylist3]);
    }, new Error('Did not find matching audio playlists for all video playlists'), 'throws error when missing a default audio playlist');
  });

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x.default : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var codecs = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, '__esModule', { value: true });

  /**
   * Replace the old apple-style `avc1.<dd>.<dd>` codec string with the standard
   * `avc1.<hhhhhh>`
   *
   * @param {string} codec
   *        Codec string to translate
   * @return {string}
   *         The translated codec string
   */
  var translateLegacyCodec = function translateLegacyCodec(codec) {
    if (!codec) {
      return codec;
    }

    return codec.replace(/avc1\.(\d+)\.(\d+)/i, function (orig, profile, avcLevel) {
      var profileHex = ('00' + Number(profile).toString(16)).slice(-2);
      var avcLevelHex = ('00' + Number(avcLevel).toString(16)).slice(-2);
      return 'avc1.' + profileHex + '00' + avcLevelHex;
    });
  };
  /**
   * Replace the old apple-style `avc1.<dd>.<dd>` codec strings with the standard
   * `avc1.<hhhhhh>`
   *
   * @param {string[]} codecs
   *        An array of codec strings to translate
   * @return {string[]}
   *         The translated array of codec strings
   */

  var translateLegacyCodecs = function translateLegacyCodecs(codecs) {
    return codecs.map(translateLegacyCodec);
  };
  /**
   * Replace codecs in the codec string with the old apple-style `avc1.<dd>.<dd>` to the
   * standard `avc1.<hhhhhh>`.
   *
   * @param {string} codecString
   *        The codec string
   * @return {string}
   *         The codec string with old apple-style codecs replaced
   *
   * @private
   */

  var mapLegacyAvcCodecs = function mapLegacyAvcCodecs(codecString) {
    return codecString.replace(/avc1\.(\d+)\.(\d+)/i, function (match) {
      return translateLegacyCodecs([match])[0];
    });
  };
  /**
   * @typedef {Object} ParsedCodecInfo
   * @property {number} codecCount
   *           Number of codecs parsed
   * @property {string} [videoCodec]
   *           Parsed video codec (if found)
   * @property {string} [videoObjectTypeIndicator]
   *           Video object type indicator (if found)
   * @property {string|null} audioProfile
   *           Audio profile
   */

  /**
   * Parses a codec string to retrieve the number of codecs specified, the video codec and
   * object type indicator, and the audio profile.
   *
   * @param {string} [codecs]
   *        The codec string to parse
   * @return {ParsedCodecInfo}
   *         Parsed codec info
   */

  var parseCodecs = function parseCodecs(codecs) {
    if (codecs === void 0) {
      codecs = '';
    }

    var result = {
      codecCount: 0
    };
    result.codecCount = codecs.split(',').length;
    result.codecCount = result.codecCount || 2; // parse the video codec

    var parsed = /(^|\s|,)+(avc[13])([^ ,]*)/i.exec(codecs);

    if (parsed) {
      result.videoCodec = parsed[2];
      result.videoObjectTypeIndicator = parsed[3];
    } // parse the last field of the audio codec


    result.audioProfile = /(^|\s|,)+mp4a.[0-9A-Fa-f]+\.([0-9A-Fa-f]+)/i.exec(codecs);
    result.audioProfile = result.audioProfile && result.audioProfile[2];
    return result;
  };
  /**
   * Returns a ParsedCodecInfo object for the default alternate audio playlist if there is
   * a default alternate audio playlist for the provided audio group.
   *
   * @param {Object} master
   *        The master playlist
   * @param {string} audioGroupId
   *        ID of the audio group for which to find the default codec info
   * @return {ParsedCodecInfo}
   *         Parsed codec info
   */

  var audioProfileFromDefault = function audioProfileFromDefault(master, audioGroupId) {
    if (!master.mediaGroups.AUDIO || !audioGroupId) {
      return null;
    }

    var audioGroup = master.mediaGroups.AUDIO[audioGroupId];

    if (!audioGroup) {
      return null;
    }

    for (var name in audioGroup) {
      var audioType = audioGroup[name];

      if (audioType.default && audioType.playlists) {
        // codec should be the same for all playlists within the audio type
        return parseCodecs(audioType.playlists[0].attributes.CODECS).audioProfile;
      }
    }

    return null;
  };

  exports.audioProfileFromDefault = audioProfileFromDefault;
  exports.mapLegacyAvcCodecs = mapLegacyAvcCodecs;
  exports.parseCodecs = parseCodecs;
  exports.translateLegacyCodec = translateLegacyCodec;
  exports.translateLegacyCodecs = translateLegacyCodecs;
  });

  unwrapExports(codecs);
  var codecs_1 = codecs.audioProfileFromDefault;
  var codecs_2 = codecs.mapLegacyAvcCodecs;
  var codecs_3 = codecs.parseCodecs;
  var codecs_4 = codecs.translateLegacyCodec;
  var codecs_5 = codecs.translateLegacyCodecs;

  var cov_oetx6zw2u = function () {
    var path = '/Users/gsinger/repos/clean/plugin-concat/src/codecs.js',
        hash = '5dd6f61ce7e9505fdc526a61a7dc90aac1a94f94',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
      path: '/Users/gsinger/repos/clean/plugin-concat/src/codecs.js',
      statementMap: {
        '0': {
          start: {
            line: 16,
            column: 34
          },
          end: {
            line: 45,
            column: 1
          }
        },
        '1': {
          start: {
            line: 18,
            column: 20
          },
          end: {
            line: 18,
            column: 72
          }
        },
        '2': {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 44,
            column: 9
          }
        },
        '3': {
          start: {
            line: 26,
            column: 4
          },
          end: {
            line: 28,
            column: 5
          }
        },
        '4': {
          start: {
            line: 27,
            column: 6
          },
          end: {
            line: 27,
            column: 17
          }
        },
        '5': {
          start: {
            line: 30,
            column: 19
          },
          end: {
            line: 30,
            column: 58
          }
        },
        '6': {
          start: {
            line: 32,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        '7': {
          start: {
            line: 33,
            column: 27
          },
          end: {
            line: 33,
            column: 87
          }
        },
        '8': {
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 38,
            column: 7
          }
        },
        '9': {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 36,
            column: 43
          }
        },
        '10': {
          start: {
            line: 37,
            column: 8
          },
          end: {
            line: 37,
            column: 28
          }
        },
        '11': {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 39
          }
        },
        '12': {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 43,
            column: 15
          }
        },
        '13': {
          start: {
            line: 73,
            column: 37
          },
          end: {
            line: 108,
            column: 1
          }
        },
        '14': {
          start: {
            line: 77,
            column: 29
          },
          end: {
            line: 77,
            column: 31
          }
        },
        '15': {
          start: {
            line: 79,
            column: 2
          },
          end: {
            line: 105,
            column: 3
          }
        },
        '16': {
          start: {
            line: 80,
            column: 26
          },
          end: {
            line: 80,
            column: 43
          }
        },
        '17': {
          start: {
            line: 81,
            column: 27
          },
          end: {
            line: 81,
            column: 45
          }
        },
        '18': {
          start: {
            line: 82,
            column: 32
          },
          end: {
            line: 82,
            column: 66
          }
        },
        '19': {
          start: {
            line: 83,
            column: 19
          },
          end: {
            line: 83,
            column: 65
          }
        },
        '20': {
          start: {
            line: 87,
            column: 4
          },
          end: {
            line: 90,
            column: 5
          }
        },
        '21': {
          start: {
            line: 88,
            column: 6
          },
          end: {
            line: 88,
            column: 36
          }
        },
        '22': {
          start: {
            line: 89,
            column: 6
          },
          end: {
            line: 89,
            column: 15
          }
        },
        '23': {
          start: {
            line: 92,
            column: 18
          },
          end: {
            line: 92,
            column: 20
          }
        },
        '24': {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 98,
            column: 5
          }
        },
        '25': {
          start: {
            line: 96,
            column: 6
          },
          end: {
            line: 97,
            column: 85
          }
        },
        '26': {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 102,
            column: 5
          }
        },
        '27': {
          start: {
            line: 101,
            column: 6
          },
          end: {
            line: 101,
            column: 73
          }
        },
        '28': {
          start: {
            line: 104,
            column: 4
          },
          end: {
            line: 104,
            column: 35
          }
        },
        '29': {
          start: {
            line: 107,
            column: 2
          },
          end: {
            line: 107,
            column: 28
          }
        }
      },
      fnMap: {
        '0': {
          name: '(anonymous_0)',
          decl: {
            start: {
              line: 16,
              column: 34
            },
            end: {
              line: 16,
              column: 35
            }
          },
          loc: {
            start: {
              line: 16,
              column: 48
            },
            end: {
              line: 45,
              column: 1
            }
          },
          line: 16
        },
        '1': {
          name: '(anonymous_1)',
          decl: {
            start: {
              line: 20,
              column: 26
            },
            end: {
              line: 20,
              column: 27
            }
          },
          loc: {
            start: {
              line: 20,
              column: 45
            },
            end: {
              line: 44,
              column: 3
            }
          },
          line: 20
        },
        '2': {
          name: '(anonymous_2)',
          decl: {
            start: {
              line: 73,
              column: 37
            },
            end: {
              line: 73,
              column: 38
            }
          },
          loc: {
            start: {
              line: 76,
              column: 6
            },
            end: {
              line: 108,
              column: 1
            }
          },
          line: 76
        }
      },
      branchMap: {
        '0': {
          loc: {
            start: {
              line: 18,
              column: 20
            },
            end: {
              line: 18,
              column: 72
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 18,
              column: 41
            },
            end: {
              line: 18,
              column: 59
            }
          }, {
            start: {
              line: 18,
              column: 62
            },
            end: {
              line: 18,
              column: 72
            }
          }],
          line: 18
        },
        '1': {
          loc: {
            start: {
              line: 26,
              column: 4
            },
            end: {
              line: 28,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 26,
              column: 4
            },
            end: {
              line: 28,
              column: 5
            }
          }, {
            start: {
              line: 26,
              column: 4
            },
            end: {
              line: 28,
              column: 5
            }
          }],
          line: 26
        },
        '2': {
          loc: {
            start: {
              line: 26,
              column: 8
            },
            end: {
              line: 26,
              column: 59
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 26,
              column: 8
            },
            end: {
              line: 26,
              column: 28
            }
          }, {
            start: {
              line: 26,
              column: 32
            },
            end: {
              line: 26,
              column: 59
            }
          }],
          line: 26
        },
        '3': {
          loc: {
            start: {
              line: 32,
              column: 4
            },
            end: {
              line: 39,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 32,
              column: 4
            },
            end: {
              line: 39,
              column: 5
            }
          }, {
            start: {
              line: 32,
              column: 4
            },
            end: {
              line: 39,
              column: 5
            }
          }],
          line: 32
        },
        '4': {
          loc: {
            start: {
              line: 32,
              column: 8
            },
            end: {
              line: 32,
              column: 60
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 32,
              column: 8
            },
            end: {
              line: 32,
              column: 31
            }
          }, {
            start: {
              line: 32,
              column: 35
            },
            end: {
              line: 32,
              column: 60
            }
          }],
          line: 32
        },
        '5': {
          loc: {
            start: {
              line: 35,
              column: 6
            },
            end: {
              line: 38,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 35,
              column: 6
            },
            end: {
              line: 38,
              column: 7
            }
          }, {
            start: {
              line: 35,
              column: 6
            },
            end: {
              line: 38,
              column: 7
            }
          }],
          line: 35
        },
        '6': {
          loc: {
            start: {
              line: 87,
              column: 4
            },
            end: {
              line: 90,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 87,
              column: 4
            },
            end: {
              line: 90,
              column: 5
            }
          }, {
            start: {
              line: 87,
              column: 4
            },
            end: {
              line: 90,
              column: 5
            }
          }],
          line: 87
        },
        '7': {
          loc: {
            start: {
              line: 94,
              column: 4
            },
            end: {
              line: 98,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 94,
              column: 4
            },
            end: {
              line: 98,
              column: 5
            }
          }, {
            start: {
              line: 94,
              column: 4
            },
            end: {
              line: 98,
              column: 5
            }
          }],
          line: 94
        },
        '8': {
          loc: {
            start: {
              line: 100,
              column: 4
            },
            end: {
              line: 102,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 100,
              column: 4
            },
            end: {
              line: 102,
              column: 5
            }
          }, {
            start: {
              line: 100,
              column: 4
            },
            end: {
              line: 102,
              column: 5
            }
          }],
          line: 100
        }
      },
      s: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0,
        '7': 0,
        '8': 0,
        '9': 0,
        '10': 0,
        '11': 0,
        '12': 0,
        '13': 0,
        '14': 0,
        '15': 0,
        '16': 0,
        '17': 0,
        '18': 0,
        '19': 0,
        '20': 0,
        '21': 0,
        '22': 0,
        '23': 0,
        '24': 0,
        '25': 0,
        '26': 0,
        '27': 0,
        '28': 0,
        '29': 0
      },
      f: {
        '0': 0,
        '1': 0,
        '2': 0
      },
      b: {
        '0': [0, 0],
        '1': [0, 0],
        '2': [0, 0],
        '3': [0, 0],
        '4': [0, 0],
        '5': [0, 0],
        '6': [0, 0],
        '7': [0, 0],
        '8': [0, 0]
      },
      _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
      return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
  }();
  cov_oetx6zw2u.s[0]++;
  var codecsForPlaylists = function codecsForPlaylists(manifest) {
    cov_oetx6zw2u.f[0]++;
    var playlists = (cov_oetx6zw2u.s[1]++, manifest.playlists ? (cov_oetx6zw2u.b[0][0]++, manifest.playlists) : (cov_oetx6zw2u.b[0][1]++, [manifest]));
    cov_oetx6zw2u.s[2]++;
    return playlists.reduce(function (acc, playlist) {
      cov_oetx6zw2u.f[1]++;
      cov_oetx6zw2u.s[3]++;

      if ((cov_oetx6zw2u.b[2][0]++, !playlist.attributes) || (cov_oetx6zw2u.b[2][1]++, !playlist.attributes.CODECS)) {
        cov_oetx6zw2u.b[1][0]++;
        cov_oetx6zw2u.s[4]++;
        return acc;
      } else {
        cov_oetx6zw2u.b[1][1]++;
      }

      var codecs = (cov_oetx6zw2u.s[5]++, codecs_3(playlist.attributes.CODECS));
      cov_oetx6zw2u.s[6]++;

      if ((cov_oetx6zw2u.b[4][0]++, codecs.codecCount !== 2) && (cov_oetx6zw2u.b[4][1]++, playlist.attributes.AUDIO)) {
        cov_oetx6zw2u.b[3][0]++;
        var audioProfile = (cov_oetx6zw2u.s[7]++, codecs_1(manifest, playlist.attributes.AUDIO));
        cov_oetx6zw2u.s[8]++;

        if (audioProfile) {
          cov_oetx6zw2u.b[5][0]++;
          cov_oetx6zw2u.s[9]++;
          codecs.audioProfile = audioProfile;
          cov_oetx6zw2u.s[10]++;
          codecs.codecCount++;
        } else {
          cov_oetx6zw2u.b[5][1]++;
        }
      } else {
        cov_oetx6zw2u.b[3][1]++;
      }

      cov_oetx6zw2u.s[11]++;
      acc[playlist.resolvedUri] = codecs;
      cov_oetx6zw2u.s[12]++;
      return acc;
    }, {});
  };
  cov_oetx6zw2u.s[13]++;
  var getAudioAndVideoTypes = function getAudioAndVideoTypes(_ref) {
    var videoPlaylists = _ref.videoPlaylists,
        manifestObjects = _ref.manifestObjects;
    cov_oetx6zw2u.f[2]++;
    var audioAndVideoTypes = (cov_oetx6zw2u.s[14]++, []);
    cov_oetx6zw2u.s[15]++;

    for (var i = 0; i < videoPlaylists.length; i++) {
      var videoPlaylist = (cov_oetx6zw2u.s[16]++, videoPlaylists[i]);
      var manifestObject = (cov_oetx6zw2u.s[17]++, manifestObjects[i]);
      var playlistToCodecsMap = (cov_oetx6zw2u.s[18]++, codecsForPlaylists(manifestObject));
      var codecs = (cov_oetx6zw2u.s[19]++, playlistToCodecsMap[videoPlaylist.resolvedUri]);
      cov_oetx6zw2u.s[20]++;

      if (!codecs) {
        cov_oetx6zw2u.b[6][0]++;
        cov_oetx6zw2u.s[21]++;
        audioAndVideoTypes.push(null);
        cov_oetx6zw2u.s[22]++;
        continue;
      } else {
        cov_oetx6zw2u.b[6][1]++;
      }

      var types = (cov_oetx6zw2u.s[23]++, {});
      cov_oetx6zw2u.s[24]++;

      if (codecs.videoCodec) {
        cov_oetx6zw2u.b[7][0]++;
        cov_oetx6zw2u.s[25]++;
        types.video = "video/mp4; codecs=\"" + codecs.videoCodec + codecs.videoObjectTypeIndicator + "\"";
      } else {
        cov_oetx6zw2u.b[7][1]++;
      }

      cov_oetx6zw2u.s[26]++;

      if (codecs.audioProfile) {
        cov_oetx6zw2u.b[8][0]++;
        cov_oetx6zw2u.s[27]++;
        types.audio = "audio/mp4; codecs=\"mp4a.40." + codecs.audioProfile + "\"";
      } else {
        cov_oetx6zw2u.b[8][1]++;
      }

      cov_oetx6zw2u.s[28]++;
      audioAndVideoTypes.push(types);
    }

    cov_oetx6zw2u.s[29]++;
    return audioAndVideoTypes;
  };

  QUnit.module('codecsForPlaylists');
  QUnit.test('returns object associating playlists to codecs', function (assert) {
    var manifest = {
      playlists: [{
        resolvedUri: 'test1',
        attributes: {
          CODECS: 'avc1.4d400d, mp4a.40.2'
        }
      }, {
        resolvedUri: 'test2',
        attributes: {
          CODECS: 'mp4a.40.5,avc1.4d401e'
        }
      }]
    };
    assert.deepEqual(codecsForPlaylists(manifest), {
      test1: {
        codecCount: 2,
        audioProfile: '2',
        videoCodec: 'avc1',
        videoObjectTypeIndicator: '.4d400d'
      },
      test2: {
        codecCount: 2,
        audioProfile: '5',
        videoCodec: 'avc1',
        videoObjectTypeIndicator: '.4d401e'
      }
    }, 'returned object associating playlists to codecs');
  });
  QUnit.test('uses audio codec from default alt audio playlist', function (assert) {
    var manifest = {
      mediaGroups: {
        AUDIO: {
          au1: {
            en: {
              default: false,
              playlists: [{
                attributes: {
                  CODECS: 'mp4a.40.2'
                }
              }]
            },
            es: {
              default: true,
              playlists: [{
                attributes: {
                  CODECS: 'mp4a.40.5'
                }
              }]
            }
          }
        }
      },
      playlists: [{
        resolvedUri: 'test1',
        attributes: {
          CODECS: 'avc1.4d400d',
          AUDIO: 'au1'
        }
      }, {
        resolvedUri: 'test2',
        attributes: {
          CODECS: 'avc1.4d401e',
          AUDIO: 'au1'
        }
      }]
    };
    assert.deepEqual(codecsForPlaylists(manifest), {
      test1: {
        codecCount: 2,
        audioProfile: '5',
        videoCodec: 'avc1',
        videoObjectTypeIndicator: '.4d400d'
      },
      test2: {
        codecCount: 2,
        audioProfile: '5',
        videoCodec: 'avc1',
        videoObjectTypeIndicator: '.4d401e'
      }
    }, 'used default audio codec for both playlists');
  });
  QUnit.test('does not use audio codec from non default alt audio playlist', function (assert) {
    var manifest = {
      mediaGroups: {
        AUDIO: {
          au1: {
            en: {
              default: false,
              playlists: [{
                attributes: {
                  CODECS: 'mp4a.40.2'
                }
              }]
            },
            es: {
              default: false,
              playlists: [{
                attributes: {
                  CODECS: 'mp4a.40.5'
                }
              }]
            }
          }
        }
      },
      playlists: [{
        resolvedUri: 'test1',
        attributes: {
          CODECS: 'avc1.4d400d',
          AUDIO: 'au1'
        }
      }, {
        resolvedUri: 'test2',
        attributes: {
          CODECS: 'avc1.4d401e',
          AUDIO: 'au1'
        }
      }]
    };
    assert.deepEqual(codecsForPlaylists(manifest), {
      test1: {
        codecCount: 1,
        audioProfile: null,
        videoCodec: 'avc1',
        videoObjectTypeIndicator: '.4d400d'
      },
      test2: {
        codecCount: 1,
        audioProfile: null,
        videoCodec: 'avc1',
        videoObjectTypeIndicator: '.4d401e'
      }
    }, 'did not use non default audio codec for either playlist');
  });
  QUnit.module('getAudioAndVideoTypes');
  QUnit.test('gets muxed video and audio mime types and codecs', function (assert) {
    assert.deepEqual(getAudioAndVideoTypes({
      videoPlaylists: [{
        resolvedUri: 'manifest1-playlist2'
      }, {
        resolvedUri: 'manifest2-playlist1'
      }],
      manifestObjects: [{
        playlists: [{
          attributes: {
            CODECS: 'avc1.42001e, mp4a.40.2'
          },
          resolvedUri: 'manifest1-playlist1'
        }, {
          attributes: {
            CODECS: 'avc1.42001f, mp4a.40.5'
          },
          resolvedUri: 'manifest1-playlist2'
        }]
      }, {
        playlists: [{
          attributes: {
            CODECS: 'avc1.42001e, mp4a.40.2'
          },
          resolvedUri: 'manifest2-playlist1'
        }, {
          attributes: {
            CODECS: 'avc1.42001f, mp4a.40.5'
          },
          resolvedUri: 'manifest2-playlist2'
        }]
      }]
    }), [{
      video: 'video/mp4; codecs="avc1.42001f"',
      audio: 'audio/mp4; codecs="mp4a.40.5"'
    }, {
      video: 'video/mp4; codecs="avc1.42001e"',
      audio: 'audio/mp4; codecs="mp4a.40.2"'
    }], 'got video and audio mime types and codecs');
  });
  QUnit.test('gets video only mime type and codec', function (assert) {
    assert.deepEqual(getAudioAndVideoTypes({
      videoPlaylists: [{
        resolvedUri: 'manifest1-playlist2'
      }, {
        resolvedUri: 'manifest2-playlist1'
      }],
      manifestObjects: [{
        playlists: [{
          attributes: {
            CODECS: 'avc1.42001f'
          },
          resolvedUri: 'manifest1-playlist1'
        }, {
          attributes: {
            CODECS: 'avc1.42001e'
          },
          resolvedUri: 'manifest1-playlist2'
        }]
      }, {
        playlists: [{
          attributes: {
            CODECS: 'avc1.42001f'
          },
          resolvedUri: 'manifest2-playlist1'
        }, {
          attributes: {
            CODECS: 'avc1.42001e'
          },
          resolvedUri: 'manifest2-playlist2'
        }]
      }]
    }), [{
      video: 'video/mp4; codecs="avc1.42001e"'
    }, {
      video: 'video/mp4; codecs="avc1.42001f"'
    }], 'got video mime type and codec');
  });
  QUnit.test('gets audio only mime type and codec', function (assert) {
    assert.deepEqual(getAudioAndVideoTypes({
      videoPlaylists: [{
        resolvedUri: 'manifest1-playlist2'
      }, {
        resolvedUri: 'manifest2-playlist1'
      }],
      manifestObjects: [{
        playlists: [{
          attributes: {
            CODECS: 'mp4a.40.2'
          },
          resolvedUri: 'manifest1-playlist1'
        }, {
          attributes: {
            CODECS: 'mp4a.40.5'
          },
          resolvedUri: 'manifest1-playlist2'
        }]
      }, {
        playlists: [{
          attributes: {
            CODECS: 'mp4a.40.2'
          },
          resolvedUri: 'manifest2-playlist1'
        }, {
          attributes: {
            CODECS: 'mp4a.40.2'
          },
          resolvedUri: 'manifest2-playlist2'
        }]
      }]
    }), [{
      audio: 'audio/mp4; codecs="mp4a.40.5"'
    }, {
      audio: 'audio/mp4; codecs="mp4a.40.2"'
    }], 'got audio mime type and codec');
  });
  QUnit.test('gets demuxed video and audio mime types and codecs', function (assert) {
    var mediaGroups = {
      AUDIO: {
        audio: {
          nonDefault: {
            autoselect: false,
            default: false,
            playlists: [{
              attributes: {
                CODECS: 'mp4a.40.2'
              }
            }]
          },
          default: {
            autoselect: true,
            default: true,
            playlists: [{
              attributes: {
                CODECS: 'mp4a.40.5'
              }
            }]
          }
        }
      }
    };
    assert.deepEqual(getAudioAndVideoTypes({
      videoPlaylists: [{
        resolvedUri: 'manifest1-playlist2'
      }, {
        resolvedUri: 'manifest2-playlist1'
      }],
      manifestObjects: [{
        mediaGroups: mediaGroups,
        playlists: [{
          attributes: {
            CODECS: 'avc1.42001e',
            AUDIO: 'audio'
          },
          resolvedUri: 'manifest1-playlist1'
        }, {
          attributes: {
            CODECS: 'avc1.42001f',
            AUDIO: 'audio'
          },
          resolvedUri: 'manifest1-playlist2'
        }]
      }, {
        mediaGroups: mediaGroups,
        playlists: [{
          attributes: {
            CODECS: 'avc1.42001e',
            AUDIO: 'audio'
          },
          resolvedUri: 'manifest2-playlist1'
        }, {
          attributes: {
            CODECS: 'avc1.42001f',
            AUDIO: 'audio'
          },
          resolvedUri: 'manifest2-playlist2'
        }]
      }]
    }), [{
      video: 'video/mp4; codecs="avc1.42001f"',
      audio: 'audio/mp4; codecs="mp4a.40.5"'
    }, {
      video: 'video/mp4; codecs="avc1.42001e"',
      audio: 'audio/mp4; codecs="mp4a.40.5"'
    }], 'got video and audio mime types and codecs');
  });

  var win;

  if (typeof window !== "undefined") {
      win = window;
  } else if (typeof commonjsGlobal !== "undefined") {
      win = commonjsGlobal;
  } else if (typeof self !== "undefined"){
      win = self;
  } else {
      win = {};
  }

  var window_1 = win;

  var cov_uj9f1lkb3 = function () {
    var path = '/Users/gsinger/repos/clean/plugin-concat/src/request-utils.js',
        hash = '5a2a55beb267121ff44a477919bdc3351236b348',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
      path: '/Users/gsinger/repos/clean/plugin-concat/src/request-utils.js',
      statementMap: {
        '0': {
          start: {
            line: 11,
            column: 26
          },
          end: {
            line: 57,
            column: 1
          }
        },
        '1': {
          start: {
            line: 13,
            column: 2
          },
          end: {
            line: 13,
            column: 82
          }
        },
        '2': {
          start: {
            line: 13,
            column: 48
          },
          end: {
            line: 13,
            column: 80
          }
        },
        '3': {
          start: {
            line: 15,
            column: 17
          },
          end: {
            line: 15,
            column: 22
          }
        },
        '4': {
          start: {
            line: 16,
            column: 20
          },
          end: {
            line: 16,
            column: 22
          }
        },
        '5': {
          start: {
            line: 17,
            column: 26
          },
          end: {
            line: 17,
            column: 28
          }
        },
        '6': {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 56,
            column: 5
          }
        },
        '7': {
          start: {
            line: 20,
            column: 20
          },
          end: {
            line: 53,
            column: 6
          }
        },
        '8': {
          start: {
            line: 21,
            column: 6
          },
          end: {
            line: 23,
            column: 7
          }
        },
        '9': {
          start: {
            line: 22,
            column: 8
          },
          end: {
            line: 22,
            column: 15
          }
        },
        '10': {
          start: {
            line: 25,
            column: 6
          },
          end: {
            line: 25,
            column: 66
          }
        },
        '11': {
          start: {
            line: 28,
            column: 8
          },
          end: {
            line: 33,
            column: 9
          }
        },
        '12': {
          start: {
            line: 35,
            column: 6
          },
          end: {
            line: 46,
            column: 7
          }
        },
        '13': {
          start: {
            line: 36,
            column: 8
          },
          end: {
            line: 41,
            column: 11
          }
        },
        '14': {
          start: {
            line: 42,
            column: 8
          },
          end: {
            line: 42,
            column: 24
          }
        },
        '15': {
          start: {
            line: 44,
            column: 8
          },
          end: {
            line: 44,
            column: 76
          }
        },
        '16': {
          start: {
            line: 44,
            column: 52
          },
          end: {
            line: 44,
            column: 74
          }
        },
        '17': {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 45,
            column: 15
          }
        },
        '18': {
          start: {
            line: 48,
            column: 6
          },
          end: {
            line: 48,
            column: 44
          }
        },
        '19': {
          start: {
            line: 50,
            column: 6
          },
          end: {
            line: 52,
            column: 7
          }
        },
        '20': {
          start: {
            line: 51,
            column: 8
          },
          end: {
            line: 51,
            column: 34
          }
        },
        '21': {
          start: {
            line: 55,
            column: 4
          },
          end: {
            line: 55,
            column: 34
          }
        }
      },
      fnMap: {
        '0': {
          name: '(anonymous_0)',
          decl: {
            start: {
              line: 11,
              column: 26
            },
            end: {
              line: 11,
              column: 27
            }
          },
          loc: {
            start: {
              line: 11,
              column: 46
            },
            end: {
              line: 57,
              column: 1
            }
          },
          line: 11
        },
        '1': {
          name: '(anonymous_1)',
          decl: {
            start: {
              line: 13,
              column: 21
            },
            end: {
              line: 13,
              column: 22
            }
          },
          loc: {
            start: {
              line: 13,
              column: 48
            },
            end: {
              line: 13,
              column: 80
            }
          },
          line: 13
        },
        '2': {
          name: '(anonymous_2)',
          decl: {
            start: {
              line: 19,
              column: 15
            },
            end: {
              line: 19,
              column: 16
            }
          },
          loc: {
            start: {
              line: 19,
              column: 24
            },
            end: {
              line: 56,
              column: 3
            }
          },
          line: 19
        },
        '3': {
          name: '(anonymous_3)',
          decl: {
            start: {
              line: 20,
              column: 37
            },
            end: {
              line: 20,
              column: 38
            }
          },
          loc: {
            start: {
              line: 20,
              column: 56
            },
            end: {
              line: 53,
              column: 5
            }
          },
          line: 20
        },
        '4': {
          name: '(anonymous_4)',
          decl: {
            start: {
              line: 44,
              column: 32
            },
            end: {
              line: 44,
              column: 33
            }
          },
          loc: {
            start: {
              line: 44,
              column: 52
            },
            end: {
              line: 44,
              column: 74
            }
          },
          line: 44
        }
      },
      branchMap: {
        '0': {
          loc: {
            start: {
              line: 21,
              column: 6
            },
            end: {
              line: 23,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 21,
              column: 6
            },
            end: {
              line: 23,
              column: 7
            }
          }, {
            start: {
              line: 21,
              column: 6
            },
            end: {
              line: 23,
              column: 7
            }
          }],
          line: 21
        },
        '1': {
          loc: {
            start: {
              line: 28,
              column: 8
            },
            end: {
              line: 33,
              column: 9
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 28,
              column: 8
            },
            end: {
              line: 28,
              column: 16
            }
          }, {
            start: {
              line: 30,
              column: 10
            },
            end: {
              line: 30,
              column: 37
            }
          }, {
            start: {
              line: 31,
              column: 10
            },
            end: {
              line: 31,
              column: 37
            }
          }, {
            start: {
              line: 32,
              column: 10
            },
            end: {
              line: 32,
              column: 35
            }
          }],
          line: 28
        },
        '2': {
          loc: {
            start: {
              line: 35,
              column: 6
            },
            end: {
              line: 46,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 35,
              column: 6
            },
            end: {
              line: 46,
              column: 7
            }
          }, {
            start: {
              line: 35,
              column: 6
            },
            end: {
              line: 46,
              column: 7
            }
          }],
          line: 35
        },
        '3': {
          loc: {
            start: {
              line: 35,
              column: 10
            },
            end: {
              line: 35,
              column: 41
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 35,
              column: 10
            },
            end: {
              line: 35,
              column: 13
            }
          }, {
            start: {
              line: 35,
              column: 17
            },
            end: {
              line: 35,
              column: 41
            }
          }],
          line: 35
        },
        '4': {
          loc: {
            start: {
              line: 39,
              column: 19
            },
            end: {
              line: 39,
              column: 55
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 39,
              column: 25
            },
            end: {
              line: 39,
              column: 36
            }
          }, {
            start: {
              line: 39,
              column: 39
            },
            end: {
              line: 39,
              column: 55
            }
          }],
          line: 39
        },
        '5': {
          loc: {
            start: {
              line: 50,
              column: 6
            },
            end: {
              line: 52,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 50,
              column: 6
            },
            end: {
              line: 52,
              column: 7
            }
          }, {
            start: {
              line: 50,
              column: 6
            },
            end: {
              line: 52,
              column: 7
            }
          }],
          line: 50
        }
      },
      s: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0,
        '7': 0,
        '8': 0,
        '9': 0,
        '10': 0,
        '11': 0,
        '12': 0,
        '13': 0,
        '14': 0,
        '15': 0,
        '16': 0,
        '17': 0,
        '18': 0,
        '19': 0,
        '20': 0,
        '21': 0
      },
      f: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0
      },
      b: {
        '0': [0, 0],
        '1': [0, 0, 0, 0],
        '2': [0, 0],
        '3': [0, 0],
        '4': [0, 0],
        '5': [0, 0]
      },
      _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
      return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
  }();
  cov_uj9f1lkb3.s[0]++;
  var requestAll = function requestAll(urls, callback) {
    cov_uj9f1lkb3.f[0]++;
    cov_uj9f1lkb3.s[1]++;
    urls = urls.filter(function (element, index, array) {
      cov_uj9f1lkb3.f[1]++;
      cov_uj9f1lkb3.s[2]++;
      return array.indexOf(element) === index;
    });
    var didError = (cov_uj9f1lkb3.s[3]++, false);
    var responses = (cov_uj9f1lkb3.s[4]++, {});
    var pendingRequests = (cov_uj9f1lkb3.s[5]++, []);
    cov_uj9f1lkb3.s[6]++;
    urls.forEach(function (url) {
      cov_uj9f1lkb3.f[2]++;
      var request = (cov_uj9f1lkb3.s[7]++, videojs.xhr(url, function (err, response) {
        cov_uj9f1lkb3.f[3]++;
        cov_uj9f1lkb3.s[8]++;

        if (didError) {
          cov_uj9f1lkb3.b[0][0]++;
          cov_uj9f1lkb3.s[9]++;
          return;
        } else {
          cov_uj9f1lkb3.b[0][1]++;
        }

        cov_uj9f1lkb3.s[10]++;
        pendingRequests.splice(pendingRequests.indexOf(request), 1);
        var responseStatusIsSuccess = (cov_uj9f1lkb3.s[11]++, (cov_uj9f1lkb3.b[1][0]++, response) && ((cov_uj9f1lkb3.b[1][1]++, response.statusCode === 200) || (cov_uj9f1lkb3.b[1][2]++, response.statusCode === 206) || (cov_uj9f1lkb3.b[1][3]++, response.statusCode === 0)));
        cov_uj9f1lkb3.s[12]++;

        if ((cov_uj9f1lkb3.b[3][0]++, err) || (cov_uj9f1lkb3.b[3][1]++, !responseStatusIsSuccess)) {
          cov_uj9f1lkb3.b[2][0]++;
          cov_uj9f1lkb3.s[13]++;
          callback({
            message: err ? (cov_uj9f1lkb3.b[4][0]++, err.message) : (cov_uj9f1lkb3.b[4][1]++, 'Request failed'),
            request: request
          });
          cov_uj9f1lkb3.s[14]++;
          didError = true;
          cov_uj9f1lkb3.s[15]++;
          pendingRequests.forEach(function (pendingRequest) {
            cov_uj9f1lkb3.f[4]++;
            cov_uj9f1lkb3.s[16]++;
            return pendingRequest.abort();
          });
          cov_uj9f1lkb3.s[17]++;
          return;
        } else {
          cov_uj9f1lkb3.b[2][1]++;
        }

        cov_uj9f1lkb3.s[18]++;
        responses[url] = request.responseText;
        cov_uj9f1lkb3.s[19]++;

        if (Object.keys(responses).length === urls.length) {
          cov_uj9f1lkb3.b[5][0]++;
          cov_uj9f1lkb3.s[20]++;
          callback(null, responses);
        } else {
          cov_uj9f1lkb3.b[5][1]++;
        }
      }));
      cov_uj9f1lkb3.s[21]++;
      pendingRequests.push(request);
    });
  };

  /*! @name mpd-parser @version 0.8.1 @license Apache-2.0 */

  var isObject = function isObject(obj) {
    return !!obj && typeof obj === 'object';
  };

  var merge = function merge() {
    for (var _len = arguments.length, objects = new Array(_len), _key = 0; _key < _len; _key++) {
      objects[_key] = arguments[_key];
    }

    return objects.reduce(function (result, source) {
      Object.keys(source).forEach(function (key) {
        if (Array.isArray(result[key]) && Array.isArray(source[key])) {
          result[key] = result[key].concat(source[key]);
        } else if (isObject(result[key]) && isObject(source[key])) {
          result[key] = merge(result[key], source[key]);
        } else {
          result[key] = source[key];
        }
      });
      return result;
    }, {});
  };
  var values = function values(o) {
    return Object.keys(o).map(function (k) {
      return o[k];
    });
  };

  var range = function range(start, end) {
    var result = [];

    for (var i = start; i < end; i++) {
      result.push(i);
    }

    return result;
  };
  var flatten = function flatten(lists) {
    return lists.reduce(function (x, y) {
      return x.concat(y);
    }, []);
  };
  var from = function from(list) {
    if (!list.length) {
      return [];
    }

    var result = [];

    for (var i = 0; i < list.length; i++) {
      result.push(list[i]);
    }

    return result;
  };
  var findIndexes = function findIndexes(l, key) {
    return l.reduce(function (a, e, i) {
      if (e[key]) {
        a.push(i);
      }

      return a;
    }, []);
  };

  var errors = {
    INVALID_NUMBER_OF_PERIOD: 'INVALID_NUMBER_OF_PERIOD',
    DASH_EMPTY_MANIFEST: 'DASH_EMPTY_MANIFEST',
    DASH_INVALID_XML: 'DASH_INVALID_XML',
    NO_BASE_URL: 'NO_BASE_URL',
    MISSING_SEGMENT_INFORMATION: 'MISSING_SEGMENT_INFORMATION',
    SEGMENT_TIME_UNSPECIFIED: 'SEGMENT_TIME_UNSPECIFIED',
    UNSUPPORTED_UTC_TIMING_SCHEME: 'UNSUPPORTED_UTC_TIMING_SCHEME'
  };

  var commonjsGlobal$1 = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function createCommonjsModule$1(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var urlToolkit = createCommonjsModule$1(function (module, exports) {
  // see https://tools.ietf.org/html/rfc1808

  /* jshint ignore:start */
  (function(root) { 
  /* jshint ignore:end */

    var URL_REGEX = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/;
    var FIRST_SEGMENT_REGEX = /^([^\/?#]*)(.*)$/;
    var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
    var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g;

    var URLToolkit = { // jshint ignore:line
      // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
      // E.g
      // With opts.alwaysNormalize = false (default, spec compliant)
      // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
      // With opts.alwaysNormalize = true (not spec compliant)
      // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
      buildAbsoluteURL: function(baseURL, relativeURL, opts) {
        opts = opts || {};
        // remove any remaining space and CRLF
        baseURL = baseURL.trim();
        relativeURL = relativeURL.trim();
        if (!relativeURL) {
          // 2a) If the embedded URL is entirely empty, it inherits the
          // entire base URL (i.e., is set equal to the base URL)
          // and we are done.
          if (!opts.alwaysNormalize) {
            return baseURL;
          }
          var basePartsForNormalise = URLToolkit.parseURL(baseURL);
          if (!basePartsForNormalise) {
            throw new Error('Error trying to parse base URL.');
          }
          basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);
          return URLToolkit.buildURLFromParts(basePartsForNormalise);
        }
        var relativeParts = URLToolkit.parseURL(relativeURL);
        if (!relativeParts) {
          throw new Error('Error trying to parse relative URL.');
        }
        if (relativeParts.scheme) {
          // 2b) If the embedded URL starts with a scheme name, it is
          // interpreted as an absolute URL and we are done.
          if (!opts.alwaysNormalize) {
            return relativeURL;
          }
          relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
          return URLToolkit.buildURLFromParts(relativeParts);
        }
        var baseParts = URLToolkit.parseURL(baseURL);
        if (!baseParts) {
          throw new Error('Error trying to parse base URL.');
        }
        if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {
          // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
          // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
          var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
          baseParts.netLoc = pathParts[1];
          baseParts.path = pathParts[2];
        }
        if (baseParts.netLoc && !baseParts.path) {
          baseParts.path = '/';
        }
        var builtParts = {
          // 2c) Otherwise, the embedded URL inherits the scheme of
          // the base URL.
          scheme: baseParts.scheme,
          netLoc: relativeParts.netLoc,
          path: null,
          params: relativeParts.params,
          query: relativeParts.query,
          fragment: relativeParts.fragment
        };
        if (!relativeParts.netLoc) {
          // 3) If the embedded URL's <net_loc> is non-empty, we skip to
          // Step 7.  Otherwise, the embedded URL inherits the <net_loc>
          // (if any) of the base URL.
          builtParts.netLoc = baseParts.netLoc;
          // 4) If the embedded URL path is preceded by a slash "/", the
          // path is not relative and we skip to Step 7.
          if (relativeParts.path[0] !== '/') {
            if (!relativeParts.path) {
              // 5) If the embedded URL path is empty (and not preceded by a
              // slash), then the embedded URL inherits the base URL path
              builtParts.path = baseParts.path;
              // 5a) if the embedded URL's <params> is non-empty, we skip to
              // step 7; otherwise, it inherits the <params> of the base
              // URL (if any) and
              if (!relativeParts.params) {
                builtParts.params = baseParts.params;
                // 5b) if the embedded URL's <query> is non-empty, we skip to
                // step 7; otherwise, it inherits the <query> of the base
                // URL (if any) and we skip to step 7.
                if (!relativeParts.query) {
                  builtParts.query = baseParts.query;
                }
              }
            } else {
              // 6) The last segment of the base URL's path (anything
              // following the rightmost slash "/", or the entire path if no
              // slash is present) is removed and the embedded URL's path is
              // appended in its place.
              var baseURLPath = baseParts.path;
              var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;
              builtParts.path = URLToolkit.normalizePath(newPath);
            }
          }
        }
        if (builtParts.path === null) {
          builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
        }
        return URLToolkit.buildURLFromParts(builtParts);
      },
      parseURL: function(url) {
        var parts = URL_REGEX.exec(url);
        if (!parts) {
          return null;
        }
        return {
          scheme: parts[1] || '',
          netLoc: parts[2] || '',
          path: parts[3] || '',
          params: parts[4] || '',
          query: parts[5] || '',
          fragment: parts[6] || ''
        };
      },
      normalizePath: function(path) {
        // The following operations are
        // then applied, in order, to the new path:
        // 6a) All occurrences of "./", where "." is a complete path
        // segment, are removed.
        // 6b) If the path ends with "." as a complete path segment,
        // that "." is removed.
        path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');
        // 6c) All occurrences of "<segment>/../", where <segment> is a
        // complete path segment not equal to "..", are removed.
        // Removal of these path segments is performed iteratively,
        // removing the leftmost matching pattern on each iteration,
        // until no matching pattern remains.
        // 6d) If the path ends with "<segment>/..", where <segment> is a
        // complete path segment not equal to "..", that
        // "<segment>/.." is removed.
        while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line
        return path.split('').reverse().join('');
      },
      buildURLFromParts: function(parts) {
        return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
      }
    };

  /* jshint ignore:start */
    module.exports = URLToolkit;
  })(commonjsGlobal$1);
  /* jshint ignore:end */
  });

  var resolveUrl = function resolveUrl(baseUrl, relativeUrl) {
    // return early if we don't need to resolve
    if (/^[a-z]+:/i.test(relativeUrl)) {
      return relativeUrl;
    } // if the base URL is relative then combine with the current location


    if (!/\/\//i.test(baseUrl)) {
      baseUrl = urlToolkit.buildAbsoluteURL(window_1.location.href, baseUrl);
    }

    return urlToolkit.buildAbsoluteURL(baseUrl, relativeUrl);
  };

  /**
   * @typedef {Object} SingleUri
   * @property {string} uri - relative location of segment
   * @property {string} resolvedUri - resolved location of segment
   * @property {Object} byterange - Object containing information on how to make byte range
   *   requests following byte-range-spec per RFC2616.
   * @property {String} byterange.length - length of range request
   * @property {String} byterange.offset - byte offset of range request
   *
   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.1
   */

  /**
   * Converts a URLType node (5.3.9.2.3 Table 13) to a segment object
   * that conforms to how m3u8-parser is structured
   *
   * @see https://github.com/videojs/m3u8-parser
   *
   * @param {string} baseUrl - baseUrl provided by <BaseUrl> nodes
   * @param {string} source - source url for segment
   * @param {string} range - optional range used for range calls,
   *   follows  RFC 2616, Clause 14.35.1
   * @return {SingleUri} full segment information transformed into a format similar
   *   to m3u8-parser
   */

  var urlTypeToSegment = function urlTypeToSegment(_ref) {
    var _ref$baseUrl = _ref.baseUrl,
        baseUrl = _ref$baseUrl === void 0 ? '' : _ref$baseUrl,
        _ref$source = _ref.source,
        source = _ref$source === void 0 ? '' : _ref$source,
        _ref$range = _ref.range,
        range = _ref$range === void 0 ? '' : _ref$range,
        _ref$indexRange = _ref.indexRange,
        indexRange = _ref$indexRange === void 0 ? '' : _ref$indexRange;
    var segment = {
      uri: source,
      resolvedUri: resolveUrl(baseUrl || '', source)
    };

    if (range || indexRange) {
      var rangeStr = range ? range : indexRange;
      var ranges = rangeStr.split('-');
      var startRange = parseInt(ranges[0], 10);
      var endRange = parseInt(ranges[1], 10); // byterange should be inclusive according to
      // RFC 2616, Clause 14.35.1

      segment.byterange = {
        length: endRange - startRange + 1,
        offset: startRange
      };
    }

    return segment;
  };
  var byteRangeToString = function byteRangeToString(byterange) {
    // `endRange` is one less than `offset + length` because the HTTP range
    // header uses inclusive ranges
    var endRange = byterange.offset + byterange.length - 1;
    return byterange.offset + "-" + endRange;
  };

  /**
   * Functions for calculating the range of available segments in static and dynamic
   * manifests.
   */

  var segmentRange = {
    /**
     * Returns the entire range of available segments for a static MPD
     *
     * @param {Object} attributes
     *        Inheritied MPD attributes
     * @return {{ start: number, end: number }}
     *         The start and end numbers for available segments
     */
    static: function _static(attributes) {
      var duration = attributes.duration,
          _attributes$timescale = attributes.timescale,
          timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,
          sourceDuration = attributes.sourceDuration;
      return {
        start: 0,
        end: Math.ceil(sourceDuration / (duration / timescale))
      };
    },

    /**
     * Returns the current live window range of available segments for a dynamic MPD
     *
     * @param {Object} attributes
     *        Inheritied MPD attributes
     * @return {{ start: number, end: number }}
     *         The start and end numbers for available segments
     */
    dynamic: function dynamic(attributes) {
      var NOW = attributes.NOW,
          clientOffset = attributes.clientOffset,
          availabilityStartTime = attributes.availabilityStartTime,
          _attributes$timescale2 = attributes.timescale,
          timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,
          duration = attributes.duration,
          _attributes$start = attributes.start,
          start = _attributes$start === void 0 ? 0 : _attributes$start,
          _attributes$minimumUp = attributes.minimumUpdatePeriod,
          minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp,
          _attributes$timeShift = attributes.timeShiftBufferDepth,
          timeShiftBufferDepth = _attributes$timeShift === void 0 ? Infinity : _attributes$timeShift;
      var now = (NOW + clientOffset) / 1000;
      var periodStartWC = availabilityStartTime + start;
      var periodEndWC = now + minimumUpdatePeriod;
      var periodDuration = periodEndWC - periodStartWC;
      var segmentCount = Math.ceil(periodDuration * timescale / duration);
      var availableStart = Math.floor((now - periodStartWC - timeShiftBufferDepth) * timescale / duration);
      var availableEnd = Math.floor((now - periodStartWC) * timescale / duration);
      return {
        start: Math.max(0, availableStart),
        end: Math.min(segmentCount, availableEnd)
      };
    }
  };
  /**
   * Maps a range of numbers to objects with information needed to build the corresponding
   * segment list
   *
   * @name toSegmentsCallback
   * @function
   * @param {number} number
   *        Number of the segment
   * @param {number} index
   *        Index of the number in the range list
   * @return {{ number: Number, duration: Number, timeline: Number, time: Number }}
   *         Object with segment timing and duration info
   */

  /**
   * Returns a callback for Array.prototype.map for mapping a range of numbers to
   * information needed to build the segment list.
   *
   * @param {Object} attributes
   *        Inherited MPD attributes
   * @return {toSegmentsCallback}
   *         Callback map function
   */

  var toSegments = function toSegments(attributes) {
    return function (number, index) {
      var duration = attributes.duration,
          _attributes$timescale3 = attributes.timescale,
          timescale = _attributes$timescale3 === void 0 ? 1 : _attributes$timescale3,
          periodIndex = attributes.periodIndex,
          _attributes$startNumb = attributes.startNumber,
          startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb;
      return {
        number: startNumber + number,
        duration: duration / timescale,
        timeline: periodIndex,
        time: index * duration
      };
    };
  };
  /**
   * Returns a list of objects containing segment timing and duration info used for
   * building the list of segments. This uses the @duration attribute specified
   * in the MPD manifest to derive the range of segments.
   *
   * @param {Object} attributes
   *        Inherited MPD attributes
   * @return {{number: number, duration: number, time: number, timeline: number}[]}
   *         List of Objects with segment timing and duration info
   */

  var parseByDuration = function parseByDuration(attributes) {
    var _attributes$type = attributes.type,
        type = _attributes$type === void 0 ? 'static' : _attributes$type,
        duration = attributes.duration,
        _attributes$timescale4 = attributes.timescale,
        timescale = _attributes$timescale4 === void 0 ? 1 : _attributes$timescale4,
        sourceDuration = attributes.sourceDuration;

    var _segmentRange$type = segmentRange[type](attributes),
        start = _segmentRange$type.start,
        end = _segmentRange$type.end;

    var segments = range(start, end).map(toSegments(attributes));

    if (type === 'static') {
      var index = segments.length - 1; // final segment may be less than full segment duration

      segments[index].duration = sourceDuration - duration / timescale * index;
    }

    return segments;
  };

  /**
   * Translates SegmentBase into a set of segments.
   * (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each
   * node should be translated into segment.
   *
   * @param {Object} attributes
   *   Object containing all inherited attributes from parent elements with attribute
   *   names as keys
   * @return {Object.<Array>} list of segments
   */

  var segmentsFromBase = function segmentsFromBase(attributes) {
    var baseUrl = attributes.baseUrl,
        _attributes$initializ = attributes.initialization,
        initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ,
        sourceDuration = attributes.sourceDuration,
        _attributes$timescale = attributes.timescale,
        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,
        _attributes$indexRang = attributes.indexRange,
        indexRange = _attributes$indexRang === void 0 ? '' : _attributes$indexRang,
        duration = attributes.duration; // base url is required for SegmentBase to work, per spec (Section 5.3.9.2.1)

    if (!baseUrl) {
      throw new Error(errors.NO_BASE_URL);
    }

    var initSegment = urlTypeToSegment({
      baseUrl: baseUrl,
      source: initialization.sourceURL,
      range: initialization.range
    });
    var segment = urlTypeToSegment({
      baseUrl: baseUrl,
      source: baseUrl,
      indexRange: indexRange
    });
    segment.map = initSegment; // If there is a duration, use it, otherwise use the given duration of the source
    // (since SegmentBase is only for one total segment)

    if (duration) {
      var segmentTimeInfo = parseByDuration(attributes);

      if (segmentTimeInfo.length) {
        segment.duration = segmentTimeInfo[0].duration;
        segment.timeline = segmentTimeInfo[0].timeline;
      }
    } else if (sourceDuration) {
      segment.duration = sourceDuration / timescale;
      segment.timeline = 0;
    } // This is used for mediaSequence


    segment.number = 0;
    return [segment];
  };
  /**
   * Given a playlist, a sidx box, and a baseUrl, update the segment list of the playlist
   * according to the sidx information given.
   *
   * playlist.sidx has metadadata about the sidx where-as the sidx param
   * is the parsed sidx box itself.
   *
   * @param {Object} playlist the playlist to update the sidx information for
   * @param {Object} sidx the parsed sidx box
   * @return {Object} the playlist object with the updated sidx information
   */

  var addSegmentsToPlaylist = function addSegmentsToPlaylist(playlist, sidx, baseUrl) {
    // Retain init segment information
    var initSegment = playlist.sidx.map ? playlist.sidx.map : null; // Retain source duration from initial master manifest parsing

    var sourceDuration = playlist.sidx.duration; // Retain source timeline

    var timeline = playlist.timeline || 0;
    var sidxByteRange = playlist.sidx.byterange;
    var sidxEnd = sidxByteRange.offset + sidxByteRange.length; // Retain timescale of the parsed sidx

    var timescale = sidx.timescale; // referenceType 1 refers to other sidx boxes

    var mediaReferences = sidx.references.filter(function (r) {
      return r.referenceType !== 1;
    });
    var segments = []; // firstOffset is the offset from the end of the sidx box

    var startIndex = sidxEnd + sidx.firstOffset;

    for (var i = 0; i < mediaReferences.length; i++) {
      var reference = sidx.references[i]; // size of the referenced (sub)segment

      var size = reference.referencedSize; // duration of the referenced (sub)segment, in  the  timescale
      // this will be converted to seconds when generating segments

      var duration = reference.subsegmentDuration; // should be an inclusive range

      var endIndex = startIndex + size - 1;
      var indexRange = startIndex + "-" + endIndex;
      var attributes = {
        baseUrl: baseUrl,
        timescale: timescale,
        timeline: timeline,
        // this is used in parseByDuration
        periodIndex: timeline,
        duration: duration,
        sourceDuration: sourceDuration,
        indexRange: indexRange
      };
      var segment = segmentsFromBase(attributes)[0];

      if (initSegment) {
        segment.map = initSegment;
      }

      segments.push(segment);
      startIndex += size;
    }

    playlist.segments = segments;
    return playlist;
  };

  var mergeDiscontiguousPlaylists = function mergeDiscontiguousPlaylists(playlists) {
    var mergedPlaylists = values(playlists.reduce(function (acc, playlist) {
      // assuming playlist IDs are the same across periods
      // TODO: handle multiperiod where representation sets are not the same
      // across periods
      var name = playlist.attributes.id + (playlist.attributes.lang || ''); // Periods after first

      if (acc[name]) {
        var _acc$name$segments;

        // first segment of subsequent periods signal a discontinuity
        if (playlist.segments[0]) {
          playlist.segments[0].discontinuity = true;
        }

        (_acc$name$segments = acc[name].segments).push.apply(_acc$name$segments, playlist.segments); // bubble up contentProtection, this assumes all DRM content
        // has the same contentProtection


        if (playlist.attributes.contentProtection) {
          acc[name].attributes.contentProtection = playlist.attributes.contentProtection;
        }
      } else {
        // first Period
        acc[name] = playlist;
      }

      return acc;
    }, {}));
    return mergedPlaylists.map(function (playlist) {
      playlist.discontinuityStarts = findIndexes(playlist.segments, 'discontinuity');
      return playlist;
    });
  };

  var addSegmentInfoFromSidx = function addSegmentInfoFromSidx(playlists, sidxMapping) {
    if (sidxMapping === void 0) {
      sidxMapping = {};
    }

    if (!Object.keys(sidxMapping).length) {
      return playlists;
    }

    for (var i in playlists) {
      var playlist = playlists[i];

      if (!playlist.sidx) {
        continue;
      }

      var sidxKey = playlist.sidx.uri + '-' + byteRangeToString(playlist.sidx.byterange);
      var sidxMatch = sidxMapping[sidxKey] && sidxMapping[sidxKey].sidx;

      if (playlist.sidx && sidxMatch) {
        addSegmentsToPlaylist(playlist, sidxMatch, playlist.sidx.resolvedUri);
      }
    }

    return playlists;
  };

  var formatAudioPlaylist = function formatAudioPlaylist(_ref) {
    var _attributes;

    var attributes = _ref.attributes,
        segments = _ref.segments,
        sidx = _ref.sidx;
    var playlist = {
      attributes: (_attributes = {
        NAME: attributes.id,
        BANDWIDTH: attributes.bandwidth,
        CODECS: attributes.codecs
      }, _attributes['PROGRAM-ID'] = 1, _attributes),
      uri: '',
      endList: (attributes.type || 'static') === 'static',
      timeline: attributes.periodIndex,
      resolvedUri: '',
      targetDuration: attributes.duration,
      segments: segments,
      mediaSequence: segments.length ? segments[0].number : 1
    };

    if (attributes.contentProtection) {
      playlist.contentProtection = attributes.contentProtection;
    }

    if (sidx) {
      playlist.sidx = sidx;
    }

    return playlist;
  };
  var formatVttPlaylist = function formatVttPlaylist(_ref2) {
    var _attributes2;

    var attributes = _ref2.attributes,
        segments = _ref2.segments;

    if (typeof segments === 'undefined') {
      // vtt tracks may use single file in BaseURL
      segments = [{
        uri: attributes.baseUrl,
        timeline: attributes.periodIndex,
        resolvedUri: attributes.baseUrl || '',
        duration: attributes.sourceDuration,
        number: 0
      }]; // targetDuration should be the same duration as the only segment

      attributes.duration = attributes.sourceDuration;
    }

    return {
      attributes: (_attributes2 = {
        NAME: attributes.id,
        BANDWIDTH: attributes.bandwidth
      }, _attributes2['PROGRAM-ID'] = 1, _attributes2),
      uri: '',
      endList: (attributes.type || 'static') === 'static',
      timeline: attributes.periodIndex,
      resolvedUri: attributes.baseUrl || '',
      targetDuration: attributes.duration,
      segments: segments,
      mediaSequence: segments.length ? segments[0].number : 1
    };
  };
  var organizeAudioPlaylists = function organizeAudioPlaylists(playlists, sidxMapping) {
    if (sidxMapping === void 0) {
      sidxMapping = {};
    }

    var mainPlaylist;
    var formattedPlaylists = playlists.reduce(function (a, playlist) {
      var role = playlist.attributes.role && playlist.attributes.role.value || '';
      var language = playlist.attributes.lang || '';
      var label = 'main';

      if (language) {
        var roleLabel = role ? " (" + role + ")" : '';
        label = "" + playlist.attributes.lang + roleLabel;
      } // skip if we already have the highest quality audio for a language


      if (a[label] && a[label].playlists[0].attributes.BANDWIDTH > playlist.attributes.bandwidth) {
        return a;
      }

      a[label] = {
        language: language,
        autoselect: true,
        default: role === 'main',
        playlists: addSegmentInfoFromSidx([formatAudioPlaylist(playlist)], sidxMapping),
        uri: ''
      };

      if (typeof mainPlaylist === 'undefined' && role === 'main') {
        mainPlaylist = playlist;
        mainPlaylist.default = true;
      }

      return a;
    }, {}); // if no playlists have role "main", mark the first as main

    if (!mainPlaylist) {
      var firstLabel = Object.keys(formattedPlaylists)[0];
      formattedPlaylists[firstLabel].default = true;
    }

    return formattedPlaylists;
  };
  var organizeVttPlaylists = function organizeVttPlaylists(playlists, sidxMapping) {
    if (sidxMapping === void 0) {
      sidxMapping = {};
    }

    return playlists.reduce(function (a, playlist) {
      var label = playlist.attributes.lang || 'text'; // skip if we already have subtitles

      if (a[label]) {
        return a;
      }

      a[label] = {
        language: label,
        default: false,
        autoselect: false,
        playlists: addSegmentInfoFromSidx([formatVttPlaylist(playlist)], sidxMapping),
        uri: ''
      };
      return a;
    }, {});
  };
  var formatVideoPlaylist = function formatVideoPlaylist(_ref3) {
    var _attributes3;

    var attributes = _ref3.attributes,
        segments = _ref3.segments,
        sidx = _ref3.sidx;
    var playlist = {
      attributes: (_attributes3 = {
        NAME: attributes.id,
        AUDIO: 'audio',
        SUBTITLES: 'subs',
        RESOLUTION: {
          width: attributes.width,
          height: attributes.height
        },
        CODECS: attributes.codecs,
        BANDWIDTH: attributes.bandwidth
      }, _attributes3['PROGRAM-ID'] = 1, _attributes3),
      uri: '',
      endList: (attributes.type || 'static') === 'static',
      timeline: attributes.periodIndex,
      resolvedUri: '',
      targetDuration: attributes.duration,
      segments: segments,
      mediaSequence: segments.length ? segments[0].number : 1
    };

    if (attributes.contentProtection) {
      playlist.contentProtection = attributes.contentProtection;
    }

    if (sidx) {
      playlist.sidx = sidx;
    }

    return playlist;
  };
  var toM3u8 = function toM3u8(dashPlaylists, sidxMapping) {
    var _mediaGroups;

    if (sidxMapping === void 0) {
      sidxMapping = {};
    }

    if (!dashPlaylists.length) {
      return {};
    } // grab all master attributes


    var _dashPlaylists$0$attr = dashPlaylists[0].attributes,
        duration = _dashPlaylists$0$attr.sourceDuration,
        _dashPlaylists$0$attr2 = _dashPlaylists$0$attr.minimumUpdatePeriod,
        minimumUpdatePeriod = _dashPlaylists$0$attr2 === void 0 ? 0 : _dashPlaylists$0$attr2;

    var videoOnly = function videoOnly(_ref4) {
      var attributes = _ref4.attributes;
      return attributes.mimeType === 'video/mp4' || attributes.contentType === 'video';
    };

    var audioOnly = function audioOnly(_ref5) {
      var attributes = _ref5.attributes;
      return attributes.mimeType === 'audio/mp4' || attributes.contentType === 'audio';
    };

    var vttOnly = function vttOnly(_ref6) {
      var attributes = _ref6.attributes;
      return attributes.mimeType === 'text/vtt' || attributes.contentType === 'text';
    };

    var videoPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(videoOnly)).map(formatVideoPlaylist);
    var audioPlaylists = mergeDiscontiguousPlaylists(dashPlaylists.filter(audioOnly));
    var vttPlaylists = dashPlaylists.filter(vttOnly);
    var master = {
      allowCache: true,
      discontinuityStarts: [],
      segments: [],
      endList: true,
      mediaGroups: (_mediaGroups = {
        AUDIO: {},
        VIDEO: {}
      }, _mediaGroups['CLOSED-CAPTIONS'] = {}, _mediaGroups.SUBTITLES = {}, _mediaGroups),
      uri: '',
      duration: duration,
      playlists: addSegmentInfoFromSidx(videoPlaylists, sidxMapping),
      minimumUpdatePeriod: minimumUpdatePeriod * 1000
    };

    if (audioPlaylists.length) {
      master.mediaGroups.AUDIO.audio = organizeAudioPlaylists(audioPlaylists, sidxMapping);
    }

    if (vttPlaylists.length) {
      master.mediaGroups.SUBTITLES.subs = organizeVttPlaylists(vttPlaylists, sidxMapping);
    }

    return master;
  };

  /**
   * Calculates the R (repetition) value for a live stream (for the final segment
   * in a manifest where the r value is negative 1)
   *
   * @param {Object} attributes
   *        Object containing all inherited attributes from parent elements with attribute
   *        names as keys
   * @param {number} time
   *        current time (typically the total time up until the final segment)
   * @param {number} duration
   *        duration property for the given <S />
   *
   * @return {number}
   *        R value to reach the end of the given period
   */
  var getLiveRValue = function getLiveRValue(attributes, time, duration) {
    var NOW = attributes.NOW,
        clientOffset = attributes.clientOffset,
        availabilityStartTime = attributes.availabilityStartTime,
        _attributes$timescale = attributes.timescale,
        timescale = _attributes$timescale === void 0 ? 1 : _attributes$timescale,
        _attributes$start = attributes.start,
        start = _attributes$start === void 0 ? 0 : _attributes$start,
        _attributes$minimumUp = attributes.minimumUpdatePeriod,
        minimumUpdatePeriod = _attributes$minimumUp === void 0 ? 0 : _attributes$minimumUp;
    var now = (NOW + clientOffset) / 1000;
    var periodStartWC = availabilityStartTime + start;
    var periodEndWC = now + minimumUpdatePeriod;
    var periodDuration = periodEndWC - periodStartWC;
    return Math.ceil((periodDuration * timescale - time) / duration);
  };
  /**
   * Uses information provided by SegmentTemplate.SegmentTimeline to determine segment
   * timing and duration
   *
   * @param {Object} attributes
   *        Object containing all inherited attributes from parent elements with attribute
   *        names as keys
   * @param {Object[]} segmentTimeline
   *        List of objects representing the attributes of each S element contained within
   *
   * @return {{number: number, duration: number, time: number, timeline: number}[]}
   *         List of Objects with segment timing and duration info
   */


  var parseByTimeline = function parseByTimeline(attributes, segmentTimeline) {
    var _attributes$type = attributes.type,
        type = _attributes$type === void 0 ? 'static' : _attributes$type,
        _attributes$minimumUp2 = attributes.minimumUpdatePeriod,
        minimumUpdatePeriod = _attributes$minimumUp2 === void 0 ? 0 : _attributes$minimumUp2,
        _attributes$media = attributes.media,
        media = _attributes$media === void 0 ? '' : _attributes$media,
        sourceDuration = attributes.sourceDuration,
        _attributes$timescale2 = attributes.timescale,
        timescale = _attributes$timescale2 === void 0 ? 1 : _attributes$timescale2,
        _attributes$startNumb = attributes.startNumber,
        startNumber = _attributes$startNumb === void 0 ? 1 : _attributes$startNumb,
        timeline = attributes.periodIndex;
    var segments = [];
    var time = -1;

    for (var sIndex = 0; sIndex < segmentTimeline.length; sIndex++) {
      var S = segmentTimeline[sIndex];
      var duration = S.d;
      var repeat = S.r || 0;
      var segmentTime = S.t || 0;

      if (time < 0) {
        // first segment
        time = segmentTime;
      }

      if (segmentTime && segmentTime > time) {
        // discontinuity
        // TODO: How to handle this type of discontinuity
        // timeline++ here would treat it like HLS discontuity and content would
        // get appended without gap
        // E.G.
        //  <S t="0" d="1" />
        //  <S d="1" />
        //  <S d="1" />
        //  <S t="5" d="1" />
        // would have $Time$ values of [0, 1, 2, 5]
        // should this be appened at time positions [0, 1, 2, 3],(#EXT-X-DISCONTINUITY)
        // or [0, 1, 2, gap, gap, 5]? (#EXT-X-GAP)
        // does the value of sourceDuration consider this when calculating arbitrary
        // negative @r repeat value?
        // E.G. Same elements as above with this added at the end
        //  <S d="1" r="-1" />
        //  with a sourceDuration of 10
        // Would the 2 gaps be included in the time duration calculations resulting in
        // 8 segments with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9] or 10 segments
        // with $Time$ values of [0, 1, 2, 5, 6, 7, 8, 9, 10, 11] ?
        time = segmentTime;
      }

      var count = void 0;

      if (repeat < 0) {
        var nextS = sIndex + 1;

        if (nextS === segmentTimeline.length) {
          // last segment
          if (type === 'dynamic' && minimumUpdatePeriod > 0 && media.indexOf('$Number$') > 0) {
            count = getLiveRValue(attributes, time, duration);
          } else {
            // TODO: This may be incorrect depending on conclusion of TODO above
            count = (sourceDuration * timescale - time) / duration;
          }
        } else {
          count = (segmentTimeline[nextS].t - time) / duration;
        }
      } else {
        count = repeat + 1;
      }

      var end = startNumber + segments.length + count;
      var number = startNumber + segments.length;

      while (number < end) {
        segments.push({
          number: number,
          duration: duration / timescale,
          time: time,
          timeline: timeline
        });
        time += duration;
        number++;
      }
    }

    return segments;
  };

  var identifierPattern = /\$([A-z]*)(?:(%0)([0-9]+)d)?\$/g;
  /**
   * Replaces template identifiers with corresponding values. To be used as the callback
   * for String.prototype.replace
   *
   * @name replaceCallback
   * @function
   * @param {string} match
   *        Entire match of identifier
   * @param {string} identifier
   *        Name of matched identifier
   * @param {string} format
   *        Format tag string. Its presence indicates that padding is expected
   * @param {string} width
   *        Desired length of the replaced value. Values less than this width shall be left
   *        zero padded
   * @return {string}
   *         Replacement for the matched identifier
   */

  /**
   * Returns a function to be used as a callback for String.prototype.replace to replace
   * template identifiers
   *
   * @param {Obect} values
   *        Object containing values that shall be used to replace known identifiers
   * @param {number} values.RepresentationID
   *        Value of the Representation@id attribute
   * @param {number} values.Number
   *        Number of the corresponding segment
   * @param {number} values.Bandwidth
   *        Value of the Representation@bandwidth attribute.
   * @param {number} values.Time
   *        Timestamp value of the corresponding segment
   * @return {replaceCallback}
   *         Callback to be used with String.prototype.replace to replace identifiers
   */

  var identifierReplacement = function identifierReplacement(values) {
    return function (match, identifier, format, width) {
      if (match === '$$') {
        // escape sequence
        return '$';
      }

      if (typeof values[identifier] === 'undefined') {
        return match;
      }

      var value = '' + values[identifier];

      if (identifier === 'RepresentationID') {
        // Format tag shall not be present with RepresentationID
        return value;
      }

      if (!format) {
        width = 1;
      } else {
        width = parseInt(width, 10);
      }

      if (value.length >= width) {
        return value;
      }

      return "" + new Array(width - value.length + 1).join('0') + value;
    };
  };
  /**
   * Constructs a segment url from a template string
   *
   * @param {string} url
   *        Template string to construct url from
   * @param {Obect} values
   *        Object containing values that shall be used to replace known identifiers
   * @param {number} values.RepresentationID
   *        Value of the Representation@id attribute
   * @param {number} values.Number
   *        Number of the corresponding segment
   * @param {number} values.Bandwidth
   *        Value of the Representation@bandwidth attribute.
   * @param {number} values.Time
   *        Timestamp value of the corresponding segment
   * @return {string}
   *         Segment url with identifiers replaced
   */

  var constructTemplateUrl = function constructTemplateUrl(url, values) {
    return url.replace(identifierPattern, identifierReplacement(values));
  };
  /**
   * Generates a list of objects containing timing and duration information about each
   * segment needed to generate segment uris and the complete segment object
   *
   * @param {Object} attributes
   *        Object containing all inherited attributes from parent elements with attribute
   *        names as keys
   * @param {Object[]|undefined} segmentTimeline
   *        List of objects representing the attributes of each S element contained within
   *        the SegmentTimeline element
   * @return {{number: number, duration: number, time: number, timeline: number}[]}
   *         List of Objects with segment timing and duration info
   */

  var parseTemplateInfo = function parseTemplateInfo(attributes, segmentTimeline) {
    if (!attributes.duration && !segmentTimeline) {
      // if neither @duration or SegmentTimeline are present, then there shall be exactly
      // one media segment
      return [{
        number: attributes.startNumber || 1,
        duration: attributes.sourceDuration,
        time: 0,
        timeline: attributes.periodIndex
      }];
    }

    if (attributes.duration) {
      return parseByDuration(attributes);
    }

    return parseByTimeline(attributes, segmentTimeline);
  };
  /**
   * Generates a list of segments using information provided by the SegmentTemplate element
   *
   * @param {Object} attributes
   *        Object containing all inherited attributes from parent elements with attribute
   *        names as keys
   * @param {Object[]|undefined} segmentTimeline
   *        List of objects representing the attributes of each S element contained within
   *        the SegmentTimeline element
   * @return {Object[]}
   *         List of segment objects
   */

  var segmentsFromTemplate = function segmentsFromTemplate(attributes, segmentTimeline) {
    var templateValues = {
      RepresentationID: attributes.id,
      Bandwidth: attributes.bandwidth || 0
    };
    var _attributes$initializ = attributes.initialization,
        initialization = _attributes$initializ === void 0 ? {
      sourceURL: '',
      range: ''
    } : _attributes$initializ;
    var mapSegment = urlTypeToSegment({
      baseUrl: attributes.baseUrl,
      source: constructTemplateUrl(initialization.sourceURL, templateValues),
      range: initialization.range
    });
    var segments = parseTemplateInfo(attributes, segmentTimeline);
    return segments.map(function (segment) {
      templateValues.Number = segment.number;
      templateValues.Time = segment.time;
      var uri = constructTemplateUrl(attributes.media || '', templateValues);
      return {
        uri: uri,
        timeline: segment.timeline,
        duration: segment.duration,
        resolvedUri: resolveUrl(attributes.baseUrl || '', uri),
        map: mapSegment,
        number: segment.number
      };
    });
  };

  /**
   * Converts a <SegmentUrl> (of type URLType from the DASH spec 5.3.9.2 Table 14)
   * to an object that matches the output of a segment in videojs/mpd-parser
   *
   * @param {Object} attributes
   *   Object containing all inherited attributes from parent elements with attribute
   *   names as keys
   * @param {Object} segmentUrl
   *   <SegmentURL> node to translate into a segment object
   * @return {Object} translated segment object
   */

  var SegmentURLToSegmentObject = function SegmentURLToSegmentObject(attributes, segmentUrl) {
    var baseUrl = attributes.baseUrl,
        _attributes$initializ = attributes.initialization,
        initialization = _attributes$initializ === void 0 ? {} : _attributes$initializ;
    var initSegment = urlTypeToSegment({
      baseUrl: baseUrl,
      source: initialization.sourceURL,
      range: initialization.range
    });
    var segment = urlTypeToSegment({
      baseUrl: baseUrl,
      source: segmentUrl.media,
      range: segmentUrl.mediaRange
    });
    segment.map = initSegment;
    return segment;
  };
  /**
   * Generates a list of segments using information provided by the SegmentList element
   * SegmentList (DASH SPEC Section 5.3.9.3.2) contains a set of <SegmentURL> nodes.  Each
   * node should be translated into segment.
   *
   * @param {Object} attributes
   *   Object containing all inherited attributes from parent elements with attribute
   *   names as keys
   * @param {Object[]|undefined} segmentTimeline
   *        List of objects representing the attributes of each S element contained within
   *        the SegmentTimeline element
   * @return {Object.<Array>} list of segments
   */


  var segmentsFromList = function segmentsFromList(attributes, segmentTimeline) {
    var duration = attributes.duration,
        _attributes$segmentUr = attributes.segmentUrls,
        segmentUrls = _attributes$segmentUr === void 0 ? [] : _attributes$segmentUr; // Per spec (5.3.9.2.1) no way to determine segment duration OR
    // if both SegmentTimeline and @duration are defined, it is outside of spec.

    if (!duration && !segmentTimeline || duration && segmentTimeline) {
      throw new Error(errors.SEGMENT_TIME_UNSPECIFIED);
    }

    var segmentUrlMap = segmentUrls.map(function (segmentUrlObject) {
      return SegmentURLToSegmentObject(attributes, segmentUrlObject);
    });
    var segmentTimeInfo;

    if (duration) {
      segmentTimeInfo = parseByDuration(attributes);
    }

    if (segmentTimeline) {
      segmentTimeInfo = parseByTimeline(attributes, segmentTimeline);
    }

    var segments = segmentTimeInfo.map(function (segmentTime, index) {
      if (segmentUrlMap[index]) {
        var segment = segmentUrlMap[index];
        segment.timeline = segmentTime.timeline;
        segment.duration = segmentTime.duration;
        segment.number = segmentTime.number;
        return segment;
      } // Since we're mapping we should get rid of any blank segments (in case
      // the given SegmentTimeline is handling for more elements than we have
      // SegmentURLs for).

    }).filter(function (segment) {
      return segment;
    });
    return segments;
  };

  var generateSegments = function generateSegments(_ref) {
    var attributes = _ref.attributes,
        segmentInfo = _ref.segmentInfo;
    var segmentAttributes;
    var segmentsFn;

    if (segmentInfo.template) {
      segmentsFn = segmentsFromTemplate;
      segmentAttributes = merge(attributes, segmentInfo.template);
    } else if (segmentInfo.base) {
      segmentsFn = segmentsFromBase;
      segmentAttributes = merge(attributes, segmentInfo.base);
    } else if (segmentInfo.list) {
      segmentsFn = segmentsFromList;
      segmentAttributes = merge(attributes, segmentInfo.list);
    }

    var segmentsInfo = {
      attributes: attributes
    };

    if (!segmentsFn) {
      return segmentsInfo;
    }

    var segments = segmentsFn(segmentAttributes, segmentInfo.timeline); // The @duration attribute will be used to determin the playlist's targetDuration which
    // must be in seconds. Since we've generated the segment list, we no longer need
    // @duration to be in @timescale units, so we can convert it here.

    if (segmentAttributes.duration) {
      var _segmentAttributes = segmentAttributes,
          duration = _segmentAttributes.duration,
          _segmentAttributes$ti = _segmentAttributes.timescale,
          timescale = _segmentAttributes$ti === void 0 ? 1 : _segmentAttributes$ti;
      segmentAttributes.duration = duration / timescale;
    } else if (segments.length) {
      // if there is no @duration attribute, use the largest segment duration as
      // as target duration
      segmentAttributes.duration = segments.reduce(function (max, segment) {
        return Math.max(max, Math.ceil(segment.duration));
      }, 0);
    } else {
      segmentAttributes.duration = 0;
    }

    segmentsInfo.attributes = segmentAttributes;
    segmentsInfo.segments = segments; // This is a sidx box without actual segment information

    if (segmentInfo.base && segmentAttributes.indexRange) {
      segmentsInfo.sidx = segments[0];
      segmentsInfo.segments = [];
    }

    return segmentsInfo;
  };
  var toPlaylists = function toPlaylists(representations) {
    return representations.map(generateSegments);
  };

  var findChildren = function findChildren(element, name) {
    return from(element.childNodes).filter(function (_ref) {
      var tagName = _ref.tagName;
      return tagName === name;
    });
  };
  var getContent = function getContent(element) {
    return element.textContent.trim();
  };

  var parseDuration = function parseDuration(str) {
    var SECONDS_IN_YEAR = 365 * 24 * 60 * 60;
    var SECONDS_IN_MONTH = 30 * 24 * 60 * 60;
    var SECONDS_IN_DAY = 24 * 60 * 60;
    var SECONDS_IN_HOUR = 60 * 60;
    var SECONDS_IN_MIN = 60; // P10Y10M10DT10H10M10.1S

    var durationRegex = /P(?:(\d*)Y)?(?:(\d*)M)?(?:(\d*)D)?(?:T(?:(\d*)H)?(?:(\d*)M)?(?:([\d.]*)S)?)?/;
    var match = durationRegex.exec(str);

    if (!match) {
      return 0;
    }

    var _match$slice = match.slice(1),
        year = _match$slice[0],
        month = _match$slice[1],
        day = _match$slice[2],
        hour = _match$slice[3],
        minute = _match$slice[4],
        second = _match$slice[5];

    return parseFloat(year || 0) * SECONDS_IN_YEAR + parseFloat(month || 0) * SECONDS_IN_MONTH + parseFloat(day || 0) * SECONDS_IN_DAY + parseFloat(hour || 0) * SECONDS_IN_HOUR + parseFloat(minute || 0) * SECONDS_IN_MIN + parseFloat(second || 0);
  };
  var parseDate = function parseDate(str) {
    // Date format without timezone according to ISO 8601
    // YYY-MM-DDThh:mm:ss.ssssss
    var dateRegex = /^\d+-\d+-\d+T\d+:\d+:\d+(\.\d+)?$/; // If the date string does not specifiy a timezone, we must specifiy UTC. This is
    // expressed by ending with 'Z'

    if (dateRegex.test(str)) {
      str += 'Z';
    }

    return Date.parse(str);
  };

  var parsers = {
    /**
     * Specifies the duration of the entire Media Presentation. Format is a duration string
     * as specified in ISO 8601
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The duration in seconds
     */
    mediaPresentationDuration: function mediaPresentationDuration(value) {
      return parseDuration(value);
    },

    /**
     * Specifies the Segment availability start time for all Segments referred to in this
     * MPD. For a dynamic manifest, it specifies the anchor for the earliest availability
     * time. Format is a date string as specified in ISO 8601
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The date as seconds from unix epoch
     */
    availabilityStartTime: function availabilityStartTime(value) {
      return parseDate(value) / 1000;
    },

    /**
     * Specifies the smallest period between potential changes to the MPD. Format is a
     * duration string as specified in ISO 8601
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The duration in seconds
     */
    minimumUpdatePeriod: function minimumUpdatePeriod(value) {
      return parseDuration(value);
    },

    /**
     * Specifies the duration of the smallest time shifting buffer for any Representation
     * in the MPD. Format is a duration string as specified in ISO 8601
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The duration in seconds
     */
    timeShiftBufferDepth: function timeShiftBufferDepth(value) {
      return parseDuration(value);
    },

    /**
     * Specifies the PeriodStart time of the Period relative to the availabilityStarttime.
     * Format is a duration string as specified in ISO 8601
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The duration in seconds
     */
    start: function start(value) {
      return parseDuration(value);
    },

    /**
     * Specifies the width of the visual presentation
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The parsed width
     */
    width: function width(value) {
      return parseInt(value, 10);
    },

    /**
     * Specifies the height of the visual presentation
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The parsed height
     */
    height: function height(value) {
      return parseInt(value, 10);
    },

    /**
     * Specifies the bitrate of the representation
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The parsed bandwidth
     */
    bandwidth: function bandwidth(value) {
      return parseInt(value, 10);
    },

    /**
     * Specifies the number of the first Media Segment in this Representation in the Period
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The parsed number
     */
    startNumber: function startNumber(value) {
      return parseInt(value, 10);
    },

    /**
     * Specifies the timescale in units per seconds
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The aprsed timescale
     */
    timescale: function timescale(value) {
      return parseInt(value, 10);
    },

    /**
     * Specifies the constant approximate Segment duration
     * NOTE: The <Period> element also contains an @duration attribute. This duration
     *       specifies the duration of the Period. This attribute is currently not
     *       supported by the rest of the parser, however we still check for it to prevent
     *       errors.
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The parsed duration
     */
    duration: function duration(value) {
      var parsedValue = parseInt(value, 10);

      if (isNaN(parsedValue)) {
        return parseDuration(value);
      }

      return parsedValue;
    },

    /**
     * Specifies the Segment duration, in units of the value of the @timescale.
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The parsed duration
     */
    d: function d(value) {
      return parseInt(value, 10);
    },

    /**
     * Specifies the MPD start time, in @timescale units, the first Segment in the series
     * starts relative to the beginning of the Period
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The parsed time
     */
    t: function t(value) {
      return parseInt(value, 10);
    },

    /**
     * Specifies the repeat count of the number of following contiguous Segments with the
     * same duration expressed by the value of @d
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {number}
     *         The parsed number
     */
    r: function r(value) {
      return parseInt(value, 10);
    },

    /**
     * Default parser for all other attributes. Acts as a no-op and just returns the value
     * as a string
     *
     * @param {string} value
     *        value of attribute as a string
     * @return {string}
     *         Unparsed value
     */
    DEFAULT: function DEFAULT(value) {
      return value;
    }
  };
  /**
   * Gets all the attributes and values of the provided node, parses attributes with known
   * types, and returns an object with attribute names mapped to values.
   *
   * @param {Node} el
   *        The node to parse attributes from
   * @return {Object}
   *         Object with all attributes of el parsed
   */

  var parseAttributes = function parseAttributes(el) {
    if (!(el && el.attributes)) {
      return {};
    }

    return from(el.attributes).reduce(function (a, e) {
      var parseFn = parsers[e.name] || parsers.DEFAULT;
      a[e.name] = parseFn(e.value);
      return a;
    }, {});
  };

  function decodeB64ToUint8Array(b64Text) {
    var decodedString = window_1.atob(b64Text);
    var array = new Uint8Array(decodedString.length);

    for (var i = 0; i < decodedString.length; i++) {
      array[i] = decodedString.charCodeAt(i);
    }

    return array;
  }

  var keySystemsMap = {
    'urn:uuid:1077efec-c0b2-4d02-ace3-3c1e52e2fb4b': 'org.w3.clearkey',
    'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed': 'com.widevine.alpha',
    'urn:uuid:9a04f079-9840-4286-ab92-e65be0885f95': 'com.microsoft.playready',
    'urn:uuid:f239e769-efa3-4850-9c16-a903c6932efb': 'com.adobe.primetime'
  };
  /**
   * Builds a list of urls that is the product of the reference urls and BaseURL values
   *
   * @param {string[]} referenceUrls
   *        List of reference urls to resolve to
   * @param {Node[]} baseUrlElements
   *        List of BaseURL nodes from the mpd
   * @return {string[]}
   *         List of resolved urls
   */

  var buildBaseUrls = function buildBaseUrls(referenceUrls, baseUrlElements) {
    if (!baseUrlElements.length) {
      return referenceUrls;
    }

    return flatten(referenceUrls.map(function (reference) {
      return baseUrlElements.map(function (baseUrlElement) {
        return resolveUrl(reference, getContent(baseUrlElement));
      });
    }));
  };
  /**
   * Contains all Segment information for its containing AdaptationSet
   *
   * @typedef {Object} SegmentInformation
   * @property {Object|undefined} template
   *           Contains the attributes for the SegmentTemplate node
   * @property {Object[]|undefined} timeline
   *           Contains a list of atrributes for each S node within the SegmentTimeline node
   * @property {Object|undefined} list
   *           Contains the attributes for the SegmentList node
   * @property {Object|undefined} base
   *           Contains the attributes for the SegmentBase node
   */

  /**
   * Returns all available Segment information contained within the AdaptationSet node
   *
   * @param {Node} adaptationSet
   *        The AdaptationSet node to get Segment information from
   * @return {SegmentInformation}
   *         The Segment information contained within the provided AdaptationSet
   */

  var getSegmentInformation = function getSegmentInformation(adaptationSet) {
    var segmentTemplate = findChildren(adaptationSet, 'SegmentTemplate')[0];
    var segmentList = findChildren(adaptationSet, 'SegmentList')[0];
    var segmentUrls = segmentList && findChildren(segmentList, 'SegmentURL').map(function (s) {
      return merge({
        tag: 'SegmentURL'
      }, parseAttributes(s));
    });
    var segmentBase = findChildren(adaptationSet, 'SegmentBase')[0];
    var segmentTimelineParentNode = segmentList || segmentTemplate;
    var segmentTimeline = segmentTimelineParentNode && findChildren(segmentTimelineParentNode, 'SegmentTimeline')[0];
    var segmentInitializationParentNode = segmentList || segmentBase || segmentTemplate;
    var segmentInitialization = segmentInitializationParentNode && findChildren(segmentInitializationParentNode, 'Initialization')[0]; // SegmentTemplate is handled slightly differently, since it can have both
    // @initialization and an <Initialization> node.  @initialization can be templated,
    // while the node can have a url and range specified.  If the <SegmentTemplate> has
    // both @initialization and an <Initialization> subelement we opt to override with
    // the node, as this interaction is not defined in the spec.

    var template = segmentTemplate && parseAttributes(segmentTemplate);

    if (template && segmentInitialization) {
      template.initialization = segmentInitialization && parseAttributes(segmentInitialization);
    } else if (template && template.initialization) {
      // If it is @initialization we convert it to an object since this is the format that
      // later functions will rely on for the initialization segment.  This is only valid
      // for <SegmentTemplate>
      template.initialization = {
        sourceURL: template.initialization
      };
    }

    var segmentInfo = {
      template: template,
      timeline: segmentTimeline && findChildren(segmentTimeline, 'S').map(function (s) {
        return parseAttributes(s);
      }),
      list: segmentList && merge(parseAttributes(segmentList), {
        segmentUrls: segmentUrls,
        initialization: parseAttributes(segmentInitialization)
      }),
      base: segmentBase && merge(parseAttributes(segmentBase), {
        initialization: parseAttributes(segmentInitialization)
      })
    };
    Object.keys(segmentInfo).forEach(function (key) {
      if (!segmentInfo[key]) {
        delete segmentInfo[key];
      }
    });
    return segmentInfo;
  };
  /**
   * Contains Segment information and attributes needed to construct a Playlist object
   * from a Representation
   *
   * @typedef {Object} RepresentationInformation
   * @property {SegmentInformation} segmentInfo
   *           Segment information for this Representation
   * @property {Object} attributes
   *           Inherited attributes for this Representation
   */

  /**
   * Maps a Representation node to an object containing Segment information and attributes
   *
   * @name inheritBaseUrlsCallback
   * @function
   * @param {Node} representation
   *        Representation node from the mpd
   * @return {RepresentationInformation}
   *         Representation information needed to construct a Playlist object
   */

  /**
   * Returns a callback for Array.prototype.map for mapping Representation nodes to
   * Segment information and attributes using inherited BaseURL nodes.
   *
   * @param {Object} adaptationSetAttributes
   *        Contains attributes inherited by the AdaptationSet
   * @param {string[]} adaptationSetBaseUrls
   *        Contains list of resolved base urls inherited by the AdaptationSet
   * @param {SegmentInformation} adaptationSetSegmentInfo
   *        Contains Segment information for the AdaptationSet
   * @return {inheritBaseUrlsCallback}
   *         Callback map function
   */

  var inheritBaseUrls = function inheritBaseUrls(adaptationSetAttributes, adaptationSetBaseUrls, adaptationSetSegmentInfo) {
    return function (representation) {
      var repBaseUrlElements = findChildren(representation, 'BaseURL');
      var repBaseUrls = buildBaseUrls(adaptationSetBaseUrls, repBaseUrlElements);
      var attributes = merge(adaptationSetAttributes, parseAttributes(representation));
      var representationSegmentInfo = getSegmentInformation(representation);
      return repBaseUrls.map(function (baseUrl) {
        return {
          segmentInfo: merge(adaptationSetSegmentInfo, representationSegmentInfo),
          attributes: merge(attributes, {
            baseUrl: baseUrl
          })
        };
      });
    };
  };
  /**
   * Tranforms a series of content protection nodes to
   * an object containing pssh data by key system
   *
   * @param {Node[]} contentProtectionNodes
   *        Content protection nodes
   * @return {Object}
   *        Object containing pssh data by key system
   */

  var generateKeySystemInformation = function generateKeySystemInformation(contentProtectionNodes) {
    return contentProtectionNodes.reduce(function (acc, node) {
      var attributes = parseAttributes(node);
      var keySystem = keySystemsMap[attributes.schemeIdUri];

      if (keySystem) {
        acc[keySystem] = {
          attributes: attributes
        };
        var psshNode = findChildren(node, 'cenc:pssh')[0];

        if (psshNode) {
          var pssh = getContent(psshNode);
          var psshBuffer = pssh && decodeB64ToUint8Array(pssh);
          acc[keySystem].pssh = psshBuffer;
        }
      }

      return acc;
    }, {});
  };
  /**
   * Maps an AdaptationSet node to a list of Representation information objects
   *
   * @name toRepresentationsCallback
   * @function
   * @param {Node} adaptationSet
   *        AdaptationSet node from the mpd
   * @return {RepresentationInformation[]}
   *         List of objects containing Representaion information
   */

  /**
   * Returns a callback for Array.prototype.map for mapping AdaptationSet nodes to a list of
   * Representation information objects
   *
   * @param {Object} periodAttributes
   *        Contains attributes inherited by the Period
   * @param {string[]} periodBaseUrls
   *        Contains list of resolved base urls inherited by the Period
   * @param {string[]} periodSegmentInfo
   *        Contains Segment Information at the period level
   * @return {toRepresentationsCallback}
   *         Callback map function
   */


  var toRepresentations = function toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo) {
    return function (adaptationSet) {
      var adaptationSetAttributes = parseAttributes(adaptationSet);
      var adaptationSetBaseUrls = buildBaseUrls(periodBaseUrls, findChildren(adaptationSet, 'BaseURL'));
      var role = findChildren(adaptationSet, 'Role')[0];
      var roleAttributes = {
        role: parseAttributes(role)
      };
      var attrs = merge(periodAttributes, adaptationSetAttributes, roleAttributes);
      var contentProtection = generateKeySystemInformation(findChildren(adaptationSet, 'ContentProtection'));

      if (Object.keys(contentProtection).length) {
        attrs = merge(attrs, {
          contentProtection: contentProtection
        });
      }

      var segmentInfo = getSegmentInformation(adaptationSet);
      var representations = findChildren(adaptationSet, 'Representation');
      var adaptationSetSegmentInfo = merge(periodSegmentInfo, segmentInfo);
      return flatten(representations.map(inheritBaseUrls(attrs, adaptationSetBaseUrls, adaptationSetSegmentInfo)));
    };
  };
  /**
   * Maps an Period node to a list of Representation inforamtion objects for all
   * AdaptationSet nodes contained within the Period
   *
   * @name toAdaptationSetsCallback
   * @function
   * @param {Node} period
   *        Period node from the mpd
   * @param {number} periodIndex
   *        Index of the Period within the mpd
   * @return {RepresentationInformation[]}
   *         List of objects containing Representaion information
   */

  /**
   * Returns a callback for Array.prototype.map for mapping Period nodes to a list of
   * Representation information objects
   *
   * @param {Object} mpdAttributes
   *        Contains attributes inherited by the mpd
   * @param {string[]} mpdBaseUrls
   *        Contains list of resolved base urls inherited by the mpd
   * @return {toAdaptationSetsCallback}
   *         Callback map function
   */

  var toAdaptationSets = function toAdaptationSets(mpdAttributes, mpdBaseUrls) {
    return function (period, index) {
      var periodBaseUrls = buildBaseUrls(mpdBaseUrls, findChildren(period, 'BaseURL'));
      var periodAtt = parseAttributes(period);
      var parsedPeriodId = parseInt(periodAtt.id, 10); // fallback to mapping index if Period@id is not a number

      var periodIndex = window_1.isNaN(parsedPeriodId) ? index : parsedPeriodId;
      var periodAttributes = merge(mpdAttributes, {
        periodIndex: periodIndex
      });
      var adaptationSets = findChildren(period, 'AdaptationSet');
      var periodSegmentInfo = getSegmentInformation(period);
      return flatten(adaptationSets.map(toRepresentations(periodAttributes, periodBaseUrls, periodSegmentInfo)));
    };
  };
  /**
   * Traverses the mpd xml tree to generate a list of Representation information objects
   * that have inherited attributes from parent nodes
   *
   * @param {Node} mpd
   *        The root node of the mpd
   * @param {Object} options
   *        Available options for inheritAttributes
   * @param {string} options.manifestUri
   *        The uri source of the mpd
   * @param {number} options.NOW
   *        Current time per DASH IOP.  Default is current time in ms since epoch
   * @param {number} options.clientOffset
   *        Client time difference from NOW (in milliseconds)
   * @return {RepresentationInformation[]}
   *         List of objects containing Representation information
   */

  var inheritAttributes = function inheritAttributes(mpd, options) {
    if (options === void 0) {
      options = {};
    }

    var _options = options,
        _options$manifestUri = _options.manifestUri,
        manifestUri = _options$manifestUri === void 0 ? '' : _options$manifestUri,
        _options$NOW = _options.NOW,
        NOW = _options$NOW === void 0 ? Date.now() : _options$NOW,
        _options$clientOffset = _options.clientOffset,
        clientOffset = _options$clientOffset === void 0 ? 0 : _options$clientOffset;
    var periods = findChildren(mpd, 'Period');

    if (!periods.length) {
      throw new Error(errors.INVALID_NUMBER_OF_PERIOD);
    }

    var mpdAttributes = parseAttributes(mpd);
    var mpdBaseUrls = buildBaseUrls([manifestUri], findChildren(mpd, 'BaseURL'));
    mpdAttributes.sourceDuration = mpdAttributes.mediaPresentationDuration || 0;
    mpdAttributes.NOW = NOW;
    mpdAttributes.clientOffset = clientOffset;
    return flatten(periods.map(toAdaptationSets(mpdAttributes, mpdBaseUrls)));
  };

  var stringToMpdXml = function stringToMpdXml(manifestString) {
    if (manifestString === '') {
      throw new Error(errors.DASH_EMPTY_MANIFEST);
    }

    var parser = new window_1.DOMParser();
    var xml = parser.parseFromString(manifestString, 'application/xml');
    var mpd = xml && xml.documentElement.tagName === 'MPD' ? xml.documentElement : null;

    if (!mpd || mpd && mpd.getElementsByTagName('parsererror').length > 0) {
      throw new Error(errors.DASH_INVALID_XML);
    }

    return mpd;
  };
  var parse = function parse(manifestString, options) {
    if (options === void 0) {
      options = {};
    }

    return toM3u8(toPlaylists(inheritAttributes(stringToMpdXml(manifestString), options)), options.sidxMapping);
  };

  /*! @name m3u8-parser @version 4.4.0 @license Apache-2.0 */

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  /**
   * @file stream.js
   */

  /**
   * A lightweight readable stream implementation that handles event dispatching.
   *
   * @class Stream
   */
  var Stream =
  /*#__PURE__*/
  function () {
    function Stream() {
      this.listeners = {};
    }
    /**
     * Add a listener for a specified event type.
     *
     * @param {string} type the event name
     * @param {Function} listener the callback to be invoked when an event of
     * the specified type occurs
     */


    var _proto = Stream.prototype;

    _proto.on = function on(type, listener) {
      if (!this.listeners[type]) {
        this.listeners[type] = [];
      }

      this.listeners[type].push(listener);
    }
    /**
     * Remove a listener for a specified event type.
     *
     * @param {string} type the event name
     * @param {Function} listener  a function previously registered for this
     * type of event through `on`
     * @return {boolean} if we could turn it off or not
     */
    ;

    _proto.off = function off(type, listener) {
      if (!this.listeners[type]) {
        return false;
      }

      var index = this.listeners[type].indexOf(listener);
      this.listeners[type].splice(index, 1);
      return index > -1;
    }
    /**
     * Trigger an event of the specified type on this stream. Any additional
     * arguments to this function are passed as parameters to event listeners.
     *
     * @param {string} type the event name
     */
    ;

    _proto.trigger = function trigger(type) {
      var callbacks = this.listeners[type];
      var i;
      var length;
      var args;

      if (!callbacks) {
        return;
      } // Slicing the arguments on every invocation of this method
      // can add a significant amount of overhead. Avoid the
      // intermediate object creation for the common case of a
      // single callback argument


      if (arguments.length === 2) {
        length = callbacks.length;

        for (i = 0; i < length; ++i) {
          callbacks[i].call(this, arguments[1]);
        }
      } else {
        args = Array.prototype.slice.call(arguments, 1);
        length = callbacks.length;

        for (i = 0; i < length; ++i) {
          callbacks[i].apply(this, args);
        }
      }
    }
    /**
     * Destroys the stream and cleans up.
     */
    ;

    _proto.dispose = function dispose() {
      this.listeners = {};
    }
    /**
     * Forwards all `data` events on this stream to the destination stream. The
     * destination stream should provide a method `push` to receive the data
     * events as they arrive.
     *
     * @param {Stream} destination the stream that will receive all `data` events
     * @see http://nodejs.org/api/stream.html#stream_readable_pipe_destination_options
     */
    ;

    _proto.pipe = function pipe(destination) {
      this.on('data', function (data) {
        destination.push(data);
      });
    };

    return Stream;
  }();

  /**
   * A stream that buffers string input and generates a `data` event for each
   * line.
   *
   * @class LineStream
   * @extends Stream
   */

  var LineStream =
  /*#__PURE__*/
  function (_Stream) {
    _inheritsLoose(LineStream, _Stream);

    function LineStream() {
      var _this;

      _this = _Stream.call(this) || this;
      _this.buffer = '';
      return _this;
    }
    /**
     * Add new data to be parsed.
     *
     * @param {string} data the text to process
     */


    var _proto = LineStream.prototype;

    _proto.push = function push(data) {
      var nextNewline;
      this.buffer += data;
      nextNewline = this.buffer.indexOf('\n');

      for (; nextNewline > -1; nextNewline = this.buffer.indexOf('\n')) {
        this.trigger('data', this.buffer.substring(0, nextNewline));
        this.buffer = this.buffer.substring(nextNewline + 1);
      }
    };

    return LineStream;
  }(Stream);

  /**
   * "forgiving" attribute list psuedo-grammar:
   * attributes -> keyvalue (',' keyvalue)*
   * keyvalue   -> key '=' value
   * key        -> [^=]*
   * value      -> '"' [^"]* '"' | [^,]*
   */

  var attributeSeparator = function attributeSeparator() {
    var key = '[^=]*';
    var value = '"[^"]*"|[^,]*';
    var keyvalue = '(?:' + key + ')=(?:' + value + ')';
    return new RegExp('(?:^|,)(' + keyvalue + ')');
  };
  /**
   * Parse attributes from a line given the separator
   *
   * @param {string} attributes the attribute line to parse
   */


  var parseAttributes$1 = function parseAttributes(attributes) {
    // split the string using attributes as the separator
    var attrs = attributes.split(attributeSeparator());
    var result = {};
    var i = attrs.length;
    var attr;

    while (i--) {
      // filter out unmatched portions of the string
      if (attrs[i] === '') {
        continue;
      } // split the key and value


      attr = /([^=]*)=(.*)/.exec(attrs[i]).slice(1); // trim whitespace and remove optional quotes around the value

      attr[0] = attr[0].replace(/^\s+|\s+$/g, '');
      attr[1] = attr[1].replace(/^\s+|\s+$/g, '');
      attr[1] = attr[1].replace(/^['"](.*)['"]$/g, '$1');
      result[attr[0]] = attr[1];
    }

    return result;
  };
  /**
   * A line-level M3U8 parser event stream. It expects to receive input one
   * line at a time and performs a context-free parse of its contents. A stream
   * interpretation of a manifest can be useful if the manifest is expected to
   * be too large to fit comfortably into memory or the entirety of the input
   * is not immediately available. Otherwise, it's probably much easier to work
   * with a regular `Parser` object.
   *
   * Produces `data` events with an object that captures the parser's
   * interpretation of the input. That object has a property `tag` that is one
   * of `uri`, `comment`, or `tag`. URIs only have a single additional
   * property, `line`, which captures the entirety of the input without
   * interpretation. Comments similarly have a single additional property
   * `text` which is the input without the leading `#`.
   *
   * Tags always have a property `tagType` which is the lower-cased version of
   * the M3U8 directive without the `#EXT` or `#EXT-X-` prefix. For instance,
   * `#EXT-X-MEDIA-SEQUENCE` becomes `media-sequence` when parsed. Unrecognized
   * tags are given the tag type `unknown` and a single additional property
   * `data` with the remainder of the input.
   *
   * @class ParseStream
   * @extends Stream
   */


  var ParseStream =
  /*#__PURE__*/
  function (_Stream) {
    _inheritsLoose(ParseStream, _Stream);

    function ParseStream() {
      var _this;

      _this = _Stream.call(this) || this;
      _this.customParsers = [];
      _this.tagMappers = [];
      return _this;
    }
    /**
     * Parses an additional line of input.
     *
     * @param {string} line a single line of an M3U8 file to parse
     */


    var _proto = ParseStream.prototype;

    _proto.push = function push(line) {
      var _this2 = this;

      var match;
      var event; // strip whitespace

      line = line.trim();

      if (line.length === 0) {
        // ignore empty lines
        return;
      } // URIs


      if (line[0] !== '#') {
        this.trigger('data', {
          type: 'uri',
          uri: line
        });
        return;
      } // map tags


      var newLines = this.tagMappers.reduce(function (acc, mapper) {
        var mappedLine = mapper(line); // skip if unchanged

        if (mappedLine === line) {
          return acc;
        }

        return acc.concat([mappedLine]);
      }, [line]);
      newLines.forEach(function (newLine) {
        for (var i = 0; i < _this2.customParsers.length; i++) {
          if (_this2.customParsers[i].call(_this2, newLine)) {
            return;
          }
        } // Comments


        if (newLine.indexOf('#EXT') !== 0) {
          _this2.trigger('data', {
            type: 'comment',
            text: newLine.slice(1)
          });

          return;
        } // strip off any carriage returns here so the regex matching
        // doesn't have to account for them.


        newLine = newLine.replace('\r', ''); // Tags

        match = /^#EXTM3U/.exec(newLine);

        if (match) {
          _this2.trigger('data', {
            type: 'tag',
            tagType: 'm3u'
          });

          return;
        }

        match = /^#EXTINF:?([0-9\.]*)?,?(.*)?$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'inf'
          };

          if (match[1]) {
            event.duration = parseFloat(match[1]);
          }

          if (match[2]) {
            event.title = match[2];
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-TARGETDURATION:?([0-9.]*)?/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'targetduration'
          };

          if (match[1]) {
            event.duration = parseInt(match[1], 10);
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#ZEN-TOTAL-DURATION:?([0-9.]*)?/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'totalduration'
          };

          if (match[1]) {
            event.duration = parseInt(match[1], 10);
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-VERSION:?([0-9.]*)?/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'version'
          };

          if (match[1]) {
            event.version = parseInt(match[1], 10);
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-MEDIA-SEQUENCE:?(\-?[0-9.]*)?/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'media-sequence'
          };

          if (match[1]) {
            event.number = parseInt(match[1], 10);
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-DISCONTINUITY-SEQUENCE:?(\-?[0-9.]*)?/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'discontinuity-sequence'
          };

          if (match[1]) {
            event.number = parseInt(match[1], 10);
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-PLAYLIST-TYPE:?(.*)?$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'playlist-type'
          };

          if (match[1]) {
            event.playlistType = match[1];
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-BYTERANGE:?([0-9.]*)?@?([0-9.]*)?/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'byterange'
          };

          if (match[1]) {
            event.length = parseInt(match[1], 10);
          }

          if (match[2]) {
            event.offset = parseInt(match[2], 10);
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-ALLOW-CACHE:?(YES|NO)?/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'allow-cache'
          };

          if (match[1]) {
            event.allowed = !/NO/.test(match[1]);
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-MAP:?(.*)$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'map'
          };

          if (match[1]) {
            var attributes = parseAttributes$1(match[1]);

            if (attributes.URI) {
              event.uri = attributes.URI;
            }

            if (attributes.BYTERANGE) {
              var _attributes$BYTERANGE = attributes.BYTERANGE.split('@'),
                  length = _attributes$BYTERANGE[0],
                  offset = _attributes$BYTERANGE[1];

              event.byterange = {};

              if (length) {
                event.byterange.length = parseInt(length, 10);
              }

              if (offset) {
                event.byterange.offset = parseInt(offset, 10);
              }
            }
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-STREAM-INF:?(.*)$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'stream-inf'
          };

          if (match[1]) {
            event.attributes = parseAttributes$1(match[1]);

            if (event.attributes.RESOLUTION) {
              var split = event.attributes.RESOLUTION.split('x');
              var resolution = {};

              if (split[0]) {
                resolution.width = parseInt(split[0], 10);
              }

              if (split[1]) {
                resolution.height = parseInt(split[1], 10);
              }

              event.attributes.RESOLUTION = resolution;
            }

            if (event.attributes.BANDWIDTH) {
              event.attributes.BANDWIDTH = parseInt(event.attributes.BANDWIDTH, 10);
            }

            if (event.attributes['PROGRAM-ID']) {
              event.attributes['PROGRAM-ID'] = parseInt(event.attributes['PROGRAM-ID'], 10);
            }
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-MEDIA:?(.*)$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'media'
          };

          if (match[1]) {
            event.attributes = parseAttributes$1(match[1]);
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-ENDLIST/.exec(newLine);

        if (match) {
          _this2.trigger('data', {
            type: 'tag',
            tagType: 'endlist'
          });

          return;
        }

        match = /^#EXT-X-DISCONTINUITY/.exec(newLine);

        if (match) {
          _this2.trigger('data', {
            type: 'tag',
            tagType: 'discontinuity'
          });

          return;
        }

        match = /^#EXT-X-PROGRAM-DATE-TIME:?(.*)$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'program-date-time'
          };

          if (match[1]) {
            event.dateTimeString = match[1];
            event.dateTimeObject = new Date(match[1]);
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-KEY:?(.*)$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'key'
          };

          if (match[1]) {
            event.attributes = parseAttributes$1(match[1]); // parse the IV string into a Uint32Array

            if (event.attributes.IV) {
              if (event.attributes.IV.substring(0, 2).toLowerCase() === '0x') {
                event.attributes.IV = event.attributes.IV.substring(2);
              }

              event.attributes.IV = event.attributes.IV.match(/.{8}/g);
              event.attributes.IV[0] = parseInt(event.attributes.IV[0], 16);
              event.attributes.IV[1] = parseInt(event.attributes.IV[1], 16);
              event.attributes.IV[2] = parseInt(event.attributes.IV[2], 16);
              event.attributes.IV[3] = parseInt(event.attributes.IV[3], 16);
              event.attributes.IV = new Uint32Array(event.attributes.IV);
            }
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-START:?(.*)$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'start'
          };

          if (match[1]) {
            event.attributes = parseAttributes$1(match[1]);
            event.attributes['TIME-OFFSET'] = parseFloat(event.attributes['TIME-OFFSET']);
            event.attributes.PRECISE = /YES/.test(event.attributes.PRECISE);
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-CUE-OUT-CONT:?(.*)?$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'cue-out-cont'
          };

          if (match[1]) {
            event.data = match[1];
          } else {
            event.data = '';
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-CUE-OUT:?(.*)?$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'cue-out'
          };

          if (match[1]) {
            event.data = match[1];
          } else {
            event.data = '';
          }

          _this2.trigger('data', event);

          return;
        }

        match = /^#EXT-X-CUE-IN:?(.*)?$/.exec(newLine);

        if (match) {
          event = {
            type: 'tag',
            tagType: 'cue-in'
          };

          if (match[1]) {
            event.data = match[1];
          } else {
            event.data = '';
          }

          _this2.trigger('data', event);

          return;
        } // unknown tag type


        _this2.trigger('data', {
          type: 'tag',
          data: newLine.slice(4)
        });
      });
    }
    /**
     * Add a parser for custom headers
     *
     * @param {Object}   options              a map of options for the added parser
     * @param {RegExp}   options.expression   a regular expression to match the custom header
     * @param {string}   options.customType   the custom type to register to the output
     * @param {Function} [options.dataParser] function to parse the line into an object
     * @param {boolean}  [options.segment]    should tag data be attached to the segment object
     */
    ;

    _proto.addParser = function addParser(_ref) {
      var _this3 = this;

      var expression = _ref.expression,
          customType = _ref.customType,
          dataParser = _ref.dataParser,
          segment = _ref.segment;

      if (typeof dataParser !== 'function') {
        dataParser = function dataParser(line) {
          return line;
        };
      }

      this.customParsers.push(function (line) {
        var match = expression.exec(line);

        if (match) {
          _this3.trigger('data', {
            type: 'custom',
            data: dataParser(line),
            customType: customType,
            segment: segment
          });

          return true;
        }
      });
    }
    /**
     * Add a custom header mapper
     *
     * @param {Object}   options
     * @param {RegExp}   options.expression   a regular expression to match the custom header
     * @param {Function} options.map          function to translate tag into a different tag
     */
    ;

    _proto.addTagMapper = function addTagMapper(_ref2) {
      var expression = _ref2.expression,
          map = _ref2.map;

      var mapFn = function mapFn(line) {
        if (expression.test(line)) {
          return map(line);
        }

        return line;
      };

      this.tagMappers.push(mapFn);
    };

    return ParseStream;
  }(Stream);

  function decodeB64ToUint8Array$1(b64Text) {
    var decodedString = window_1.atob(b64Text || '');
    var array = new Uint8Array(decodedString.length);

    for (var i = 0; i < decodedString.length; i++) {
      array[i] = decodedString.charCodeAt(i);
    }

    return array;
  }

  /**
   * A parser for M3U8 files. The current interpretation of the input is
   * exposed as a property `manifest` on parser objects. It's just two lines to
   * create and parse a manifest once you have the contents available as a string:
   *
   * ```js
   * var parser = new m3u8.Parser();
   * parser.push(xhr.responseText);
   * ```
   *
   * New input can later be applied to update the manifest object by calling
   * `push` again.
   *
   * The parser attempts to create a usable manifest object even if the
   * underlying input is somewhat nonsensical. It emits `info` and `warning`
   * events during the parse if it encounters input that seems invalid or
   * requires some property of the manifest object to be defaulted.
   *
   * @class Parser
   * @extends Stream
   */

  var Parser =
  /*#__PURE__*/
  function (_Stream) {
    _inheritsLoose(Parser, _Stream);

    function Parser() {
      var _this;

      _this = _Stream.call(this) || this;
      _this.lineStream = new LineStream();
      _this.parseStream = new ParseStream();

      _this.lineStream.pipe(_this.parseStream);
      /* eslint-disable consistent-this */


      var self = _assertThisInitialized(_this);
      /* eslint-enable consistent-this */


      var uris = [];
      var currentUri = {}; // if specified, the active EXT-X-MAP definition

      var currentMap; // if specified, the active decryption key

      var _key;

      var noop = function noop() {};

      var defaultMediaGroups = {
        'AUDIO': {},
        'VIDEO': {},
        'CLOSED-CAPTIONS': {},
        'SUBTITLES': {}
      }; // This is the Widevine UUID from DASH IF IOP. The same exact string is
      // used in MPDs with Widevine encrypted streams.

      var widevineUuid = 'urn:uuid:edef8ba9-79d6-4ace-a3c8-27dcd51d21ed'; // group segments into numbered timelines delineated by discontinuities

      var currentTimeline = 0; // the manifest is empty until the parse stream begins delivering data

      _this.manifest = {
        allowCache: true,
        discontinuityStarts: [],
        segments: []
      }; // update the manifest with the m3u8 entry from the parse stream

      _this.parseStream.on('data', function (entry) {
        var mediaGroup;
        var rendition;
        ({
          tag: function tag() {
            // switch based on the tag type
            (({
              'allow-cache': function allowCache() {
                this.manifest.allowCache = entry.allowed;

                if (!('allowed' in entry)) {
                  this.trigger('info', {
                    message: 'defaulting allowCache to YES'
                  });
                  this.manifest.allowCache = true;
                }
              },
              byterange: function byterange() {
                var byterange = {};

                if ('length' in entry) {
                  currentUri.byterange = byterange;
                  byterange.length = entry.length;

                  if (!('offset' in entry)) {
                    this.trigger('info', {
                      message: 'defaulting offset to zero'
                    });
                    entry.offset = 0;
                  }
                }

                if ('offset' in entry) {
                  currentUri.byterange = byterange;
                  byterange.offset = entry.offset;
                }
              },
              endlist: function endlist() {
                this.manifest.endList = true;
              },
              inf: function inf() {
                if (!('mediaSequence' in this.manifest)) {
                  this.manifest.mediaSequence = 0;
                  this.trigger('info', {
                    message: 'defaulting media sequence to zero'
                  });
                }

                if (!('discontinuitySequence' in this.manifest)) {
                  this.manifest.discontinuitySequence = 0;
                  this.trigger('info', {
                    message: 'defaulting discontinuity sequence to zero'
                  });
                }

                if (entry.duration > 0) {
                  currentUri.duration = entry.duration;
                }

                if (entry.duration === 0) {
                  currentUri.duration = 0.01;
                  this.trigger('info', {
                    message: 'updating zero segment duration to a small value'
                  });
                }

                this.manifest.segments = uris;
              },
              key: function key() {
                if (!entry.attributes) {
                  this.trigger('warn', {
                    message: 'ignoring key declaration without attribute list'
                  });
                  return;
                } // clear the active encryption key


                if (entry.attributes.METHOD === 'NONE') {
                  _key = null;
                  return;
                }

                if (!entry.attributes.URI) {
                  this.trigger('warn', {
                    message: 'ignoring key declaration without URI'
                  });
                  return;
                } // check if the content is encrypted for Widevine
                // Widevine/HLS spec: https://storage.googleapis.com/wvdocs/Widevine_DRM_HLS.pdf


                if (entry.attributes.KEYFORMAT === widevineUuid) {
                  var VALID_METHODS = ['SAMPLE-AES', 'SAMPLE-AES-CTR', 'SAMPLE-AES-CENC'];

                  if (VALID_METHODS.indexOf(entry.attributes.METHOD) === -1) {
                    this.trigger('warn', {
                      message: 'invalid key method provided for Widevine'
                    });
                    return;
                  }

                  if (entry.attributes.METHOD === 'SAMPLE-AES-CENC') {
                    this.trigger('warn', {
                      message: 'SAMPLE-AES-CENC is deprecated, please use SAMPLE-AES-CTR instead'
                    });
                  }

                  if (entry.attributes.URI.substring(0, 23) !== 'data:text/plain;base64,') {
                    this.trigger('warn', {
                      message: 'invalid key URI provided for Widevine'
                    });
                    return;
                  }

                  if (!(entry.attributes.KEYID && entry.attributes.KEYID.substring(0, 2) === '0x')) {
                    this.trigger('warn', {
                      message: 'invalid key ID provided for Widevine'
                    });
                    return;
                  } // if Widevine key attributes are valid, store them as `contentProtection`
                  // on the manifest to emulate Widevine tag structure in a DASH mpd


                  this.manifest.contentProtection = {
                    'com.widevine.alpha': {
                      attributes: {
                        schemeIdUri: entry.attributes.KEYFORMAT,
                        // remove '0x' from the key id string
                        keyId: entry.attributes.KEYID.substring(2)
                      },
                      // decode the base64-encoded PSSH box
                      pssh: decodeB64ToUint8Array$1(entry.attributes.URI.split(',')[1])
                    }
                  };
                  return;
                }

                if (!entry.attributes.METHOD) {
                  this.trigger('warn', {
                    message: 'defaulting key method to AES-128'
                  });
                } // setup an encryption key for upcoming segments


                _key = {
                  method: entry.attributes.METHOD || 'AES-128',
                  uri: entry.attributes.URI
                };

                if (typeof entry.attributes.IV !== 'undefined') {
                  _key.iv = entry.attributes.IV;
                }
              },
              'media-sequence': function mediaSequence() {
                if (!isFinite(entry.number)) {
                  this.trigger('warn', {
                    message: 'ignoring invalid media sequence: ' + entry.number
                  });
                  return;
                }

                this.manifest.mediaSequence = entry.number;
              },
              'discontinuity-sequence': function discontinuitySequence() {
                if (!isFinite(entry.number)) {
                  this.trigger('warn', {
                    message: 'ignoring invalid discontinuity sequence: ' + entry.number
                  });
                  return;
                }

                this.manifest.discontinuitySequence = entry.number;
                currentTimeline = entry.number;
              },
              'playlist-type': function playlistType() {
                if (!/VOD|EVENT/.test(entry.playlistType)) {
                  this.trigger('warn', {
                    message: 'ignoring unknown playlist type: ' + entry.playlist
                  });
                  return;
                }

                this.manifest.playlistType = entry.playlistType;
              },
              map: function map() {
                currentMap = {};

                if (entry.uri) {
                  currentMap.uri = entry.uri;
                }

                if (entry.byterange) {
                  currentMap.byterange = entry.byterange;
                }
              },
              'stream-inf': function streamInf() {
                this.manifest.playlists = uris;
                this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;

                if (!entry.attributes) {
                  this.trigger('warn', {
                    message: 'ignoring empty stream-inf attributes'
                  });
                  return;
                }

                if (!currentUri.attributes) {
                  currentUri.attributes = {};
                }

                _extends(currentUri.attributes, entry.attributes);
              },
              media: function media() {
                this.manifest.mediaGroups = this.manifest.mediaGroups || defaultMediaGroups;

                if (!(entry.attributes && entry.attributes.TYPE && entry.attributes['GROUP-ID'] && entry.attributes.NAME)) {
                  this.trigger('warn', {
                    message: 'ignoring incomplete or missing media group'
                  });
                  return;
                } // find the media group, creating defaults as necessary


                var mediaGroupType = this.manifest.mediaGroups[entry.attributes.TYPE];
                mediaGroupType[entry.attributes['GROUP-ID']] = mediaGroupType[entry.attributes['GROUP-ID']] || {};
                mediaGroup = mediaGroupType[entry.attributes['GROUP-ID']]; // collect the rendition metadata

                rendition = {
                  default: /yes/i.test(entry.attributes.DEFAULT)
                };

                if (rendition.default) {
                  rendition.autoselect = true;
                } else {
                  rendition.autoselect = /yes/i.test(entry.attributes.AUTOSELECT);
                }

                if (entry.attributes.LANGUAGE) {
                  rendition.language = entry.attributes.LANGUAGE;
                }

                if (entry.attributes.URI) {
                  rendition.uri = entry.attributes.URI;
                }

                if (entry.attributes['INSTREAM-ID']) {
                  rendition.instreamId = entry.attributes['INSTREAM-ID'];
                }

                if (entry.attributes.CHARACTERISTICS) {
                  rendition.characteristics = entry.attributes.CHARACTERISTICS;
                }

                if (entry.attributes.FORCED) {
                  rendition.forced = /yes/i.test(entry.attributes.FORCED);
                } // insert the new rendition


                mediaGroup[entry.attributes.NAME] = rendition;
              },
              discontinuity: function discontinuity() {
                currentTimeline += 1;
                currentUri.discontinuity = true;
                this.manifest.discontinuityStarts.push(uris.length);
              },
              'program-date-time': function programDateTime() {
                if (typeof this.manifest.dateTimeString === 'undefined') {
                  // PROGRAM-DATE-TIME is a media-segment tag, but for backwards
                  // compatibility, we add the first occurence of the PROGRAM-DATE-TIME tag
                  // to the manifest object
                  // TODO: Consider removing this in future major version
                  this.manifest.dateTimeString = entry.dateTimeString;
                  this.manifest.dateTimeObject = entry.dateTimeObject;
                }

                currentUri.dateTimeString = entry.dateTimeString;
                currentUri.dateTimeObject = entry.dateTimeObject;
              },
              targetduration: function targetduration() {
                if (!isFinite(entry.duration) || entry.duration < 0) {
                  this.trigger('warn', {
                    message: 'ignoring invalid target duration: ' + entry.duration
                  });
                  return;
                }

                this.manifest.targetDuration = entry.duration;
              },
              totalduration: function totalduration() {
                if (!isFinite(entry.duration) || entry.duration < 0) {
                  this.trigger('warn', {
                    message: 'ignoring invalid total duration: ' + entry.duration
                  });
                  return;
                }

                this.manifest.totalDuration = entry.duration;
              },
              start: function start() {
                if (!entry.attributes || isNaN(entry.attributes['TIME-OFFSET'])) {
                  this.trigger('warn', {
                    message: 'ignoring start declaration without appropriate attribute list'
                  });
                  return;
                }

                this.manifest.start = {
                  timeOffset: entry.attributes['TIME-OFFSET'],
                  precise: entry.attributes.PRECISE
                };
              },
              'cue-out': function cueOut() {
                currentUri.cueOut = entry.data;
              },
              'cue-out-cont': function cueOutCont() {
                currentUri.cueOutCont = entry.data;
              },
              'cue-in': function cueIn() {
                currentUri.cueIn = entry.data;
              }
            })[entry.tagType] || noop).call(self);
          },
          uri: function uri() {
            currentUri.uri = entry.uri;
            uris.push(currentUri); // if no explicit duration was declared, use the target duration

            if (this.manifest.targetDuration && !('duration' in currentUri)) {
              this.trigger('warn', {
                message: 'defaulting segment duration to the target duration'
              });
              currentUri.duration = this.manifest.targetDuration;
            } // annotate with encryption information, if necessary


            if (_key) {
              currentUri.key = _key;
            }

            currentUri.timeline = currentTimeline; // annotate with initialization segment information, if necessary

            if (currentMap) {
              currentUri.map = currentMap;
            } // prepare for the next URI


            currentUri = {};
          },
          comment: function comment() {// comments are not important for playback
          },
          custom: function custom() {
            // if this is segment-level data attach the output to the segment
            if (entry.segment) {
              currentUri.custom = currentUri.custom || {};
              currentUri.custom[entry.customType] = entry.data; // if this is manifest-level data attach to the top level manifest object
            } else {
              this.manifest.custom = this.manifest.custom || {};
              this.manifest.custom[entry.customType] = entry.data;
            }
          }
        })[entry.type].call(self);
      });

      return _this;
    }
    /**
     * Parse the input string and update the manifest object.
     *
     * @param {string} chunk a potentially incomplete portion of the manifest
     */


    var _proto = Parser.prototype;

    _proto.push = function push(chunk) {
      this.lineStream.push(chunk);
    }
    /**
     * Flush any remaining input. This can be handy if the last line of an M3U8
     * manifest did not contain a trailing newline but the file has been
     * completely received.
     */
    ;

    _proto.end = function end() {
      // flush any buffered input
      this.lineStream.push('\n');
    }
    /**
     * Add an additional parser for non-standard tags
     *
     * @param {Object}   options              a map of options for the added parser
     * @param {RegExp}   options.expression   a regular expression to match the custom header
     * @param {string}   options.type         the type to register to the output
     * @param {Function} [options.dataParser] function to parse the line into an object
     * @param {boolean}  [options.segment]    should tag data be attached to the segment object
     */
    ;

    _proto.addParser = function addParser(options) {
      this.parseStream.addParser(options);
    }
    /**
     * Add a custom header mapper
     *
     * @param {Object}   options
     * @param {RegExp}   options.expression   a regular expression to match the custom header
     * @param {Function} options.map          function to translate tag into a different tag
     */
    ;

    _proto.addTagMapper = function addTagMapper(options) {
      this.parseStream.addTagMapper(options);
    };

    return Parser;
  }(Stream);

  var mediaTypes = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, '__esModule', { value: true });

  var MPEGURL_REGEX = /^(audio|video|application)\/(x-|vnd\.apple\.)?mpegurl/i;
  var DASH_REGEX = /^application\/dash\+xml/i;
  /**
   * Returns a string that describes the type of source based on a video source object's
   * media type.
   *
   * @see {@link https://dev.w3.org/html5/pf-summary/video.html#dom-source-type|Source Type}
   *
   * @param {string} type
   *        Video source object media type
   * @return {('hls'|'dash'|'vhs-json'|null)}
   *         VHS source type string
   */

  var simpleTypeFromSourceType = function simpleTypeFromSourceType(type) {
    if (MPEGURL_REGEX.test(type)) {
      return 'hls';
    }

    if (DASH_REGEX.test(type)) {
      return 'dash';
    } // Denotes the special case of a manifest object passed to http-streaming instead of a
    // source URL.
    //
    // See https://en.wikipedia.org/wiki/Media_type for details on specifying media types.
    //
    // In this case, vnd stands for vendor, video.js for the organization, VHS for this
    // project, and the +json suffix identifies the structure of the media type.


    if (type === 'application/vnd.videojs.vhs+json') {
      return 'vhs-json';
    }

    return null;
  };

  exports.simpleTypeFromSourceType = simpleTypeFromSourceType;
  });

  unwrapExports(mediaTypes);
  var mediaTypes_1 = mediaTypes.simpleTypeFromSourceType;

  var mediaGroups = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, '__esModule', { value: true });

  /**
   * Loops through all supported media groups in master and calls the provided
   * callback for each group
   *
   * @param {Object} master
   *        The parsed master manifest object
   * @param {string[]} groups
   *        The media groups to call the callback for
   * @param {Function} callback
   *        Callback to call for each media group
   */
  var forEachMediaGroup = function forEachMediaGroup(master, groups, callback) {
    groups.forEach(function (mediaType) {
      for (var groupKey in master.mediaGroups[mediaType]) {
        for (var labelKey in master.mediaGroups[mediaType][groupKey]) {
          var mediaProperties = master.mediaGroups[mediaType][groupKey][labelKey];
          callback(mediaProperties, mediaType, groupKey, labelKey);
        }
      }
    });
  };

  exports.forEachMediaGroup = forEachMediaGroup;
  });

  unwrapExports(mediaGroups);
  var mediaGroups_1 = mediaGroups.forEachMediaGroup;

  var urlToolkit$1 = createCommonjsModule(function (module, exports) {
  // see https://tools.ietf.org/html/rfc1808

  /* jshint ignore:start */
  (function(root) { 
  /* jshint ignore:end */

    var URL_REGEX = /^((?:[a-zA-Z0-9+\-.]+:)?)(\/\/[^\/?#]*)?((?:[^\/\?#]*\/)*.*?)??(;.*?)?(\?.*?)?(#.*?)?$/;
    var FIRST_SEGMENT_REGEX = /^([^\/?#]*)(.*)$/;
    var SLASH_DOT_REGEX = /(?:\/|^)\.(?=\/)/g;
    var SLASH_DOT_DOT_REGEX = /(?:\/|^)\.\.\/(?!\.\.\/).*?(?=\/)/g;

    var URLToolkit = { // jshint ignore:line
      // If opts.alwaysNormalize is true then the path will always be normalized even when it starts with / or //
      // E.g
      // With opts.alwaysNormalize = false (default, spec compliant)
      // http://a.com/b/cd + /e/f/../g => http://a.com/e/f/../g
      // With opts.alwaysNormalize = true (not spec compliant)
      // http://a.com/b/cd + /e/f/../g => http://a.com/e/g
      buildAbsoluteURL: function(baseURL, relativeURL, opts) {
        opts = opts || {};
        // remove any remaining space and CRLF
        baseURL = baseURL.trim();
        relativeURL = relativeURL.trim();
        if (!relativeURL) {
          // 2a) If the embedded URL is entirely empty, it inherits the
          // entire base URL (i.e., is set equal to the base URL)
          // and we are done.
          if (!opts.alwaysNormalize) {
            return baseURL;
          }
          var basePartsForNormalise = URLToolkit.parseURL(baseURL);
          if (!basePartsForNormalise) {
            throw new Error('Error trying to parse base URL.');
          }
          basePartsForNormalise.path = URLToolkit.normalizePath(basePartsForNormalise.path);
          return URLToolkit.buildURLFromParts(basePartsForNormalise);
        }
        var relativeParts = URLToolkit.parseURL(relativeURL);
        if (!relativeParts) {
          throw new Error('Error trying to parse relative URL.');
        }
        if (relativeParts.scheme) {
          // 2b) If the embedded URL starts with a scheme name, it is
          // interpreted as an absolute URL and we are done.
          if (!opts.alwaysNormalize) {
            return relativeURL;
          }
          relativeParts.path = URLToolkit.normalizePath(relativeParts.path);
          return URLToolkit.buildURLFromParts(relativeParts);
        }
        var baseParts = URLToolkit.parseURL(baseURL);
        if (!baseParts) {
          throw new Error('Error trying to parse base URL.');
        }
        if (!baseParts.netLoc && baseParts.path && baseParts.path[0] !== '/') {
          // If netLoc missing and path doesn't start with '/', assume everthing before the first '/' is the netLoc
          // This causes 'example.com/a' to be handled as '//example.com/a' instead of '/example.com/a'
          var pathParts = FIRST_SEGMENT_REGEX.exec(baseParts.path);
          baseParts.netLoc = pathParts[1];
          baseParts.path = pathParts[2];
        }
        if (baseParts.netLoc && !baseParts.path) {
          baseParts.path = '/';
        }
        var builtParts = {
          // 2c) Otherwise, the embedded URL inherits the scheme of
          // the base URL.
          scheme: baseParts.scheme,
          netLoc: relativeParts.netLoc,
          path: null,
          params: relativeParts.params,
          query: relativeParts.query,
          fragment: relativeParts.fragment
        };
        if (!relativeParts.netLoc) {
          // 3) If the embedded URL's <net_loc> is non-empty, we skip to
          // Step 7.  Otherwise, the embedded URL inherits the <net_loc>
          // (if any) of the base URL.
          builtParts.netLoc = baseParts.netLoc;
          // 4) If the embedded URL path is preceded by a slash "/", the
          // path is not relative and we skip to Step 7.
          if (relativeParts.path[0] !== '/') {
            if (!relativeParts.path) {
              // 5) If the embedded URL path is empty (and not preceded by a
              // slash), then the embedded URL inherits the base URL path
              builtParts.path = baseParts.path;
              // 5a) if the embedded URL's <params> is non-empty, we skip to
              // step 7; otherwise, it inherits the <params> of the base
              // URL (if any) and
              if (!relativeParts.params) {
                builtParts.params = baseParts.params;
                // 5b) if the embedded URL's <query> is non-empty, we skip to
                // step 7; otherwise, it inherits the <query> of the base
                // URL (if any) and we skip to step 7.
                if (!relativeParts.query) {
                  builtParts.query = baseParts.query;
                }
              }
            } else {
              // 6) The last segment of the base URL's path (anything
              // following the rightmost slash "/", or the entire path if no
              // slash is present) is removed and the embedded URL's path is
              // appended in its place.
              var baseURLPath = baseParts.path;
              var newPath = baseURLPath.substring(0, baseURLPath.lastIndexOf('/') + 1) + relativeParts.path;
              builtParts.path = URLToolkit.normalizePath(newPath);
            }
          }
        }
        if (builtParts.path === null) {
          builtParts.path = opts.alwaysNormalize ? URLToolkit.normalizePath(relativeParts.path) : relativeParts.path;
        }
        return URLToolkit.buildURLFromParts(builtParts);
      },
      parseURL: function(url) {
        var parts = URL_REGEX.exec(url);
        if (!parts) {
          return null;
        }
        return {
          scheme: parts[1] || '',
          netLoc: parts[2] || '',
          path: parts[3] || '',
          params: parts[4] || '',
          query: parts[5] || '',
          fragment: parts[6] || ''
        };
      },
      normalizePath: function(path) {
        // The following operations are
        // then applied, in order, to the new path:
        // 6a) All occurrences of "./", where "." is a complete path
        // segment, are removed.
        // 6b) If the path ends with "." as a complete path segment,
        // that "." is removed.
        path = path.split('').reverse().join('').replace(SLASH_DOT_REGEX, '');
        // 6c) All occurrences of "<segment>/../", where <segment> is a
        // complete path segment not equal to "..", are removed.
        // Removal of these path segments is performed iteratively,
        // removing the leftmost matching pattern on each iteration,
        // until no matching pattern remains.
        // 6d) If the path ends with "<segment>/..", where <segment> is a
        // complete path segment not equal to "..", that
        // "<segment>/.." is removed.
        while (path.length !== (path = path.replace(SLASH_DOT_DOT_REGEX, '')).length) {} // jshint ignore:line
        return path.split('').reverse().join('');
      },
      buildURLFromParts: function(parts) {
        return parts.scheme + parts.netLoc + parts.path + parts.params + parts.query + parts.fragment;
      }
    };

  /* jshint ignore:start */
    module.exports = URLToolkit;
  })(commonjsGlobal);
  /* jshint ignore:end */
  });

  function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

  var URLToolkit = _interopDefault(urlToolkit$1);
  var window$1 = _interopDefault(window_1);

  var resolveUrl$1 = function resolveUrl(baseUrl, relativeUrl) {
    // return early if we don't need to resolve
    if (/^[a-z]+:/i.test(relativeUrl)) {
      return relativeUrl;
    } // if the base URL is relative then combine with the current location


    if (!/\/\//i.test(baseUrl)) {
      baseUrl = URLToolkit.buildAbsoluteURL(window$1.location && window$1.location.href || '', baseUrl);
    }

    return URLToolkit.buildAbsoluteURL(baseUrl, relativeUrl);
  };

  var resolveUrl_1 = resolveUrl$1;

  var cov_rgc0ckg7t = function () {
    var path = '/Users/gsinger/repos/clean/plugin-concat/src/manifest-parser.js',
        hash = '3380c759a6ebf29235300d70322d5f6e9f3fe723',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
      path: '/Users/gsinger/repos/clean/plugin-concat/src/manifest-parser.js',
      statementMap: {
        '0': {
          start: {
            line: 16,
            column: 25
          },
          end: {
            line: 23,
            column: 1
          }
        },
        '1': {
          start: {
            line: 17,
            column: 17
          },
          end: {
            line: 17,
            column: 33
          }
        },
        '2': {
          start: {
            line: 19,
            column: 2
          },
          end: {
            line: 19,
            column: 30
          }
        },
        '3': {
          start: {
            line: 20,
            column: 2
          },
          end: {
            line: 20,
            column: 15
          }
        },
        '4': {
          start: {
            line: 22,
            column: 2
          },
          end: {
            line: 22,
            column: 25
          }
        },
        '5': {
          start: {
            line: 33,
            column: 34
          },
          end: {
            line: 43,
            column: 1
          }
        },
        '6': {
          start: {
            line: 34,
            column: 2
          },
          end: {
            line: 36,
            column: 3
          }
        },
        '7': {
          start: {
            line: 35,
            column: 4
          },
          end: {
            line: 35,
            column: 59
          }
        },
        '8': {
          start: {
            line: 37,
            column: 2
          },
          end: {
            line: 39,
            column: 3
          }
        },
        '9': {
          start: {
            line: 38,
            column: 4
          },
          end: {
            line: 38,
            column: 67
          }
        },
        '10': {
          start: {
            line: 40,
            column: 2
          },
          end: {
            line: 42,
            column: 3
          }
        },
        '11': {
          start: {
            line: 41,
            column: 4
          },
          end: {
            line: 41,
            column: 67
          }
        },
        '12': {
          start: {
            line: 57,
            column: 37
          },
          end: {
            line: 95,
            column: 1
          }
        },
        '13': {
          start: {
            line: 58,
            column: 2
          },
          end: {
            line: 71,
            column: 3
          }
        },
        '14': {
          start: {
            line: 59,
            column: 21
          },
          end: {
            line: 59,
            column: 40
          }
        },
        '15': {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 63,
            column: 5
          }
        },
        '16': {
          start: {
            line: 62,
            column: 6
          },
          end: {
            line: 62,
            column: 44
          }
        },
        '17': {
          start: {
            line: 64,
            column: 4
          },
          end: {
            line: 64,
            column: 64
          }
        },
        '18': {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 70,
            column: 5
          }
        },
        '19': {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 69,
            column: 9
          }
        },
        '20': {
          start: {
            line: 68,
            column: 8
          },
          end: {
            line: 68,
            column: 48
          }
        },
        '21': {
          start: {
            line: 73,
            column: 2
          },
          end: {
            line: 94,
            column: 4
          }
        },
        '22': {
          start: {
            line: 77,
            column: 6
          },
          end: {
            line: 79,
            column: 7
          }
        },
        '23': {
          start: {
            line: 78,
            column: 8
          },
          end: {
            line: 78,
            column: 82
          }
        },
        '24': {
          start: {
            line: 81,
            column: 6
          },
          end: {
            line: 92,
            column: 7
          }
        },
        '25': {
          start: {
            line: 82,
            column: 8
          },
          end: {
            line: 88,
            column: 9
          }
        },
        '26': {
          start: {
            line: 86,
            column: 10
          },
          end: {
            line: 87,
            column: 78
          }
        },
        '27': {
          start: {
            line: 89,
            column: 8
          },
          end: {
            line: 91,
            column: 11
          }
        },
        '28': {
          start: {
            line: 90,
            column: 10
          },
          end: {
            line: 90,
            column: 50
          }
        },
        '29': {
          start: {
            line: 107,
            column: 36
          },
          end: {
            line: 118,
            column: 1
          }
        },
        '30': {
          start: {
            line: 111,
            column: 2
          },
          end: {
            line: 111,
            column: 44
          }
        },
        '31': {
          start: {
            line: 115,
            column: 2
          },
          end: {
            line: 117,
            column: 5
          }
        },
        '32': {
          start: {
            line: 116,
            column: 4
          },
          end: {
            line: 116,
            column: 43
          }
        },
        '33': {
          start: {
            line: 135,
            column: 29
          },
          end: {
            line: 154,
            column: 1
          }
        },
        '34': {
          start: {
            line: 136,
            column: 15
          },
          end: {
            line: 136,
            column: 49
          }
        },
        '35': {
          start: {
            line: 137,
            column: 19
          },
          end: {
            line: 139,
            column: 29
          }
        },
        '36': {
          start: {
            line: 144,
            column: 2
          },
          end: {
            line: 144,
            column: 21
          }
        },
        '37': {
          start: {
            line: 145,
            column: 2
          },
          end: {
            line: 145,
            column: 29
          }
        },
        '38': {
          start: {
            line: 147,
            column: 2
          },
          end: {
            line: 151,
            column: 3
          }
        },
        '39': {
          start: {
            line: 148,
            column: 4
          },
          end: {
            line: 148,
            column: 36
          }
        },
        '40': {
          start: {
            line: 150,
            column: 4
          },
          end: {
            line: 150,
            column: 35
          }
        },
        '41': {
          start: {
            line: 153,
            column: 2
          },
          end: {
            line: 153,
            column: 18
          }
        }
      },
      fnMap: {
        '0': {
          name: '(anonymous_0)',
          decl: {
            start: {
              line: 16,
              column: 25
            },
            end: {
              line: 16,
              column: 26
            }
          },
          loc: {
            start: {
              line: 16,
              column: 45
            },
            end: {
              line: 23,
              column: 1
            }
          },
          line: 16
        },
        '1': {
          name: '(anonymous_1)',
          decl: {
            start: {
              line: 33,
              column: 34
            },
            end: {
              line: 33,
              column: 35
            }
          },
          loc: {
            start: {
              line: 33,
              column: 56
            },
            end: {
              line: 43,
              column: 1
            }
          },
          line: 33
        },
        '2': {
          name: '(anonymous_2)',
          decl: {
            start: {
              line: 57,
              column: 37
            },
            end: {
              line: 57,
              column: 38
            }
          },
          loc: {
            start: {
              line: 57,
              column: 49
            },
            end: {
              line: 95,
              column: 1
            }
          },
          line: 57
        },
        '3': {
          name: '(anonymous_3)',
          decl: {
            start: {
              line: 67,
              column: 32
            },
            end: {
              line: 67,
              column: 33
            }
          },
          loc: {
            start: {
              line: 67,
              column: 45
            },
            end: {
              line: 69,
              column: 7
            }
          },
          line: 67
        },
        '4': {
          name: '(anonymous_4)',
          decl: {
            start: {
              line: 76,
              column: 4
            },
            end: {
              line: 76,
              column: 5
            }
          },
          loc: {
            start: {
              line: 76,
              column: 56
            },
            end: {
              line: 93,
              column: 5
            }
          },
          line: 76
        },
        '5': {
          name: '(anonymous_5)',
          decl: {
            start: {
              line: 89,
              column: 54
            },
            end: {
              line: 89,
              column: 55
            }
          },
          loc: {
            start: {
              line: 89,
              column: 67
            },
            end: {
              line: 91,
              column: 9
            }
          },
          line: 89
        },
        '6': {
          name: '(anonymous_6)',
          decl: {
            start: {
              line: 107,
              column: 36
            },
            end: {
              line: 107,
              column: 37
            }
          },
          loc: {
            start: {
              line: 107,
              column: 47
            },
            end: {
              line: 118,
              column: 1
            }
          },
          line: 107
        },
        '7': {
          name: '(anonymous_7)',
          decl: {
            start: {
              line: 115,
              column: 25
            },
            end: {
              line: 115,
              column: 26
            }
          },
          loc: {
            start: {
              line: 115,
              column: 38
            },
            end: {
              line: 117,
              column: 3
            }
          },
          line: 115
        },
        '8': {
          name: '(anonymous_8)',
          decl: {
            start: {
              line: 135,
              column: 29
            },
            end: {
              line: 135,
              column: 30
            }
          },
          loc: {
            start: {
              line: 135,
              column: 68
            },
            end: {
              line: 154,
              column: 1
            }
          },
          line: 135
        }
      },
      branchMap: {
        '0': {
          loc: {
            start: {
              line: 34,
              column: 2
            },
            end: {
              line: 36,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 34,
              column: 2
            },
            end: {
              line: 36,
              column: 3
            }
          }, {
            start: {
              line: 34,
              column: 2
            },
            end: {
              line: 36,
              column: 3
            }
          }],
          line: 34
        },
        '1': {
          loc: {
            start: {
              line: 37,
              column: 2
            },
            end: {
              line: 39,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 37,
              column: 2
            },
            end: {
              line: 39,
              column: 3
            }
          }, {
            start: {
              line: 37,
              column: 2
            },
            end: {
              line: 39,
              column: 3
            }
          }],
          line: 37
        },
        '2': {
          loc: {
            start: {
              line: 37,
              column: 6
            },
            end: {
              line: 37,
              column: 45
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 37,
              column: 6
            },
            end: {
              line: 37,
              column: 17
            }
          }, {
            start: {
              line: 37,
              column: 21
            },
            end: {
              line: 37,
              column: 45
            }
          }],
          line: 37
        },
        '3': {
          loc: {
            start: {
              line: 40,
              column: 2
            },
            end: {
              line: 42,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 40,
              column: 2
            },
            end: {
              line: 42,
              column: 3
            }
          }, {
            start: {
              line: 40,
              column: 2
            },
            end: {
              line: 42,
              column: 3
            }
          }],
          line: 40
        },
        '4': {
          loc: {
            start: {
              line: 40,
              column: 6
            },
            end: {
              line: 40,
              column: 45
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 40,
              column: 6
            },
            end: {
              line: 40,
              column: 17
            }
          }, {
            start: {
              line: 40,
              column: 21
            },
            end: {
              line: 40,
              column: 45
            }
          }],
          line: 40
        },
        '5': {
          loc: {
            start: {
              line: 61,
              column: 4
            },
            end: {
              line: 63,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 61,
              column: 4
            },
            end: {
              line: 63,
              column: 5
            }
          }, {
            start: {
              line: 61,
              column: 4
            },
            end: {
              line: 63,
              column: 5
            }
          }],
          line: 61
        },
        '6': {
          loc: {
            start: {
              line: 66,
              column: 4
            },
            end: {
              line: 70,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 66,
              column: 4
            },
            end: {
              line: 70,
              column: 5
            }
          }, {
            start: {
              line: 66,
              column: 4
            },
            end: {
              line: 70,
              column: 5
            }
          }],
          line: 66
        },
        '7': {
          loc: {
            start: {
              line: 77,
              column: 6
            },
            end: {
              line: 79,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 77,
              column: 6
            },
            end: {
              line: 79,
              column: 7
            }
          }, {
            start: {
              line: 77,
              column: 6
            },
            end: {
              line: 79,
              column: 7
            }
          }],
          line: 77
        },
        '8': {
          loc: {
            start: {
              line: 81,
              column: 6
            },
            end: {
              line: 92,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 81,
              column: 6
            },
            end: {
              line: 92,
              column: 7
            }
          }, {
            start: {
              line: 81,
              column: 6
            },
            end: {
              line: 92,
              column: 7
            }
          }],
          line: 81
        },
        '9': {
          loc: {
            start: {
              line: 82,
              column: 8
            },
            end: {
              line: 88,
              column: 9
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 82,
              column: 8
            },
            end: {
              line: 88,
              column: 9
            }
          }, {
            start: {
              line: 82,
              column: 8
            },
            end: {
              line: 88,
              column: 9
            }
          }],
          line: 82
        },
        '10': {
          loc: {
            start: {
              line: 111,
              column: 21
            },
            end: {
              line: 111,
              column: 43
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 111,
              column: 21
            },
            end: {
              line: 111,
              column: 37
            }
          }, {
            start: {
              line: 111,
              column: 41
            },
            end: {
              line: 111,
              column: 43
            }
          }],
          line: 111
        },
        '11': {
          loc: {
            start: {
              line: 137,
              column: 19
            },
            end: {
              line: 139,
              column: 29
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 138,
              column: 4
            },
            end: {
              line: 138,
              column: 67
            }
          }, {
            start: {
              line: 139,
              column: 4
            },
            end: {
              line: 139,
              column: 29
            }
          }],
          line: 137
        },
        '12': {
          loc: {
            start: {
              line: 147,
              column: 2
            },
            end: {
              line: 151,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 147,
              column: 2
            },
            end: {
              line: 151,
              column: 3
            }
          }, {
            start: {
              line: 147,
              column: 2
            },
            end: {
              line: 151,
              column: 3
            }
          }],
          line: 147
        }
      },
      s: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0,
        '7': 0,
        '8': 0,
        '9': 0,
        '10': 0,
        '11': 0,
        '12': 0,
        '13': 0,
        '14': 0,
        '15': 0,
        '16': 0,
        '17': 0,
        '18': 0,
        '19': 0,
        '20': 0,
        '21': 0,
        '22': 0,
        '23': 0,
        '24': 0,
        '25': 0,
        '26': 0,
        '27': 0,
        '28': 0,
        '29': 0,
        '30': 0,
        '31': 0,
        '32': 0,
        '33': 0,
        '34': 0,
        '35': 0,
        '36': 0,
        '37': 0,
        '38': 0,
        '39': 0,
        '40': 0,
        '41': 0
      },
      f: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0,
        '7': 0,
        '8': 0
      },
      b: {
        '0': [0, 0],
        '1': [0, 0],
        '2': [0, 0],
        '3': [0, 0],
        '4': [0, 0],
        '5': [0, 0],
        '6': [0, 0],
        '7': [0, 0],
        '8': [0, 0],
        '9': [0, 0],
        '10': [0, 0],
        '11': [0, 0],
        '12': [0, 0]
      },
      _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
      return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
  }();
  cov_rgc0ckg7t.s[0]++;
  var parseM3u8 = function parseM3u8(manifestString) {
    cov_rgc0ckg7t.f[0]++;
    var parser = (cov_rgc0ckg7t.s[1]++, new Parser());
    cov_rgc0ckg7t.s[2]++;
    parser.push(manifestString);
    cov_rgc0ckg7t.s[3]++;
    parser.end();
    cov_rgc0ckg7t.s[4]++;
    return parser.manifest;
  };
  cov_rgc0ckg7t.s[5]++;
  var resolveSegmentUris = function resolveSegmentUris(segment, baseUri) {
    cov_rgc0ckg7t.f[1]++;
    cov_rgc0ckg7t.s[6]++;

    if (!segment.resolvedUri) {
      cov_rgc0ckg7t.b[0][0]++;
      cov_rgc0ckg7t.s[7]++;
      segment.resolvedUri = resolveUrl_1(baseUri, segment.uri);
    } else {
      cov_rgc0ckg7t.b[0][1]++;
    }

    cov_rgc0ckg7t.s[8]++;

    if ((cov_rgc0ckg7t.b[2][0]++, segment.key) && (cov_rgc0ckg7t.b[2][1]++, !segment.key.resolvedUri)) {
      cov_rgc0ckg7t.b[1][0]++;
      cov_rgc0ckg7t.s[9]++;
      segment.key.resolvedUri = resolveUrl_1(baseUri, segment.key.uri);
    } else {
      cov_rgc0ckg7t.b[1][1]++;
    }

    cov_rgc0ckg7t.s[10]++;

    if ((cov_rgc0ckg7t.b[4][0]++, segment.map) && (cov_rgc0ckg7t.b[4][1]++, !segment.map.resolvedUri)) {
      cov_rgc0ckg7t.b[3][0]++;
      cov_rgc0ckg7t.s[11]++;
      segment.map.resolvedUri = resolveUrl_1(baseUri, segment.map.uri);
    } else {
      cov_rgc0ckg7t.b[3][1]++;
    }
  };
  cov_rgc0ckg7t.s[12]++;
  var addPropertiesToMaster = function addPropertiesToMaster(master) {
    cov_rgc0ckg7t.f[2]++;
    cov_rgc0ckg7t.s[13]++;

    for (var i = 0; i < master.playlists.length; i++) {
      var playlist = (cov_rgc0ckg7t.s[14]++, master.playlists[i]);
      cov_rgc0ckg7t.s[15]++;

      if (!playlist.uri) {
        cov_rgc0ckg7t.b[5][0]++;
        cov_rgc0ckg7t.s[16]++;
        playlist.uri = "placeholder-uri-" + i;
      } else {
        cov_rgc0ckg7t.b[5][1]++;
      }

      cov_rgc0ckg7t.s[17]++;
      playlist.resolvedUri = resolveUrl_1(master.uri, playlist.uri);
      cov_rgc0ckg7t.s[18]++;

      if (playlist.segments) {
        cov_rgc0ckg7t.b[6][0]++;
        cov_rgc0ckg7t.s[19]++;
        playlist.segments.forEach(function (segment) {
          cov_rgc0ckg7t.f[3]++;
          cov_rgc0ckg7t.s[20]++;
          resolveSegmentUris(segment, master.uri);
        });
      } else {
        cov_rgc0ckg7t.b[6][1]++;
      }
    }

    cov_rgc0ckg7t.s[21]++;
    mediaGroups_1(master, ['AUDIO'], function (mediaProperties, mediaType, groupKey, labelKey) {
      cov_rgc0ckg7t.f[4]++;
      cov_rgc0ckg7t.s[22]++;

      if (mediaProperties.uri) {
        cov_rgc0ckg7t.b[7][0]++;
        cov_rgc0ckg7t.s[23]++;
        mediaProperties.resolvedUri = resolveUrl_1(master.uri, mediaProperties.uri);
      } else {
        cov_rgc0ckg7t.b[7][1]++;
      }

      cov_rgc0ckg7t.s[24]++;

      if (mediaProperties.playlists) {
        cov_rgc0ckg7t.b[8][0]++;
        cov_rgc0ckg7t.s[25]++;

        if (!mediaProperties.playlists[0].resolvedUri) {
          cov_rgc0ckg7t.b[9][0]++;
          cov_rgc0ckg7t.s[26]++;
          mediaProperties.playlists[0].resolvedUri = master.resolvedUri + "-audio-placeholder-" + groupKey + "-" + labelKey;
        } else {
          cov_rgc0ckg7t.b[9][1]++;
        }

        cov_rgc0ckg7t.s[27]++;
        mediaProperties.playlists[0].segments.forEach(function (segment) {
          cov_rgc0ckg7t.f[5]++;
          cov_rgc0ckg7t.s[28]++;
          resolveSegmentUris(segment, master.uri);
        });
      } else {
        cov_rgc0ckg7t.b[8][1]++;
      }
    });
  };
  cov_rgc0ckg7t.s[29]++;
  var addPropertiesToMedia = function addPropertiesToMedia(media) {
    cov_rgc0ckg7t.f[6]++;
    cov_rgc0ckg7t.s[30]++;
    media.attributes = (cov_rgc0ckg7t.b[10][0]++, media.attributes) || (cov_rgc0ckg7t.b[10][1]++, {});
    cov_rgc0ckg7t.s[31]++;
    media.segments.forEach(function (segment) {
      cov_rgc0ckg7t.f[7]++;
      cov_rgc0ckg7t.s[32]++;
      resolveSegmentUris(segment, media.uri);
    });
  };
  cov_rgc0ckg7t.s[33]++;
  var parseManifest = function parseManifest(_ref) {
    var url = _ref.url,
        manifestString = _ref.manifestString,
        mimeType = _ref.mimeType;
    cov_rgc0ckg7t.f[8]++;
    var type = (cov_rgc0ckg7t.s[34]++, mediaTypes_1(mimeType));
    var manifest = (cov_rgc0ckg7t.s[35]++, type === 'dash' ? (cov_rgc0ckg7t.b[11][0]++, parse(manifestString, {
      manifestUri: url,
      clientOffset: 0
    })) : (cov_rgc0ckg7t.b[11][1]++, parseM3u8(manifestString)));
    cov_rgc0ckg7t.s[36]++;
    manifest.uri = url;
    cov_rgc0ckg7t.s[37]++;
    manifest.resolvedUri = url;
    cov_rgc0ckg7t.s[38]++;

    if (manifest.playlists) {
      cov_rgc0ckg7t.b[12][0]++;
      cov_rgc0ckg7t.s[39]++;
      addPropertiesToMaster(manifest);
    } else {
      cov_rgc0ckg7t.b[12][1]++;
      cov_rgc0ckg7t.s[40]++;
      addPropertiesToMedia(manifest);
    }

    cov_rgc0ckg7t.s[41]++;
    return manifest;
  };

  var cov_ygykaft72 = function () {
    var path = '/Users/gsinger/repos/clean/plugin-concat/src/validators.js',
        hash = '51086711dc8d6b20fb600d67c536999683b5de2a',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
      path: '/Users/gsinger/repos/clean/plugin-concat/src/validators.js',
      statementMap: {
        '0': {
          start: {
            line: 26,
            column: 42
          },
          end: {
            line: 63,
            column: 1
          }
        },
        '1': {
          start: {
            line: 29,
            column: 2
          },
          end: {
            line: 62,
            column: 5
          }
        },
        '2': {
          start: {
            line: 34,
            column: 32
          },
          end: {
            line: 34,
            column: 66
          }
        },
        '3': {
          start: {
            line: 37,
            column: 6
          },
          end: {
            line: 37,
            column: 76
          }
        },
        '4': {
          start: {
            line: 39,
            column: 4
          },
          end: {
            line: 61,
            column: 7
          }
        },
        '5': {
          start: {
            line: 40,
            column: 21
          },
          end: {
            line: 40,
            column: 62
          }
        },
        '6': {
          start: {
            line: 44,
            column: 6
          },
          end: {
            line: 46,
            column: 7
          }
        },
        '7': {
          start: {
            line: 45,
            column: 8
          },
          end: {
            line: 45,
            column: 20
          }
        },
        '8': {
          start: {
            line: 48,
            column: 6
          },
          end: {
            line: 50,
            column: 7
          }
        },
        '9': {
          start: {
            line: 49,
            column: 8
          },
          end: {
            line: 49,
            column: 21
          }
        },
        '10': {
          start: {
            line: 52,
            column: 6
          },
          end: {
            line: 58,
            column: 7
          }
        },
        '11': {
          start: {
            line: 57,
            column: 8
          },
          end: {
            line: 57,
            column: 21
          }
        },
        '12': {
          start: {
            line: 60,
            column: 6
          },
          end: {
            line: 60,
            column: 18
          }
        }
      },
      fnMap: {
        '0': {
          name: '(anonymous_0)',
          decl: {
            start: {
              line: 26,
              column: 42
            },
            end: {
              line: 26,
              column: 43
            }
          },
          loc: {
            start: {
              line: 26,
              column: 63
            },
            end: {
              line: 63,
              column: 1
            }
          },
          line: 26
        },
        '1': {
          name: '(anonymous_1)',
          decl: {
            start: {
              line: 29,
              column: 29
            },
            end: {
              line: 29,
              column: 30
            }
          },
          loc: {
            start: {
              line: 29,
              column: 49
            },
            end: {
              line: 62,
              column: 3
            }
          },
          line: 29
        },
        '2': {
          name: '(anonymous_2)',
          decl: {
            start: {
              line: 39,
              column: 28
            },
            end: {
              line: 39,
              column: 29
            }
          },
          loc: {
            start: {
              line: 39,
              column: 42
            },
            end: {
              line: 61,
              column: 5
            }
          },
          line: 39
        }
      },
      branchMap: {
        '0': {
          loc: {
            start: {
              line: 37,
              column: 6
            },
            end: {
              line: 37,
              column: 76
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 37,
              column: 33
            },
            end: {
              line: 37,
              column: 57
            }
          }, {
            start: {
              line: 37,
              column: 60
            },
            end: {
              line: 37,
              column: 76
            }
          }],
          line: 37
        },
        '1': {
          loc: {
            start: {
              line: 44,
              column: 6
            },
            end: {
              line: 46,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 44,
              column: 6
            },
            end: {
              line: 46,
              column: 7
            }
          }, {
            start: {
              line: 44,
              column: 6
            },
            end: {
              line: 46,
              column: 7
            }
          }],
          line: 44
        },
        '2': {
          loc: {
            start: {
              line: 48,
              column: 6
            },
            end: {
              line: 50,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 48,
              column: 6
            },
            end: {
              line: 50,
              column: 7
            }
          }, {
            start: {
              line: 48,
              column: 6
            },
            end: {
              line: 50,
              column: 7
            }
          }],
          line: 48
        },
        '3': {
          loc: {
            start: {
              line: 52,
              column: 6
            },
            end: {
              line: 58,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 52,
              column: 6
            },
            end: {
              line: 58,
              column: 7
            }
          }, {
            start: {
              line: 52,
              column: 6
            },
            end: {
              line: 58,
              column: 7
            }
          }],
          line: 52
        },
        '4': {
          loc: {
            start: {
              line: 52,
              column: 10
            },
            end: {
              line: 56,
              column: 65
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 52,
              column: 10
            },
            end: {
              line: 52,
              column: 28
            }
          }, {
            start: {
              line: 53,
              column: 10
            },
            end: {
              line: 53,
              column: 44
            }
          }, {
            start: {
              line: 55,
              column: 10
            },
            end: {
              line: 56,
              column: 65
            }
          }],
          line: 52
        }
      },
      s: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0,
        '7': 0,
        '8': 0,
        '9': 0,
        '10': 0,
        '11': 0,
        '12': 0
      },
      f: {
        '0': 0,
        '1': 0,
        '2': 0
      },
      b: {
        '0': [0, 0],
        '1': [0, 0],
        '2': [0, 0],
        '3': [0, 0],
        '4': [0, 0, 0]
      },
      _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
      return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
  }();
  cov_ygykaft72.s[0]++;
  var removeUnsupportedPlaylists = function removeUnsupportedPlaylists(manifestObjects) {
    cov_ygykaft72.f[0]++;
    cov_ygykaft72.s[1]++;
    return manifestObjects.map(function (manifestObject) {
      cov_ygykaft72.f[1]++;
      var playlistToCodecsMap = (cov_ygykaft72.s[2]++, codecsForPlaylists(manifestObject));
      var playlists = (cov_ygykaft72.s[3]++, manifestObject.playlists ? (cov_ygykaft72.b[0][0]++, manifestObject.playlists) : (cov_ygykaft72.b[0][1]++, [manifestObject]));
      cov_ygykaft72.s[4]++;
      return playlists.filter(function (playlist) {
        cov_ygykaft72.f[2]++;
        var codecs = (cov_ygykaft72.s[5]++, playlistToCodecsMap[playlist.resolvedUri]);
        cov_ygykaft72.s[6]++;

        if (!codecs) {
          cov_ygykaft72.b[1][0]++;
          cov_ygykaft72.s[7]++;
          return true;
        } else {
          cov_ygykaft72.b[1][1]++;
        }

        cov_ygykaft72.s[8]++;

        if (codecs.codecCount !== 2) {
          cov_ygykaft72.b[2][0]++;
          cov_ygykaft72.s[9]++;
          return false;
        } else {
          cov_ygykaft72.b[2][1]++;
        }

        cov_ygykaft72.s[10]++;

        if ((cov_ygykaft72.b[4][0]++, window_1.MediaSource) && (cov_ygykaft72.b[4][1]++, window_1.MediaSource.isTypeSupported) && (cov_ygykaft72.b[4][2]++, !window_1.MediaSource.isTypeSupported('video/mp4; codecs="' + codecs_2(playlist.attributes.CODECS) + '"'))) {
          cov_ygykaft72.b[3][0]++;
          cov_ygykaft72.s[11]++;
          return false;
        } else {
          cov_ygykaft72.b[3][1]++;
        }

        cov_ygykaft72.s[12]++;
        return true;
      });
    });
  };

  var cov_2g265xpzsc = function () {
    var path = '/Users/gsinger/repos/clean/plugin-concat/src/generators.js',
        hash = 'b89e7de3c7a511bc93889e32d0cedd8fe882b268',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
      path: '/Users/gsinger/repos/clean/plugin-concat/src/generators.js',
      statementMap: {
        '0': {
          start: {
            line: 21,
            column: 32
          },
          end: {
            line: 105,
            column: 1
          }
        },
        '1': {
          start: {
            line: 22,
            column: 27
          },
          end: {
            line: 34,
            column: 8
          }
        },
        '2': {
          start: {
            line: 23,
            column: 33
          },
          end: {
            line: 23,
            column: 43
          }
        },
        '3': {
          start: {
            line: 25,
            column: 27
          },
          end: {
            line: 25,
            column: 72
          }
        },
        '4': {
          start: {
            line: 26,
            column: 33
          },
          end: {
            line: 26,
            column: 59
          }
        },
        '5': {
          start: {
            line: 29,
            column: 4
          },
          end: {
            line: 31,
            column: 5
          }
        },
        '6': {
          start: {
            line: 30,
            column: 6
          },
          end: {
            line: 30,
            column: 70
          }
        },
        '7': {
          start: {
            line: 33,
            column: 4
          },
          end: {
            line: 33,
            column: 32
          }
        },
        '8': {
          start: {
            line: 42,
            column: 23
          },
          end: {
            line: 49,
            column: 10
          }
        },
        '9': {
          start: {
            line: 43,
            column: 4
          },
          end: {
            line: 47,
            column: 5
          }
        },
        '10': {
          start: {
            line: 46,
            column: 6
          },
          end: {
            line: 46,
            column: 43
          }
        },
        '11': {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 15
          }
        },
        '12': {
          start: {
            line: 52,
            column: 17
          },
          end: {
            line: 57,
            column: 10
          }
        },
        '13': {
          start: {
            line: 53,
            column: 4
          },
          end: {
            line: 55,
            column: 5
          }
        },
        '14': {
          start: {
            line: 54,
            column: 6
          },
          end: {
            line: 54,
            column: 17
          }
        },
        '15': {
          start: {
            line: 56,
            column: 4
          },
          end: {
            line: 56,
            column: 67
          }
        },
        '16': {
          start: {
            line: 69,
            column: 27
          },
          end: {
            line: 72,
            column: 3
          }
        },
        '17': {
          start: {
            line: 74,
            column: 2
          },
          end: {
            line: 76,
            column: 3
          }
        },
        '18': {
          start: {
            line: 75,
            column: 4
          },
          end: {
            line: 75,
            column: 57
          }
        },
        '19': {
          start: {
            line: 77,
            column: 2
          },
          end: {
            line: 79,
            column: 3
          }
        },
        '20': {
          start: {
            line: 78,
            column: 4
          },
          end: {
            line: 78,
            column: 48
          }
        },
        '21': {
          start: {
            line: 80,
            column: 2
          },
          end: {
            line: 80,
            column: 57
          }
        },
        '22': {
          start: {
            line: 81,
            column: 2
          },
          end: {
            line: 81,
            column: 54
          }
        },
        '23': {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 82,
            column: 40
          }
        },
        '24': {
          start: {
            line: 83,
            column: 2
          },
          end: {
            line: 85,
            column: 8
          }
        },
        '25': {
          start: {
            line: 84,
            column: 4
          },
          end: {
            line: 84,
            column: 73
          }
        },
        '26': {
          start: {
            line: 86,
            column: 2
          },
          end: {
            line: 86,
            column: 34
          }
        },
        '27': {
          start: {
            line: 87,
            column: 2
          },
          end: {
            line: 87,
            column: 37
          }
        },
        '28': {
          start: {
            line: 88,
            column: 2
          },
          end: {
            line: 88,
            column: 45
          }
        },
        '29': {
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 89,
            column: 44
          }
        },
        '30': {
          start: {
            line: 91,
            column: 17
          },
          end: {
            line: 91,
            column: 18
          }
        },
        '31': {
          start: {
            line: 93,
            column: 2
          },
          end: {
            line: 102,
            column: 3
          }
        },
        '32': {
          start: {
            line: 94,
            column: 20
          },
          end: {
            line: 94,
            column: 48
          }
        },
        '33': {
          start: {
            line: 96,
            column: 4
          },
          end: {
            line: 99,
            column: 5
          }
        },
        '34': {
          start: {
            line: 97,
            column: 6
          },
          end: {
            line: 97,
            column: 51
          }
        },
        '35': {
          start: {
            line: 98,
            column: 6
          },
          end: {
            line: 98,
            column: 17
          }
        },
        '36': {
          start: {
            line: 100,
            column: 4
          },
          end: {
            line: 100,
            column: 23
          }
        },
        '37': {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 101,
            column: 32
          }
        },
        '38': {
          start: {
            line: 104,
            column: 2
          },
          end: {
            line: 104,
            column: 26
          }
        },
        '39': {
          start: {
            line: 121,
            column: 39
          },
          end: {
            line: 167,
            column: 1
          }
        },
        '40': {
          start: {
            line: 123,
            column: 2
          },
          end: {
            line: 123,
            column: 60
          }
        },
        '41': {
          start: {
            line: 124,
            column: 2
          },
          end: {
            line: 126,
            column: 3
          }
        },
        '42': {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 125,
            column: 62
          }
        },
        '43': {
          start: {
            line: 128,
            column: 25
          },
          end: {
            line: 128,
            column: 40
          }
        },
        '44': {
          start: {
            line: 129,
            column: 25
          },
          end: {
            line: 129,
            column: 63
          }
        },
        '45': {
          start: {
            line: 133,
            column: 2
          },
          end: {
            line: 133,
            column: 52
          }
        },
        '46': {
          start: {
            line: 135,
            column: 2
          },
          end: {
            line: 137,
            column: 3
          }
        },
        '47': {
          start: {
            line: 136,
            column: 4
          },
          end: {
            line: 136,
            column: 54
          }
        },
        '48': {
          start: {
            line: 139,
            column: 17
          },
          end: {
            line: 149,
            column: 3
          }
        },
        '49': {
          start: {
            line: 151,
            column: 2
          },
          end: {
            line: 164,
            column: 3
          }
        },
        '50': {
          start: {
            line: 152,
            column: 4
          },
          end: {
            line: 162,
            column: 6
          }
        },
        '51': {
          start: {
            line: 163,
            column: 4
          },
          end: {
            line: 163,
            column: 51
          }
        },
        '52': {
          start: {
            line: 166,
            column: 2
          },
          end: {
            line: 166,
            column: 16
          }
        }
      },
      fnMap: {
        '0': {
          name: '(anonymous_0)',
          decl: {
            start: {
              line: 21,
              column: 32
            },
            end: {
              line: 21,
              column: 33
            }
          },
          loc: {
            start: {
              line: 21,
              column: 67
            },
            end: {
              line: 105,
              column: 1
            }
          },
          line: 21
        },
        '1': {
          name: '(anonymous_1)',
          decl: {
            start: {
              line: 22,
              column: 44
            },
            end: {
              line: 22,
              column: 45
            }
          },
          loc: {
            start: {
              line: 22,
              column: 63
            },
            end: {
              line: 34,
              column: 3
            }
          },
          line: 22
        },
        '2': {
          name: '(anonymous_2)',
          decl: {
            start: {
              line: 42,
              column: 40
            },
            end: {
              line: 42,
              column: 41
            }
          },
          loc: {
            start: {
              line: 42,
              column: 59
            },
            end: {
              line: 49,
              column: 3
            }
          },
          line: 42
        },
        '3': {
          name: '(anonymous_3)',
          decl: {
            start: {
              line: 52,
              column: 34
            },
            end: {
              line: 52,
              column: 35
            }
          },
          loc: {
            start: {
              line: 52,
              column: 53
            },
            end: {
              line: 57,
              column: 3
            }
          },
          line: 52
        },
        '4': {
          name: '(anonymous_4)',
          decl: {
            start: {
              line: 83,
              column: 53
            },
            end: {
              line: 83,
              column: 54
            }
          },
          loc: {
            start: {
              line: 83,
              column: 72
            },
            end: {
              line: 85,
              column: 3
            }
          },
          line: 83
        },
        '5': {
          name: '(anonymous_5)',
          decl: {
            start: {
              line: 121,
              column: 39
            },
            end: {
              line: 121,
              column: 40
            }
          },
          loc: {
            start: {
              line: 121,
              column: 77
            },
            end: {
              line: 167,
              column: 1
            }
          },
          line: 121
        }
      },
      branchMap: {
        '0': {
          loc: {
            start: {
              line: 21,
              column: 46
            },
            end: {
              line: 21,
              column: 60
            }
          },
          type: 'default-arg',
          locations: [{
            start: {
              line: 21,
              column: 58
            },
            end: {
              line: 21,
              column: 60
            }
          }],
          line: 21
        },
        '1': {
          loc: {
            start: {
              line: 29,
              column: 4
            },
            end: {
              line: 31,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 29,
              column: 4
            },
            end: {
              line: 31,
              column: 5
            }
          }, {
            start: {
              line: 29,
              column: 4
            },
            end: {
              line: 31,
              column: 5
            }
          }],
          line: 29
        },
        '2': {
          loc: {
            start: {
              line: 43,
              column: 4
            },
            end: {
              line: 47,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 43,
              column: 4
            },
            end: {
              line: 47,
              column: 5
            }
          }, {
            start: {
              line: 43,
              column: 4
            },
            end: {
              line: 47,
              column: 5
            }
          }],
          line: 43
        },
        '3': {
          loc: {
            start: {
              line: 43,
              column: 8
            },
            end: {
              line: 45,
              column: 53
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 43,
              column: 8
            },
            end: {
              line: 43,
              column: 27
            }
          }, {
            start: {
              line: 44,
              column: 8
            },
            end: {
              line: 44,
              column: 37
            }
          }, {
            start: {
              line: 45,
              column: 9
            },
            end: {
              line: 45,
              column: 13
            }
          }, {
            start: {
              line: 45,
              column: 17
            },
            end: {
              line: 45,
              column: 52
            }
          }],
          line: 43
        },
        '4': {
          loc: {
            start: {
              line: 53,
              column: 4
            },
            end: {
              line: 55,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 53,
              column: 4
            },
            end: {
              line: 55,
              column: 5
            }
          }, {
            start: {
              line: 53,
              column: 4
            },
            end: {
              line: 55,
              column: 5
            }
          }],
          line: 53
        },
        '5': {
          loc: {
            start: {
              line: 56,
              column: 11
            },
            end: {
              line: 56,
              column: 66
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 56,
              column: 33
            },
            end: {
              line: 56,
              column: 59
            }
          }, {
            start: {
              line: 56,
              column: 62
            },
            end: {
              line: 56,
              column: 66
            }
          }],
          line: 56
        },
        '6': {
          loc: {
            start: {
              line: 74,
              column: 2
            },
            end: {
              line: 76,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 74,
              column: 2
            },
            end: {
              line: 76,
              column: 3
            }
          }, {
            start: {
              line: 74,
              column: 2
            },
            end: {
              line: 76,
              column: 3
            }
          }],
          line: 74
        },
        '7': {
          loc: {
            start: {
              line: 77,
              column: 2
            },
            end: {
              line: 79,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 77,
              column: 2
            },
            end: {
              line: 79,
              column: 3
            }
          }, {
            start: {
              line: 77,
              column: 2
            },
            end: {
              line: 79,
              column: 3
            }
          }],
          line: 77
        },
        '8': {
          loc: {
            start: {
              line: 84,
              column: 11
            },
            end: {
              line: 84,
              column: 72
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 84,
              column: 43
            },
            end: {
              line: 84,
              column: 46
            }
          }, {
            start: {
              line: 84,
              column: 49
            },
            end: {
              line: 84,
              column: 72
            }
          }],
          line: 84
        },
        '9': {
          loc: {
            start: {
              line: 96,
              column: 4
            },
            end: {
              line: 99,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 96,
              column: 4
            },
            end: {
              line: 99,
              column: 5
            }
          }, {
            start: {
              line: 96,
              column: 4
            },
            end: {
              line: 99,
              column: 5
            }
          }],
          line: 96
        },
        '10': {
          loc: {
            start: {
              line: 124,
              column: 2
            },
            end: {
              line: 126,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 124,
              column: 2
            },
            end: {
              line: 126,
              column: 3
            }
          }, {
            start: {
              line: 124,
              column: 2
            },
            end: {
              line: 126,
              column: 3
            }
          }],
          line: 124
        },
        '11': {
          loc: {
            start: {
              line: 129,
              column: 25
            },
            end: {
              line: 129,
              column: 63
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 129,
              column: 41
            },
            end: {
              line: 129,
              column: 56
            }
          }, {
            start: {
              line: 129,
              column: 59
            },
            end: {
              line: 129,
              column: 63
            }
          }],
          line: 129
        },
        '12': {
          loc: {
            start: {
              line: 135,
              column: 2
            },
            end: {
              line: 137,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 135,
              column: 2
            },
            end: {
              line: 137,
              column: 3
            }
          }, {
            start: {
              line: 135,
              column: 2
            },
            end: {
              line: 137,
              column: 3
            }
          }],
          line: 135
        },
        '13': {
          loc: {
            start: {
              line: 151,
              column: 2
            },
            end: {
              line: 164,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 151,
              column: 2
            },
            end: {
              line: 164,
              column: 3
            }
          }, {
            start: {
              line: 151,
              column: 2
            },
            end: {
              line: 164,
              column: 3
            }
          }],
          line: 151
        }
      },
      s: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0,
        '7': 0,
        '8': 0,
        '9': 0,
        '10': 0,
        '11': 0,
        '12': 0,
        '13': 0,
        '14': 0,
        '15': 0,
        '16': 0,
        '17': 0,
        '18': 0,
        '19': 0,
        '20': 0,
        '21': 0,
        '22': 0,
        '23': 0,
        '24': 0,
        '25': 0,
        '26': 0,
        '27': 0,
        '28': 0,
        '29': 0,
        '30': 0,
        '31': 0,
        '32': 0,
        '33': 0,
        '34': 0,
        '35': 0,
        '36': 0,
        '37': 0,
        '38': 0,
        '39': 0,
        '40': 0,
        '41': 0,
        '42': 0,
        '43': 0,
        '44': 0,
        '45': 0,
        '46': 0,
        '47': 0,
        '48': 0,
        '49': 0,
        '50': 0,
        '51': 0,
        '52': 0
      },
      f: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0
      },
      b: {
        '0': [0],
        '1': [0, 0],
        '2': [0, 0],
        '3': [0, 0, 0, 0],
        '4': [0, 0],
        '5': [0, 0],
        '6': [0, 0],
        '7': [0, 0],
        '8': [0, 0],
        '9': [0, 0],
        '10': [0, 0],
        '11': [0, 0],
        '12': [0, 0],
        '13': [0, 0]
      },
      _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
      return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
  }();
  cov_2g265xpzsc.s[0]++;
  var combinePlaylists = function combinePlaylists(_ref) {
    var playlists = _ref.playlists,
        _ref$uriSuffix = _ref.uriSuffix,
        uriSuffix = _ref$uriSuffix === void 0 ? (cov_2g265xpzsc.b[0][0]++, '') : _ref$uriSuffix;
    cov_2g265xpzsc.f[0]++;
    var combinedSegments = (cov_2g265xpzsc.s[1]++, playlists.reduce(function (acc, playlist) {
      cov_2g265xpzsc.f[1]++;
      var firstNewSegmentIndex = (cov_2g265xpzsc.s[2]++, acc.length);
      var clonedSegments = (cov_2g265xpzsc.s[3]++, JSON.parse(JSON.stringify(playlist.segments)));
      var concatenatedSegments = (cov_2g265xpzsc.s[4]++, acc.concat(clonedSegments));
      cov_2g265xpzsc.s[5]++;

      if (acc.length > 0) {
        cov_2g265xpzsc.b[1][0]++;
        cov_2g265xpzsc.s[6]++;
        concatenatedSegments[firstNewSegmentIndex].discontinuity = true;
      } else {
        cov_2g265xpzsc.b[1][1]++;
      }

      cov_2g265xpzsc.s[7]++;
      return concatenatedSegments;
    }, []));
    var maxBandwidth = (cov_2g265xpzsc.s[8]++, playlists.reduce(function (acc, playlist) {
      cov_2g265xpzsc.f[2]++;
      cov_2g265xpzsc.s[9]++;

      if ((cov_2g265xpzsc.b[3][0]++, playlist.attributes) && (cov_2g265xpzsc.b[3][1]++, playlist.attributes.BANDWIDTH) && ((cov_2g265xpzsc.b[3][2]++, !acc) || (cov_2g265xpzsc.b[3][3]++, playlist.attributes.BANDWIDTH > acc))) {
        cov_2g265xpzsc.b[2][0]++;
        cov_2g265xpzsc.s[10]++;
        return playlist.attributes.BANDWIDTH;
      } else {
        cov_2g265xpzsc.b[2][1]++;
      }

      cov_2g265xpzsc.s[11]++;
      return acc;
    }, null));
    var codecs = (cov_2g265xpzsc.s[12]++, playlists.reduce(function (acc, playlist) {
      cov_2g265xpzsc.f[3]++;
      cov_2g265xpzsc.s[13]++;

      if (acc) {
        cov_2g265xpzsc.b[4][0]++;
        cov_2g265xpzsc.s[14]++;
        return acc;
      } else {
        cov_2g265xpzsc.b[4][1]++;
      }

      cov_2g265xpzsc.s[15]++;
      return playlist.attributes ? (cov_2g265xpzsc.b[5][0]++, playlist.attributes.CODECS) : (cov_2g265xpzsc.b[5][1]++, null);
    }, null));
    var combinedPlaylist = (cov_2g265xpzsc.s[16]++, {
      attributes: {},
      segments: combinedSegments
    });
    cov_2g265xpzsc.s[17]++;

    if (maxBandwidth) {
      cov_2g265xpzsc.b[6][0]++;
      cov_2g265xpzsc.s[18]++;
      combinedPlaylist.attributes.BANDWIDTH = maxBandwidth;
    } else {
      cov_2g265xpzsc.b[6][1]++;
    }

    cov_2g265xpzsc.s[19]++;

    if (codecs) {
      cov_2g265xpzsc.b[7][0]++;
      cov_2g265xpzsc.s[20]++;
      combinedPlaylist.attributes.CODECS = codecs;
    } else {
      cov_2g265xpzsc.b[7][1]++;
    }

    cov_2g265xpzsc.s[21]++;
    combinedPlaylist.uri = "combined-playlist" + uriSuffix;
    cov_2g265xpzsc.s[22]++;
    combinedPlaylist.resolvedUri = combinedPlaylist.uri;
    cov_2g265xpzsc.s[23]++;
    combinedPlaylist.playlistType = 'VOD';
    cov_2g265xpzsc.s[24]++;
    combinedPlaylist.targetDuration = playlists.reduce(function (acc, playlist) {
      cov_2g265xpzsc.f[4]++;
      cov_2g265xpzsc.s[25]++;
      return acc > playlist.targetDuration ? (cov_2g265xpzsc.b[8][0]++, acc) : (cov_2g265xpzsc.b[8][1]++, playlist.targetDuration);
    }, 0);
    cov_2g265xpzsc.s[26]++;
    combinedPlaylist.endList = true;
    cov_2g265xpzsc.s[27]++;
    combinedPlaylist.mediaSequence = 0;
    cov_2g265xpzsc.s[28]++;
    combinedPlaylist.discontinuitySequence = 0;
    cov_2g265xpzsc.s[29]++;
    combinedPlaylist.discontinuityStarts = [];
    var timeline = (cov_2g265xpzsc.s[30]++, 0);
    cov_2g265xpzsc.s[31]++;

    for (var i = 0; i < combinedPlaylist.segments.length; i++) {
      var segment = (cov_2g265xpzsc.s[32]++, combinedPlaylist.segments[i]);
      cov_2g265xpzsc.s[33]++;

      if (segment.discontinuity) {
        cov_2g265xpzsc.b[9][0]++;
        cov_2g265xpzsc.s[34]++;
        combinedPlaylist.discontinuityStarts.push(i);
        cov_2g265xpzsc.s[35]++;
        timeline++;
      } else {
        cov_2g265xpzsc.b[9][1]++;
      }

      cov_2g265xpzsc.s[36]++;
      segment.number = i;
      cov_2g265xpzsc.s[37]++;
      segment.timeline = timeline;
    }

    cov_2g265xpzsc.s[38]++;
    return combinedPlaylist;
  };
  cov_2g265xpzsc.s[39]++;
  var constructMasterManifest = function constructMasterManifest(_ref2) {
    var videoPlaylist = _ref2.videoPlaylist,
        audioPlaylist = _ref2.audioPlaylist;
    cov_2g265xpzsc.f[5]++;
    cov_2g265xpzsc.s[40]++;
    videoPlaylist = JSON.parse(JSON.stringify(videoPlaylist));
    cov_2g265xpzsc.s[41]++;

    if (audioPlaylist) {
      cov_2g265xpzsc.b[10][0]++;
      cov_2g265xpzsc.s[42]++;
      audioPlaylist = JSON.parse(JSON.stringify(audioPlaylist));
    } else {
      cov_2g265xpzsc.b[10][1]++;
    }

    var videoPlaylists = (cov_2g265xpzsc.s[43]++, [videoPlaylist]);
    var audioPlaylists = (cov_2g265xpzsc.s[44]++, audioPlaylist ? (cov_2g265xpzsc.b[11][0]++, [audioPlaylist]) : (cov_2g265xpzsc.b[11][1]++, null));
    cov_2g265xpzsc.s[45]++;
    videoPlaylists[videoPlaylist.uri] = videoPlaylist;
    cov_2g265xpzsc.s[46]++;

    if (audioPlaylists) {
      cov_2g265xpzsc.b[12][0]++;
      cov_2g265xpzsc.s[47]++;
      audioPlaylists[audioPlaylist.uri] = audioPlaylist;
    } else {
      cov_2g265xpzsc.b[12][1]++;
    }

    var master = (cov_2g265xpzsc.s[48]++, {
      mediaGroups: {
        'AUDIO': {},
        'VIDEO': {},
        'CLOSED-CAPTIONS': {},
        'SUBTITLES': {}
      },
      uri: window_1.location.href,
      playlists: videoPlaylists
    });
    cov_2g265xpzsc.s[49]++;

    if (audioPlaylist) {
      cov_2g265xpzsc.b[13][0]++;
      cov_2g265xpzsc.s[50]++;
      master.mediaGroups.AUDIO.audio = {
        default: {
          autoselect: true,
          default: true,
          language: '',
          uri: 'combined-audio-playlists',
          playlists: audioPlaylists
        }
      };
      cov_2g265xpzsc.s[51]++;
      master.playlists[0].attributes.AUDIO = 'audio';
    } else {
      cov_2g265xpzsc.b[13][1]++;
    }

    cov_2g265xpzsc.s[52]++;
    return master;
  };

  var cov_1zakfcgeyg = function () {
    var path = '/Users/gsinger/repos/clean/plugin-concat/src/drm.js',
        hash = 'c1fb7ef8cc19e62d49d92dc15508faac8fb79da5',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
      path: '/Users/gsinger/repos/clean/plugin-concat/src/drm.js',
      statementMap: {
        '0': {
          start: {
            line: 3,
            column: 35
          },
          end: {
            line: 3,
            column: 55
          }
        },
        '1': {
          start: {
            line: 23,
            column: 49
          },
          end: {
            line: 50,
            column: 1
          }
        },
        '2': {
          start: {
            line: 30,
            column: 2
          },
          end: {
            line: 49,
            column: 4
          }
        },
        '3': {
          start: {
            line: 31,
            column: 27
          },
          end: {
            line: 35,
            column: 5
          }
        },
        '4': {
          start: {
            line: 37,
            column: 4
          },
          end: {
            line: 39,
            column: 5
          }
        },
        '5': {
          start: {
            line: 38,
            column: 6
          },
          end: {
            line: 38,
            column: 31
          }
        },
        '6': {
          start: {
            line: 40,
            column: 4
          },
          end: {
            line: 42,
            column: 5
          }
        },
        '7': {
          start: {
            line: 41,
            column: 6
          },
          end: {
            line: 41,
            column: 45
          }
        },
        '8': {
          start: {
            line: 44,
            column: 4
          },
          end: {
            line: 48,
            column: 7
          }
        },
        '9': {
          start: {
            line: 72,
            column: 50
          },
          end: {
            line: 165,
            column: 1
          }
        },
        '10': {
          start: {
            line: 78,
            column: 34
          },
          end: {
            line: 80,
            column: 11
          }
        },
        '11': {
          start: {
            line: 79,
            column: 4
          },
          end: {
            line: 79,
            column: 30
          }
        },
        '12': {
          start: {
            line: 82,
            column: 2
          },
          end: {
            line: 84,
            column: 3
          }
        },
        '13': {
          start: {
            line: 83,
            column: 4
          },
          end: {
            line: 83,
            column: 16
          }
        },
        '14': {
          start: {
            line: 86,
            column: 40
          },
          end: {
            line: 86,
            column: 42
          }
        },
        '15': {
          start: {
            line: 89,
            column: 2
          },
          end: {
            line: 158,
            column: 3
          }
        },
        '16': {
          start: {
            line: 90,
            column: 29
          },
          end: {
            line: 90,
            column: 42
          }
        },
        '17': {
          start: {
            line: 94,
            column: 4
          },
          end: {
            line: 96,
            column: 5
          }
        },
        '18': {
          start: {
            line: 95,
            column: 6
          },
          end: {
            line: 95,
            column: 15
          }
        },
        '19': {
          start: {
            line: 98,
            column: 30
          },
          end: {
            line: 98,
            column: 74
          }
        },
        '20': {
          start: {
            line: 101,
            column: 4
          },
          end: {
            line: 103,
            column: 5
          }
        },
        '21': {
          start: {
            line: 102,
            column: 6
          },
          end: {
            line: 102,
            column: 15
          }
        },
        '22': {
          start: {
            line: 105,
            column: 4
          },
          end: {
            line: 114,
            column: 5
          }
        },
        '23': {
          start: {
            line: 113,
            column: 6
          },
          end: {
            line: 113,
            column: 15
          }
        },
        '24': {
          start: {
            line: 119,
            column: 6
          },
          end: {
            line: 119,
            column: 87
          }
        },
        '25': {
          start: {
            line: 121,
            column: 6
          },
          end: {
            line: 121,
            column: 81
          }
        },
        '26': {
          start: {
            line: 122,
            column: 26
          },
          end: {
            line: 122,
            column: 43
          }
        },
        '27': {
          start: {
            line: 123,
            column: 26
          },
          end: {
            line: 123,
            column: 43
          }
        },
        '28': {
          start: {
            line: 124,
            column: 22
          },
          end: {
            line: 126,
            column: 77
          }
        },
        '29': {
          start: {
            line: 127,
            column: 22
          },
          end: {
            line: 129,
            column: 77
          }
        },
        '30': {
          start: {
            line: 130,
            column: 22
          },
          end: {
            line: 130,
            column: 49
          }
        },
        '31': {
          start: {
            line: 131,
            column: 22
          },
          end: {
            line: 131,
            column: 49
          }
        },
        '32': {
          start: {
            line: 132,
            column: 26
          },
          end: {
            line: 135,
            column: 5
          }
        },
        '33': {
          start: {
            line: 139,
            column: 4
          },
          end: {
            line: 141,
            column: 5
          }
        },
        '34': {
          start: {
            line: 140,
            column: 6
          },
          end: {
            line: 140,
            column: 30
          }
        },
        '35': {
          start: {
            line: 142,
            column: 4
          },
          end: {
            line: 144,
            column: 5
          }
        },
        '36': {
          start: {
            line: 143,
            column: 6
          },
          end: {
            line: 143,
            column: 44
          }
        },
        '37': {
          start: {
            line: 147,
            column: 4
          },
          end: {
            line: 151,
            column: 5
          }
        },
        '38': {
          start: {
            line: 148,
            column: 22
          },
          end: {
            line: 148,
            column: 78
          }
        },
        '39': {
          start: {
            line: 150,
            column: 6
          },
          end: {
            line: 150,
            column: 85
          }
        },
        '40': {
          start: {
            line: 153,
            column: 4
          },
          end: {
            line: 157,
            column: 5
          }
        },
        '41': {
          start: {
            line: 154,
            column: 22
          },
          end: {
            line: 154,
            column: 78
          }
        },
        '42': {
          start: {
            line: 156,
            column: 6
          },
          end: {
            line: 156,
            column: 85
          }
        },
        '43': {
          start: {
            line: 160,
            column: 2
          },
          end: {
            line: 164,
            column: 4
          }
        },
        '44': {
          start: {
            line: 161,
            column: 4
          },
          end: {
            line: 163,
            column: 7
          }
        },
        '45': {
          start: {
            line: 162,
            column: 6
          },
          end: {
            line: 162,
            column: 43
          }
        }
      },
      fnMap: {
        '0': {
          name: '(anonymous_0)',
          decl: {
            start: {
              line: 23,
              column: 49
            },
            end: {
              line: 23,
              column: 50
            }
          },
          loc: {
            start: {
              line: 29,
              column: 6
            },
            end: {
              line: 50,
              column: 1
            }
          },
          line: 29
        },
        '1': {
          name: '(anonymous_1)',
          decl: {
            start: {
              line: 30,
              column: 9
            },
            end: {
              line: 30,
              column: 10
            }
          },
          loc: {
            start: {
              line: 30,
              column: 21
            },
            end: {
              line: 49,
              column: 3
            }
          },
          line: 30
        },
        '2': {
          name: '(anonymous_2)',
          decl: {
            start: {
              line: 72,
              column: 50
            },
            end: {
              line: 72,
              column: 51
            }
          },
          loc: {
            start: {
              line: 77,
              column: 6
            },
            end: {
              line: 165,
              column: 1
            }
          },
          line: 77
        },
        '3': {
          name: '(anonymous_3)',
          decl: {
            start: {
              line: 78,
              column: 52
            },
            end: {
              line: 78,
              column: 53
            }
          },
          loc: {
            start: {
              line: 78,
              column: 72
            },
            end: {
              line: 80,
              column: 3
            }
          },
          line: 78
        },
        '4': {
          name: '(anonymous_4)',
          decl: {
            start: {
              line: 160,
              column: 9
            },
            end: {
              line: 160,
              column: 10
            }
          },
          loc: {
            start: {
              line: 160,
              column: 21
            },
            end: {
              line: 164,
              column: 3
            }
          },
          line: 160
        },
        '5': {
          name: '(anonymous_5)',
          decl: {
            start: {
              line: 161,
              column: 42
            },
            end: {
              line: 161,
              column: 43
            }
          },
          loc: {
            start: {
              line: 161,
              column: 76
            },
            end: {
              line: 163,
              column: 5
            }
          },
          line: 161
        }
      },
      branchMap: {
        '0': {
          loc: {
            start: {
              line: 37,
              column: 4
            },
            end: {
              line: 39,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 37,
              column: 4
            },
            end: {
              line: 39,
              column: 5
            }
          }, {
            start: {
              line: 37,
              column: 4
            },
            end: {
              line: 39,
              column: 5
            }
          }],
          line: 37
        },
        '1': {
          loc: {
            start: {
              line: 40,
              column: 4
            },
            end: {
              line: 42,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 40,
              column: 4
            },
            end: {
              line: 42,
              column: 5
            }
          }, {
            start: {
              line: 40,
              column: 4
            },
            end: {
              line: 42,
              column: 5
            }
          }],
          line: 40
        },
        '2': {
          loc: {
            start: {
              line: 79,
              column: 11
            },
            end: {
              line: 79,
              column: 29
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 79,
              column: 11
            },
            end: {
              line: 79,
              column: 14
            }
          }, {
            start: {
              line: 79,
              column: 18
            },
            end: {
              line: 79,
              column: 29
            }
          }],
          line: 79
        },
        '3': {
          loc: {
            start: {
              line: 82,
              column: 2
            },
            end: {
              line: 84,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 82,
              column: 2
            },
            end: {
              line: 84,
              column: 3
            }
          }, {
            start: {
              line: 82,
              column: 2
            },
            end: {
              line: 84,
              column: 3
            }
          }],
          line: 82
        },
        '4': {
          loc: {
            start: {
              line: 94,
              column: 4
            },
            end: {
              line: 96,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 94,
              column: 4
            },
            end: {
              line: 96,
              column: 5
            }
          }, {
            start: {
              line: 94,
              column: 4
            },
            end: {
              line: 96,
              column: 5
            }
          }],
          line: 94
        },
        '5': {
          loc: {
            start: {
              line: 101,
              column: 4
            },
            end: {
              line: 103,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 101,
              column: 4
            },
            end: {
              line: 103,
              column: 5
            }
          }, {
            start: {
              line: 101,
              column: 4
            },
            end: {
              line: 103,
              column: 5
            }
          }],
          line: 101
        },
        '6': {
          loc: {
            start: {
              line: 105,
              column: 4
            },
            end: {
              line: 114,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 105,
              column: 4
            },
            end: {
              line: 114,
              column: 5
            }
          }, {
            start: {
              line: 105,
              column: 4
            },
            end: {
              line: 114,
              column: 5
            }
          }],
          line: 105
        },
        '7': {
          loc: {
            start: {
              line: 106,
              column: 6
            },
            end: {
              line: 107,
              column: 67
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 106,
              column: 6
            },
            end: {
              line: 106,
              column: 28
            }
          }, {
            start: {
              line: 107,
              column: 6
            },
            end: {
              line: 107,
              column: 67
            }
          }],
          line: 106
        },
        '8': {
          loc: {
            start: {
              line: 107,
              column: 8
            },
            end: {
              line: 107,
              column: 66
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 107,
              column: 8
            },
            end: {
              line: 107,
              column: 35
            }
          }, {
            start: {
              line: 107,
              column: 39
            },
            end: {
              line: 107,
              column: 66
            }
          }],
          line: 107
        },
        '9': {
          loc: {
            start: {
              line: 119,
              column: 6
            },
            end: {
              line: 119,
              column: 87
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 119,
              column: 46
            },
            end: {
              line: 119,
              column: 67
            }
          }, {
            start: {
              line: 119,
              column: 70
            },
            end: {
              line: 119,
              column: 87
            }
          }],
          line: 119
        },
        '10': {
          loc: {
            start: {
              line: 121,
              column: 6
            },
            end: {
              line: 121,
              column: 81
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 121,
              column: 46
            },
            end: {
              line: 121,
              column: 74
            }
          }, {
            start: {
              line: 121,
              column: 77
            },
            end: {
              line: 121,
              column: 81
            }
          }],
          line: 121
        },
        '11': {
          loc: {
            start: {
              line: 124,
              column: 22
            },
            end: {
              line: 126,
              column: 77
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 126,
              column: 6
            },
            end: {
              line: 126,
              column: 70
            }
          }, {
            start: {
              line: 126,
              column: 73
            },
            end: {
              line: 126,
              column: 77
            }
          }],
          line: 124
        },
        '12': {
          loc: {
            start: {
              line: 124,
              column: 22
            },
            end: {
              line: 125,
              column: 65
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 124,
              column: 22
            },
            end: {
              line: 124,
              column: 53
            }
          }, {
            start: {
              line: 125,
              column: 6
            },
            end: {
              line: 125,
              column: 65
            }
          }],
          line: 124
        },
        '13': {
          loc: {
            start: {
              line: 127,
              column: 22
            },
            end: {
              line: 129,
              column: 77
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 129,
              column: 6
            },
            end: {
              line: 129,
              column: 70
            }
          }, {
            start: {
              line: 129,
              column: 73
            },
            end: {
              line: 129,
              column: 77
            }
          }],
          line: 127
        },
        '14': {
          loc: {
            start: {
              line: 127,
              column: 22
            },
            end: {
              line: 128,
              column: 65
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 127,
              column: 22
            },
            end: {
              line: 127,
              column: 53
            }
          }, {
            start: {
              line: 128,
              column: 6
            },
            end: {
              line: 128,
              column: 65
            }
          }],
          line: 127
        },
        '15': {
          loc: {
            start: {
              line: 139,
              column: 4
            },
            end: {
              line: 141,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 139,
              column: 4
            },
            end: {
              line: 141,
              column: 5
            }
          }, {
            start: {
              line: 139,
              column: 4
            },
            end: {
              line: 141,
              column: 5
            }
          }],
          line: 139
        },
        '16': {
          loc: {
            start: {
              line: 142,
              column: 4
            },
            end: {
              line: 144,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 142,
              column: 4
            },
            end: {
              line: 144,
              column: 5
            }
          }, {
            start: {
              line: 142,
              column: 4
            },
            end: {
              line: 144,
              column: 5
            }
          }],
          line: 142
        },
        '17': {
          loc: {
            start: {
              line: 147,
              column: 4
            },
            end: {
              line: 151,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 147,
              column: 4
            },
            end: {
              line: 151,
              column: 5
            }
          }, {
            start: {
              line: 147,
              column: 4
            },
            end: {
              line: 151,
              column: 5
            }
          }],
          line: 147
        },
        '18': {
          loc: {
            start: {
              line: 153,
              column: 4
            },
            end: {
              line: 157,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 153,
              column: 4
            },
            end: {
              line: 157,
              column: 5
            }
          }, {
            start: {
              line: 153,
              column: 4
            },
            end: {
              line: 157,
              column: 5
            }
          }],
          line: 153
        }
      },
      s: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0,
        '7': 0,
        '8': 0,
        '9': 0,
        '10': 0,
        '11': 0,
        '12': 0,
        '13': 0,
        '14': 0,
        '15': 0,
        '16': 0,
        '17': 0,
        '18': 0,
        '19': 0,
        '20': 0,
        '21': 0,
        '22': 0,
        '23': 0,
        '24': 0,
        '25': 0,
        '26': 0,
        '27': 0,
        '28': 0,
        '29': 0,
        '30': 0,
        '31': 0,
        '32': 0,
        '33': 0,
        '34': 0,
        '35': 0,
        '36': 0,
        '37': 0,
        '38': 0,
        '39': 0,
        '40': 0,
        '41': 0,
        '42': 0,
        '43': 0,
        '44': 0,
        '45': 0
      },
      f: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0
      },
      b: {
        '0': [0, 0],
        '1': [0, 0],
        '2': [0, 0],
        '3': [0, 0],
        '4': [0, 0],
        '5': [0, 0],
        '6': [0, 0],
        '7': [0, 0],
        '8': [0, 0],
        '9': [0, 0],
        '10': [0, 0],
        '11': [0, 0],
        '12': [0, 0],
        '13': [0, 0],
        '14': [0, 0],
        '15': [0, 0],
        '16': [0, 0],
        '17': [0, 0],
        '18': [0, 0]
      },
      _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
      return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
  }();
  var WIDEVINE_KEY_SYSTEM_STRING = (cov_1zakfcgeyg.s[0]++, 'com.widevine.alpha');
  cov_1zakfcgeyg.s[1]++;
  var createInitializeMediaKeysFunction = function createInitializeMediaKeysFunction(_ref) {
    var pssh = _ref.pssh,
        audioContentType = _ref.audioContentType,
        videoContentType = _ref.videoContentType,
        url = _ref.url,
        getLicense = _ref.getLicense;
    cov_1zakfcgeyg.f[0]++;
    cov_1zakfcgeyg.s[2]++;
    return function (player) {
      cov_1zakfcgeyg.f[1]++;
      var widevineConfig = (cov_1zakfcgeyg.s[3]++, {
        audioContentType: audioContentType,
        videoContentType: videoContentType,
        pssh: pssh
      });
      cov_1zakfcgeyg.s[4]++;

      if (url) {
        cov_1zakfcgeyg.b[0][0]++;
        cov_1zakfcgeyg.s[5]++;
        widevineConfig.url = url;
      } else {
        cov_1zakfcgeyg.b[0][1]++;
      }

      cov_1zakfcgeyg.s[6]++;

      if (getLicense) {
        cov_1zakfcgeyg.b[1][0]++;
        cov_1zakfcgeyg.s[7]++;
        widevineConfig.getLicense = getLicense;
      } else {
        cov_1zakfcgeyg.b[1][1]++;
      }

      cov_1zakfcgeyg.s[8]++;
      player.eme.initializeMediaKeys({
        keySystems: {
          'com.widevine.alpha': widevineConfig
        }
      });
    };
  };
  cov_1zakfcgeyg.s[9]++;
  var createInitializeKeySystemsFunction = function createInitializeKeySystemsFunction(_ref2) {
    var videoPlaylists = _ref2.videoPlaylists,
        audioPlaylists = _ref2.audioPlaylists,
        audioAndVideoTypes = _ref2.audioAndVideoTypes,
        keySystems = _ref2.keySystems;
    cov_1zakfcgeyg.f[2]++;
    var containsEncryptedSource = (cov_1zakfcgeyg.s[10]++, keySystems.reduce(function (acc, keySystem) {
      cov_1zakfcgeyg.f[3]++;
      cov_1zakfcgeyg.s[11]++;
      return (cov_1zakfcgeyg.b[2][0]++, acc) || (cov_1zakfcgeyg.b[2][1]++, !!keySystem);
    }, false));
    cov_1zakfcgeyg.s[12]++;

    if (!containsEncryptedSource) {
      cov_1zakfcgeyg.b[3][0]++;
      cov_1zakfcgeyg.s[13]++;
      return null;
    } else {
      cov_1zakfcgeyg.b[3][1]++;
    }

    var initializeKeySystemsFunctions = (cov_1zakfcgeyg.s[14]++, []);
    cov_1zakfcgeyg.s[15]++;

    for (var i = 0; i < videoPlaylists.length; i++) {
      var keySystemsConfig = (cov_1zakfcgeyg.s[16]++, keySystems[i]);
      cov_1zakfcgeyg.s[17]++;

      if (!keySystemsConfig) {
        cov_1zakfcgeyg.b[4][0]++;
        cov_1zakfcgeyg.s[18]++;
        continue;
      } else {
        cov_1zakfcgeyg.b[4][1]++;
      }

      var widevineKeySystem = (cov_1zakfcgeyg.s[19]++, keySystemsConfig[WIDEVINE_KEY_SYSTEM_STRING]);
      cov_1zakfcgeyg.s[20]++;

      if (!widevineKeySystem) {
        cov_1zakfcgeyg.b[5][0]++;
        cov_1zakfcgeyg.s[21]++;
        continue;
      } else {
        cov_1zakfcgeyg.b[5][1]++;
      }

      cov_1zakfcgeyg.s[22]++;

      if ((cov_1zakfcgeyg.b[7][0]++, !audioAndVideoTypes[i]) || (cov_1zakfcgeyg.b[7][1]++, !((cov_1zakfcgeyg.b[8][0]++, audioAndVideoTypes[i].video) || (cov_1zakfcgeyg.b[8][1]++, audioAndVideoTypes[i].audio)))) {
        cov_1zakfcgeyg.b[6][0]++;
        cov_1zakfcgeyg.s[23]++;
        continue;
      } else {
        cov_1zakfcgeyg.b[6][1]++;
      }

      var url = (cov_1zakfcgeyg.s[24]++, typeof widevineKeySystem === 'object' ? (cov_1zakfcgeyg.b[9][0]++, widevineKeySystem.url) : (cov_1zakfcgeyg.b[9][1]++, widevineKeySystem));
      var getLicense = (cov_1zakfcgeyg.s[25]++, typeof widevineKeySystem === 'object' ? (cov_1zakfcgeyg.b[10][0]++, widevineKeySystem.getLicense) : (cov_1zakfcgeyg.b[10][1]++, null));
      var videoPlaylist = (cov_1zakfcgeyg.s[26]++, videoPlaylists[i]);
      var audioPlaylist = (cov_1zakfcgeyg.s[27]++, audioPlaylists[i]);
      var videoPssh = (cov_1zakfcgeyg.s[28]++, (cov_1zakfcgeyg.b[12][0]++, videoPlaylist.contentProtection) && (cov_1zakfcgeyg.b[12][1]++, videoPlaylist.contentProtection[WIDEVINE_KEY_SYSTEM_STRING]) ? (cov_1zakfcgeyg.b[11][0]++, videoPlaylist.contentProtection[WIDEVINE_KEY_SYSTEM_STRING].pssh) : (cov_1zakfcgeyg.b[11][1]++, null));
      var audioPssh = (cov_1zakfcgeyg.s[29]++, (cov_1zakfcgeyg.b[14][0]++, audioPlaylist.contentProtection) && (cov_1zakfcgeyg.b[14][1]++, audioPlaylist.contentProtection[WIDEVINE_KEY_SYSTEM_STRING]) ? (cov_1zakfcgeyg.b[13][0]++, audioPlaylist.contentProtection[WIDEVINE_KEY_SYSTEM_STRING].pssh) : (cov_1zakfcgeyg.b[13][1]++, null));
      var audioType = (cov_1zakfcgeyg.s[30]++, audioAndVideoTypes[i].audio);
      var videoType = (cov_1zakfcgeyg.s[31]++, audioAndVideoTypes[i].video);
      var commonOptions = (cov_1zakfcgeyg.s[32]++, {
        audioContentType: audioType,
        videoContentType: videoType
      });
      cov_1zakfcgeyg.s[33]++;

      if (url) {
        cov_1zakfcgeyg.b[15][0]++;
        cov_1zakfcgeyg.s[34]++;
        commonOptions.url = url;
      } else {
        cov_1zakfcgeyg.b[15][1]++;
      }

      cov_1zakfcgeyg.s[35]++;

      if (getLicense) {
        cov_1zakfcgeyg.b[16][0]++;
        cov_1zakfcgeyg.s[36]++;
        commonOptions.getLicense = getLicense;
      } else {
        cov_1zakfcgeyg.b[16][1]++;
      }

      cov_1zakfcgeyg.s[37]++;

      if (videoPssh) {
        cov_1zakfcgeyg.b[17][0]++;
        var options = (cov_1zakfcgeyg.s[38]++, videojs.mergeOptions(commonOptions, {
          pssh: videoPssh
        }));
        cov_1zakfcgeyg.s[39]++;
        initializeKeySystemsFunctions.push(createInitializeMediaKeysFunction(options));
      } else {
        cov_1zakfcgeyg.b[17][1]++;
      }

      cov_1zakfcgeyg.s[40]++;

      if (audioPssh) {
        cov_1zakfcgeyg.b[18][0]++;

        var _options = (cov_1zakfcgeyg.s[41]++, videojs.mergeOptions(commonOptions, {
          pssh: audioPssh
        }));

        cov_1zakfcgeyg.s[42]++;
        initializeKeySystemsFunctions.push(createInitializeMediaKeysFunction(_options));
      } else {
        cov_1zakfcgeyg.b[18][1]++;
      }
    }

    cov_1zakfcgeyg.s[43]++;
    return function (player) {
      cov_1zakfcgeyg.f[4]++;
      cov_1zakfcgeyg.s[44]++;
      initializeKeySystemsFunctions.forEach(function (initializeKeySystemsFunction) {
        cov_1zakfcgeyg.f[5]++;
        cov_1zakfcgeyg.s[45]++;
        initializeKeySystemsFunction(player);
      });
    };
  };

  var cov_1kryrm38e6 = function () {
    var path = '/Users/gsinger/repos/clean/plugin-concat/src/concatenate.js',
        hash = 'f9291f8a883149da30c0198a02b66b2dd5372b05',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
      path: '/Users/gsinger/repos/clean/plugin-concat/src/concatenate.js',
      statementMap: {
        '0': {
          start: {
            line: 33,
            column: 32
          },
          end: {
            line: 91,
            column: 1
          }
        },
        '1': {
          start: {
            line: 34,
            column: 23
          },
          end: {
            line: 37,
            column: 44
          }
        },
        '2': {
          start: {
            line: 36,
            column: 26
          },
          end: {
            line: 36,
            column: 44
          }
        },
        '3': {
          start: {
            line: 37,
            column: 23
          },
          end: {
            line: 37,
            column: 43
          }
        },
        '4': {
          start: {
            line: 38,
            column: 31
          },
          end: {
            line: 38,
            column: 80
          }
        },
        '5': {
          start: {
            line: 38,
            column: 62
          },
          end: {
            line: 38,
            column: 79
          }
        },
        '6': {
          start: {
            line: 39,
            column: 32
          },
          end: {
            line: 39,
            column: 34
          }
        },
        '7': {
          start: {
            line: 41,
            column: 2
          },
          end: {
            line: 43,
            column: 5
          }
        },
        '8': {
          start: {
            line: 42,
            column: 4
          },
          end: {
            line: 42,
            column: 59
          }
        },
        '9': {
          start: {
            line: 45,
            column: 2
          },
          end: {
            line: 49,
            column: 3
          }
        },
        '10': {
          start: {
            line: 47,
            column: 4
          },
          end: {
            line: 47,
            column: 42
          }
        },
        '11': {
          start: {
            line: 48,
            column: 4
          },
          end: {
            line: 48,
            column: 11
          }
        },
        '12': {
          start: {
            line: 51,
            column: 28
          },
          end: {
            line: 51,
            column: 30
          }
        },
        '13': {
          start: {
            line: 52,
            column: 27
          },
          end: {
            line: 52,
            column: 29
          }
        },
        '14': {
          start: {
            line: 54,
            column: 2
          },
          end: {
            line: 63,
            column: 3
          }
        },
        '15': {
          start: {
            line: 55,
            column: 21
          },
          end: {
            line: 55,
            column: 33
          }
        },
        '16': {
          start: {
            line: 58,
            column: 4
          },
          end: {
            line: 60,
            column: 5
          }
        },
        '17': {
          start: {
            line: 59,
            column: 6
          },
          end: {
            line: 59,
            column: 51
          }
        },
        '18': {
          start: {
            line: 61,
            column: 4
          },
          end: {
            line: 61,
            column: 59
          }
        },
        '19': {
          start: {
            line: 62,
            column: 4
          },
          end: {
            line: 62,
            column: 67
          }
        },
        '20': {
          start: {
            line: 65,
            column: 2
          },
          end: {
            line: 90,
            column: 5
          }
        },
        '21': {
          start: {
            line: 66,
            column: 4
          },
          end: {
            line: 69,
            column: 5
          }
        },
        '22': {
          start: {
            line: 67,
            column: 6
          },
          end: {
            line: 67,
            column: 20
          }
        },
        '23': {
          start: {
            line: 68,
            column: 6
          },
          end: {
            line: 68,
            column: 13
          }
        },
        '24': {
          start: {
            line: 71,
            column: 4
          },
          end: {
            line: 87,
            column: 5
          }
        },
        '25': {
          start: {
            line: 72,
            column: 18
          },
          end: {
            line: 72,
            column: 33
          }
        },
        '26': {
          start: {
            line: 73,
            column: 28
          },
          end: {
            line: 73,
            column: 50
          }
        },
        '27': {
          start: {
            line: 74,
            column: 29
          },
          end: {
            line: 74,
            column: 43
          }
        },
        '28': {
          start: {
            line: 75,
            column: 23
          },
          end: {
            line: 75,
            column: 44
          }
        },
        '29': {
          start: {
            line: 76,
            column: 23
          },
          end: {
            line: 80,
            column: 8
          }
        },
        '30': {
          start: {
            line: 82,
            column: 6
          },
          end: {
            line: 86,
            column: 7
          }
        },
        '31': {
          start: {
            line: 83,
            column: 29
          },
          end: {
            line: 83,
            column: 45
          }
        },
        '32': {
          start: {
            line: 85,
            column: 8
          },
          end: {
            line: 85,
            column: 67
          }
        },
        '33': {
          start: {
            line: 89,
            column: 4
          },
          end: {
            line: 89,
            column: 42
          }
        },
        '34': {
          start: {
            line: 120,
            column: 29
          },
          end: {
            line: 205,
            column: 1
          }
        },
        '35': {
          start: {
            line: 121,
            column: 26
          },
          end: {
            line: 121,
            column: 54
          }
        },
        '36': {
          start: {
            line: 122,
            column: 29
          },
          end: {
            line: 122,
            column: 72
          }
        },
        '37': {
          start: {
            line: 124,
            column: 2
          },
          end: {
            line: 128,
            column: 5
          }
        },
        '38': {
          start: {
            line: 125,
            column: 4
          },
          end: {
            line: 127,
            column: 5
          }
        },
        '39': {
          start: {
            line: 126,
            column: 6
          },
          end: {
            line: 126,
            column: 77
          }
        },
        '40': {
          start: {
            line: 133,
            column: 25
          },
          end: {
            line: 136,
            column: 3
          }
        },
        '41': {
          start: {
            line: 145,
            column: 25
          },
          end: {
            line: 145,
            column: 78
          }
        },
        '42': {
          start: {
            line: 146,
            column: 23
          },
          end: {
            line: 146,
            column: 60
          }
        },
        '43': {
          start: {
            line: 151,
            column: 20
          },
          end: {
            line: 151,
            column: 66
          }
        },
        '44': {
          start: {
            line: 151,
            column: 48
          },
          end: {
            line: 151,
            column: 65
          }
        },
        '45': {
          start: {
            line: 153,
            column: 2
          },
          end: {
            line: 155,
            column: 3
          }
        },
        '46': {
          start: {
            line: 154,
            column: 4
          },
          end: {
            line: 154,
            column: 33
          }
        },
        '47': {
          start: {
            line: 157,
            column: 2
          },
          end: {
            line: 204,
            column: 5
          }
        },
        '48': {
          start: {
            line: 161,
            column: 6
          },
          end: {
            line: 164,
            column: 7
          }
        },
        '49': {
          start: {
            line: 162,
            column: 8
          },
          end: {
            line: 162,
            column: 22
          }
        },
        '50': {
          start: {
            line: 163,
            column: 8
          },
          end: {
            line: 163,
            column: 15
          }
        },
        '51': {
          start: {
            line: 168,
            column: 6
          },
          end: {
            line: 174,
            column: 9
          }
        },
        '52': {
          start: {
            line: 169,
            column: 33
          },
          end: {
            line: 169,
            column: 75
          }
        },
        '53': {
          start: {
            line: 171,
            column: 8
          },
          end: {
            line: 171,
            column: 54
          }
        },
        '54': {
          start: {
            line: 173,
            column: 8
          },
          end: {
            line: 173,
            column: 72
          }
        },
        '55': {
          start: {
            line: 176,
            column: 36
          },
          end: {
            line: 176,
            column: 83
          }
        },
        '56': {
          start: {
            line: 177,
            column: 36
          },
          end: {
            line: 180,
            column: 15
          }
        },
        '57': {
          start: {
            line: 181,
            column: 29
          },
          end: {
            line: 184,
            column: 8
          }
        },
        '58': {
          start: {
            line: 185,
            column: 34
          },
          end: {
            line: 185,
            column: 52
          }
        },
        '59': {
          start: {
            line: 186,
            column: 33
          },
          end: {
            line: 189,
            column: 8
          }
        },
        '60': {
          start: {
            line: 191,
            column: 43
          },
          end: {
            line: 196,
            column: 8
          }
        },
        '61': {
          start: {
            line: 195,
            column: 48
          },
          end: {
            line: 195,
            column: 67
          }
        },
        '62': {
          start: {
            line: 198,
            column: 6
          },
          end: {
            line: 200,
            column: 7
          }
        },
        '63': {
          start: {
            line: 199,
            column: 8
          },
          end: {
            line: 199,
            column: 80
          }
        },
        '64': {
          start: {
            line: 202,
            column: 6
          },
          end: {
            line: 202,
            column: 42
          }
        },
        '65': {
          start: {
            line: 216,
            column: 41
          },
          end: {
            line: 234,
            column: 1
          }
        },
        '66': {
          start: {
            line: 217,
            column: 2
          },
          end: {
            line: 219,
            column: 3
          }
        },
        '67': {
          start: {
            line: 218,
            column: 4
          },
          end: {
            line: 218,
            column: 33
          }
        },
        '68': {
          start: {
            line: 221,
            column: 2
          },
          end: {
            line: 231,
            column: 3
          }
        },
        '69': {
          start: {
            line: 224,
            column: 4
          },
          end: {
            line: 226,
            column: 5
          }
        },
        '70': {
          start: {
            line: 225,
            column: 6
          },
          end: {
            line: 225,
            column: 48
          }
        },
        '71': {
          start: {
            line: 228,
            column: 4
          },
          end: {
            line: 230,
            column: 5
          }
        },
        '72': {
          start: {
            line: 229,
            column: 6
          },
          end: {
            line: 229,
            column: 54
          }
        },
        '73': {
          start: {
            line: 233,
            column: 2
          },
          end: {
            line: 233,
            column: 14
          }
        },
        '74': {
          start: {
            line: 255,
            column: 33
          },
          end: {
            line: 290,
            column: 1
          }
        },
        '75': {
          start: {
            line: 256,
            column: 23
          },
          end: {
            line: 256,
            column: 59
          }
        },
        '76': {
          start: {
            line: 258,
            column: 2
          },
          end: {
            line: 261,
            column: 3
          }
        },
        '77': {
          start: {
            line: 259,
            column: 4
          },
          end: {
            line: 259,
            column: 40
          }
        },
        '78': {
          start: {
            line: 260,
            column: 4
          },
          end: {
            line: 260,
            column: 11
          }
        },
        '79': {
          start: {
            line: 263,
            column: 15
          },
          end: {
            line: 263,
            column: 68
          }
        },
        '80': {
          start: {
            line: 263,
            column: 49
          },
          end: {
            line: 263,
            column: 67
          }
        },
        '81': {
          start: {
            line: 265,
            column: 2
          },
          end: {
            line: 289,
            column: 5
          }
        },
        '82': {
          start: {
            line: 266,
            column: 4
          },
          end: {
            line: 269,
            column: 5
          }
        },
        '83': {
          start: {
            line: 267,
            column: 6
          },
          end: {
            line: 267,
            column: 20
          }
        },
        '84': {
          start: {
            line: 268,
            column: 6
          },
          end: {
            line: 268,
            column: 13
          }
        },
        '85': {
          start: {
            line: 271,
            column: 29
          },
          end: {
            line: 278,
            column: 6
          }
        },
        '86': {
          start: {
            line: 272,
            column: 6
          },
          end: {
            line: 277,
            column: 8
          }
        },
        '87': {
          start: {
            line: 280,
            column: 4
          },
          end: {
            line: 288,
            column: 5
          }
        },
        '88': {
          start: {
            line: 281,
            column: 6
          },
          end: {
            line: 285,
            column: 9
          }
        },
        '89': {
          start: {
            line: 287,
            column: 6
          },
          end: {
            line: 287,
            column: 18
          }
        }
      },
      fnMap: {
        '0': {
          name: '(anonymous_0)',
          decl: {
            start: {
              line: 33,
              column: 32
            },
            end: {
              line: 33,
              column: 33
            }
          },
          loc: {
            start: {
              line: 33,
              column: 72
            },
            end: {
              line: 91,
              column: 1
            }
          },
          line: 33
        },
        '1': {
          name: '(anonymous_1)',
          decl: {
            start: {
              line: 36,
              column: 12
            },
            end: {
              line: 36,
              column: 13
            }
          },
          loc: {
            start: {
              line: 36,
              column: 26
            },
            end: {
              line: 36,
              column: 44
            }
          },
          line: 36
        },
        '2': {
          name: '(anonymous_2)',
          decl: {
            start: {
              line: 37,
              column: 9
            },
            end: {
              line: 37,
              column: 10
            }
          },
          loc: {
            start: {
              line: 37,
              column: 23
            },
            end: {
              line: 37,
              column: 43
            }
          },
          line: 37
        },
        '3': {
          name: '(anonymous_3)',
          decl: {
            start: {
              line: 38,
              column: 48
            },
            end: {
              line: 38,
              column: 49
            }
          },
          loc: {
            start: {
              line: 38,
              column: 62
            },
            end: {
              line: 38,
              column: 79
            }
          },
          line: 38
        },
        '4': {
          name: '(anonymous_4)',
          decl: {
            start: {
              line: 41,
              column: 31
            },
            end: {
              line: 41,
              column: 32
            }
          },
          loc: {
            start: {
              line: 41,
              column: 45
            },
            end: {
              line: 43,
              column: 3
            }
          },
          line: 41
        },
        '5': {
          name: '(anonymous_5)',
          decl: {
            start: {
              line: 65,
              column: 27
            },
            end: {
              line: 65,
              column: 28
            }
          },
          loc: {
            start: {
              line: 65,
              column: 47
            },
            end: {
              line: 90,
              column: 3
            }
          },
          line: 65
        },
        '6': {
          name: '(anonymous_6)',
          decl: {
            start: {
              line: 120,
              column: 29
            },
            end: {
              line: 120,
              column: 30
            }
          },
          loc: {
            start: {
              line: 120,
              column: 84
            },
            end: {
              line: 205,
              column: 1
            }
          },
          line: 120
        },
        '7': {
          name: '(anonymous_7)',
          decl: {
            start: {
              line: 124,
              column: 29
            },
            end: {
              line: 124,
              column: 30
            }
          },
          loc: {
            start: {
              line: 124,
              column: 44
            },
            end: {
              line: 128,
              column: 3
            }
          },
          line: 124
        },
        '8': {
          name: '(anonymous_8)',
          decl: {
            start: {
              line: 151,
              column: 34
            },
            end: {
              line: 151,
              column: 35
            }
          },
          loc: {
            start: {
              line: 151,
              column: 48
            },
            end: {
              line: 151,
              column: 65
            }
          },
          line: 151
        },
        '9': {
          name: '(anonymous_9)',
          decl: {
            start: {
              line: 160,
              column: 14
            },
            end: {
              line: 160,
              column: 15
            }
          },
          loc: {
            start: {
              line: 160,
              column: 45
            },
            end: {
              line: 203,
              column: 5
            }
          },
          line: 160
        },
        '10': {
          name: '(anonymous_10)',
          decl: {
            start: {
              line: 168,
              column: 27
            },
            end: {
              line: 168,
              column: 28
            }
          },
          loc: {
            start: {
              line: 168,
              column: 41
            },
            end: {
              line: 174,
              column: 7
            }
          },
          line: 168
        },
        '11': {
          name: '(anonymous_11)',
          decl: {
            start: {
              line: 195,
              column: 34
            },
            end: {
              line: 195,
              column: 35
            }
          },
          loc: {
            start: {
              line: 195,
              column: 48
            },
            end: {
              line: 195,
              column: 67
            }
          },
          line: 195
        },
        '12': {
          name: '(anonymous_12)',
          decl: {
            start: {
              line: 216,
              column: 41
            },
            end: {
              line: 216,
              column: 42
            }
          },
          loc: {
            start: {
              line: 216,
              column: 56
            },
            end: {
              line: 234,
              column: 1
            }
          },
          line: 216
        },
        '13': {
          name: '(anonymous_13)',
          decl: {
            start: {
              line: 255,
              column: 33
            },
            end: {
              line: 255,
              column: 34
            }
          },
          loc: {
            start: {
              line: 255,
              column: 88
            },
            end: {
              line: 290,
              column: 1
            }
          },
          line: 255
        },
        '14': {
          name: '(anonymous_14)',
          decl: {
            start: {
              line: 263,
              column: 29
            },
            end: {
              line: 263,
              column: 30
            }
          },
          loc: {
            start: {
              line: 263,
              column: 49
            },
            end: {
              line: 263,
              column: 67
            }
          },
          line: 263
        },
        '15': {
          name: '(anonymous_15)',
          decl: {
            start: {
              line: 265,
              column: 19
            },
            end: {
              line: 265,
              column: 20
            }
          },
          loc: {
            start: {
              line: 265,
              column: 39
            },
            end: {
              line: 289,
              column: 3
            }
          },
          line: 265
        },
        '16': {
          name: '(anonymous_16)',
          decl: {
            start: {
              line: 271,
              column: 43
            },
            end: {
              line: 271,
              column: 44
            }
          },
          loc: {
            start: {
              line: 271,
              column: 63
            },
            end: {
              line: 278,
              column: 5
            }
          },
          line: 271
        }
      },
      branchMap: {
        '0': {
          loc: {
            start: {
              line: 45,
              column: 2
            },
            end: {
              line: 49,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 45,
              column: 2
            },
            end: {
              line: 49,
              column: 3
            }
          }, {
            start: {
              line: 45,
              column: 2
            },
            end: {
              line: 49,
              column: 3
            }
          }],
          line: 45
        },
        '1': {
          loc: {
            start: {
              line: 58,
              column: 4
            },
            end: {
              line: 60,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 58,
              column: 4
            },
            end: {
              line: 60,
              column: 5
            }
          }, {
            start: {
              line: 58,
              column: 4
            },
            end: {
              line: 60,
              column: 5
            }
          }],
          line: 58
        },
        '2': {
          loc: {
            start: {
              line: 66,
              column: 4
            },
            end: {
              line: 69,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 66,
              column: 4
            },
            end: {
              line: 69,
              column: 5
            }
          }, {
            start: {
              line: 66,
              column: 4
            },
            end: {
              line: 69,
              column: 5
            }
          }],
          line: 66
        },
        '3': {
          loc: {
            start: {
              line: 125,
              column: 4
            },
            end: {
              line: 127,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 125,
              column: 4
            },
            end: {
              line: 127,
              column: 5
            }
          }, {
            start: {
              line: 125,
              column: 4
            },
            end: {
              line: 127,
              column: 5
            }
          }],
          line: 125
        },
        '4': {
          loc: {
            start: {
              line: 161,
              column: 6
            },
            end: {
              line: 164,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 161,
              column: 6
            },
            end: {
              line: 164,
              column: 7
            }
          }, {
            start: {
              line: 161,
              column: 6
            },
            end: {
              line: 164,
              column: 7
            }
          }],
          line: 161
        },
        '5': {
          loc: {
            start: {
              line: 177,
              column: 36
            },
            end: {
              line: 180,
              column: 15
            }
          },
          type: 'cond-expr',
          locations: [{
            start: {
              line: 177,
              column: 60
            },
            end: {
              line: 180,
              column: 8
            }
          }, {
            start: {
              line: 180,
              column: 11
            },
            end: {
              line: 180,
              column: 15
            }
          }],
          line: 177
        },
        '6': {
          loc: {
            start: {
              line: 198,
              column: 6
            },
            end: {
              line: 200,
              column: 7
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 198,
              column: 6
            },
            end: {
              line: 200,
              column: 7
            }
          }, {
            start: {
              line: 198,
              column: 6
            },
            end: {
              line: 200,
              column: 7
            }
          }],
          line: 198
        },
        '7': {
          loc: {
            start: {
              line: 217,
              column: 2
            },
            end: {
              line: 219,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 217,
              column: 2
            },
            end: {
              line: 219,
              column: 3
            }
          }, {
            start: {
              line: 217,
              column: 2
            },
            end: {
              line: 219,
              column: 3
            }
          }],
          line: 217
        },
        '8': {
          loc: {
            start: {
              line: 217,
              column: 6
            },
            end: {
              line: 217,
              column: 37
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 217,
              column: 6
            },
            end: {
              line: 217,
              column: 16
            }
          }, {
            start: {
              line: 217,
              column: 20
            },
            end: {
              line: 217,
              column: 37
            }
          }],
          line: 217
        },
        '9': {
          loc: {
            start: {
              line: 224,
              column: 4
            },
            end: {
              line: 226,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 224,
              column: 4
            },
            end: {
              line: 226,
              column: 5
            }
          }, {
            start: {
              line: 224,
              column: 4
            },
            end: {
              line: 226,
              column: 5
            }
          }],
          line: 224
        },
        '10': {
          loc: {
            start: {
              line: 228,
              column: 4
            },
            end: {
              line: 230,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 228,
              column: 4
            },
            end: {
              line: 230,
              column: 5
            }
          }, {
            start: {
              line: 228,
              column: 4
            },
            end: {
              line: 230,
              column: 5
            }
          }],
          line: 228
        },
        '11': {
          loc: {
            start: {
              line: 258,
              column: 2
            },
            end: {
              line: 261,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 258,
              column: 2
            },
            end: {
              line: 261,
              column: 3
            }
          }, {
            start: {
              line: 258,
              column: 2
            },
            end: {
              line: 261,
              column: 3
            }
          }],
          line: 258
        },
        '12': {
          loc: {
            start: {
              line: 266,
              column: 4
            },
            end: {
              line: 269,
              column: 5
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 266,
              column: 4
            },
            end: {
              line: 269,
              column: 5
            }
          }, {
            start: {
              line: 266,
              column: 4
            },
            end: {
              line: 269,
              column: 5
            }
          }],
          line: 266
        }
      },
      s: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0,
        '7': 0,
        '8': 0,
        '9': 0,
        '10': 0,
        '11': 0,
        '12': 0,
        '13': 0,
        '14': 0,
        '15': 0,
        '16': 0,
        '17': 0,
        '18': 0,
        '19': 0,
        '20': 0,
        '21': 0,
        '22': 0,
        '23': 0,
        '24': 0,
        '25': 0,
        '26': 0,
        '27': 0,
        '28': 0,
        '29': 0,
        '30': 0,
        '31': 0,
        '32': 0,
        '33': 0,
        '34': 0,
        '35': 0,
        '36': 0,
        '37': 0,
        '38': 0,
        '39': 0,
        '40': 0,
        '41': 0,
        '42': 0,
        '43': 0,
        '44': 0,
        '45': 0,
        '46': 0,
        '47': 0,
        '48': 0,
        '49': 0,
        '50': 0,
        '51': 0,
        '52': 0,
        '53': 0,
        '54': 0,
        '55': 0,
        '56': 0,
        '57': 0,
        '58': 0,
        '59': 0,
        '60': 0,
        '61': 0,
        '62': 0,
        '63': 0,
        '64': 0,
        '65': 0,
        '66': 0,
        '67': 0,
        '68': 0,
        '69': 0,
        '70': 0,
        '71': 0,
        '72': 0,
        '73': 0,
        '74': 0,
        '75': 0,
        '76': 0,
        '77': 0,
        '78': 0,
        '79': 0,
        '80': 0,
        '81': 0,
        '82': 0,
        '83': 0,
        '84': 0,
        '85': 0,
        '86': 0,
        '87': 0,
        '88': 0,
        '89': 0
      },
      f: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0,
        '7': 0,
        '8': 0,
        '9': 0,
        '10': 0,
        '11': 0,
        '12': 0,
        '13': 0,
        '14': 0,
        '15': 0,
        '16': 0
      },
      b: {
        '0': [0, 0],
        '1': [0, 0],
        '2': [0, 0],
        '3': [0, 0],
        '4': [0, 0],
        '5': [0, 0],
        '6': [0, 0],
        '7': [0, 0],
        '8': [0, 0],
        '9': [0, 0],
        '10': [0, 0],
        '11': [0, 0],
        '12': [0, 0]
      },
      _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
      return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
  }();
  cov_1kryrm38e6.s[0]++;
  var resolvePlaylists = function resolvePlaylists(_ref) {
    var playlists = _ref.playlists,
        mimeTypes = _ref.mimeTypes,
        callback = _ref.callback;
    cov_1kryrm38e6.f[0]++;
    var playlistUris = (cov_1kryrm38e6.s[1]++, playlists.filter(function (playlist) {
      cov_1kryrm38e6.f[1]++;
      cov_1kryrm38e6.s[2]++;
      return !playlist.segments;
    }).map(function (playlist) {
      cov_1kryrm38e6.f[2]++;
      cov_1kryrm38e6.s[3]++;
      return playlist.resolvedUri;
    }));
    var preResolvedPlaylists = (cov_1kryrm38e6.s[4]++, playlists.filter(function (playlist) {
      cov_1kryrm38e6.f[3]++;
      cov_1kryrm38e6.s[5]++;
      return playlist.segments;
    }));
    var origPlaylistsToParsed = (cov_1kryrm38e6.s[6]++, {});
    cov_1kryrm38e6.s[7]++;
    preResolvedPlaylists.forEach(function (playlist) {
      cov_1kryrm38e6.f[4]++;
      cov_1kryrm38e6.s[8]++;
      origPlaylistsToParsed[playlist.resolvedUri] = playlist;
    });
    cov_1kryrm38e6.s[9]++;

    if (!playlistUris.length) {
      cov_1kryrm38e6.b[0][0]++;
      cov_1kryrm38e6.s[10]++;
      callback(null, origPlaylistsToParsed);
      cov_1kryrm38e6.s[11]++;
      return;
    } else {
      cov_1kryrm38e6.b[0][1]++;
    }

    var uriToPlaylistsMap = (cov_1kryrm38e6.s[12]++, {});
    var uriToMimeTypeMap = (cov_1kryrm38e6.s[13]++, {});
    cov_1kryrm38e6.s[14]++;

    for (var i = 0; i < playlists.length; i++) {
      var playlist = (cov_1kryrm38e6.s[15]++, playlists[i]);
      cov_1kryrm38e6.s[16]++;

      if (!uriToPlaylistsMap[playlist.resolvedUri]) {
        cov_1kryrm38e6.b[1][0]++;
        cov_1kryrm38e6.s[17]++;
        uriToPlaylistsMap[playlist.resolvedUri] = [];
      } else {
        cov_1kryrm38e6.b[1][1]++;
      }

      cov_1kryrm38e6.s[18]++;
      uriToPlaylistsMap[playlist.resolvedUri].push(playlist);
      cov_1kryrm38e6.s[19]++;
      uriToMimeTypeMap[playlist.resolvedUri] = mimeTypes[i].mimeType;
    }

    cov_1kryrm38e6.s[20]++;
    requestAll(playlistUris, function (err, responses) {
      cov_1kryrm38e6.f[5]++;
      cov_1kryrm38e6.s[21]++;

      if (err) {
        cov_1kryrm38e6.b[2][0]++;
        cov_1kryrm38e6.s[22]++;
        callback(err);
        cov_1kryrm38e6.s[23]++;
        return;
      } else {
        cov_1kryrm38e6.b[2][1]++;
      }

      cov_1kryrm38e6.s[24]++;

      for (var _i = 0; _i < playlistUris.length; _i++) {
        var uri = (cov_1kryrm38e6.s[25]++, playlistUris[_i]);
        var origPlaylists = (cov_1kryrm38e6.s[26]++, uriToPlaylistsMap[uri]);
        var playlistString = (cov_1kryrm38e6.s[27]++, responses[uri]);
        var mimeType = (cov_1kryrm38e6.s[28]++, uriToMimeTypeMap[uri]);

        var _playlist = (cov_1kryrm38e6.s[29]++, parseManifest({
          url: uri,
          manifestString: playlistString,
          mimeType: mimeType
        }));

        cov_1kryrm38e6.s[30]++;

        for (var j = 0; j < origPlaylists.length; j++) {
          var origPlaylist = (cov_1kryrm38e6.s[31]++, origPlaylists[j]);
          cov_1kryrm38e6.s[32]++;
          origPlaylistsToParsed[origPlaylist.resolvedUri] = _playlist;
        }
      }

      cov_1kryrm38e6.s[33]++;
      callback(null, origPlaylistsToParsed);
    });
  };
  cov_1kryrm38e6.s[34]++;

  var concatenateManifests = function concatenateManifests(_ref2) {
    var manifests = _ref2.manifests,
        targetVerticalResolution = _ref2.targetVerticalResolution,
        _callback = _ref2.callback;
    cov_1kryrm38e6.f[6]++;
    var manifestObjects = (cov_1kryrm38e6.s[35]++, manifests.map(parseManifest));
    var supportedPlaylists = (cov_1kryrm38e6.s[36]++, removeUnsupportedPlaylists(manifestObjects));
    cov_1kryrm38e6.s[37]++;
    supportedPlaylists.forEach(function (playlists) {
      cov_1kryrm38e6.f[7]++;
      cov_1kryrm38e6.s[38]++;

      if (playlists.length === 0) {
        cov_1kryrm38e6.b[3][0]++;
        cov_1kryrm38e6.s[39]++;
        throw new Error('Did not find a supported playlist for each manifest');
      } else {
        cov_1kryrm38e6.b[3][1]++;
      }
    });
    var videoPlaylists = (cov_1kryrm38e6.s[40]++, chooseVideoPlaylists(supportedPlaylists, targetVerticalResolution));
    var audioPlaylists = (cov_1kryrm38e6.s[41]++, chooseAudioPlaylists(manifestObjects, videoPlaylists));
    var allPlaylists = (cov_1kryrm38e6.s[42]++, videoPlaylists.concat(audioPlaylists));
    var mimeTypes = (cov_1kryrm38e6.s[43]++, manifests.map(function (manifest) {
      cov_1kryrm38e6.f[8]++;
      cov_1kryrm38e6.s[44]++;
      return manifest.mimeType;
    }));
    cov_1kryrm38e6.s[45]++;

    for (var i = 0; i < audioPlaylists.length; i++) {
      cov_1kryrm38e6.s[46]++;
      mimeTypes.push(mimeTypes[i]);
    }

    cov_1kryrm38e6.s[47]++;
    resolvePlaylists({
      playlists: allPlaylists,
      mimeTypes: mimeTypes,
      callback: function callback(err, resolvedPlaylistsMap) {
        cov_1kryrm38e6.f[9]++;
        cov_1kryrm38e6.s[48]++;

        if (err) {
          cov_1kryrm38e6.b[4][0]++;
          cov_1kryrm38e6.s[49]++;

          _callback(err);

          cov_1kryrm38e6.s[50]++;
          return;
        } else {
          cov_1kryrm38e6.b[4][1]++;
        }

        cov_1kryrm38e6.s[51]++;
        allPlaylists.forEach(function (playlist) {
          cov_1kryrm38e6.f[10]++;
          var resolvedPlaylist = (cov_1kryrm38e6.s[52]++, resolvedPlaylistsMap[playlist.resolvedUri]);
          cov_1kryrm38e6.s[53]++;
          playlist.segments = resolvedPlaylist.segments;
          cov_1kryrm38e6.s[54]++;
          playlist.contentProtection = resolvedPlaylist.contentProtection;
        });
        var combinedVideoPlaylist = (cov_1kryrm38e6.s[55]++, combinePlaylists({
          playlists: videoPlaylists
        }));
        var combinedAudioPlaylist = (cov_1kryrm38e6.s[56]++, audioPlaylists.length ? (cov_1kryrm38e6.b[5][0]++, combinePlaylists({
          playlists: audioPlaylists,
          uriSuffix: '-audio'
        })) : (cov_1kryrm38e6.b[5][1]++, null));
        var manifestObject = (cov_1kryrm38e6.s[57]++, constructMasterManifest({
          videoPlaylist: combinedVideoPlaylist,
          audioPlaylist: combinedAudioPlaylist
        }));
        var concatenationResult = (cov_1kryrm38e6.s[58]++, {
          manifestObject: manifestObject
        });
        var audioAndVideoTypes = (cov_1kryrm38e6.s[59]++, getAudioAndVideoTypes({
          videoPlaylists: videoPlaylists,
          manifestObjects: manifestObjects
        }));
        var initializeKeySystemsFunction = (cov_1kryrm38e6.s[60]++, createInitializeKeySystemsFunction({
          videoPlaylists: videoPlaylists,
          audioPlaylists: audioPlaylists,
          audioAndVideoTypes: audioAndVideoTypes,
          keySystems: manifests.map(function (manifest) {
            cov_1kryrm38e6.f[11]++;
            cov_1kryrm38e6.s[61]++;
            return manifest.keySystems;
          })
        }));
        cov_1kryrm38e6.s[62]++;

        if (initializeKeySystemsFunction) {
          cov_1kryrm38e6.b[6][0]++;
          cov_1kryrm38e6.s[63]++;
          concatenationResult.initializeKeySystems = initializeKeySystemsFunction;
        } else {
          cov_1kryrm38e6.b[6][1]++;
        }

        cov_1kryrm38e6.s[64]++;

        _callback(null, concatenationResult);
      }
    });
  };

  cov_1kryrm38e6.s[65]++;
  var getProvidedManifestsError = function getProvidedManifestsError(manifests) {
    cov_1kryrm38e6.f[12]++;
    cov_1kryrm38e6.s[66]++;

    if ((cov_1kryrm38e6.b[8][0]++, !manifests) || (cov_1kryrm38e6.b[8][1]++, !manifests.length)) {
      cov_1kryrm38e6.b[7][0]++;
      cov_1kryrm38e6.s[67]++;
      return 'No sources provided';
    } else {
      cov_1kryrm38e6.b[7][1]++;
    }

    cov_1kryrm38e6.s[68]++;

    for (var i = 0; i < manifests.length; i++) {
      cov_1kryrm38e6.s[69]++;

      if (!manifests[i].url) {
        cov_1kryrm38e6.b[9][0]++;
        cov_1kryrm38e6.s[70]++;
        return 'All manifests must include a URL';
      } else {
        cov_1kryrm38e6.b[9][1]++;
      }

      cov_1kryrm38e6.s[71]++;

      if (!manifests[i].mimeType) {
        cov_1kryrm38e6.b[10][0]++;
        cov_1kryrm38e6.s[72]++;
        return 'All manifests must include a mime type';
      } else {
        cov_1kryrm38e6.b[10][1]++;
      }
    }

    cov_1kryrm38e6.s[73]++;
    return null;
  };
  cov_1kryrm38e6.s[74]++;
  var concatenateVideos = function concatenateVideos(_ref3) {
    var manifests = _ref3.manifests,
        targetVerticalResolution = _ref3.targetVerticalResolution,
        callback = _ref3.callback;
    cov_1kryrm38e6.f[13]++;
    var errorMessage = (cov_1kryrm38e6.s[75]++, getProvidedManifestsError(manifests));
    cov_1kryrm38e6.s[76]++;

    if (errorMessage) {
      cov_1kryrm38e6.b[11][0]++;
      cov_1kryrm38e6.s[77]++;
      callback({
        message: errorMessage
      });
      cov_1kryrm38e6.s[78]++;
      return;
    } else {
      cov_1kryrm38e6.b[11][1]++;
    }

    var urls = (cov_1kryrm38e6.s[79]++, manifests.map(function (manifestObject) {
      cov_1kryrm38e6.f[14]++;
      cov_1kryrm38e6.s[80]++;
      return manifestObject.url;
    }));
    cov_1kryrm38e6.s[81]++;
    requestAll(urls, function (err, responses) {
      cov_1kryrm38e6.f[15]++;
      cov_1kryrm38e6.s[82]++;

      if (err) {
        cov_1kryrm38e6.b[12][0]++;
        cov_1kryrm38e6.s[83]++;
        callback(err);
        cov_1kryrm38e6.s[84]++;
        return;
      } else {
        cov_1kryrm38e6.b[12][1]++;
      }

      var orderedManifests = (cov_1kryrm38e6.s[85]++, manifests.map(function (manifestObject) {
        cov_1kryrm38e6.f[16]++;
        cov_1kryrm38e6.s[86]++;
        return {
          url: manifestObject.url,
          manifestString: responses[manifestObject.url],
          mimeType: manifestObject.mimeType,
          keySystems: manifestObject.keySystems
        };
      }));
      cov_1kryrm38e6.s[87]++;

      try {
        cov_1kryrm38e6.s[88]++;
        concatenateManifests({
          manifests: orderedManifests,
          targetVerticalResolution: targetVerticalResolution,
          callback: callback
        });
      } catch (e) {
        cov_1kryrm38e6.s[89]++;
        callback(e);
      }
    });
  };

  var hlsMasterPlaylist = function hlsMasterPlaylist(_ref) {
    var _ref$numPlaylists = _ref.numPlaylists,
        numPlaylists = _ref$numPlaylists === void 0 ? 1 : _ref$numPlaylists,
        _ref$playlistPrefix = _ref.playlistPrefix,
        playlistPrefix = _ref$playlistPrefix === void 0 ? 'playlist' : _ref$playlistPrefix,
        _ref$includeDemuxedAu = _ref.includeDemuxedAudio,
        includeDemuxedAudio = _ref$includeDemuxedAu === void 0 ? false : _ref$includeDemuxedAu,
        _ref$codecs = _ref.codecs,
        codecs = _ref$codecs === void 0 ? '' : _ref$codecs;
    var playlists = [];

    for (var i = 0; i < numPlaylists; i++) {
      var playlistPath = "" + playlistPrefix + i + ".m3u8";
      var audioAttribute = includeDemuxedAudio ? ',AUDIO="audio"' : '';
      var codecsAttribute = codecs ? ',CODECS="${codecs}"' : '';
      playlists.push("\n      #EXT-X-STREAM-INF:BANDWIDTH=" + (100 + i) + audioAttribute + codecsAttribute + "\n      " + playlistPath + "\n    ");
    }

    var audioGroup = includeDemuxedAudio ? '#EXT-X-MEDIA:TYPE=AUDIO' + ',GROUP-ID="audio",LANGUAGE="en",NAME="English"' + ',AUTOSELECT=YES,DEFAULT=YES' + (",URI=\"" + playlistPrefix + "-audio.m3u8\"") : '';
    return "\n    #EXTM3U\n    #EXT-X-VERSION:3\n    " + audioGroup + "\n\n    " + playlists.join('\n') + "\n  ";
  };
  var hlsMediaPlaylist = function hlsMediaPlaylist(_ref2) {
    var _ref2$numSegments = _ref2.numSegments,
        numSegments = _ref2$numSegments === void 0 ? 1 : _ref2$numSegments,
        _ref2$segmentPrefix = _ref2.segmentPrefix,
        segmentPrefix = _ref2$segmentPrefix === void 0 ? '' : _ref2$segmentPrefix,
        _ref2$segmentDuration = _ref2.segmentDuration,
        segmentDuration = _ref2$segmentDuration === void 0 ? 10 : _ref2$segmentDuration,
        _ref2$targetDuration = _ref2.targetDuration,
        targetDuration = _ref2$targetDuration === void 0 ? 10 : _ref2$targetDuration,
        _ref2$keyUri = _ref2.keyUri,
        keyUri = _ref2$keyUri === void 0 ? '' : _ref2$keyUri,
        _ref2$mapUri = _ref2.mapUri,
        mapUri = _ref2$mapUri === void 0 ? '' : _ref2$mapUri;
    var segments = [];

    for (var i = 0; i < numSegments; i++) {
      var segmentPath = "" + segmentPrefix + i + ".ts";
      var segmentLines = '';

      if (keyUri) {
        segmentLines += "\n        #EXT-X-KEY:METHOD=AES-128,URI=\"" + keyUri + "\"\n      ";
      }

      if (mapUri) {
        segmentLines += "\n        #EXT-X-MAP:URI=\"" + mapUri + "\"\n      ";
      }

      segmentLines += "\n      #EXTINF:" + segmentDuration + "\n      " + segmentPath + "\n    ";
      segments.push(segmentLines);
    }

    return "\n    #EXTM3U\n    #EXT-X-VERSION:3\n    #EXT-X-PLAYLIST-TYPE:VOD\n    #EXT-X-MEDIA-SEQUENCE:0\n    #EXT-X-TARGETDURATION:" + targetDuration + "\n    " + segments.join('\n') + "\n    #EXT-X-ENDLIST\n  ";
  };
  var dashPlaylist = function dashPlaylist(_ref3) {
    var _ref3$numSegments = _ref3.numSegments,
        numSegments = _ref3$numSegments === void 0 ? 1 : _ref3$numSegments,
        _ref3$segmentDuration = _ref3.segmentDuration,
        segmentDuration = _ref3$segmentDuration === void 0 ? 10 : _ref3$segmentDuration;
    return "<?xml version=\"1.0\"?>\n    <MPD\n      xmlns=\"urn:mpeg:dash:schema:mpd:2011\"\n      profiles=\"urn:mpeg:dash:profile:full:2011\"\n      minBufferTime=\"1.5\"\n      mediaPresentationDuration=\"PT" + numSegments * segmentDuration + "S\">\n      <Period>\n        <BaseURL>main/</BaseURL>\n        <AdaptationSet mimeType=\"video/mp4\">\n          <BaseURL>video/</BaseURL>\n          <Representation\n            id=\"1080p\"\n            bandwidth=\"6800000\"\n            width=\"1920\"\n            height=\"1080\"\n            codecs=\"avc1.420015\">\n            <BaseURL>1080/</BaseURL>\n            <SegmentTemplate\n              media=\"$RepresentationID$-segment-$Number$.mp4\"\n              initialization=\"$RepresentationID$-init.mp4\"\n              duration=\"" + segmentDuration + "\"\n              timescale=\"1\"\n              startNumber=\"0\" />\n          </Representation>\n          <Representation\n            id=\"720p\"\n            bandwidth=\"2400000\"\n            width=\"1280\"\n            height=\"720\"\n            codecs=\"avc1.420015\">\n            <BaseURL>720/</BaseURL>\n            <SegmentTemplate\n              media=\"$RepresentationID$-segment-$Number$.mp4\"\n              initialization=\"$RepresentationID$-init.mp4\"\n              duration=\"" + segmentDuration + "\"\n              timescale=\"1\"\n              startNumber=\"0\" />\n          </Representation>\n        </AdaptationSet>\n        <AdaptationSet mimeType=\"audio/mp4\">\n          <BaseURL>audio/</BaseURL>\n          <Representation id=\"audio\" bandwidth=\"128000\" codecs=\"mp4a.40.2\">\n            <BaseURL>720/</BaseURL>\n            <SegmentTemplate\n              media=\"segment-$Number$.mp4\"\n              initialization=\"$RepresentationID$-init.mp4\"\n              duration=\"" + segmentDuration + "\"\n              timescale=\"1\"\n              startNumber=\"0\" />\n          </Representation>\n        </AdaptationSet>\n      </Period>\n    </MPD>";
  };

  var STANDARD_HEADERS = {
    'Content-Type': 'text/plain'
  };

  var concatenateVideosPromise = function concatenateVideosPromise(_ref) {
    var manifests = _ref.manifests,
        targetVerticalResolution = _ref.targetVerticalResolution;
    return new Promise(function (accept, reject) {
      concatenateVideos({
        manifests: manifests,
        targetVerticalResolution: targetVerticalResolution,
        callback: function callback(err, sourceObject) {
          if (err) {
            reject(err);
            return;
          }

          accept(sourceObject);
        }
      });
    });
  };

  QUnit.module('concatenate-videos', {
    beforeEach: function beforeEach() {
      this.realXhr = videojs.xhr.XMLHttpRequest;
      this.server = sinon.fakeServer.create();
      videojs.xhr.XMLHttpRequest = this.server.xhr;
      this.server.autoRespond = true;
    },
    afterEach: function afterEach() {
      this.server.restore();
      videojs.xhr.XMLHttpRequest = this.realXhr;
    }
  });
  QUnit.test('calls back with error when not enough supported playlists', function (assert) {
    var done = assert.async();
    var manifests = [{
      url: '/manifest1.m3u8',
      mimeType: 'application/vnd.apple.mpegurl'
    }, {
      url: '/manifest2.m3u8',
      mimeType: 'application/x-mpegurl'
    }];
    var masterWithUnsupportedMedia = hlsMasterPlaylist({
      codecs: 'unsupported'
    });
    this.server.respondWith('GET', manifests[0].url, [200, STANDARD_HEADERS, hlsMasterPlaylist({})]);
    this.server.respondWith('GET', manifests[1].url, [200, STANDARD_HEADERS, masterWithUnsupportedMedia]);
    concatenateVideosPromise({
      manifests: manifests,
      targetVideoResolution: 720
    }).then(function (sourceObject) {
      assert.ok(false, 'should not call back without error');
      done();
    }).catch(function (e) {
      assert.equal(e.message, 'Did not find a supported playlist for each manifest', 'called back with error');
      done();
    });
  });
  QUnit.test('calls back with error when playlist request fails', function (assert) {
    var done = assert.async();
    var manifests = [{
      url: '/manifest1.m3u8',
      mimeType: 'application/vnd.apple.mpegurl'
    }, {
      url: '/manifest2.m3u8',
      mimeType: 'application/x-mpegurl'
    }, {
      url: '/manifest3.m3u8',
      mimeType: 'application/x-mpegurl'
    }];
    this.server.respondWith('GET', manifests[0].url, [200, STANDARD_HEADERS, hlsMediaPlaylist({})]);
    this.server.respondWith('GET', manifests[1].url, [500, STANDARD_HEADERS, hlsMediaPlaylist({})]);
    this.server.respondWith('GET', manifests[2].url, [200, STANDARD_HEADERS, hlsMediaPlaylist({})]);
    concatenateVideosPromise({
      manifests: manifests,
      targetVideoResolution: 720
    }).then(function (sourceObject) {
      assert.ok(false, 'should not call back without error');
      done();
    }).catch(function (e) {
      assert.equal(e.message, 'Request failed', 'called back with error');
      done();
    });
  });
  QUnit.test('concatenates multiple videos into one', function (assert) {
    var done = assert.async();
    var manifests = [{
      url: '/manifest1.m3u8',
      mimeType: 'application/vnd.apple.mpegurl'
    }, {
      url: '/manifest2.m3u8',
      mimeType: 'application/x-mpegurl'
    }];
    this.server.respondWith('GET', manifests[0].url, [200, STANDARD_HEADERS, hlsMediaPlaylist({
      numSegments: 1
    })]);
    this.server.respondWith('GET', manifests[1].url, [200, STANDARD_HEADERS, hlsMediaPlaylist({
      segmentPrefix: 'm2s',
      numSegments: 1
    })]);
    concatenateVideosPromise({
      manifests: manifests,
      targetVideoResolution: 720
    }).then(function (sourceObject) {
      assert.deepEqual(sourceObject, {
        manifestObject: {
          uri: window_1.location.href,
          mediaGroups: {
            'AUDIO': {},
            'VIDEO': {},
            'CLOSED-CAPTIONS': {},
            'SUBTITLES': {}
          },
          playlists: [{
            attributes: {},
            uri: 'combined-playlist',
            resolvedUri: 'combined-playlist',
            endList: true,
            mediaSequence: 0,
            discontinuitySequence: 0,
            playlistType: 'VOD',
            targetDuration: 10,
            discontinuityStarts: [1],
            segments: [{
              duration: 10,
              timeline: 0,
              number: 0,
              uri: '0.ts',
              resolvedUri: window_1.location.origin + "/0.ts"
            }, {
              duration: 10,
              discontinuity: true,
              timeline: 1,
              number: 1,
              uri: 'm2s0.ts',
              resolvedUri: window_1.location.origin + "/m2s0.ts"
            }]
          }]
        }
      }, 'created concatenated video object');
      done();
    }).catch(function (e) {
      assert.ok(false, e);
      done();
    });
  });
  QUnit.test('concatenates HLS and DASH sources together', function (assert) {
    var done = assert.async();
    var manifests = [{
      url: '/manifest1.m3u8',
      mimeType: 'application/vnd.apple.mpegurl'
    }, {
      url: '/dash.mpd',
      mimeType: 'application/dash+xml'
    }];
    this.server.respondWith('GET', manifests[0].url, [200, STANDARD_HEADERS, hlsMasterPlaylist({
      includeDemuxedAudio: true
    })]);
    this.server.respondWith('GET', manifests[0].url, [200, STANDARD_HEADERS, hlsMasterPlaylist({
      includeDemuxedAudio: true
    })]);
    this.server.respondWith('GET', '/playlist0.m3u8', [200, STANDARD_HEADERS, hlsMediaPlaylist({
      numSegments: 1
    })]);
    this.server.respondWith('GET', '/playlist-audio.m3u8', [200, STANDARD_HEADERS, hlsMediaPlaylist({
      numSegments: 1,
      segmentPrefix: 'audio'
    })]);
    this.server.respondWith('GET', manifests[1].url, [200, STANDARD_HEADERS, dashPlaylist({
      numSegments: 1
    })]);
    var expectedAudioPlaylist = {
      attributes: {
        // bandwidth from the DASH playlist
        BANDWIDTH: 128000,
        // codecs from the DASH playlist (first playlist with CODECS attribute)
        CODECS: 'mp4a.40.2'
      },
      discontinuitySequence: 0,
      discontinuityStarts: [1],
      endList: true,
      mediaSequence: 0,
      playlistType: 'VOD',
      uri: 'combined-playlist-audio',
      resolvedUri: 'combined-playlist-audio',
      targetDuration: 10,
      segments: [{
        duration: 10,
        resolvedUri: window_1.location.origin + "/audio0.ts",
        timeline: 0,
        number: 0,
        uri: 'audio0.ts'
      }, {
        discontinuity: true,
        duration: 10,
        map: {
          uri: 'audio-init.mp4',
          resolvedUri: window_1.location.origin + "/main/audio/720/audio-init.mp4"
        },
        number: 1,
        timeline: 1,
        uri: 'segment-0.mp4',
        resolvedUri: window_1.location.origin + "/main/audio/720/segment-0.mp4"
      }]
    };
    var expectedAudioPlaylists = [expectedAudioPlaylist];
    expectedAudioPlaylists['combined-playlist-audio'] = expectedAudioPlaylist;
    concatenateVideosPromise({
      manifests: manifests,
      targetVideoResolution: 720
    }).then(function (sourceObject) {
      assert.deepEqual(sourceObject, {
        manifestObject: {
          uri: window_1.location.href,
          mediaGroups: {
            'AUDIO': {
              audio: {
                default: {
                  autoselect: true,
                  default: true,
                  language: '',
                  playlists: expectedAudioPlaylists,
                  uri: 'combined-audio-playlists'
                }
              }
            },
            'VIDEO': {},
            'CLOSED-CAPTIONS': {},
            'SUBTITLES': {}
          },
          playlists: [{
            attributes: {
              // bandwidth from the DASH playlist
              BANDWIDTH: 6800000,
              // codecs from the DASH playlist (first playlist with CODECS attribute)
              CODECS: 'avc1.420015',
              AUDIO: 'audio'
            },
            uri: 'combined-playlist',
            resolvedUri: 'combined-playlist',
            endList: true,
            mediaSequence: 0,
            discontinuitySequence: 0,
            playlistType: 'VOD',
            targetDuration: 10,
            discontinuityStarts: [1],
            segments: [{
              duration: 10,
              timeline: 0,
              uri: '0.ts',
              number: 0,
              resolvedUri: window_1.location.origin + "/0.ts"
            }, {
              duration: 10,
              discontinuity: true,
              timeline: 1,
              number: 1,
              map: {
                uri: '1080p-init.mp4',
                resolvedUri: window_1.location.origin + "/main/video/1080/1080p-init.mp4"
              },
              uri: '1080p-segment-0.mp4',
              resolvedUri: window_1.location.origin + "/main/video/1080/1080p-segment-0.mp4"
            }]
          }]
        }
      }, 'created concatenated video object');
      done();
    }).catch(function (e) {
      assert.ok(false, e);
      done();
    });
  });
  QUnit.test('calls back with an error when no manifests passed in', function (assert) {
    var done = assert.async();
    concatenateVideosPromise({
      manifests: [],
      targetVideoResolution: 720
    }).catch(function (error) {
      assert.equal(error.message, 'No sources provided', 'called back with correct error message');
      done();
    });
  });
  QUnit.test('calls back with error when a manifest doesn\'t include a URL', function (assert) {
    var done = assert.async();
    concatenateVideosPromise({
      manifests: [{
        url: '/manifest1.m3u8',
        mimeType: 'application/vnd.apple.mpegurl'
      }, {
        mimeType: 'application/x-mpegurl'
      }],
      targetVideoResolution: 720
    }).catch(function (error) {
      assert.equal(error.message, 'All manifests must include a URL', 'called back with correct error message');
      done();
    });
  });
  QUnit.test('calls back with an error when a manifest doesn\'t include a mime type', function (assert) {
    var done = assert.async();
    concatenateVideosPromise({
      manifests: [{
        url: '/manifest1.m3u8',
        mimeType: 'application/vnd.apple.mpegurl'
      }, {
        url: '/manifest2.m3u8'
      }],
      targetVideoResolution: 720
    }).catch(function (error) {
      assert.equal(error.message, 'All manifests must include a mime type', 'called back with correct error message');
      done();
    });
  });
  QUnit.test('calls back with an error on request failure', function (assert) {
    var done = assert.async();
    var manifests = [{
      url: '/manifest1.m3u8',
      mimeType: 'application/vnd.apple.mpegurl'
    }, {
      url: '/manifest2.m3u8',
      mimeType: 'application/x-mpegurl'
    }];
    this.server.respondWith('GET', manifests[0].url, [200, STANDARD_HEADERS, hlsMediaPlaylist({
      numSegments: 1
    })]);
    this.server.respondWith('GET', manifests[1].url, [500, STANDARD_HEADERS, '']);
    concatenateVideosPromise({
      manifests: manifests,
      targetVideoResolution: 720
    }).catch(function (error) {
      assert.equal(error.message, 'Request failed', 'called back with correct error message');
      assert.equal(error.request.status, 500, 'called back with correct error status');
      done();
    });
  });
  QUnit.module('resolvePlaylists', {
    beforeEach: function beforeEach() {
      this.realXhr = videojs.xhr.XMLHttpRequest;
      this.server = sinon.fakeServer.create();
      videojs.xhr.XMLHttpRequest = this.server.xhr;
      this.server.autoRespond = true;
    },
    afterEach: function afterEach() {
      this.server.restore();
      videojs.xhr.XMLHttpRequest = this.realXhr;
    }
  });
  QUnit.test('makes no requests when playlists already resolved', function (assert) {
    var _this = this;

    assert.expect(3);
    var done = assert.async();
    var playlists = [{
      resolvedUri: 'p1',
      segments: []
    }, {
      resolvedUri: 'p2',
      segments: []
    }, {
      resolvedUri: 'p3',
      segments: []
    }];
    var mimeTypes = ['application/x-mpegURL', 'application/x-mpegURL', 'application/dash+xml'];
    resolvePlaylists({
      playlists: playlists,
      mimeTypes: mimeTypes,
      callback: function callback(err, playlistsToParsed) {
        assert.notOk(err, 'no error');
        assert.equal(_this.server.requests.length, 0, 'made no requests');
        assert.deepEqual(playlistsToParsed, {
          p1: {
            resolvedUri: 'p1',
            segments: []
          },
          p2: {
            resolvedUri: 'p2',
            segments: []
          },
          p3: {
            resolvedUri: 'p3',
            segments: []
          }
        }, 'returned playlists to parsed object');
        done();
      }
    });
  });
  QUnit.test('makes requests for unresolved playlists', function (assert) {
    var _this2 = this;

    assert.expect(4);
    var done = assert.async();
    var playlists = [{
      resolvedUri: 'p1',
      segments: []
    }, {
      resolvedUri: 'p2'
    }, {
      resolvedUri: 'p3',
      segments: []
    }];
    var mimeTypes = ['application/x-mpegURL', 'application/x-mpegURL', 'application/dash+xml'];
    this.server.respondWith('GET', 'p2', [200, STANDARD_HEADERS, hlsMediaPlaylist({
      numSegments: 1
    })]);
    resolvePlaylists({
      playlists: playlists,
      mimeTypes: mimeTypes,
      callback: function callback(err, playlistsToParsed) {
        assert.notOk(err, 'no error');
        assert.equal(_this2.server.requests.length, 1, 'made one request');
        assert.equal(_this2.server.requests[0].url, 'p2', 'made request for p2');
        assert.deepEqual(playlistsToParsed, {
          p1: {
            resolvedUri: 'p1',
            segments: []
          },
          p2: {
            allowCache: true,
            attributes: {},
            discontinuitySequence: 0,
            discontinuityStarts: [],
            endList: true,
            playlistType: 'VOD',
            uri: 'p2',
            resolvedUri: 'p2',
            mediaSequence: 0,
            targetDuration: 10,
            segments: [{
              duration: 10,
              resolvedUri: window_1.location.origin + "/test/0.ts",
              timeline: 0,
              uri: '0.ts'
            }]
          },
          p3: {
            resolvedUri: 'p3',
            segments: []
          }
        }, 'resolved and parsed unresolved playlist');
        done();
      }
    });
  });
  QUnit.test('calls back with error if a playlist errors', function (assert) {
    assert.expect(3);
    var done = assert.async();
    var playlists = [{
      resolvedUri: 'p1',
      segments: []
    }, {
      resolvedUri: 'p2'
    }, {
      resolvedUri: 'p3'
    }];
    var mimeTypes = ['application/x-mpegURL', 'application/x-mpegURL', 'application/dash+xml'];
    this.server.respondWith('GET', 'p2', [200, STANDARD_HEADERS, hlsMediaPlaylist({
      numSegments: 1
    })]);
    this.server.respondWith('GET', 'p3', [500, STANDARD_HEADERS, '']);
    resolvePlaylists({
      playlists: playlists,
      mimeTypes: mimeTypes,
      callback: function callback(err, playlistsToParsed) {
        assert.ok(err, 'called back with error');
        assert.equal(err.message, 'Request failed', 'correct error message');
        assert.notOk(playlistsToParsed, 'did not pass back a result object');
        done();
      }
    });
  });

  QUnit.module('createInitializeMediaKeysFunction');
  QUnit.test('returns function that calls player.eme.initializeMediaKeys', function (assert) {
    assert.expect(1);

    var getLicense = function getLicense() {};

    var initializeMediaKeysFunction = createInitializeMediaKeysFunction({
      pssh: 'test-pssh',
      audioContentType: 'test-audioContentType',
      videoContentType: 'test-videoContentType',
      url: 'test-url',
      getLicense: getLicense
    });
    var player = {
      eme: {
        initializeMediaKeys: function initializeMediaKeys(options) {
          assert.deepEqual(options, {
            keySystems: {
              'com.widevine.alpha': {
                audioContentType: 'test-audioContentType',
                videoContentType: 'test-videoContentType',
                pssh: 'test-pssh',
                url: 'test-url',
                getLicense: getLicense
              }
            }
          }, 'initializeMediaKeys called with proper options');
        }
      }
    };
    initializeMediaKeysFunction(player);
  });
  QUnit.module('createInitializeKeySystemsFunction');
  QUnit.test('returns falsey value if there are no key system objects', function (assert) {
    assert.notOk(createInitializeKeySystemsFunction({
      videoPlaylists: [{
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh'
          }
        }
      }, {
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh2'
          }
        }
      }],
      audioPlaylists: [{
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh3'
          }
        }
      }, {
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh4'
          }
        }
      }],
      audioAndVideoTypes: [{
        audio: 'audio/mp4; codecs="mp4a.40.2"',
        video: 'video/mp4; codecs="avc1.42001f"'
      }, {
        audio: 'audio/mp4; codecs="mp4a.40.5"',
        video: 'video/mp4; codecs="avc1.42001e"'
      }],
      keySystems: []
    }), 'returned falsey value when there are no encrypted sources');
  });
  QUnit.test('returns function if there are key system objects', function (assert) {
    var initializeKeySystemsFunction = createInitializeKeySystemsFunction({
      videoPlaylists: [{
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh'
          }
        }
      }, {
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh2'
          }
        }
      }],
      audioPlaylists: [{
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh3'
          }
        }
      }, {
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh4'
          }
        }
      }],
      audioAndVideoTypes: [{
        audio: 'audio/mp4; codecs="mp4a.40.2"',
        video: 'video/mp4; codecs="avc1.42001f"'
      }, {
        audio: 'audio/mp4; codecs="mp4a.40.5"',
        video: 'video/mp4; codecs="avc1.42001e"'
      }],
      keySystems: [{
        'com.widevine.alpha': 'license-url1'
      }, {
        'com.widevine.alpha': {
          url: 'license-url2'
        }
      }]
    });
    var initializeMediaKeysCalls = [];
    var player = {
      eme: {
        initializeMediaKeys: function initializeMediaKeys(options) {
          return initializeMediaKeysCalls.push(options);
        }
      }
    };
    initializeKeySystemsFunction(player);
    assert.deepEqual(initializeMediaKeysCalls, [{
      keySystems: {
        'com.widevine.alpha': {
          audioContentType: 'audio/mp4; codecs="mp4a.40.2"',
          videoContentType: 'video/mp4; codecs="avc1.42001f"',
          pssh: 'test-pssh',
          url: 'license-url1'
        }
      }
    }, {
      keySystems: {
        'com.widevine.alpha': {
          audioContentType: 'audio/mp4; codecs="mp4a.40.2"',
          videoContentType: 'video/mp4; codecs="avc1.42001f"',
          pssh: 'test-pssh3',
          url: 'license-url1'
        }
      }
    }, {
      keySystems: {
        'com.widevine.alpha': {
          audioContentType: 'audio/mp4; codecs="mp4a.40.5"',
          videoContentType: 'video/mp4; codecs="avc1.42001e"',
          pssh: 'test-pssh2',
          url: 'license-url2'
        }
      }
    }, {
      keySystems: {
        'com.widevine.alpha': {
          audioContentType: 'audio/mp4; codecs="mp4a.40.5"',
          videoContentType: 'video/mp4; codecs="avc1.42001e"',
          pssh: 'test-pssh4',
          url: 'license-url2'
        }
      }
    }], 'returned function that initializes encrypted sources');
  });
  QUnit.test('returns function if there is one key system object', function (assert) {
    var getLicense = function getLicense() {};

    var initializeKeySystemsFunction = createInitializeKeySystemsFunction({
      videoPlaylists: [{
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh'
          }
        }
      }, {
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh2'
          }
        }
      }],
      audioPlaylists: [{
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh3'
          }
        }
      }, {
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh4'
          }
        }
      }],
      audioAndVideoTypes: [{
        audio: 'audio/mp4; codecs="mp4a.40.2"',
        video: 'video/mp4; codecs="avc1.42001f"'
      }, {
        audio: 'audio/mp4; codecs="mp4a.40.5"',
        video: 'video/mp4; codecs="avc1.42001e"'
      }],
      keySystems: [void 0, {
        'com.widevine.alpha': {
          getLicense: getLicense
        }
      }]
    });
    var initializeMediaKeysCalls = [];
    var player = {
      eme: {
        initializeMediaKeys: function initializeMediaKeys(options) {
          return initializeMediaKeysCalls.push(options);
        }
      }
    };
    initializeKeySystemsFunction(player);
    assert.deepEqual(initializeMediaKeysCalls, [{
      keySystems: {
        'com.widevine.alpha': {
          audioContentType: 'audio/mp4; codecs="mp4a.40.5"',
          videoContentType: 'video/mp4; codecs="avc1.42001e"',
          pssh: 'test-pssh2',
          getLicense: getLicense
        }
      }
    }, {
      keySystems: {
        'com.widevine.alpha': {
          audioContentType: 'audio/mp4; codecs="mp4a.40.5"',
          videoContentType: 'video/mp4; codecs="avc1.42001e"',
          pssh: 'test-pssh4',
          getLicense: getLicense
        }
      }
    }], 'returned function that initializes encrypted source');
  });
  QUnit.test('only supports widevine', function (assert) {
    var getLicense = function getLicense() {};

    var initializeKeySystemsFunction = createInitializeKeySystemsFunction({
      videoPlaylists: [{
        contentProtection: {
          'com.microsoft.playready': {
            pssh: 'test-pssh'
          }
        }
      }, {
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh2'
          }
        }
      }],
      audioPlaylists: [{
        contentProtection: {
          'com.microsoft.playready': {
            pssh: 'test-pssh3'
          }
        }
      }, {
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh4'
          }
        }
      }],
      audioAndVideoTypes: [{
        audio: 'audio/mp4; codecs="mp4a.40.2"',
        video: 'video/mp4; codecs="avc1.42001f"'
      }, {
        audio: 'audio/mp4; codecs="mp4a.40.5"',
        video: 'video/mp4; codecs="avc1.42001e"'
      }],
      keySystems: [{
        'com.microsoft.playready': {
          getLicense: getLicense
        }
      }, {
        'com.widevine.alpha': {
          getLicense: getLicense
        }
      }]
    });
    var initializeMediaKeysCalls = [];
    var player = {
      eme: {
        initializeMediaKeys: function initializeMediaKeys(options) {
          return initializeMediaKeysCalls.push(options);
        }
      }
    };
    initializeKeySystemsFunction(player);
    assert.deepEqual(initializeMediaKeysCalls, [{
      keySystems: {
        'com.widevine.alpha': {
          audioContentType: 'audio/mp4; codecs="mp4a.40.5"',
          videoContentType: 'video/mp4; codecs="avc1.42001e"',
          pssh: 'test-pssh2',
          getLicense: getLicense
        }
      }
    }, {
      keySystems: {
        'com.widevine.alpha': {
          audioContentType: 'audio/mp4; codecs="mp4a.40.5"',
          videoContentType: 'video/mp4; codecs="avc1.42001e"',
          pssh: 'test-pssh4',
          getLicense: getLicense
        }
      }
    }], 'returned function that initializes only widevine encrypted source');
  });
  QUnit.test('requires codec info', function (assert) {
    var getLicense = function getLicense() {};

    var initializeKeySystemsFunction = createInitializeKeySystemsFunction({
      videoPlaylists: [{
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh'
          }
        }
      }, {
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh2'
          }
        }
      }],
      audioPlaylists: [{
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh3'
          }
        }
      }, {
        contentProtection: {
          'com.widevine.alpha': {
            pssh: 'test-pssh4'
          }
        }
      }],
      audioAndVideoTypes: [{}, {
        audio: 'audio/mp4; codecs="mp4a.40.5"',
        video: 'video/mp4; codecs="avc1.42001e"'
      }],
      keySystems: [{
        'com.widevine.alpha': {
          getLicense: getLicense
        }
      }, {
        'com.widevine.alpha': {
          getLicense: getLicense
        }
      }]
    });
    var initializeMediaKeysCalls = [];
    var player = {
      eme: {
        initializeMediaKeys: function initializeMediaKeys(options) {
          return initializeMediaKeysCalls.push(options);
        }
      }
    };
    initializeKeySystemsFunction(player);
    assert.deepEqual(initializeMediaKeysCalls, [{
      keySystems: {
        'com.widevine.alpha': {
          audioContentType: 'audio/mp4; codecs="mp4a.40.5"',
          videoContentType: 'video/mp4; codecs="avc1.42001e"',
          pssh: 'test-pssh2',
          getLicense: getLicense
        }
      }
    }, {
      keySystems: {
        'com.widevine.alpha': {
          audioContentType: 'audio/mp4; codecs="mp4a.40.5"',
          videoContentType: 'video/mp4; codecs="avc1.42001e"',
          pssh: 'test-pssh4',
          getLicense: getLicense
        }
      }
    }], 'returned function that initializes only encrypted source with codec info');
  });

  QUnit.module('combinePlaylists');
  QUnit.test('uses max BANDWIDTH and first playlist CODECS attributes', function (assert) {
    var playlist1 = {
      attributes: {
        BANDWIDTH: 111,
        CODECS: 'avc1.4d400e, mp4a.40.5',
        extraFirst: 'test'
      },
      uri: '',
      segments: []
    };
    var playlist2 = {
      attributes: {
        BANDWIDTH: 112,
        CODECS: 'avc1.4d400d, mp4a.40.2',
        extraSecond: 'test'
      },
      uri: '',
      segments: []
    };
    var combinedPlaylist = combinePlaylists({
      playlists: [playlist1, playlist2]
    });
    assert.deepEqual(combinedPlaylist.attributes, {
      BANDWIDTH: 112,
      CODECS: 'avc1.4d400e, mp4a.40.5'
    }, 'used CODECS attribute of the first playlist and largest BANDWIDTH attribute');
  });
  QUnit.test('provides uri and resolvedUri', function (assert) {
    var playlist1 = {
      uri: 'uri1',
      segments: []
    };
    var playlist2 = {
      uri: 'uri2',
      segments: []
    };
    var combinedPlaylist = combinePlaylists({
      playlists: [playlist1, playlist2]
    });
    assert.equal(combinedPlaylist.uri, 'combined-playlist', 'provided uri for combined playlist');
    assert.equal(combinedPlaylist.resolvedUri, 'combined-playlist', 'provided resolvedUri for combined playlist');
  });
  QUnit.test('uses largest target duration', function (assert) {
    var playlist1 = {
      uri: 'uri1',
      targetDuration: 10,
      segments: [{
        // segment duration should be ignored
        duration: 12
      }]
    };
    var playlist2 = {
      uri: 'uri2',
      targetDuration: 11,
      segments: [{
        // segment duration should be ignored
        duration: 13
      }]
    };
    var combinedPlaylist = combinePlaylists({
      playlists: [playlist1, playlist2]
    });
    assert.equal(combinedPlaylist.targetDuration, 11, 'used largest target duration');
  });
  QUnit.test('adds discontinuity between playlists', function (assert) {
    var playlist1 = {
      uri: 'uri1',
      segments: [{
        uri: 'uri1-1.ts'
      }, {
        uri: 'uri1-2.ts'
      }]
    };
    var playlist2 = {
      uri: 'uri2',
      segments: [{
        uri: 'uri2-1.ts'
      }, {
        uri: 'uri2-2.ts'
      }]
    };
    var combinedPlaylist = combinePlaylists({
      playlists: [playlist1, playlist2]
    });
    assert.deepEqual(combinedPlaylist.segments, [{
      uri: 'uri1-1.ts',
      number: 0,
      timeline: 0
    }, {
      uri: 'uri1-2.ts',
      number: 1,
      timeline: 0
    }, {
      discontinuity: true,
      uri: 'uri2-1.ts',
      number: 2,
      timeline: 1
    }, {
      uri: 'uri2-2.ts',
      number: 3,
      timeline: 1
    }], 'added discontinuity between playlists');
  });
  QUnit.test('ignores playlist timeline values', function (assert) {
    var playlist1 = {
      uri: 'uri1',
      segments: [{
        timeline: 3,
        uri: 'uri1-1.ts'
      }, {
        timeline: 3,
        uri: 'uri1-2.ts'
      }]
    };
    var playlist2 = {
      uri: 'uri2',
      segments: [{
        timeline: 7,
        uri: 'uri2-1.ts'
      }, {
        timeline: 7,
        uri: 'uri2-2.ts'
      }]
    };
    var combinedPlaylist = combinePlaylists({
      playlists: [playlist1, playlist2]
    });
    assert.deepEqual(combinedPlaylist.segments, [{
      uri: 'uri1-1.ts',
      number: 0,
      timeline: 0
    }, {
      uri: 'uri1-2.ts',
      number: 1,
      timeline: 0
    }, {
      discontinuity: true,
      uri: 'uri2-1.ts',
      number: 2,
      timeline: 1
    }, {
      uri: 'uri2-2.ts',
      number: 3,
      timeline: 1
    }], 'added discontinuity between playlists');
  });
  QUnit.test('does not ignore discontinuity within playlist', function (assert) {
    var playlist1 = {
      uri: 'uri1',
      segments: [{
        timeline: 3,
        uri: 'uri1-1.ts'
      }, {
        timeline: 3,
        uri: 'uri1-2.ts'
      }]
    };
    var playlist2 = {
      uri: 'uri2',
      segments: [{
        timeline: 7,
        uri: 'uri2-1.ts'
      }, {
        discontinuity: true,
        timeline: 8,
        uri: 'uri2-2.ts'
      }]
    };
    var combinedPlaylist = combinePlaylists({
      playlists: [playlist1, playlist2]
    });
    assert.deepEqual(combinedPlaylist.segments, [{
      uri: 'uri1-1.ts',
      number: 0,
      timeline: 0
    }, {
      uri: 'uri1-2.ts',
      number: 1,
      timeline: 0
    }, {
      discontinuity: true,
      uri: 'uri2-1.ts',
      number: 2,
      timeline: 1
    }, {
      discontinuity: true,
      uri: 'uri2-2.ts',
      number: 3,
      timeline: 2
    }], 'made use of discontinuity within playlist');
  });
  QUnit.module('constructMasterManifest');
  QUnit.test('creates master manifest from sole video playlist', function (assert) {
    var videoPlaylist = {
      attributes: {},
      segments: [{
        uri: 'segment1.ts'
      }, {
        uri: 'segment2.ts'
      }]
    };
    assert.deepEqual(constructMasterManifest({
      videoPlaylist: videoPlaylist
    }), {
      mediaGroups: {
        'AUDIO': {},
        'VIDEO': {},
        'CLOSED-CAPTIONS': {},
        'SUBTITLES': {}
      },
      uri: window_1.location.href,
      playlists: [{
        attributes: {},
        segments: [{
          uri: 'segment1.ts'
        }, {
          uri: 'segment2.ts'
        }]
      }]
    }, 'created master manifest');
  });
  QUnit.test('creates media groups with demuxed audio if audio playlist is present', function (assert) {
    var videoPlaylist = {
      attributes: {},
      segments: [{
        uri: 'segment1.ts'
      }, {
        uri: 'segment2.ts'
      }]
    };
    var audioPlaylist = {
      segments: [{
        uri: 'audio-segment1.ts'
      }, {
        uri: 'audio-segment2.ts'
      }, {
        uri: 'audio-segment.ts'
      }]
    };
    assert.deepEqual(constructMasterManifest({
      videoPlaylist: videoPlaylist,
      audioPlaylist: audioPlaylist
    }), {
      mediaGroups: {
        'AUDIO': {
          audio: {
            default: {
              autoselect: true,
              default: true,
              language: '',
              uri: 'combined-audio-playlists',
              playlists: [{
                segments: [{
                  uri: 'audio-segment1.ts'
                }, {
                  uri: 'audio-segment2.ts'
                }, {
                  uri: 'audio-segment.ts'
                }]
              }]
            }
          }
        },
        'VIDEO': {},
        'CLOSED-CAPTIONS': {},
        'SUBTITLES': {}
      },
      uri: window_1.location.href,
      playlists: [{
        attributes: {
          AUDIO: 'audio'
        },
        segments: [{
          uri: 'segment1.ts'
        }, {
          uri: 'segment2.ts'
        }]
      }]
    }, 'created master manifest with demuxed audio');
  });

  QUnit.module('manifest-parser');
  QUnit.test('adds resolvedUri to media playlists of an HLS master', function (assert) {
    var manifestObject = parseManifest({
      url: 'http://test.com',
      manifestString: hlsMasterPlaylist({
        numPlaylists: 2
      }),
      mimeType: 'application/x-mpegURL'
    });
    assert.equal(manifestObject.playlists.length, 2, 'two playlists');
    assert.equal(manifestObject.playlists[0].resolvedUri, 'http://test.com/playlist0.m3u8', 'added resolvedUri to first media playlist');
    assert.equal(manifestObject.playlists[1].resolvedUri, 'http://test.com/playlist1.m3u8', 'added resolvedUri to second media playlist');
  });
  QUnit.test('adds resolvedUri to an HLS media manifest', function (assert) {
    var manifestObject = parseManifest({
      url: 'http://test.com',
      manifestString: hlsMediaPlaylist({}),
      mimeType: 'application/x-mpegURL'
    });
    assert.equal(manifestObject.resolvedUri, 'http://test.com', 'added resolvedUri property to manifest object');
  });
  QUnit.test('adds resolvedUri to playlists of a DASH manifest', function (assert) {
    var manifestObject = parseManifest({
      url: 'http://test.com',
      manifestString: dashPlaylist({}),
      mimeType: 'application/dash+xml'
    });
    assert.equal(manifestObject.playlists.length, 2, 'two playlists');
    assert.equal(manifestObject.playlists[0].resolvedUri, 'http://test.com/placeholder-uri-0', 'added resolvedUri to playlist');
    assert.equal(manifestObject.playlists[1].resolvedUri, 'http://test.com/placeholder-uri-1', 'added resolvedUri to playlist');
  });
  QUnit.test('adds resolvedUri to audio playlists of a DASH manifest', function (assert) {
    var manifestObject = parseManifest({
      url: 'http://test.com',
      manifestString: dashPlaylist({}),
      mimeType: 'application/dash+xml'
    });
    assert.equal(manifestObject.mediaGroups.AUDIO.audio.main.playlists[0].resolvedUri, 'http://test.com-audio-placeholder-audio-main', 'added placeholder resolvedUri to audio playlist');
  });
  QUnit.test('HLS master manifest media segment lists are not resolved', function (assert) {
    var manifestObject = parseManifest({
      url: 'http://test.com',
      manifestString: hlsMasterPlaylist({
        numPlaylists: 2
      }),
      mimeType: 'application/x-mpegURL'
    });
    assert.equal(manifestObject.playlists.length, 2, 'two playlists');
    assert.notOk(manifestObject.playlists[0].segments, 'did not resolve segment list');
    assert.notOk(manifestObject.playlists[1].segments, 'did not resolve segment list');
  });
  QUnit.test('HLS media manifest segment list is resolved', function (assert) {
    var manifestObject = parseManifest({
      url: 'http://test.com',
      manifestString: hlsMediaPlaylist({}),
      mimeType: 'application/x-mpegURL'
    });
    assert.notOk(manifestObject.playlists, 'no playlists');
    assert.equal(manifestObject.segments.length, 1, 'resolved segment list');
  });
  QUnit.test('DASH manifest segment lists are resolved', function (assert) {
    var manifestObject = parseManifest({
      url: 'http://test.com',
      manifestString: dashPlaylist({}),
      mimeType: 'application/dash+xml'
    });
    assert.equal(manifestObject.playlists.length, 2, 'two playlists');
    assert.equal(manifestObject.playlists[0].segments.length, 1, 'resolved segment list');
    assert.equal(manifestObject.playlists[1].segments.length, 1, 'resolved segment list');
  });
  QUnit.test('HLS media manifest has attributes property added', function (assert) {
    var manifestObject = parseManifest({
      url: 'http://test.com',
      manifestString: hlsMediaPlaylist({}),
      mimeType: 'application/x-mpegURL'
    });
    assert.notOk(manifestObject.playlists, 'no playlists');
    assert.ok(manifestObject.attributes, 'has attributes property');
  });
  QUnit.test('HLS media manifest segments have resolvedUri properties', function (assert) {
    var manifestObject = parseManifest({
      url: 'http://test.com',
      manifestString: hlsMediaPlaylist({}),
      mimeType: 'application/x-mpegURL'
    });
    assert.notOk(manifestObject.playlists, 'no playlists');
    assert.equal(manifestObject.segments.length, 1, 'resolved segment list');
    assert.equal(manifestObject.segments[0].resolvedUri, 'http://test.com/0.ts', 'added resolvedUri property to segment');
  });
  QUnit.test('HLS key and map URIs are resolved', function (assert) {
    var manifestObject = parseManifest({
      url: 'http://test.com',
      manifestString: hlsMediaPlaylist({
        keyUri: 'key.php',
        mapUri: 'init.mp4'
      }),
      mimeType: 'application/x-mpegURL'
    });
    assert.equal(manifestObject.segments.length, 1, 'one segment');
    assert.equal(manifestObject.segments[0].key.resolvedUri, 'http://test.com/key.php', 'resolved key uri');
    assert.equal(manifestObject.segments[0].map.resolvedUri, 'http://test.com/init.mp4', 'resolved map uri');
  });

  var minDoc = {};

  var topLevel = typeof commonjsGlobal !== 'undefined' ? commonjsGlobal :
      typeof window !== 'undefined' ? window : {};


  var doccy;

  if (typeof document !== 'undefined') {
      doccy = document;
  } else {
      doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'];

      if (!doccy) {
          doccy = topLevel['__GLOBAL_DOCUMENT_CACHE@4'] = minDoc;
      }
  }

  var document_1 = doccy;

  var version = "1.0.0";

  var cov_2885tqw9nc = function () {
    var path = '/Users/gsinger/repos/clean/plugin-concat/src/plugin.js',
        hash = '8df61dac5093b9ca074a0c3448ea616d6444572b',
        Function = function () {}.constructor,
        global = new Function('return this')(),
        gcv = '__coverage__',
        coverageData = {
      path: '/Users/gsinger/repos/clean/plugin-concat/src/plugin.js',
      statementMap: {
        '0': {
          start: {
            line: 6,
            column: 23
          },
          end: {
            line: 6,
            column: 63
          }
        },
        '1': {
          start: {
            line: 66,
            column: 15
          },
          end: {
            line: 74,
            column: 1
          }
        },
        '2': {
          start: {
            line: 69,
            column: 2
          },
          end: {
            line: 71,
            column: 3
          }
        },
        '3': {
          start: {
            line: 70,
            column: 4
          },
          end: {
            line: 70,
            column: 11
          }
        },
        '4': {
          start: {
            line: 73,
            column: 2
          },
          end: {
            line: 73,
            column: 28
          }
        },
        '5': {
          start: {
            line: 77,
            column: 0
          },
          end: {
            line: 77,
            column: 33
          }
        },
        '6': {
          start: {
            line: 80,
            column: 0
          },
          end: {
            line: 80,
            column: 25
          }
        }
      },
      fnMap: {
        '0': {
          name: '(anonymous_0)',
          decl: {
            start: {
              line: 66,
              column: 15
            },
            end: {
              line: 66,
              column: 16
            }
          },
          loc: {
            start: {
              line: 66,
              column: 27
            },
            end: {
              line: 74,
              column: 1
            }
          },
          line: 66
        }
      },
      branchMap: {
        '0': {
          loc: {
            start: {
              line: 6,
              column: 23
            },
            end: {
              line: 6,
              column: 63
            }
          },
          type: 'binary-expr',
          locations: [{
            start: {
              line: 6,
              column: 23
            },
            end: {
              line: 6,
              column: 45
            }
          }, {
            start: {
              line: 6,
              column: 49
            },
            end: {
              line: 6,
              column: 63
            }
          }],
          line: 6
        },
        '1': {
          loc: {
            start: {
              line: 69,
              column: 2
            },
            end: {
              line: 71,
              column: 3
            }
          },
          type: 'if',
          locations: [{
            start: {
              line: 69,
              column: 2
            },
            end: {
              line: 71,
              column: 3
            }
          }, {
            start: {
              line: 69,
              column: 2
            },
            end: {
              line: 71,
              column: 3
            }
          }],
          line: 69
        }
      },
      s: {
        '0': 0,
        '1': 0,
        '2': 0,
        '3': 0,
        '4': 0,
        '5': 0,
        '6': 0
      },
      f: {
        '0': 0
      },
      b: {
        '0': [0, 0],
        '1': [0, 0]
      },
      _coverageSchema: '332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'
    },
        coverage = global[gcv] || (global[gcv] = {});

    if (coverage[path] && coverage[path].hash === hash) {
      return coverage[path];
    }

    coverageData.hash = hash;
    return coverage[path] = coverageData;
  }();
  var registerPlugin = (cov_2885tqw9nc.s[0]++, (cov_2885tqw9nc.b[0][0]++, videojs.registerPlugin) || (cov_2885tqw9nc.b[0][1]++, videojs.plugin));
  cov_2885tqw9nc.s[1]++;

  var concat = function concat(config) {
    cov_2885tqw9nc.f[0]++;
    cov_2885tqw9nc.s[2]++;

    if (!config) {
      cov_2885tqw9nc.b[1][0]++;
      cov_2885tqw9nc.s[3]++;
      return;
    } else {
      cov_2885tqw9nc.b[1][1]++;
    }

    cov_2885tqw9nc.s[4]++;
    concatenateVideos(config);
  };

  cov_2885tqw9nc.s[5]++;
  registerPlugin('concat', concat);
  cov_2885tqw9nc.s[6]++;
  concat.VERSION = version;

  var Player = videojs.getComponent('Player');
  QUnit.test('the environment is sane', function (assert) {
    assert.strictEqual(typeof Array.isArray, 'function', 'es5 exists');
    assert.strictEqual(typeof sinon, 'object', 'sinon exists');
    assert.strictEqual(typeof videojs, 'function', 'videojs exists');
    assert.strictEqual(typeof concat, 'function', 'plugin is a function');
  });
  QUnit.module('videojs-concat', {
    beforeEach: function beforeEach() {
      // Mock the environment's timers because certain things - particularly
      // player readiness - are asynchronous in video.js 5. This MUST come
      // before any player is created; otherwise, timers could get created
      // with the actual timer methods!
      this.clock = sinon.useFakeTimers();
      this.fixture = document_1.getElementById('qunit-fixture');
      this.video = document_1.createElement('video');
      this.fixture.appendChild(this.video);
      this.player = videojs(this.video);
    },
    afterEach: function afterEach() {
      this.player.dispose();
      this.clock.restore();
    }
  });
  QUnit.test('registers itself with video.js', function (assert) {
    assert.strictEqual(typeof Player.prototype.concat, 'function', 'videojs-concat plugin was registered');
  });

  QUnit.module('request-utils');
  QUnit.module('requestAll', {
    beforeEach: function beforeEach(assert) {
      var _this = this;

      this.origXMLHttpRequest = videojs.xhr.XMLHttpRequest;
      this.xhr = sinon.useFakeXMLHttpRequest();
      videojs.xhr.XMLHttpRequest = this.xhr;
      this.requests = [];

      this.xhr.onCreate = function (xhr) {
        return _this.requests.push(xhr);
      };
    },
    afterEach: function afterEach() {
      this.xhr.restore();
      videojs.xhr.XMLHttpRequest = this.origXMLHttpRequest;
    }
  });
  QUnit.test('waits for all requests to finish before calling back', function (assert) {
    assert.expect(5);
    var url1 = 'url1';
    var url2 = 'url2';
    var url3 = 'url3';
    var response1 = 'response1';
    var response2 = 'response2';
    var response3 = 'response3';
    requestAll([url1, url2, url3], function (err, responses) {
      assert.notOk(err);
      assert.equal(responses[url1], response1, 'correct response');
      assert.equal(responses[url2], response2, 'correct response');
      assert.equal(responses[url3], response3, 'correct response');
    });
    assert.equal(this.requests.length, 3, 'three requests');
    this.requests.shift().respond(200, null, response1);
    this.requests.shift().respond(200, null, response2);
    this.requests.shift().respond(200, null, response3);
  });
  QUnit.test('calls back immediately on error', function (assert) {
    assert.expect(3);
    var request;
    requestAll(['url1', 'url2'], function (err, responses) {
      assert.deepEqual(err, {
        message: 'Request failed',
        request: request
      }, 'calls back with error');
      assert.notOk(responses, 'no responses object provided');
    });
    assert.equal(this.requests.length, 2, 'two requests');
    request = this.requests.shift();
    request.respond(500, null, 'error');
  });
  QUnit.test('aborts other requests after an error', function (assert) {
    assert.expect(6);
    var callbackCount = 0;
    var request;
    requestAll(['url1', 'url2'], function (err, responses) {
      callbackCount++;
      assert.deepEqual(err, {
        message: 'Request failed',
        request: request
      }, 'calls back with error');
      assert.notOk(responses, 'no responses object provided');
    });
    assert.equal(this.requests.length, 2, 'two requests');
    request = this.requests.shift();
    request.respond(500, null, 'error');
    assert.ok(this.requests.shift().aborted, 'aborted other requests');
    assert.notOk(request.aborted, 'original request not aborted');
    assert.equal(callbackCount, 1, 'only one callback');
  });
  QUnit.test('does not call same URL twice', function (assert) {
    assert.expect(3);
    requestAll(['url1', 'url1'], function (err, responses) {
      assert.notOk(err);
      assert.equal(responses.url1, 'url1-response', 'correct response');
    });
    assert.equal(this.requests.length, 1, 'one request');
    this.requests.shift().respond(200, null, 'url1-response');
  });

  QUnit.module('removeUnsupportedPlaylists');
  QUnit.test('removes manifests with only audio or video', function (assert) {
    assert.deepEqual(removeUnsupportedPlaylists([{
      playlists: [{
        resolvedUri: '1-1',
        attributes: {
          CODECS: 'avc1.4d400d'
        }
      }, {
        resolvedUri: '1-2',
        attributes: {
          CODECS: 'mp4a.40.2'
        }
      }, {
        resolvedUri: '1-3',
        attributes: {
          CODECS: 'avc1.4d400d, mp4a.40.2'
        }
      }]
    }, {
      playlists: [{
        resolvedUri: '2-1',
        attributes: {
          CODECS: 'avc1.4d400d'
        }
      }, {
        resolvedUri: '2-2',
        attributes: {
          CODECS: 'mp4a.40.2'
        }
      }, {
        resolvedUri: '2-3',
        attributes: {
          CODECS: 'avc1.4d400d, mp4a.40.2'
        }
      }]
    }]), [[{
      resolvedUri: '1-3',
      attributes: {
        CODECS: 'avc1.4d400d, mp4a.40.2'
      }
    }], [{
      resolvedUri: '2-3',
      attributes: {
        CODECS: 'avc1.4d400d, mp4a.40.2'
      }
    }]], 'removed audio and video only playlists');
  });
  QUnit.test('removes playlists without MSE supported video codec', function (assert) {
    assert.deepEqual(removeUnsupportedPlaylists([{
      playlists: [// note that Safari will report some video codecs as supported, for instance:
      // avc1.4d400fake will report as supported
      {
        resolvedUri: '1-1',
        attributes: {
          CODECS: 'avc.4d400dfake, mp4a.40.2'
        }
      }, {
        resolvedUri: '1-2',
        attributes: {
          CODECS: 'avc1.4d400d, mp4a.40.2'
        }
      }]
    }, {
      playlists: [{
        resolvedUri: '2-1',
        attributes: {
          CODECS: 'avc.4d400fake, mp4a.40.2'
        }
      }, {
        resolvedUri: '2-3',
        attributes: {
          CODECS: 'avc1.4d400d, mp4a.40.2'
        }
      }]
    }]), [[{
      resolvedUri: '1-2',
      attributes: {
        CODECS: 'avc1.4d400d, mp4a.40.2'
      }
    }], [{
      resolvedUri: '2-3',
      attributes: {
        CODECS: 'avc1.4d400d, mp4a.40.2'
      }
    }]], 'removed playlists without MSE supported video codec');
  });
  QUnit.test('passes through playlists without attributes object', function (assert) {
    assert.deepEqual(removeUnsupportedPlaylists([{
      playlists: [// Technically an attributes object and codec info should be required, but for now
      // it's easier to be safe and pass through those playlists rather than auto-fail.
      // This can be reconsidered in the future.
      {
        resolvedUri: '1-1'
      }]
    }, {
      playlists: [{
        resolvedUri: '2-1',
        attributes: {
          CODECS: 'avc1.4d400d, mp4a.40.2'
        }
      }]
    }]), [[{
      resolvedUri: '1-1'
    }], [{
      resolvedUri: '2-1',
      attributes: {
        CODECS: 'avc1.4d400d, mp4a.40.2'
      }
    }]], 'passed through playlists without attributes object');
  });
  QUnit.test('passes through playlists without codecs attribute', function (assert) {
    assert.deepEqual(removeUnsupportedPlaylists([{
      playlists: [// Technically codec info should be required, but for now it's easier to be safe
      // and pass through those playlists rather than auto-fail. This can be
      // reconsidered in the future.
      {
        resolvedUri: '1-1',
        attributes: {}
      }]
    }, {
      playlists: [{
        resolvedUri: '2-1',
        attributes: {
          CODECS: 'avc1.4d400d, mp4a.40.2'
        }
      }]
    }]), [[{
      resolvedUri: '1-1',
      attributes: {}
    }], [{
      resolvedUri: '2-1',
      attributes: {
        CODECS: 'avc1.4d400d, mp4a.40.2'
      }
    }]], 'passed through playlists without codecs attribute');
  });

}(QUnit, sinon, videojs));
